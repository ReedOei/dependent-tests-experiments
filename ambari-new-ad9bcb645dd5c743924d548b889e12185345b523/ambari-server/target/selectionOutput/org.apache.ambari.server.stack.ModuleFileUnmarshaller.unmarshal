org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r9 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbContexts> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r11 = (javax.xml.bind.JAXBContext) $r10
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r11 = (javax.xml.bind.JAXBContext) $r10 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r3 = virtualinvoke $r11.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r3 = virtualinvoke $r11.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r4 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r4 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r12 = new java.io.FileReader
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r12 = new java.io.FileReader >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r12.<java.io.FileReader: void <init>(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r12.<java.io.FileReader: void <init>(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r6 = virtualinvoke r4.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>($r12)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r6 = virtualinvoke r4.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>($r12) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r6.<javax.xml.stream.XMLStreamReader: int nextTag()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r6.<javax.xml.stream.XMLStreamReader: int nextTag()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r7 = interfaceinvoke r6.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r7 = interfaceinvoke r6.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r51 = null
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r51 = null >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r7
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r7 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r7 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r14 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r51) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw $r45
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r57 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>($r46) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r47 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r57 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>($r46) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r47 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r47 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r47.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot parse {}", $r48)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r47.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot parse {}", $r48) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r57
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r47.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot parse {}", $r48) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r57 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r49 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r57 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw $r46
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r57 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw $r46 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r49 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 = virtualinvoke r57.<java.lang.Throwable: java.lang.String getMessage()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r49 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 = virtualinvoke r57.<java.lang.Throwable: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r49.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r50, r57)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 = virtualinvoke r57.<java.lang.Throwable: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r49.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r50, r57) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw $r46
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r49.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r50, r57) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r55 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r54)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r55 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r55 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r55 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r51)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r51) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : return r55
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r14 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r13 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r13 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT processing ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT processing ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r16 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r16 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; there is no XSD")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; there is no XSD") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r19)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r38 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r20 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r20 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $z1 = interfaceinvoke $r20.<java.util.Map: boolean containsKey(java.lang.Object)>(r7)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $z1 = interfaceinvoke $r20.<java.util.Map: boolean containsKey(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if $z1 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r34 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r21 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r21 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r51 = virtualinvoke $r21.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r7)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r51 = virtualinvoke $r21.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r7) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r51
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r51 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r52 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r51 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r23 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r23 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r22 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schema \'")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schema \'") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r27 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r27 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found, ignoring")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found, ignoring") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String)>($r30)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String)>($r30) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)]
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r52 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r31 = new javax.xml.transform.stream.StreamSource
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r31 = new javax.xml.transform.stream.StreamSource >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r31.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r51)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r31.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r51) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r53 = virtualinvoke r52.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r31)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r53 = virtualinvoke r52.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r31) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r3.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>(r53)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r3.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>(r53) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r32 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r32 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r53)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r53) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)]
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r34 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r36 = (javax.xml.validation.Schema) $r35
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r36 = (javax.xml.validation.Schema) $r35 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r3.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>($r36)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r3.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>($r36) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)]
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r38 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r37 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r37 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r37.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r37.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r40 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r40 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r38.<org.slf4j.Logger: void info(java.lang.String)>($r44)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r38.<org.slf4j.Logger: void info(java.lang.String)>($r44) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r20 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
