org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $z0 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r19 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r7 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r7 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if $z2 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : return $r7
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : r6 = (java.lang.String) $r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : r6 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : z3 = 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : z3 = 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : z3 = 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r20 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r21 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke $r21.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Service {} not found to orchestrate", r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke $r21.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Service {} not found to orchestrate", r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if z3 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : goto [?= $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r10 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r10 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r12 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVICE_CHECK>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r12 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVICE_CHECK> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r11 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r11 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: java.lang.String getServiceDisplay(java.lang.String)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: java.lang.String getServiceDisplay(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r11[0] = $r13
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r11[0] = $r13 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Service Check %s", $r11)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Service Check %s", $r11) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r15 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r15 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r16 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r16 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r17 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r17 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r18 = new org.apache.ambari.server.state.stack.upgrade.ServiceCheckTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r18 = new org.apache.ambari.server.state.stack.upgrade.ServiceCheckTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r18.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r18.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r16.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>(r6, "", $r17, $r18)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r16.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>(r6, "", $r17, $r18) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r15[0] = $r16
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r15[0] = $r16 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r10.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r12, $r14, $r15)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : specialinvoke $r10.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r12, $r14, $r15) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : goto [?= $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : goto [?= $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : goto [?= $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : z3 = 1
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r20 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : z3 = 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : goto [?= (branch)]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : if z3 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : $r19 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildServiceChecks : return $r19
