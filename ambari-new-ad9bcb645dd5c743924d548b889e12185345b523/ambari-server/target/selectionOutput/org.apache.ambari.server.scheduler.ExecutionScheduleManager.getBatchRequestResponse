org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r4 = new org.apache.commons.lang.text.StrBuilder >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : specialinvoke $r4.<org.apache.commons.lang.text.StrBuilder: void <init>()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : specialinvoke $r4.<org.apache.commons.lang.text.StrBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("api/v1")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("api/v1") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("/clusters/")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("/clusters/") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r7 = virtualinvoke $r6.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r7 = virtualinvoke $r6.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r8 = virtualinvoke $r7.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("/requests/")
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r8 = virtualinvoke $r7.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("/requests/") >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : virtualinvoke $r8.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r1)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : virtualinvoke $r8.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r10 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>()
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r10 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r11 = virtualinvoke r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.state.scheduler.BatchRequestResponse performApiGetRequest(java.lang.String,boolean)>($r10, 1)
org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : $r11 = virtualinvoke r0.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.state.scheduler.BatchRequestResponse performApiGetRequest(java.lang.String,boolean)>($r10, 1) >>>>>>>> org.apache.ambari.server.scheduler.ExecutionScheduleManager.getBatchRequestResponse : return $r11
