org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r9 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r9[0] = class "Lorg/apache/ambari/server/state/repository/VersionDefinitionXml;"
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r9[0] = class "Lorg/apache/ambari/server/state/repository/VersionDefinitionXml;" >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r1 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r9)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r1 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r9) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r2 = virtualinvoke r1.<javax.xml.bind.JAXBContext: javax.xml.bind.Marshaller createMarshaller()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r2 = virtualinvoke r1.<javax.xml.bind.JAXBContext: javax.xml.bind.Marshaller createMarshaller()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r3 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema")
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r3 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema") >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r10 = class "Lorg/apache/ambari/server/state/repository/VersionDefinitionXml;"
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r10 = class "Lorg/apache/ambari/server/state/repository/VersionDefinitionXml;" >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r12 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation>
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r12 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r4 = virtualinvoke $r11.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r12)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r4 = virtualinvoke $r11.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : if null != r4
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : if null != r4 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r17 = new java.lang.Exception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : if null != r4 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r13 = new javax.xml.transform.stream.StreamSource
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : if null != r4 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : throw $r21
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r13 = new javax.xml.transform.stream.StreamSource >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r13.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r4)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r13 = new javax.xml.transform.stream.StreamSource >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r13.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r4) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r5 = virtualinvoke r3.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r13)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r13.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r4) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r5 = virtualinvoke r3.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r13) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setSchema(javax.xml.validation.Schema)>(r5)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r5 = virtualinvoke r3.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r13) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setSchema(javax.xml.validation.Schema)>(r5) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r14 = <java.lang.Boolean: java.lang.Boolean TRUE>
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setSchema(javax.xml.validation.Schema)>(r5) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r14 = <java.lang.Boolean: java.lang.Boolean TRUE> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.formatted.output", $r14)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r14 = <java.lang.Boolean: java.lang.Boolean TRUE> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.formatted.output", $r14) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r15 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation>
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.formatted.output", $r14) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r15 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.noNamespaceSchemaLocation", $r15)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r15 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.noNamespaceSchemaLocation", $r15) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r16 = new java.io.StringWriter
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.noNamespaceSchemaLocation", $r15) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r16 = new java.io.StringWriter >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r16.<java.io.StringWriter: void <init>()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r16 = new java.io.StringWriter >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r16.<java.io.StringWriter: void <init>()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void marshal(java.lang.Object,java.io.Writer)>(r0, $r16)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r16.<java.io.StringWriter: void <init>()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void marshal(java.lang.Object,java.io.Writer)>(r0, $r16) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r7 = virtualinvoke $r16.<java.io.StringWriter: java.lang.String toString()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : interfaceinvoke r2.<javax.xml.bind.Marshaller: void marshal(java.lang.Object,java.io.Writer)>(r0, $r16) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r7 = virtualinvoke $r16.<java.io.StringWriter: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : r7 = virtualinvoke $r16.<java.io.StringWriter: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r21 := @caughtexception
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : return r7
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r17 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r18 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r18 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r19 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation>
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r19 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.lang.String xsdLocation> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r18[0] = $r19
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r18[0] = $r19 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load XSD identified by \'%s\'", $r18)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load XSD identified by \'%s\'", $r18) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r20)
org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r20) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.toXml : throw $r17
