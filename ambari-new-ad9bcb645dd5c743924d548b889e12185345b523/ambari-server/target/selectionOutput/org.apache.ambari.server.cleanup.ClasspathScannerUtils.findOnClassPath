org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r7 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r8 = class "Lorg/apache/ambari/server/cleanup/ClasspathScannerUtils;"
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r8 = class "Lorg/apache/ambari/server/cleanup/ClasspathScannerUtils;" >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r8 = class "Lorg/apache/ambari/server/cleanup/ClasspathScannerUtils;" >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failure during configuring JUICE bindings.", $r16)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failure during configuring JUICE bindings.", $r16) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r18 = new java.lang.IllegalArgumentException
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r18 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r16)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r16) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : throw $r18
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r19 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r9)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r19 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r9) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r19 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r9) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = virtualinvoke r19.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = virtualinvoke r19.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = virtualinvoke $r11.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = virtualinvoke r19.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = virtualinvoke $r11.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = virtualinvoke $r11.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z3 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z3 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z3 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= return $r7]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z3 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= return $r7] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : return $r7
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = (com.google.common.reflect.ClassPath$ClassInfo) $r12
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = (com.google.common.reflect.ClassPath$ClassInfo) $r12 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke r5.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = (com.google.common.reflect.ClassPath$ClassInfo) $r12 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke r5.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke r5.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r6, r2)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r6, r2) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r6, r2) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r14 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r6)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r14 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Found class [{}]", r6)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r14 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Found class [{}]", r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r6)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Found class [{}]", r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] is excluded excluded.", r6)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] is excluded excluded.", r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] is excluded excluded.", r6) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 := @caughtexception
