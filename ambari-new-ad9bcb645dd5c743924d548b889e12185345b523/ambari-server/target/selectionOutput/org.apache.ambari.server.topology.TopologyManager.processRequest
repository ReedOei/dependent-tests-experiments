org.apache.ambari.server.topology.TopologyManager.processRequest : $r10 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.processRequest: Entering")
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>("TopologyManager.processRequest: Entering") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void finalizeTopology(org.apache.ambari.server.topology.TopologyRequest,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2)
org.apache.ambari.server.topology.TopologyManager.processRequest : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void finalizeTopology(org.apache.ambari.server.topology.TopologyRequest,org.apache.ambari.server.topology.ClusterTopology)>(r1, r2) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : z4 = 0
org.apache.ambari.server.topology.TopologyManager.processRequest : z4 = 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r11 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processRequest : $r11 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r11
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : throw $r46
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : r5 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : r5 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0
org.apache.ambari.server.topology.TopologyManager.processRequest : r5 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0
org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r13 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r11
org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= return]
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= return] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : return
org.apache.ambari.server.topology.TopologyManager.processRequest : $r13 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l0 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r13 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l0 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l0 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("TopologyManager.processRequest: not all required hosts have been matched, so adding LogicalRequest ID = {} to outstanding requests", $r14)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("TopologyManager.processRequest: not all required hosts have been matched, so adding LogicalRequest ID = {} to outstanding requests", $r14) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests>
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("TopologyManager.processRequest: not all required hosts have been matched, so adding LogicalRequest ID = {} to outstanding requests", $r14) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r15
org.apache.ambari.server.topology.TopologyManager.processRequest : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r44 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r16 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests>
org.apache.ambari.server.topology.TopologyManager.processRequest : $r16 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r16.<java.util.Collection: boolean add(java.lang.Object)>(r3)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r16 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Collection outstandingRequests> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r44 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r44 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : throw $r44
org.apache.ambari.server.topology.TopologyManager.processRequest : throw $r44 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r16.<java.util.Collection: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r16.<java.util.Collection: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r44 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r44 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= exitmonitor $r11]
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= exitmonitor $r11] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r11
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= exitmonitor $r11] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if $z1 == 0
org.apache.ambari.server.topology.TopologyManager.processRequest : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : r47 = (org.apache.ambari.server.state.host.HostImpl) $r17
org.apache.ambari.server.topology.TopologyManager.processRequest : $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : r47 = (org.apache.ambari.server.state.host.HostImpl) $r17 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r18 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts>
org.apache.ambari.server.topology.TopologyManager.processRequest : r47 = (org.apache.ambari.server.state.host.HostImpl) $r17 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r18 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r18
org.apache.ambari.server.topology.TopologyManager.processRequest : $r18 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : entermonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : r6 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : r6 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r19 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts>
org.apache.ambari.server.topology.TopologyManager.processRequest : r6 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : throw $r45
org.apache.ambari.server.topology.TopologyManager.processRequest : throw $r45 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r19 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r6)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r19 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if $z2 == 0
org.apache.ambari.server.topology.TopologyManager.processRequest : $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r36 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts>
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= $r20 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>]
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= $r20 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r20 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= $r20 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r20 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r21 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r20 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r21 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l1 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r21 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l1 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l1 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: offering host name = {} to LogicalRequest ID = {}", $r21, $r22)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: offering host name = {} to LogicalRequest ID = {}", $r21, $r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : r49 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: org.apache.ambari.server.topology.HostOfferResponse offer(org.apache.ambari.server.state.Host)>(r47)
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: offering host name = {} to LogicalRequest ID = {}", $r21, $r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : r49 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: org.apache.ambari.server.topology.HostOfferResponse offer(org.apache.ambari.server.state.Host)>(r47) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r23 = <org.apache.ambari.server.topology.TopologyManager$4: int[] $SwitchMap$org$apache$ambari$server$topology$HostOfferResponse$Answer>
org.apache.ambari.server.topology.TopologyManager.processRequest : r49 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: org.apache.ambari.server.topology.HostOfferResponse offer(org.apache.ambari.server.state.Host)>(r47) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r23 = <org.apache.ambari.server.topology.TopologyManager$4: int[] $SwitchMap$org$apache$ambari$server$topology$HostOfferResponse$Answer> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r24 = virtualinvoke r49.<org.apache.ambari.server.topology.HostOfferResponse: org.apache.ambari.server.topology.HostOfferResponse$Answer getAnswer()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r23 = <org.apache.ambari.server.topology.TopologyManager$4: int[] $SwitchMap$org$apache$ambari$server$topology$HostOfferResponse$Answer> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r24 = virtualinvoke r49.<org.apache.ambari.server.topology.HostOfferResponse: org.apache.ambari.server.topology.HostOfferResponse$Answer getAnswer()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $i2 = virtualinvoke $r24.<org.apache.ambari.server.topology.HostOfferResponse$Answer: int ordinal()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r24 = virtualinvoke r49.<org.apache.ambari.server.topology.HostOfferResponse: org.apache.ambari.server.topology.HostOfferResponse$Answer getAnswer()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $i2 = virtualinvoke $r24.<org.apache.ambari.server.topology.HostOfferResponse$Answer: int ordinal()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $i3 = $r23[$i2]
org.apache.ambari.server.topology.TopologyManager.processRequest : $i2 = virtualinvoke $r24.<org.apache.ambari.server.topology.HostOfferResponse$Answer: int ordinal()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $i3 = $r23[$i2] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : tableswitch($i3) {     case 1:
org.apache.ambari.server.topology.TopologyManager.processRequest : $i3 = $r23[$i2] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : tableswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke r5.<java.util.Iterator: void remove()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : tableswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : z4 = 1
org.apache.ambari.server.topology.TopologyManager.processRequest : tableswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r30 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : tableswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : tableswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r30 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r31 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r30 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r31 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l5 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r31 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l5 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l5 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r30.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was DECLINED_PREDICATE by LogicalRequest ID = {}", $r31, $r32)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r30.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was DECLINED_PREDICATE by LogicalRequest ID = {}", $r31, $r32) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r30.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was DECLINED_PREDICATE by LogicalRequest ID = {}", $r31, $r32) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : z4 = 1 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r33 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : z4 = 1 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r33 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r34 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r33 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r34 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l6 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r34 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l6 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l6 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r33.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was DECLINED_DONE by LogicalRequest ID = {}", $r34, $r35)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r33.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was DECLINED_DONE by LogicalRequest ID = {}", $r34, $r35) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r33.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was DECLINED_DONE by LogicalRequest ID = {}", $r34, $r35) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke r5.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r25 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke r5.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r25 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r26 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r25 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r26 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l4 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r26 = virtualinvoke r47.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l4 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l4 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r25.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was ACCEPTED by LogicalRequest ID = {} , host has been removed from available hosts.", $r26, $r27)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r25.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was ACCEPTED by LogicalRequest ID = {} , host has been removed from available hosts.", $r26, $r27) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r28 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.lang.Long getClusterId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r25.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} was ACCEPTED by LogicalRequest ID = {} , host has been removed from available hosts.", $r26, $r27) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r28 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.lang.Long getClusterId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r29 = virtualinvoke r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.ClusterTopology getClusterTopology(java.lang.Long)>($r28)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r28 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: java.lang.Long getClusterId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r29 = virtualinvoke r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.ClusterTopology getClusterTopology(java.lang.Long)>($r28) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void processAcceptedHostOffer(org.apache.ambari.server.topology.ClusterTopology,org.apache.ambari.server.topology.HostOfferResponse,org.apache.ambari.server.state.host.HostImpl)>($r29, r49, r47)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r29 = virtualinvoke r0.<org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.ClusterTopology getClusterTopology(java.lang.Long)>($r28) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void processAcceptedHostOffer(org.apache.ambari.server.topology.ClusterTopology,org.apache.ambari.server.topology.HostOfferResponse,org.apache.ambari.server.state.host.HostImpl)>($r29, r49, r47) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : specialinvoke r0.<org.apache.ambari.server.topology.TopologyManager: void processAcceptedHostOffer(org.apache.ambari.server.topology.ClusterTopology,org.apache.ambari.server.topology.HostOfferResponse,org.apache.ambari.server.state.host.HostImpl)>($r29, r49, r47) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r36 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r36 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $z3 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r37)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $z3 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r37) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if $z3 == 0
org.apache.ambari.server.topology.TopologyManager.processRequest : $z3 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r37) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r40 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r38 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processRequest : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r38 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l7 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r38 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l7 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l7 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r38.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} is registered with another request, and will not be offered to LogicalRequest ID = {}", r6, $r39)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r38.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} is registered with another request, and will not be offered to LogicalRequest ID = {}", r6, $r39) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r38.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} is registered with another request, and will not be offered to LogicalRequest ID = {}", r6, $r39) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : if z4 != 0
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r46 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r40 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $l8 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>()
org.apache.ambari.server.topology.TopologyManager.processRequest : $r40 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $l8 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8)
org.apache.ambari.server.topology.TopologyManager.processRequest : $l8 = virtualinvoke r3.<org.apache.ambari.server.topology.LogicalRequest: long getRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r40.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} is mapped to LogicalRequest ID = {} and will be removed from the reserved hosts.", r6, $r41)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r40.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} is mapped to LogicalRequest ID = {} and will be removed from the reserved hosts.", r6, $r41) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r42 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts>
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r40.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("TopologyManager.processRequest: host name = {} is mapped to LogicalRequest ID = {} and will be removed from the reserved hosts.", r6, $r41) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : $r42 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r42.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6)
org.apache.ambari.server.topology.TopologyManager.processRequest : $r42 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.Map reservedHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r42.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= exitmonitor $r18]
org.apache.ambari.server.topology.TopologyManager.processRequest : interfaceinvoke $r42.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= exitmonitor $r18] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : exitmonitor $r18
org.apache.ambari.server.topology.TopologyManager.processRequest : goto [?= exitmonitor $r18] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processRequest : $r45 := @caughtexception
