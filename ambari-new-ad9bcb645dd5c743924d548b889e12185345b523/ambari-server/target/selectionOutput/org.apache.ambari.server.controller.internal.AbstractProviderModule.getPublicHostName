org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : r3 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.state.Host getHost(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : if r3 != null
org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : if r3 != null >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : $r4 = r2
org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : if r3 != null >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : $r4 = interfaceinvoke r3.<org.apache.ambari.server.state.Host: java.lang.String getPublicHostName()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : $r4 = interfaceinvoke r3.<org.apache.ambari.server.state.Host: java.lang.String getPublicHostName()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : return $r4
org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : $r4 = r2 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : goto [?= return $r4]
org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : goto [?= return $r4] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getPublicHostName : return $r4
