org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r5 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Checking DB store version")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Checking DB store version") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r6 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r6 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r6 != null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r6 != null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r23 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: com.google.inject.Injector injector>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r6 != null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r7 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r7 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r0 = virtualinvoke $r7.<org.apache.ambari.server.orm.dao.MetainfoDAO: org.apache.ambari.server.orm.entities.MetainfoEntity findByKey(java.lang.String)>("version")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r0 = virtualinvoke $r7.<org.apache.ambari.server.orm.dao.MetainfoDAO: org.apache.ambari.server.orm.entities.MetainfoEntity findByKey(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r32 = null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r32 = null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r0 == null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r0 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r32 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.MetainfoEntity: java.lang.String getMetainfoValue()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r0 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r8 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: com.google.inject.Injector injector>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r8 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r9 = interfaceinvoke $r8.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r9 = interfaceinvoke $r8.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r1 = (org.apache.ambari.server.configuration.Configuration) $r9
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r1 = (org.apache.ambari.server.configuration.Configuration) $r9 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r10 = new java.io.File
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r10 = new java.io.File >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r11 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration: java.lang.String getServerVersionFilePath()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r11 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration: java.lang.String getServerVersionFilePath()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $z0 != 0
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r22 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r12 = new java.util.Scanner
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r12 = new java.util.Scanner >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r12.<java.util.Scanner: void <init>(java.io.File)>($r10)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r12 = new java.util.Scanner >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r28 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r28.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Unable to read server version file.")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r28.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Unable to read server version file.") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r28
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r12.<java.util.Scanner: void <init>(java.io.File)>($r10) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r34 = null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r12.<java.util.Scanner: void <init>(java.io.File)>($r10) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r34 = null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r30 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r34 = null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r31 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r34 = null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r13 = virtualinvoke $r12.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r13 = virtualinvoke $r12.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r30 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r13 = virtualinvoke $r12.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r31 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r13 = virtualinvoke $r12.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r35 = virtualinvoke $r13.<java.util.Scanner: java.lang.String next()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r35 = virtualinvoke $r13.<java.util.Scanner: java.lang.String next()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r30 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r35 = virtualinvoke $r13.<java.util.Scanner: java.lang.String next()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r31 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r35 = virtualinvoke $r13.<java.util.Scanner: java.lang.String next()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r12 == null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r12 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= virtualinvoke $r12.<java.util.Scanner: void close()>()]
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r12 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= (branch)]
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r0 == null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r0 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r32, r35, 3)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r0 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r14 = new java.lang.StringBuilder
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current database store version is not compatible with current server version, serverVersion=")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current database store version is not compatible with current server version, serverVersion=") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", schemaVersion=")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", schemaVersion=") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r38 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r38 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r19 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r19 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String)>(r38)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String)>(r38) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r20 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r20 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r20.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>(r38)
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r20.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>(r38) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r20
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r32, r35, 3) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $i0 == 0
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $i0 == 0 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r14 = new java.lang.StringBuilder
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $i0 == 0 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r21 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r21 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("DB store version is compatible")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("DB store version is compatible") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : return
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= virtualinvoke $r12.<java.util.Scanner: void close()>()] >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= virtualinvoke $r12.<java.util.Scanner: void close()>()] >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= (branch)]
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= (branch)]
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r12 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r34 == null
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if $r12 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r31
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r31 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r34 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r34 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>()
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r34 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r29 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : if r34 == null >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke r34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r29) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= throw $r31]
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke r34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r29) >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= throw $r31] >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r31
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r31
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r27 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= throw $r31]
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : virtualinvoke $r12.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r29 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : goto [?= throw $r31] >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r31
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r34 = $r30 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r30
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r34 = $r30 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r31 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r30 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r31 := @caughtexception
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r22 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r22.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Server version file does not exist.")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : specialinvoke $r22.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Server version file does not exist.") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : throw $r22
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : r32 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.MetainfoEntity: java.lang.String getMetainfoValue()>() >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r8 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: com.google.inject.Injector injector>
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r23 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r24 = interfaceinvoke $r23.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/MetainfoDAO;")
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r24 = interfaceinvoke $r23.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/MetainfoDAO;") >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r25 = (org.apache.ambari.server.orm.dao.MetainfoDAO) $r24
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r25 = (org.apache.ambari.server.orm.dao.MetainfoDAO) $r24 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> = $r25
org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> = $r25 >>>>>>>> org.apache.ambari.server.controller.utilities.DatabaseChecker.checkDBVersion : $r7 = <org.apache.ambari.server.controller.utilities.DatabaseChecker: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO>
