org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r3 = interfaceinvoke r1.<java.util.Collection: java.util.stream.Stream stream()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r4 = dynamicinvoke "apply" <java.util.function.Function (org.apache.ambari.server.state.cluster.ClusterImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <org.apache.ambari.server.state.cluster.ClusterImpl: java.lang.String getServiceByConfigType(java.lang.String)>, class "(Ljava/lang/String;)Ljava/lang/String;")
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r4 = dynamicinvoke "apply" <java.util.function.Function (org.apache.ambari.server.state.cluster.ClusterImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <org.apache.ambari.server.state.cluster.ClusterImpl: java.lang.String getServiceByConfigType(java.lang.String)>, class "(Ljava/lang/String;)Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r6 = dynamicinvoke "test" <java.util.function.Predicate ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Z", handle: <java.util.Objects: boolean nonNull(java.lang.Object)>, class "(Ljava/lang/String;)Z")
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r6 = dynamicinvoke "test" <java.util.function.Predicate ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Z", handle: <java.util.Objects: boolean nonNull(java.lang.Object)>, class "(Ljava/lang/String;)Z") >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>()
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : r2 = (java.util.List) $r9
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : r2 = (java.util.List) $r9 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r10 = new java.util.HashSet
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r10 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : specialinvoke $r10.<java.util.HashSet: void <init>(java.util.Collection)>(r2)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : specialinvoke $r10.<java.util.HashSet: void <init>(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $i0 = virtualinvoke $r10.<java.util.HashSet: int size()>()
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $i0 = virtualinvoke $r10.<java.util.HashSet: int size()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $i0 > 1
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $i0 > 1 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $z2 = 1
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $i0 > 1 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $z2 = 0
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $z2 = 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z2 != 0
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r12 = new java.lang.IllegalArgumentException
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z1 == 0
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r15 = null
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r15 = (java.lang.String) $r11
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r15 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : return $r15
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r15 = null >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : goto [?= return $r15]
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : goto [?= return $r15] >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : return $r15
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r12 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r13 = newarray (java.lang.Object)[2]
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r13 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r13[0] = r1
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r13[0] = r1 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r13[1] = r2
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r13[1] = r2 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Config types: %s should belong to a single installed service. But they belong to: %s", $r13)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Config types: %s should belong to a single installed service. But they belong to: %s", $r13) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14)
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : throw $r12
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : $z2 = 1 >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : goto [?= (branch)]
org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.cluster.ClusterImpl.getServiceForConfigTypes : if $z2 != 0
