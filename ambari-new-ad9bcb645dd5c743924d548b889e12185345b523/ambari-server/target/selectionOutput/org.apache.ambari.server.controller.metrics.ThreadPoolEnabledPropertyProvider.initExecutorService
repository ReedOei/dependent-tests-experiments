org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r2 = new org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $i2 = <org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider: int THREAD_POOL_CORE_SIZE>
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $i2 = <org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider: int THREAD_POOL_CORE_SIZE> >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $i1 = <org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider: int THREAD_POOL_MAX_SIZE>
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $i1 = <org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider: int THREAD_POOL_MAX_SIZE> >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $i0 = <org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider: int THREAD_POOL_WORKER_QUEUE_SIZE>
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $i0 = <org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider: int THREAD_POOL_WORKER_QUEUE_SIZE> >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : specialinvoke $r2.<org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,int)>($i2, $i1, 30000L, $r3, $i0)
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : specialinvoke $r2.<org.apache.ambari.server.controller.utilities.ScalingThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,int)>($i2, $i1, 30000L, $r3, $i0) >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1)
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1) >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r4 = new com.google.common.util.concurrent.ThreadFactoryBuilder
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r4 = new com.google.common.util.concurrent.ThreadFactoryBuilder >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : specialinvoke $r4.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>()
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : specialinvoke $r4.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r5 = virtualinvoke $r4.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1)
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r5 = virtualinvoke $r4.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1) >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r6 = virtualinvoke $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("ambari-property-provider-thread-%d")
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : $r6 = virtualinvoke $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("ambari-property-provider-thread-%d") >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : r1 = virtualinvoke $r6.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>()
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : r1 = virtualinvoke $r6.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>() >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>(r1)
org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>(r1) >>>>>>>> org.apache.ambari.server.controller.metrics.ThreadPoolEnabledPropertyProvider.initExecutorService : return $r2
