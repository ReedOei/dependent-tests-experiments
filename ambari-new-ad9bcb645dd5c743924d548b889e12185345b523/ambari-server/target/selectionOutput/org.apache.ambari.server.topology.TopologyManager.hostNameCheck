org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r4 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : specialinvoke $r4.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : specialinvoke $r4.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r5 = virtualinvoke r1.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: java.util.Map getHostGroupInfo()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r5 = virtualinvoke r1.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: java.util.Map getHostGroupInfo()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r19 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r19 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $z0 == 0
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r15 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r21 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r21 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $z1 == 0
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : return
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r22 = (java.lang.String) $r7
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r22 = (java.lang.String) $r7 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r8 = interfaceinvoke r2.<org.apache.ambari.server.topology.ClusterTopology: java.lang.String getHostGroupForHost(java.lang.String)>(r22)
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r8 = interfaceinvoke r2.<org.apache.ambari.server.topology.ClusterTopology: java.lang.String getHostGroupForHost(java.lang.String)>(r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $r8 == null
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $r8 == null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r9 = new org.apache.ambari.server.topology.InvalidTopologyException
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : if $r8 == null >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : goto [?= $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : goto [?= $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r9 = new org.apache.ambari.server.topology.InvalidTopologyException >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r10 = new java.lang.StringBuilder
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host ")
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host ") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22)
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be added, because it is already in the cluster")
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be added, because it is already in the cluster") >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : specialinvoke $r9.<org.apache.ambari.server.topology.InvalidTopologyException: void <init>(java.lang.String)>($r14)
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : specialinvoke $r9.<org.apache.ambari.server.topology.InvalidTopologyException: void <init>(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : throw $r9
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r15 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r20 = (java.util.Map$Entry) $r15
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : r20 = (java.util.Map$Entry) $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r16 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r16 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r17 = (org.apache.ambari.server.topology.HostGroupInfo) $r16
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r17 = (org.apache.ambari.server.topology.HostGroupInfo) $r16 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r18 = virtualinvoke $r17.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $r18 = virtualinvoke $r17.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r18)
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r18) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : goto [?= $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.hostNameCheck : goto [?= $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.hostNameCheck : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()
