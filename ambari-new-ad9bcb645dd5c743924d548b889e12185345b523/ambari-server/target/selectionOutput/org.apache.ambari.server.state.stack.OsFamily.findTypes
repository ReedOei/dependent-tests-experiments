org.apache.ambari.server.state.stack.OsFamily.findTypes : r2 = specialinvoke r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map parse_os(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r9 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap>
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r9 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z0 == 0
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r11 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r11 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : return $r11
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : r4 = (java.lang.String) $r12
org.apache.ambari.server.state.stack.OsFamily.findTypes : r4 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r13 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap>
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r13 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : r5 = (org.apache.ambari.server.state.stack.JsonOsFamilyEntry) $r14
org.apache.ambari.server.state.stack.OsFamily.findTypes : r5 = (org.apache.ambari.server.state.stack.JsonOsFamilyEntry) $r14 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r15 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getDistro()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r15 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getDistro()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r16 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("distro")
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r16 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("distro") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $z1 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r16)
org.apache.ambari.server.state.stack.OsFamily.findTypes : $z1 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z1 == 0
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r17 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getVersions()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.OsFamily.findTypes : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r17 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getVersions()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("versions")
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("versions") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $z2 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>($r18)
org.apache.ambari.server.state.stack.OsFamily.findTypes : $z2 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z2 == 0
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r19 = new java.util.HashSet
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r19 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : specialinvoke $r19.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : specialinvoke $r19.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r20 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getDistro()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r20 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getDistro()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : r7 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : r7 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z3 == 0
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r22 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r21 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r19)
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r21 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r19) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : return $r21
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r22 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : r8 = (java.lang.String) $r22
org.apache.ambari.server.state.stack.OsFamily.findTypes : r8 = (java.lang.String) $r22 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r23 = new java.lang.StringBuilder
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r25 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("versions")
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r25 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("versions") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r26 = (java.lang.String) $r25
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r26 = (java.lang.String) $r25 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.stack.OsFamily.findTypes : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r28)
org.apache.ambari.server.state.stack.OsFamily.findTypes : interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : goto [?= $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.OsFamily.findTypes : goto [?= $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.findTypes : $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
