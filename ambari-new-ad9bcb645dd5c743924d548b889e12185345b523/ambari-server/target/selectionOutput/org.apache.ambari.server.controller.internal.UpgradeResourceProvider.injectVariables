org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r10 = virtualinvoke r3.<org.apache.ambari.server.orm.entities.UpgradeItemEntity: java.lang.String getTasks()>() >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if r10 == null
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if r10 == null >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $z0 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if r10 == null >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : return
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $z0 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if $z0 != 0
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\{\\{.*?\\}\\})")
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : return
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\{\\{.*?\\}\\})") >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r5 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r10)
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r5 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r10) >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if $z1 == 0
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r6 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : virtualinvoke r3.<org.apache.ambari.server.orm.entities.UpgradeItemEntity: void setTasks(java.lang.String)>(r10)
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : virtualinvoke r3.<org.apache.ambari.server.orm.entities.UpgradeItemEntity: void setTasks(java.lang.String)>(r10) >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : return
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r6 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r7 = virtualinvoke r1.<org.apache.ambari.server.state.ConfigHelper: java.lang.String getPlaceholderValueFromDesiredConfigurations(org.apache.ambari.server.state.Cluster,java.lang.String)>(r2, r6)
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r7 = virtualinvoke r1.<org.apache.ambari.server.state.ConfigHelper: java.lang.String getPlaceholderValueFromDesiredConfigurations(org.apache.ambari.server.state.Cluster,java.lang.String)>(r2, r6) >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if null == r7
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if null == r7 >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r10 = virtualinvoke r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r6, r7)
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : if null == r7 >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $r9 = <org.apache.ambari.server.controller.internal.UpgradeResourceProvider: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $r9 = <org.apache.ambari.server.controller.internal.UpgradeResourceProvider: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Unable to retrieve value for {}", r6)
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Unable to retrieve value for {}", r6) >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : goto [?= $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : goto [?= $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : r10 = virtualinvoke r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r6, r7) >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : goto [?= (branch)]
org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.internal.UpgradeResourceProvider.injectVariables : goto [?= $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
