org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $z0 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean LINUX> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : if $z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r4 = <org.apache.ambari.server.utils.ShellCommandUtil: org.slf4j.Logger LOG>
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r4 = <org.apache.ambari.server.utils.ShellCommandUtil: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r3 = newarray (java.lang.Object)[1]
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r3 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r3[0] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r3[0] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Not performing chown command for file %s because current OS is not Linux ", $r3)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Not performing chown command for file %s because current OS is not Linux ", $r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r5)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r6 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r6 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r6.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(-1, "", "Cannot perform operation: The current OS is not Linux")
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r6.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(-1, "", "Cannot perform operation: The current OS is not Linux") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : return $r6
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : if $z1 != 0
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : if $z1 != 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8 = newarray (java.lang.String)[3]
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : if $z1 != 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r7 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r7 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r7.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(0, "", "")
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r7.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(0, "", "") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : return $r7
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8 = newarray (java.lang.String)[3] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[0] = "chown"
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[0] = "chown" >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[1] = r1
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[1] = r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[2] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[2] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r9 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r8, null, null, 1)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r8[2] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r10 := @caughtexception
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r12 = <org.apache.ambari.server.utils.ShellCommandUtil: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r11 = newarray (java.lang.Object)[2]
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r11 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r11[0] = r1
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r11[0] = r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r11[1] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r11[1] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not perform chown %s %s", $r11)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not perform chown %s %s", $r11) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r13, $r10)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r13, $r10) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r14 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r14 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r15 = new java.lang.StringBuilder
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot perform operation: ")
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot perform operation: ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r17 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getLocalizedMessage()>()
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r17 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getLocalizedMessage()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r14.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(-1, "", $r19)
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : specialinvoke $r14.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(-1, "", $r19) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : return $r14
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r9 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r8, null, null, 1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : return $r9
org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r9 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r8, null, null, 1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileOwner : $r10 := @caughtexception
