org.apache.ambari.server.stack.RepoUtil.asResponses : $r8 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.stack.RepoUtil.asResponses : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0)
org.apache.ambari.server.stack.RepoUtil.asResponses : specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : r5 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.RepoUtil.asResponses : r5 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.RepoUtil.asResponses : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : if $z0 == 0
org.apache.ambari.server.stack.RepoUtil.asResponses : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.RepoUtil.asResponses : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : return $r8
org.apache.ambari.server.stack.RepoUtil.asResponses : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : r6 = (org.apache.ambari.server.state.RepositoryInfo) $r9
org.apache.ambari.server.stack.RepoUtil.asResponses : r6 = (org.apache.ambari.server.state.RepositoryInfo) $r9 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : r7 = virtualinvoke r6.<org.apache.ambari.server.state.RepositoryInfo: org.apache.ambari.server.controller.RepositoryResponse convertToResponse()>()
org.apache.ambari.server.stack.RepoUtil.asResponses : r7 = virtualinvoke r6.<org.apache.ambari.server.state.RepositoryInfo: org.apache.ambari.server.controller.RepositoryResponse convertToResponse()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : virtualinvoke r7.<org.apache.ambari.server.controller.RepositoryResponse: void setVersionDefinitionId(java.lang.String)>(r1)
org.apache.ambari.server.stack.RepoUtil.asResponses : virtualinvoke r7.<org.apache.ambari.server.controller.RepositoryResponse: void setVersionDefinitionId(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : virtualinvoke r7.<org.apache.ambari.server.controller.RepositoryResponse: void setStackName(java.lang.String)>(r2)
org.apache.ambari.server.stack.RepoUtil.asResponses : virtualinvoke r7.<org.apache.ambari.server.controller.RepositoryResponse: void setStackName(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : virtualinvoke r7.<org.apache.ambari.server.controller.RepositoryResponse: void setStackVersion(java.lang.String)>(r3)
org.apache.ambari.server.stack.RepoUtil.asResponses : virtualinvoke r7.<org.apache.ambari.server.controller.RepositoryResponse: void setStackVersion(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.ambari.server.stack.RepoUtil.asResponses : interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.RepoUtil.asResponses : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.RepoUtil.asResponses : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
