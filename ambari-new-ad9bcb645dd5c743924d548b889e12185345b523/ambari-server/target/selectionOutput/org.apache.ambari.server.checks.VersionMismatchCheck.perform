org.apache.ambari.server.checks.VersionMismatchCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r8 = r0.<org.apache.ambari.server.checks.VersionMismatchCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r8 = r0.<org.apache.ambari.server.checks.VersionMismatchCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r9 = interfaceinvoke $r8.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r9 = interfaceinvoke $r8.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r10 = (org.apache.ambari.server.state.Clusters) $r9
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r10 = (org.apache.ambari.server.state.Clusters) $r9 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r4 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r4 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r11 = new java.util.ArrayList
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r11 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r12 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r12 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r20 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r20 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z0 == 0
org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r19 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z1 = virtualinvoke $r13.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z1 = virtualinvoke $r13.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z1 != 0
org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z1 != 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r14 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING>
org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z1 != 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : return
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r14 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING> >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r14)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r14) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r21 = virtualinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r21 = virtualinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r15 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r15 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r16 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r11, "\n")
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r16 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r11, "\n") >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r15[0] = $r16
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r15[0] = $r16 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r21, $r15)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r21, $r15) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r17)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r18 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r11, "\n")
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r18 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r11, "\n") >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r18)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : return
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r19 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r7 = (org.apache.ambari.server.state.Service) $r19
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r7 = (org.apache.ambari.server.state.Service) $r19 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateService(org.apache.ambari.server.state.Service,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r7, r1, $r11)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateService(org.apache.ambari.server.state.Service,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r7, r1, $r11) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : goto [?= $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.VersionMismatchCheck.perform : goto [?= $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
