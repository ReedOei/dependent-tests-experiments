org.apache.ambari.server.api.services.BaseRequest.getFields : $r6 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r7 = interfaceinvoke $r6.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r7 = interfaceinvoke $r6.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r8 = interfaceinvoke $r7.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields")
org.apache.ambari.server.api.services.BaseRequest.getFields : $r8 = interfaceinvoke $r7.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r8
org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r21 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = new java.util.HashSet
org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r9.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r9.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+")
org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i10 = 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = new java.util.HashMap
org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i1 = interfaceinvoke $r9.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i1 = interfaceinvoke $r9.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r10.<java.util.HashMap: void <init>(int)>($i1)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r10.<java.util.HashMap: void <init>(int)>($i1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r21 = $r10
org.apache.ambari.server.api.services.BaseRequest.getFields : r21 = $r10 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r22 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r22 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z1 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z1 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z1 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r21
org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r23 = (java.lang.String) $r11
org.apache.ambari.server.api.services.BaseRequest.getFields : r23 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r24 = null
org.apache.ambari.server.api.services.BaseRequest.getFields : r24 = null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = virtualinvoke r23.<java.lang.String: boolean contains(java.lang.CharSequence)>("[")
org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = virtualinvoke r23.<java.lang.String: boolean contains(java.lang.CharSequence)>("[") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i2 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r24)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r24) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i2 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i3 = $i2 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i3 = $i2 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(93)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(93) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r23 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(0, $i5)
org.apache.ambari.server.api.services.BaseRequest.getFields : r23 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(0, $i5) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = r5[0]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = r5[0] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r15)
org.apache.ambari.server.api.services.BaseRequest.getFields : l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l11 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l11 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l12 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l12 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = lengthof r5
org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = lengthof r5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i6 < 2
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i6 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = r5[1]
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i6 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r25 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r25 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r25.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l0, l11, l12)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r25.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l0, l11, l12) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r24 = $r25
org.apache.ambari.server.api.services.BaseRequest.getFields : r24 = $r25 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r24)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = r5[1] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l11 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r17)
org.apache.ambari.server.api.services.BaseRequest.getFields : l11 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = lengthof r5
org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = lengthof r5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i7 != 3
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i7 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r5[2]
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i7 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r25 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r5[2] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19)
org.apache.ambari.server.api.services.BaseRequest.getFields : l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r25 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : i10 = 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = virtualinvoke r4.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = virtualinvoke r4.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = $i8 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = $i8 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if i10 >= $i9
org.apache.ambari.server.api.services.BaseRequest.getFields : if i10 >= $i9 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(i10)
org.apache.ambari.server.api.services.BaseRequest.getFields : if i10 >= $i9 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(i10) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r20)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i10 = i10 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : i10 = i10 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i8 = virtualinvoke r4.<java.util.regex.Matcher: int groupCount()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i8 = virtualinvoke r4.<java.util.regex.Matcher: int groupCount()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = virtualinvoke r4.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r21 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= return r21]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= return r21] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r21
