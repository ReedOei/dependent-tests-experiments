com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r8 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: java.lang.Class[] val$currentType> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r9 = $r8[0]
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r9 = $r8[0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r2 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>($r9)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r2 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r10.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>("default")
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r10.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>("default") >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r38 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r38 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r38.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r38.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : return
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r4 = (java.lang.String) $r12
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r4 = (java.lang.String) $r12 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r5 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>(r4)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r5 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if r5 != null
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if r5 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r13 = new com.thoughtworks.xstream.converters.reflection.ObjectAccessException
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if r5 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if r6 == null
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if r6 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r22 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if r6 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r22 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r23 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.reflection.SerializableConverter this$0>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r23 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.reflection.SerializableConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r24 = $r23.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r24 = $r23.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r25 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: java.lang.Class[] val$currentType>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r25 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: java.lang.Class[] val$currentType> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r26 = $r25[0]
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r26 = $r25[0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r27 = interfaceinvoke $r24.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>($r26, r4)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r27 = interfaceinvoke $r24.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>($r26, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r22.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>($r27)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r22.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>($r27) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r28 = virtualinvoke r5.<java.io.ObjectStreamField: java.lang.Class getType()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r28 = virtualinvoke r5.<java.io.ObjectStreamField: java.lang.Class getType()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r29 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r29 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $r28 == $r29
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $r28 == $r29 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r30 = virtualinvoke r5.<java.io.ObjectStreamField: java.lang.Class getType()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $r28 == $r29 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r36 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.MarshallingContext val$context>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r36 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.MarshallingContext val$context> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r36.<com.thoughtworks.xstream.converters.MarshallingContext: void convertAnother(java.lang.Object)>(r6)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r36.<com.thoughtworks.xstream.converters.MarshallingContext: void convertAnother(java.lang.Object)>(r6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r37 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r37 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r37.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r37.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r30 = virtualinvoke r5.<java.io.ObjectStreamField: java.lang.Class getType()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $z1 = virtualinvoke $r30.<java.lang.Class: boolean isPrimitive()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $z1 = virtualinvoke $r30.<java.lang.Class: boolean isPrimitive()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r31 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r36 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.MarshallingContext val$context>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r31 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r32 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.reflection.SerializableConverter this$0>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r32 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.reflection.SerializableConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r33 = $r32.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r33 = $r32.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r34 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r34 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r35 = interfaceinvoke $r33.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r34)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r35 = interfaceinvoke $r33.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r34) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r31.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void addAttribute(java.lang.String,java.lang.String)>("class", $r35)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : interfaceinvoke $r31.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void addAttribute(java.lang.String,java.lang.String)>("class", $r35) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r36 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter$1: com.thoughtworks.xstream.converters.MarshallingContext val$context>
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r13 = new com.thoughtworks.xstream.converters.reflection.ObjectAccessException >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r7 = new java.lang.StringBuilder
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r7 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ")
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ") >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r15 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r15 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" may not write a field named \'")
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" may not write a field named \'") >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'")
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : specialinvoke $r13.<com.thoughtworks.xstream.converters.reflection.ObjectAccessException: void <init>(java.lang.String)>($r21)
com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : specialinvoke $r13.<com.thoughtworks.xstream.converters.reflection.ObjectAccessException: void <init>(java.lang.String)>($r21) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter$1.writeFieldsToStream : throw $r13
