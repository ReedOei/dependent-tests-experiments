com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: java.util.List hierarchyFor(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : $i0 = interfaceinvoke r2.<java.util.List: int size()>()
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : $i0 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : $i1 = $i0 - 1
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i1)
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.hierarchyFor : return r2
