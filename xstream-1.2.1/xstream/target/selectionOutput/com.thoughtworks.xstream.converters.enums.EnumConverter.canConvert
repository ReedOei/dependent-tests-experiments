com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>() >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $r2 = class "java/lang/Enum"
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 1
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 1 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : goto [?= return $z2]
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : goto [?= return $z2] >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $r2 = class "java/lang/Enum" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 1
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : return $z2
