com.thoughtworks.xstream.io.path.Path.apply : $r2 = new com.thoughtworks.xstream.core.util.FastStack >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : specialinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void <init>(int)>(16)
com.thoughtworks.xstream.io.path.Path.apply : specialinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void <init>(int)>(16) >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : r3 = $r2
com.thoughtworks.xstream.io.path.Path.apply : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i0 = 0
com.thoughtworks.xstream.io.path.Path.apply : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.apply : $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $i1 = lengthof $r5
com.thoughtworks.xstream.io.path.Path.apply : $i1 = lengthof $r5 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : if i0 >= $i1
com.thoughtworks.xstream.io.path.Path.apply : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.apply : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i2 = 0
com.thoughtworks.xstream.io.path.Path.apply : i2 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r9 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.apply : $r9 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $i3 = lengthof $r9
com.thoughtworks.xstream.io.path.Path.apply : $i3 = lengthof $r9 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : if i2 >= $i3
com.thoughtworks.xstream.io.path.Path.apply : if i2 >= $i3 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r10 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.apply : if i2 >= $i3 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $i4 = virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.path.Path.apply : $i4 = virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : r13 = newarray (java.lang.String)[$i4]
com.thoughtworks.xstream.io.path.Path.apply : r13 = newarray (java.lang.String)[$i4] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i5 = 0
com.thoughtworks.xstream.io.path.Path.apply : i5 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $i6 = lengthof r13
com.thoughtworks.xstream.io.path.Path.apply : $i6 = lengthof r13 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : if i5 >= $i6
com.thoughtworks.xstream.io.path.Path.apply : if i5 >= $i6 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r14 = virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object get(int)>(i5)
com.thoughtworks.xstream.io.path.Path.apply : if i5 >= $i6 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r16 = new com.thoughtworks.xstream.io.path.Path
com.thoughtworks.xstream.io.path.Path.apply : $r16 = new com.thoughtworks.xstream.io.path.Path >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : specialinvoke $r16.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r13)
com.thoughtworks.xstream.io.path.Path.apply : specialinvoke $r16.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r13) >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : return $r16
com.thoughtworks.xstream.io.path.Path.apply : $r14 = virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object get(int)>(i5) >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r15 = (java.lang.String) $r14
com.thoughtworks.xstream.io.path.Path.apply : $r15 = (java.lang.String) $r14 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : r13[i5] = $r15
com.thoughtworks.xstream.io.path.Path.apply : r13[i5] = $r15 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i5 = i5 + 1
com.thoughtworks.xstream.io.path.Path.apply : i5 = i5 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : goto [?= $i6 = lengthof r13]
com.thoughtworks.xstream.io.path.Path.apply : goto [?= $i6 = lengthof r13] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $i6 = lengthof r13
com.thoughtworks.xstream.io.path.Path.apply : $r10 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : r4 = $r10[i2]
com.thoughtworks.xstream.io.path.Path.apply : r4 = $r10[i2] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("..")
com.thoughtworks.xstream.io.path.Path.apply : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("..") >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : if $z0 == 0
com.thoughtworks.xstream.io.path.Path.apply : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.path.Path.apply : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(".")
com.thoughtworks.xstream.io.path.Path.apply : $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(".") >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : if $z1 != 0
com.thoughtworks.xstream.io.path.Path.apply : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r4)
com.thoughtworks.xstream.io.path.Path.apply : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i2 = i2 + 1
com.thoughtworks.xstream.io.path.Path.apply : i2 = i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : goto [?= $r9 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>]
com.thoughtworks.xstream.io.path.Path.apply : goto [?= $r9 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r9 = r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.apply : virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r4) >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i2 = i2 + 1
com.thoughtworks.xstream.io.path.Path.apply : virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : goto [?= i2 = i2 + 1]
com.thoughtworks.xstream.io.path.Path.apply : goto [?= i2 = i2 + 1] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i2 = i2 + 1
com.thoughtworks.xstream.io.path.Path.apply : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r7 = $r6[i0]
com.thoughtworks.xstream.io.path.Path.apply : $r7 = $r6[i0] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r7)
com.thoughtworks.xstream.io.path.Path.apply : virtualinvoke r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r7) >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : i0 = i0 + 1
com.thoughtworks.xstream.io.path.Path.apply : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : goto [?= $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>]
com.thoughtworks.xstream.io.path.Path.apply : goto [?= $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>] >>>>>>>> com.thoughtworks.xstream.io.path.Path.apply : $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
