com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>()
