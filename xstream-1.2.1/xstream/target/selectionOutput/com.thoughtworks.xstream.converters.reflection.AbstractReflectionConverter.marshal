com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : r4 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object callWriteReplace(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : r4 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object callWriteReplace(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : if $r6 == $r7
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : if $r6 == $r7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r8 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : if $r6 == $r7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r4, r2, r3)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r4, r2, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : return
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r8 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("resolves-to")
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("resolves-to") >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r11 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r11 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r12 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r11)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r12 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r11) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void addAttribute(java.lang.String,java.lang.String)>($r9, $r12)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void addAttribute(java.lang.String,java.lang.String)>($r9, $r12) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r4, r2, r3)
