com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: java.lang.Class primitiveClassForName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : if r2 == null
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : if r2 == null >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : return r2
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : if r2 == null >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : $r3 = r0.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: java.lang.ClassLoader classLoader>
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : $r3 = r0.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: java.lang.ClassLoader classLoader> >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1)
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.loadClass : return $r4
