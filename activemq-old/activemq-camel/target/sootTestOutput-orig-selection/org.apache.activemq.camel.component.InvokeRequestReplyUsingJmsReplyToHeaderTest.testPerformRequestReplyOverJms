org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r3 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.activemq.advisory.DestinationSource source> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $r3 == null
org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $r3 == null >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r5 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.activemq.EnhancedConnection connection>
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r5 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.activemq.EnhancedConnection connection> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $r5 == null
org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $r5 == null >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r7 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList pooledConnectionFactoryServiceList>
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r7 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList pooledConnectionFactoryServiceList> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : r1 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : r1 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $z0 == 0
org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $z0 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : r2 = (org.apache.activemq.Service) $r8
org.apache.activemq.camel.component.ActiveMQComponent.doStop : r2 = (org.apache.activemq.Service) $r8 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : interfaceinvoke r2.<org.apache.activemq.Service: void stop()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : interfaceinvoke r2.<org.apache.activemq.Service: void stop()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.activemq.camel.component.ActiveMQComponent.doStop : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r9 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList pooledConnectionFactoryServiceList>
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r9 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList pooledConnectionFactoryServiceList> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: void clear()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: void clear()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r10 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList singleConnectionFactoryList>
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r10 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList singleConnectionFactoryList> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : r11 = virtualinvoke $r10.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : r11 = virtualinvoke $r10.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $z1 == 0
org.apache.activemq.camel.component.ActiveMQComponent.doStop : if $z1 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r14 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList singleConnectionFactoryList>
org.apache.activemq.camel.component.ActiveMQComponent.doStop : $r14 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList singleConnectionFactoryList> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : virtualinvoke $r14.<java.util.concurrent.CopyOnWriteArrayList: void clear()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : virtualinvoke $r14.<java.util.concurrent.CopyOnWriteArrayList: void clear()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStop : specialinvoke r0.<org.apache.camel.component.jms.JmsComponent: void doStop()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStop : specialinvoke r0.<org.apache.camel.component.jms.JmsComponent: void doStop()>() >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : $r1 = virtualinvoke r0.<org.apache.activemq.camel.JmsConsumeSendTransacted: org.springframework.context.support.AbstractXmlApplicationContext createApplicationContext()>()
org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : $r1 = virtualinvoke r0.<org.apache.activemq.camel.JmsConsumeSendTransacted: org.springframework.context.support.AbstractXmlApplicationContext createApplicationContext()>() >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : $r2 = specialinvoke r0.<org.apache.activemq.camel.JmsConsumeSendTransacted: org.apache.activemq.broker.BrokerService createBroker(boolean)>(1)
org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : $r2 = specialinvoke r0.<org.apache.activemq.camel.JmsConsumeSendTransacted: org.apache.activemq.broker.BrokerService createBroker(boolean)>(1) >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : $r1 = new org.apache.activemq.broker.BrokerService
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : $r1 = new org.apache.activemq.broker.BrokerService >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : specialinvoke $r1.<org.apache.activemq.broker.BrokerService: void <init>()>()
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : specialinvoke $r1.<org.apache.activemq.broker.BrokerService: void <init>()>() >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : r2 = $r1
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : r2 = $r1 >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDeleteAllMessagesOnStartup(boolean)>(z0)
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDeleteAllMessagesOnStartup(boolean)>(z0) >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setBrokerName(java.lang.String)>("testTran")
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setBrokerName(java.lang.String)>("testTran") >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setAdvisorySupport(boolean)>(0)
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setAdvisorySupport(boolean)>(0) >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setUseJmx(boolean)>(0)
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setUseJmx(boolean)>(0) >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDataDirectory(java.lang.String)>("target/data")
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDataDirectory(java.lang.String)>("target/data") >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: org.apache.activemq.broker.TransportConnector addConnector(java.lang.String)>("tcp://0.0.0.0:61616")
org.apache.activemq.camel.JmsConsumeSendTransacted.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: org.apache.activemq.broker.TransportConnector addConnector(java.lang.String)>("tcp://0.0.0.0:61616") >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : r1 = $r4
org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : r1 = $r4 >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : $r5 = new java.lang.RuntimeException
org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : $r5 = new java.lang.RuntimeException >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to start broker", r1)
org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to start broker", r1) >>>>>>>> org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : throw $r5
org.apache.activemq.camel.JmsConsumeSendTransacted.createApplicationContext : throw $r5 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : r1 = specialinvoke r0.<org.apache.camel.test.junit4.CamelTestSupport: org.apache.camel.CamelContext createCamelContext()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : r1 = specialinvoke r0.<org.apache.camel.test.junit4.CamelTestSupport: org.apache.camel.CamelContext createCamelContext()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : $r2 = staticinvoke <org.apache.activemq.camel.component.ActiveMQComponent: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent(java.lang.String)>("vm://localhost?broker.persistent=false")
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : $r2 = staticinvoke <org.apache.activemq.camel.component.ActiveMQComponent: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent(java.lang.String)>("vm://localhost?broker.persistent=false") >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r1 = new org.apache.activemq.camel.component.ActiveMQComponent
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r1 = new org.apache.activemq.camel.component.ActiveMQComponent >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : specialinvoke $r1.<org.apache.activemq.camel.component.ActiveMQComponent: void <init>()>()
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : specialinvoke $r1.<org.apache.activemq.camel.component.ActiveMQComponent: void <init>()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : r2 = $r1
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : r2 = $r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r3 = virtualinvoke r2.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.camel.component.jms.JmsConfiguration getConfiguration()>()
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r3 = virtualinvoke r2.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.camel.component.jms.JmsConfiguration getConfiguration()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : $r1 = new org.apache.activemq.camel.component.ActiveMQConfiguration
org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : $r1 = new org.apache.activemq.camel.component.ActiveMQConfiguration >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : specialinvoke $r1.<org.apache.activemq.camel.component.ActiveMQConfiguration: void <init>()>()
org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : specialinvoke $r1.<org.apache.activemq.camel.component.ActiveMQConfiguration: void <init>()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : r2 = $r1
org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : r2 = $r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : virtualinvoke r2.<org.apache.activemq.camel.component.ActiveMQConfiguration: void setActiveMQComponent(org.apache.activemq.camel.component.ActiveMQComponent)>(r0)
org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : virtualinvoke r2.<org.apache.activemq.camel.component.ActiveMQConfiguration: void setActiveMQComponent(org.apache.activemq.camel.component.ActiveMQComponent)>(r0) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.setActiveMQComponent : r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent> = r1
org.apache.activemq.camel.component.ActiveMQConfiguration.setActiveMQComponent : r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent> = r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : return r2
org.apache.activemq.camel.component.ActiveMQComponent.createConfiguration : return r2 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $z0 = $r3 instanceof org.apache.activemq.camel.component.ActiveMQConfiguration
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $z0 = $r3 instanceof org.apache.activemq.camel.component.ActiveMQConfiguration >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : if $z0 == 0
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : if $z0 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r4 = virtualinvoke r2.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.camel.component.jms.JmsConfiguration getConfiguration()>()
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r4 = virtualinvoke r2.<org.apache.activemq.camel.component.ActiveMQComponent: org.apache.camel.component.jms.JmsConfiguration getConfiguration()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r5 = (org.apache.activemq.camel.component.ActiveMQConfiguration) $r4
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : $r5 = (org.apache.activemq.camel.component.ActiveMQConfiguration) $r4 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : virtualinvoke $r5.<org.apache.activemq.camel.component.ActiveMQConfiguration: void setBrokerURL(java.lang.String)>(r0)
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : virtualinvoke $r5.<org.apache.activemq.camel.component.ActiveMQConfiguration: void setBrokerURL(java.lang.String)>(r0) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.setBrokerURL : r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String brokerURL> = r1
org.apache.activemq.camel.component.ActiveMQConfiguration.setBrokerURL : r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String brokerURL> = r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : return r2
org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent : return r2 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : interfaceinvoke r1.<org.apache.camel.CamelContext: void addComponent(java.lang.String,org.apache.camel.Component)>("activemq", $r2)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : interfaceinvoke r1.<org.apache.camel.CamelContext: void addComponent(java.lang.String,org.apache.camel.Component)>("activemq", $r2) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : return r1
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createCamelContext : return r1 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createRouteBuilder : $r1 = new org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createRouteBuilder : $r1 = new org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createRouteBuilder : specialinvoke $r1.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2: void <init>(org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest)>(r0)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createRouteBuilder : specialinvoke $r1.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2: void <init>(org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest)>(r0) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createRouteBuilder : return $r1
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.createRouteBuilder : return $r1 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : $r1 = virtualinvoke r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2: org.apache.camel.model.RouteDefinition 'from'(java.lang.String)>("activemq:test.server")
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : $r1 = virtualinvoke r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2: org.apache.camel.model.RouteDefinition 'from'(java.lang.String)>("activemq:test.server") >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : $r2 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : $r2 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : $r3 = staticinvoke <org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer access$000(org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest)>($r2)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : $r3 = staticinvoke <org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer access$000(org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest)>($r2) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$000 : $r1 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer myBean>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$000 : $r1 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer myBean> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$000 : return $r1
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$000 : return $r1 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : virtualinvoke $r1.<org.apache.camel.model.RouteDefinition: org.apache.camel.model.ProcessorDefinition bean(java.lang.Object)>($r3)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$2.configure : virtualinvoke $r1.<org.apache.camel.model.RouteDefinition: org.apache.camel.model.ProcessorDefinition bean(java.lang.Object)>($r3) >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStart : specialinvoke r0.<org.apache.camel.component.jms.JmsComponent: void doStart()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStart : specialinvoke r0.<org.apache.camel.component.jms.JmsComponent: void doStart()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStart : $z0 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQComponent: boolean isExposeAllQueues()>()
org.apache.activemq.camel.component.ActiveMQComponent.doStart : $z0 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQComponent: boolean isExposeAllQueues()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.isExposeAllQueues : $z0 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: boolean exposeAllQueues>
org.apache.activemq.camel.component.ActiveMQComponent.isExposeAllQueues : $z0 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: boolean exposeAllQueues> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.isExposeAllQueues : return $z0
org.apache.activemq.camel.component.ActiveMQComponent.isExposeAllQueues : return $z0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.doStart : if $z0 == 0
org.apache.activemq.camel.component.ActiveMQComponent.doStart : if $z0 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : r3 = staticinvoke <org.apache.camel.util.IntrospectionSupport: java.util.Map extractProperties(java.util.Map,java.lang.String)>(r2, "destination.")
org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : r3 = staticinvoke <org.apache.camel.util.IntrospectionSupport: java.util.Map extractProperties(java.util.Map,java.lang.String)>(r2, "destination.") >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : r4 = staticinvoke <org.apache.camel.util.URISupport: java.lang.String createQueryString(java.util.Map)>(r3)
org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : r4 = staticinvoke <org.apache.camel.util.URISupport: java.lang.String createQueryString(java.util.Map)>(r3) >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : goto [?= $z0 = staticinvoke <org.apache.camel.util.ObjectHelper: boolean isNotEmpty(java.lang.Object)>(r4)]
org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : goto [?= $z0 = staticinvoke <org.apache.camel.util.ObjectHelper: boolean isNotEmpty(java.lang.Object)>(r4)] >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : $z0 = staticinvoke <org.apache.camel.util.ObjectHelper: boolean isNotEmpty(java.lang.Object)>(r4)
org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : $z0 = staticinvoke <org.apache.camel.util.ObjectHelper: boolean isNotEmpty(java.lang.Object)>(r4) >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : if $z0 == 0
org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : if $z0 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : return r1
org.apache.activemq.camel.component.ActiveMQComponent.convertPathToActualDestination : return r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r1 = new org.apache.activemq.spring.ActiveMQConnectionFactory
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r1 = new org.apache.activemq.spring.ActiveMQConnectionFactory >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : specialinvoke $r1.<org.apache.activemq.spring.ActiveMQConnectionFactory: void <init>()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : specialinvoke $r1.<org.apache.activemq.spring.ActiveMQConnectionFactory: void <init>()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : r2 = $r1
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : r2 = $r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r4 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String userName>
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r4 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String userName> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r4 == null
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r4 == null >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r6 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String password>
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r6 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String password> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r6 == null
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r6 == null >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r8 = virtualinvoke r2.<org.apache.activemq.spring.ActiveMQConnectionFactory: java.lang.String getBeanName()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r8 = virtualinvoke r2.<org.apache.activemq.spring.ActiveMQConnectionFactory: java.lang.String getBeanName()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r8 != null
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r8 != null >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : virtualinvoke r2.<org.apache.activemq.spring.ActiveMQConnectionFactory: void setBeanName(java.lang.String)>("Camel")
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : virtualinvoke r2.<org.apache.activemq.spring.ActiveMQConnectionFactory: void setBeanName(java.lang.String)>("Camel") >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r9 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String getBrokerURL()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r9 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String getBrokerURL()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.getBrokerURL : $r1 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String brokerURL>
org.apache.activemq.camel.component.ActiveMQConfiguration.getBrokerURL : $r1 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.String brokerURL> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.getBrokerURL : return $r1
org.apache.activemq.camel.component.ActiveMQConfiguration.getBrokerURL : return $r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : virtualinvoke r2.<org.apache.activemq.spring.ActiveMQConnectionFactory: void setBrokerURL(java.lang.String)>($r9)
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : virtualinvoke r2.<org.apache.activemq.spring.ActiveMQConnectionFactory: void setBrokerURL(java.lang.String)>($r9) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $z0 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean isUseSingleConnection()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $z0 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean isUseSingleConnection()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.isUseSingleConnection : $z0 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean useSingleConnection>
org.apache.activemq.camel.component.ActiveMQConfiguration.isUseSingleConnection : $z0 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean useSingleConnection> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.isUseSingleConnection : return $z0
org.apache.activemq.camel.component.ActiveMQConfiguration.isUseSingleConnection : return $z0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $z0 == 0
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $z0 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $z1 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean isUsePooledConnection()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $z1 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean isUsePooledConnection()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.isUsePooledConnection : $z0 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean usePooledConnection>
org.apache.activemq.camel.component.ActiveMQConfiguration.isUsePooledConnection : $z0 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: boolean usePooledConnection> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.isUsePooledConnection : return $z0
org.apache.activemq.camel.component.ActiveMQConfiguration.isUsePooledConnection : return $z0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $z1 == 0
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $z1 == 0 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : r13 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: javax.jms.ConnectionFactory createPooledConnectionFactory(org.apache.activemq.spring.ActiveMQConnectionFactory)>(r2)
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : r13 = virtualinvoke r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: javax.jms.ConnectionFactory createPooledConnectionFactory(org.apache.activemq.spring.ActiveMQConnectionFactory)>(r2) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : r2 = staticinvoke <org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>("org.apache.activemq.pool.PooledConnectionFactory", $r5)
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : r2 = staticinvoke <org.apache.activemq.camel.component.ActiveMQConfiguration: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>("org.apache.activemq.pool.PooledConnectionFactory", $r5) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : if r3 == null
org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : if r3 == null >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : $r6 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0)
org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : $r6 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : return $r6
org.apache.activemq.camel.component.ActiveMQConfiguration.loadClass : return $r6 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r6 = newarray (java.lang.Class)[1]
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r6 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r6[0] = class "org/apache/activemq/ActiveMQConnectionFactory"
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r6[0] = class "org/apache/activemq/ActiveMQConnectionFactory" >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6)
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r7 = newarray (java.lang.Object)[1]
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r7 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r7[0] = r1
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r7[0] = r1 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7)
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r8 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r9 = (javax.jms.ConnectionFactory) $r8
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : $r9 = (javax.jms.ConnectionFactory) $r8 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : return $r9
org.apache.activemq.camel.component.ActiveMQConfiguration.createPooledConnectionFactory : return $r9 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r14 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent>
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r14 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r14 == null
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : if $r14 == null >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r15 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent>
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r15 = r0.<org.apache.activemq.camel.component.ActiveMQConfiguration: org.apache.activemq.camel.component.ActiveMQComponent activeMQComponent> >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r16 = (org.apache.activemq.Service) r13
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : $r16 = (org.apache.activemq.Service) r13 >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : virtualinvoke $r15.<org.apache.activemq.camel.component.ActiveMQComponent: void addPooledConnectionFactoryService(org.apache.activemq.Service)>($r16)
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : virtualinvoke $r15.<org.apache.activemq.camel.component.ActiveMQComponent: void addPooledConnectionFactoryService(org.apache.activemq.Service)>($r16) >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.addPooledConnectionFactoryService : $r2 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList pooledConnectionFactoryServiceList>
org.apache.activemq.camel.component.ActiveMQComponent.addPooledConnectionFactoryService : $r2 = r0.<org.apache.activemq.camel.component.ActiveMQComponent: java.util.concurrent.CopyOnWriteArrayList pooledConnectionFactoryServiceList> >>>>>>>> org.apache.activemq.camel.component.ActiveMQComponent.addPooledConnectionFactoryService : virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1)
org.apache.activemq.camel.component.ActiveMQComponent.addPooledConnectionFactoryService : virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : return r13
org.apache.activemq.camel.component.ActiveMQConfiguration.createConnectionFactory : return r13 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r3 = interfaceinvoke r1.<org.apache.camel.Exchange: org.apache.camel.Message getIn()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r3 = interfaceinvoke r1.<org.apache.camel.Exchange: org.apache.camel.Message getIn()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke $r3.<org.apache.camel.Message: void setBody(java.lang.Object)>("James")
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke $r3.<org.apache.camel.Message: void setBody(java.lang.Object)>("James") >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r4 = new java.util.HashMap
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r4 = new java.util.HashMap >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : r2 = $r4
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : r2 = $r4 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(123)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(123) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cheese", $r5)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cheese", $r5) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r7 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r7 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r8 = $r7.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: java.lang.String replyQueueName>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r8 = $r7.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: java.lang.String replyQueueName> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JMSReplyTo", $r8)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JMSReplyTo", $r8) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r10 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r10 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r11 = $r10.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: java.lang.Object correlationID>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r11 = $r10.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: java.lang.Object correlationID> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JMSCorrelationID", $r11)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JMSCorrelationID", $r11) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r13 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r13 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1: org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest this$0> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r14 = $r13.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: java.lang.Object groupID>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r14 = $r13.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: java.lang.Object groupID> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JMSXGroupID", $r14)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JMSXGroupID", $r14) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r16 = interfaceinvoke r1.<org.apache.camel.Exchange: org.apache.camel.Message getIn()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : $r16 = interfaceinvoke r1.<org.apache.camel.Exchange: org.apache.camel.Message getIn()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke $r16.<org.apache.camel.Message: void setHeaders(java.util.Map)>(r2)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$1.process : interfaceinvoke $r16.<org.apache.camel.Message: void setHeaders(java.util.Map)>(r2) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer: java.util.Map headers> = r1
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer: java.util.Map headers> = r1 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r3 = staticinvoke <org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.slf4j.Logger access$100()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r3 = staticinvoke <org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$100 : $r0 = <org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.slf4j.Logger LOG>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$100 : $r0 = <org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$100 : return $r0
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest.access$100 : return $r0 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r4 = new java.lang.StringBuilder
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("process() invoked with headers: ")
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("process() invoked with headers: ") >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r7)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r7) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r8 = new java.lang.StringBuilder
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hello ")
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hello ") >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : return $r11
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.process : return $r11 >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.getHeaders : $r1 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer: java.util.Map headers>
org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.getHeaders : $r1 = r0.<org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer: java.util.Map headers> >>>>>>>> org.apache.activemq.camel.component.InvokeRequestReplyUsingJmsReplyToHeaderTest$MyServer.getHeaders : return $r1
