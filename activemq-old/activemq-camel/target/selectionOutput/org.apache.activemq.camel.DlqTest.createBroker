org.apache.activemq.camel.DlqTest.createBroker : $r1 = new org.apache.activemq.broker.BrokerService >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : specialinvoke $r1.<org.apache.activemq.broker.BrokerService: void <init>()>()
org.apache.activemq.camel.DlqTest.createBroker : specialinvoke $r1.<org.apache.activemq.broker.BrokerService: void <init>()>() >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : r2 = $r1
org.apache.activemq.camel.DlqTest.createBroker : r2 = $r1 >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDeleteAllMessagesOnStartup(boolean)>(z0)
org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDeleteAllMessagesOnStartup(boolean)>(z0) >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setBrokerName(java.lang.String)>("testDlq")
org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setBrokerName(java.lang.String)>("testDlq") >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setAdvisorySupport(boolean)>(0)
org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setAdvisorySupport(boolean)>(0) >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDataDirectory(java.lang.String)>("target/data")
org.apache.activemq.camel.DlqTest.createBroker : virtualinvoke r2.<org.apache.activemq.broker.BrokerService: void setDataDirectory(java.lang.String)>("target/data") >>>>>>>> org.apache.activemq.camel.DlqTest.createBroker : return r2
