crystal.client.ConflictClient.close : $z0 = <crystal.client.ConflictSystemTray: boolean TRAY_SUPPORTED> >>>>>>>> crystal.client.ConflictClient.close : if $z0 == 0
crystal.client.ConflictClient.close : if $z0 == 0 >>>>>>>> crystal.client.ConflictClient.close : $r1 = r0.<crystal.client.ConflictClient: javax.swing.JFrame _frame>
crystal.client.ConflictClient.close : if $z0 == 0 >>>>>>>> crystal.client.ConflictClient.close : $r2 = staticinvoke <crystal.client.ConflictSystemTray: crystal.client.ConflictSystemTray getInstance()>()
crystal.client.ConflictClient.close : $r2 = staticinvoke <crystal.client.ConflictSystemTray: crystal.client.ConflictSystemTray getInstance()>() >>>>>>>> crystal.client.ConflictClient.close : virtualinvoke $r2.<crystal.client.ConflictSystemTray: void exitAction()>()
crystal.client.ConflictClient.close : virtualinvoke $r2.<crystal.client.ConflictSystemTray: void exitAction()>() >>>>>>>> crystal.client.ConflictClient.close : return
crystal.client.ConflictClient.close : $r1 = r0.<crystal.client.ConflictClient: javax.swing.JFrame _frame> >>>>>>>> crystal.client.ConflictClient.close : virtualinvoke $r1.<javax.swing.JFrame: void setVisible(boolean)>(0)
crystal.client.ConflictClient.close : virtualinvoke $r1.<javax.swing.JFrame: void setVisible(boolean)>(0) >>>>>>>> crystal.client.ConflictClient.close : goto [?= return]
crystal.client.ConflictClient.close : goto [?= return] >>>>>>>> crystal.client.ConflictClient.close : return
