crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r9 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r9 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
crystal.server.AbstractStateChecker.createLocalRepository : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone")
crystal.server.AbstractStateChecker.createLocalRepository : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r12 = new java.util.ArrayList
crystal.server.AbstractStateChecker.createLocalRepository : $r12 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r12.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r12.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r6 = $r12
crystal.server.AbstractStateChecker.createLocalRepository : r6 = $r12 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("clone")
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("clone") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null
crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("--remotecmd")
crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r17 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r17 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.createLocalRepository : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r24 = newarray (java.lang.String)[0]
crystal.server.AbstractStateChecker.createLocalRepository : $r24 = newarray (java.lang.String)[0] >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r25 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24)
crystal.server.AbstractStateChecker.createLocalRepository : $r25 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r26 = (java.lang.String[]) $r25
crystal.server.AbstractStateChecker.createLocalRepository : $r26 = (java.lang.String[]) $r25 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, $r26, r3, 0)
crystal.server.AbstractStateChecker.createLocalRepository : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, $r26, r3, 0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $z5 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("git")
crystal.server.AbstractStateChecker.createLocalRepository : $z5 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("git") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if $z5 == 0
crystal.server.AbstractStateChecker.createLocalRepository : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r27 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.createLocalRepository : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r46 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r46 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $i1 = virtualinvoke $r46.<java.lang.String: int indexOf(java.lang.String)>("updating to branch")
crystal.server.AbstractStateChecker.createLocalRepository : $i1 = virtualinvoke $r46.<java.lang.String: int indexOf(java.lang.String)>("updating to branch") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if $i1 >= 0
crystal.server.AbstractStateChecker.createLocalRepository : if $i1 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r47 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.createLocalRepository : if $i1 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : return
crystal.server.AbstractStateChecker.createLocalRepository : $r47 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $i2 = virtualinvoke $r47.<java.lang.String: int indexOf(java.lang.String)>("done.")
crystal.server.AbstractStateChecker.createLocalRepository : $i2 = virtualinvoke $r47.<java.lang.String: int indexOf(java.lang.String)>("done.") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if $i2 >= 0
crystal.server.AbstractStateChecker.createLocalRepository : if $i2 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r48 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : if $i2 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : return
crystal.server.AbstractStateChecker.createLocalRepository : $r48 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r48.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r48.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crystal tried to execute command:\n\"")
crystal.server.AbstractStateChecker.createLocalRepository : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crystal tried to execute command:\n\"") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
crystal.server.AbstractStateChecker.createLocalRepository : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone ")
crystal.server.AbstractStateChecker.createLocalRepository : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\nfrom \"")
crystal.server.AbstractStateChecker.createLocalRepository : $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\nfrom \"") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
crystal.server.AbstractStateChecker.createLocalRepository : $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\nbut got the unexpected output:\n")
crystal.server.AbstractStateChecker.createLocalRepository : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\nbut got the unexpected output:\n") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r58 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r58 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)
crystal.server.AbstractStateChecker.createLocalRepository : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r8 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r8 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r60 = new crystal.server.AbstractStateChecker$OperationException
crystal.server.AbstractStateChecker.createLocalRepository : $r60 = new crystal.server.AbstractStateChecker$OperationException >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r61 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r61 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r60.<crystal.server.AbstractStateChecker$OperationException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r8, r3, $r61)
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r60.<crystal.server.AbstractStateChecker$OperationException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r8, r3, $r61) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : throw $r60
crystal.server.AbstractStateChecker.createLocalRepository : $r27 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r27.<org.apache.log4j.Logger: void info(java.lang.Object)>("create local repository")
crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r27.<org.apache.log4j.Logger: void info(java.lang.Object)>("create local repository") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r28 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.createLocalRepository : $r28 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r29 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r29 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r29.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run command: ")
crystal.server.AbstractStateChecker.createLocalRepository : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run command: ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23)
crystal.server.AbstractStateChecker.createLocalRepository : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r28.<org.apache.log4j.Logger: void info(java.lang.Object)>($r32)
crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r28.<org.apache.log4j.Logger: void info(java.lang.Object)>($r32) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r33 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.createLocalRepository : $r33 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r34 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r34 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("output: ")
crystal.server.AbstractStateChecker.createLocalRepository : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("output: ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r36 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r36 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36)
crystal.server.AbstractStateChecker.createLocalRepository : $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r33.<org.apache.log4j.Logger: void info(java.lang.Object)>($r38)
crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r33.<org.apache.log4j.Logger: void info(java.lang.Object)>($r38) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r39 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getError()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r39 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getError()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $i0 = virtualinvoke $r39.<java.lang.String: int length()>()
crystal.server.AbstractStateChecker.createLocalRepository : $i0 = virtualinvoke $r39.<java.lang.String: int length()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if $i0 <= 0
crystal.server.AbstractStateChecker.createLocalRepository : if $i0 <= 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r40 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.createLocalRepository : if $i0 <= 0 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r46 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r40 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r41 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r41 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r41.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error: ")
crystal.server.AbstractStateChecker.createLocalRepository : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error: ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r43 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getError()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r43 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getError()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43)
crystal.server.AbstractStateChecker.createLocalRepository : $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r40.<org.apache.log4j.Logger: void info(java.lang.Object)>($r45)
crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r40.<org.apache.log4j.Logger: void info(java.lang.Object)>($r45) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r46 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("--remotecmd") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r4)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r13 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r13 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.createLocalRepository : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --remotecmd ")
crystal.server.AbstractStateChecker.createLocalRepository : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --remotecmd ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
crystal.server.AbstractStateChecker.createLocalRepository : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1)
