crystal.server.AbstractStateChecker.getLocalState : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r11.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r11.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0
crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n0 = null
crystal.server.AbstractStateChecker.getLocalState : n0 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r12 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r12 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r12.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r12.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2)
crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r13 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint>
crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z2 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14)
crystal.server.AbstractStateChecker.getLocalState : $z2 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z2 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r13 = <crystal.server.GitLogParser: java.util.Map gitCheckpoint>
crystal.server.AbstractStateChecker.getLocalState : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : r13 = <crystal.server.GitLogParser: java.util.Map gitCheckpoint> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null]
crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n1 = null
crystal.server.AbstractStateChecker.getLocalState : n1 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r15 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r15 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r15)
crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r15) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r16 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r18 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r18 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z4 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r18)
crystal.server.AbstractStateChecker.getLocalState : $z4 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r18) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z4 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : if $z4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : $r19 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r17 = virtualinvoke $r19.<crystal.client.ClientPreferences: java.lang.String getGitPath()>()
crystal.server.AbstractStateChecker.getLocalState : r17 = virtualinvoke $r19.<crystal.client.ClientPreferences: java.lang.String getGitPath()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r3 = virtualinvoke $r20.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.server.AbstractStateChecker.getLocalState : r3 = virtualinvoke $r20.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r21 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r21)
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r21) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r21) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r35 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r21) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r35 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r35 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke $r23.<crystal.model.DataSource: java.lang.String getRemoteCmd()>()
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke $r23.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke $r23.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r35 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r24 = virtualinvoke $r23.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>()
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r35 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : $r25 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r22, r17, r4, r3, $r24, "your own", $r25)
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r22, r17, r4, r3, $r24, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r26 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r22, r17, r4, r3, $r24, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r35 := @caughtexception
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r22, r17, r4, r3, $r24, "your own", $r25) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r45 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r45 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r45 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getLocalState : $r45 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r45.<org.apache.log4j.Logger: void info(java.lang.Object)>("successfully update local repository and check cache error in get local state")
crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r45.<org.apache.log4j.Logger: void info(java.lang.Object)>("successfully update local repository and check cache error in get local state") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r46 = newarray (java.lang.String)[3]
crystal.server.AbstractStateChecker.getLocalState : $r46 = newarray (java.lang.String)[3] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r46[0] = "log"
crystal.server.AbstractStateChecker.getLocalState : $r46[0] = "log" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r46[1] = "-r"
crystal.server.AbstractStateChecker.getLocalState : $r46[1] = "-r" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r46[2] = "0:tip"
crystal.server.AbstractStateChecker.getLocalState : $r46[2] = "0:tip" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r47 = $r46
crystal.server.AbstractStateChecker.getLocalState : r47 = $r46 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r48 = newarray (java.lang.String)[2]
crystal.server.AbstractStateChecker.getLocalState : $r48 = newarray (java.lang.String)[2] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r48[0] = "log"
crystal.server.AbstractStateChecker.getLocalState : $r48[0] = "log" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r48[1] = "--reverse"
crystal.server.AbstractStateChecker.getLocalState : $r48[1] = "--reverse" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r6 = $r48
crystal.server.AbstractStateChecker.getLocalState : r6 = $r48 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r49 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r49 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z5 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r49)
crystal.server.AbstractStateChecker.getLocalState : $z5 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r49) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z5 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r47, r4, 0)
crystal.server.AbstractStateChecker.getLocalState : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r50 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r50 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z6 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r50)
crystal.server.AbstractStateChecker.getLocalState : $z6 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r50) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z6 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z6 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r6, r4, 0)
crystal.server.AbstractStateChecker.getLocalState : if $z6 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r7 = null
crystal.server.AbstractStateChecker.getLocalState : r7 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r52 = new crystal.model.RevisionHistory
crystal.server.AbstractStateChecker.getLocalState : $r52 = new crystal.model.RevisionHistory >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r53 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getLocalState : $r53 = virtualinvoke r7.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r52.<crystal.model.RevisionHistory: void <init>(java.lang.String,crystal.model.DataSource$RepoKind)>($r53, r1)
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r52.<crystal.model.RevisionHistory: void <init>(java.lang.String,crystal.model.DataSource$RepoKind)>($r53, r1) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r51.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>($r52)
crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r51.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>($r52) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r54 = new java.io.File
crystal.server.AbstractStateChecker.getLocalState : $r54 = new java.io.File >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r55 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r55 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r56 = virtualinvoke $r55.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.server.AbstractStateChecker.getLocalState : $r56 = virtualinvoke $r55.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r54.<java.io.File: void <init>(java.lang.String)>($r56)
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r54.<java.io.File: void <init>(java.lang.String)>($r56) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z7 = virtualinvoke $r54.<java.io.File: boolean exists()>()
crystal.server.AbstractStateChecker.getLocalState : $z7 = virtualinvoke $r54.<java.io.File: boolean exists()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z7 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z7 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r57 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : if $z7 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r68 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : $r68 = newarray (java.lang.String)[1] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r68[0] = "heads"
crystal.server.AbstractStateChecker.getLocalState : $r68[0] = "heads" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r69 = $r68
crystal.server.AbstractStateChecker.getLocalState : r69 = $r68 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r70 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r69, r4, 0)
crystal.server.AbstractStateChecker.getLocalState : r70 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r69, r4, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z12 = staticinvoke <crystal.server.AbstractStateChecker: boolean hasTwoHeads(crystal.util.RunIt$Output,java.util.Map)>(r70, r13)
crystal.server.AbstractStateChecker.getLocalState : $z12 = staticinvoke <crystal.server.AbstractStateChecker: boolean hasTwoHeads(crystal.util.RunIt$Output,java.util.Map)>(r70, r13) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z12 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z12 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r71 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : if $z12 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r75 = <crystal.model.LocalStateResult: java.lang.String ALL_CLEAR>
crystal.server.AbstractStateChecker.getLocalState : $r75 = <crystal.model.LocalStateResult: java.lang.String ALL_CLEAR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r75
crystal.server.AbstractStateChecker.getLocalState : $r71 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z13 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r71)
crystal.server.AbstractStateChecker.getLocalState : $z13 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r71) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z13 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z13 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r72 = <crystal.model.LocalStateResult: java.lang.String HG_MUST_RESOLVE>
crystal.server.AbstractStateChecker.getLocalState : if $z13 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r73 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r73 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z14 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r73)
crystal.server.AbstractStateChecker.getLocalState : $z14 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r73) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z14 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z14 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r74 = <crystal.model.LocalStateResult: java.lang.String GIT_MUST_RESOLVE>
crystal.server.AbstractStateChecker.getLocalState : if $z14 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r75 = <crystal.model.LocalStateResult: java.lang.String ALL_CLEAR>
crystal.server.AbstractStateChecker.getLocalState : $r74 = <crystal.model.LocalStateResult: java.lang.String GIT_MUST_RESOLVE> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r74
crystal.server.AbstractStateChecker.getLocalState : $r72 = <crystal.model.LocalStateResult: java.lang.String HG_MUST_RESOLVE> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r72
crystal.server.AbstractStateChecker.getLocalState : $r57 = newarray (java.lang.String)[1] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r57[0] = "status"
crystal.server.AbstractStateChecker.getLocalState : $r57[0] = "status" >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r8 = $r57
crystal.server.AbstractStateChecker.getLocalState : r8 = $r57 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r58 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r58 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r59 = virtualinvoke $r58.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.server.AbstractStateChecker.getLocalState : $r59 = virtualinvoke $r58.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r60 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r8, $r59, 0)
crystal.server.AbstractStateChecker.getLocalState : r60 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r8, $r59, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r61 = new java.util.StringTokenizer
crystal.server.AbstractStateChecker.getLocalState : $r61 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r62 = virtualinvoke r60.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getLocalState : $r62 = virtualinvoke r60.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r63 = virtualinvoke $r62.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractStateChecker.getLocalState : $r63 = virtualinvoke $r62.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r61.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r63, "\n")
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r61.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r63, "\n") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r9 = $r61
crystal.server.AbstractStateChecker.getLocalState : r9 = $r61 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z8 = virtualinvoke r9.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractStateChecker.getLocalState : $z8 = virtualinvoke r9.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z8 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r10 = virtualinvoke r9.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractStateChecker.getLocalState : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r68 = newarray (java.lang.String)[1]
crystal.server.AbstractStateChecker.getLocalState : r10 = virtualinvoke r9.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z9 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("?")
crystal.server.AbstractStateChecker.getLocalState : $z9 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("?") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z9 != 0
crystal.server.AbstractStateChecker.getLocalState : if $z9 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r64 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : if $z9 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $z8 = virtualinvoke r9.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $z8 = virtualinvoke r9.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z8 = virtualinvoke r9.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractStateChecker.getLocalState : $r64 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z10 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r64)
crystal.server.AbstractStateChecker.getLocalState : $z10 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r64) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z10 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z10 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r65 = <crystal.model.LocalStateResult: java.lang.String HG_UNCHECKPOINTED>
crystal.server.AbstractStateChecker.getLocalState : if $z10 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r66 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getLocalState : $r66 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z11 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r66)
crystal.server.AbstractStateChecker.getLocalState : $z11 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r66) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z11 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z11 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r67 = <crystal.model.LocalStateResult: java.lang.String GIT_UNCHECKPOINTED>
crystal.server.AbstractStateChecker.getLocalState : if $z11 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return null
crystal.server.AbstractStateChecker.getLocalState : $r67 = <crystal.model.LocalStateResult: java.lang.String GIT_UNCHECKPOINTED> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r67
crystal.server.AbstractStateChecker.getLocalState : $r65 = <crystal.model.LocalStateResult: java.lang.String HG_UNCHECKPOINTED> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r65
crystal.server.AbstractStateChecker.getLocalState : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r6, r4, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r17, r47, r4, 0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r51 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : r36 = $r35 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r37 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getLocalState : $r37 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r37.<org.apache.log4j.Logger: void info(java.lang.Object)>("failed to update local repository and check cache error in get local state")
crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r37.<org.apache.log4j.Logger: void info(java.lang.Object)>("failed to update local repository and check cache error in get local state") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r38 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getLocalState : $r38 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r38.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r38.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r39 = <crystal.model.LocalStateResult: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getLocalState : $r39 = <crystal.model.LocalStateResult: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39)
crystal.server.AbstractStateChecker.getLocalState : $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getLocalState : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r42 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getLocalState : $r42 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42)
crystal.server.AbstractStateChecker.getLocalState : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getLocalState : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r44
crystal.server.AbstractStateChecker.getLocalState : r5 = $r26 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r27 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getLocalState : $r27 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r27.<org.apache.log4j.Logger: void info(java.lang.Object)>("failed to update local repository and check cache error in get local state")
crystal.server.AbstractStateChecker.getLocalState : virtualinvoke $r27.<org.apache.log4j.Logger: void info(java.lang.Object)>("failed to update local repository and check cache error in get local state") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r28 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getLocalState : $r28 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getLocalState : specialinvoke $r28.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r29 = <crystal.model.LocalStateResult: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getLocalState : $r29 = <crystal.model.LocalStateResult: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
crystal.server.AbstractStateChecker.getLocalState : $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getLocalState : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r32 = virtualinvoke r5.<crystal.server.AbstractStateChecker$OperationException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getLocalState : $r32 = virtualinvoke r5.<crystal.server.AbstractStateChecker$OperationException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)
crystal.server.AbstractStateChecker.getLocalState : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getLocalState : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : return $r34
crystal.server.AbstractStateChecker.getLocalState : $r16 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r17 = virtualinvoke $r16.<crystal.client.ClientPreferences: java.lang.String getHgPath()>()
crystal.server.AbstractStateChecker.getLocalState : r17 = virtualinvoke $r16.<crystal.client.ClientPreferences: java.lang.String getHgPath()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getLocalState : goto [?= $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r20 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : r13 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null]
crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n1 = null
