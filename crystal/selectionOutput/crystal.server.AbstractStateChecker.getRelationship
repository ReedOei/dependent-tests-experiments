crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r22 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : $r22 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r22.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..)")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r22.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..)") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z0 = virtualinvoke $r23.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getRelationship : $z0 = virtualinvoke $r23.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z0 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z0 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z1 = virtualinvoke r1.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getRelationship : if $z0 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return null
crystal.server.AbstractStateChecker.getRelationship : $z1 = virtualinvoke r1.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z1 != 0
crystal.server.AbstractStateChecker.getRelationship : if $z1 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return null
crystal.server.AbstractStateChecker.getRelationship : if $z1 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r24 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r24)
crystal.server.AbstractStateChecker.getRelationship : r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r24) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r5 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>(r1)
crystal.server.AbstractStateChecker.getRelationship : r5 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : n0 = null
crystal.server.AbstractStateChecker.getRelationship : n0 = null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r25 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getRelationship : $r25 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z2 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r25)
crystal.server.AbstractStateChecker.getRelationship : $z2 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r25) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z2 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r26 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getRelationship : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r28 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r28 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z3 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r28)
crystal.server.AbstractStateChecker.getRelationship : $z3 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r28) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z3 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r29 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getRelationship : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return null
crystal.server.AbstractStateChecker.getRelationship : $r29 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r27 = virtualinvoke $r29.<crystal.client.ClientPreferences: java.lang.String getGitPath()>()
crystal.server.AbstractStateChecker.getRelationship : r27 = virtualinvoke $r29.<crystal.client.ClientPreferences: java.lang.String getGitPath()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getRelationship : $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r6 = virtualinvoke $r30.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.server.AbstractStateChecker.getRelationship : r6 = virtualinvoke $r30.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r31 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r31 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tempMine_")
crystal.server.AbstractStateChecker.getRelationship : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tempMine_") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r33 = staticinvoke <crystal.util.TimeUtility: java.lang.String getCurrentLSMRDateString()>()
crystal.server.AbstractStateChecker.getRelationship : $r33 = staticinvoke <crystal.util.TimeUtility: java.lang.String getCurrentLSMRDateString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33)
crystal.server.AbstractStateChecker.getRelationship : $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r7 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : r7 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r38 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r7 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r48 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r7 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r35 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getRemoteCmd()>()
crystal.server.AbstractStateChecker.getRelationship : $r35 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r38 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r35 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r48 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r35 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r36 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.server.AbstractStateChecker.getRelationship : $r36 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r38 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r36 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r48 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r36 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r37 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>()
crystal.server.AbstractStateChecker.getRelationship : $r37 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r38 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r37 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r48 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r37 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r27, r5, r6, $r35, $r36, $r37)
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r27, r5, r6, $r35, $r36, $r37) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r38 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r27, r5, r6, $r35, $r36, $r37) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r48 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r27, r5, r6, $r35, $r36, $r37) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r59 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>]
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r59 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r59 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r59 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z6 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r59)
crystal.server.AbstractStateChecker.getRelationship : $z6 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r59) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z6 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z6 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r60 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z6 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r61 = newarray (java.lang.String)[3]
crystal.server.AbstractStateChecker.getRelationship : $r61 = newarray (java.lang.String)[3] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r61[0] = "log"
crystal.server.AbstractStateChecker.getRelationship : $r61[0] = "log" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r61[1] = "-r"
crystal.server.AbstractStateChecker.getRelationship : $r61[1] = "-r" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r61[2] = "0:tip"
crystal.server.AbstractStateChecker.getRelationship : $r61[2] = "0:tip" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r62 = $r61
crystal.server.AbstractStateChecker.getRelationship : r62 = $r61 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r63 = newarray (java.lang.String)[2]
crystal.server.AbstractStateChecker.getRelationship : $r63 = newarray (java.lang.String)[2] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r63[0] = "log"
crystal.server.AbstractStateChecker.getRelationship : $r63[0] = "log" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r63[1] = "--reverse"
crystal.server.AbstractStateChecker.getRelationship : $r63[1] = "--reverse" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r9 = $r63
crystal.server.AbstractStateChecker.getRelationship : r9 = $r63 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r10 = null
crystal.server.AbstractStateChecker.getRelationship : r10 = null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r64 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getRelationship : r10 = null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r11 = $r66 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r67 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r67 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r67.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r67.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r68 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r68 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68)
crystal.server.AbstractStateChecker.getRelationship : $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t get the log: ")
crystal.server.AbstractStateChecker.getRelationship : $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t get the log: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r71 = virtualinvoke r11.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r71 = virtualinvoke r11.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71)
crystal.server.AbstractStateChecker.getRelationship : $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r73
crystal.server.AbstractStateChecker.getRelationship : $r64 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z7 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r64)
crystal.server.AbstractStateChecker.getRelationship : $r64 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $z7 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r64) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z7 == 0
crystal.server.AbstractStateChecker.getRelationship : $z7 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r64) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if $z7 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r10 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r62, r5, 0)
crystal.server.AbstractStateChecker.getRelationship : if $z7 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r65 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : if $z7 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r65 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z8 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r65)
crystal.server.AbstractStateChecker.getRelationship : $r65 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $z8 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r65) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z8 == 0
crystal.server.AbstractStateChecker.getRelationship : $z8 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r65) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r10 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r9, r5, 0)
crystal.server.AbstractStateChecker.getRelationship : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r74 = new crystal.model.RevisionHistory]
crystal.server.AbstractStateChecker.getRelationship : if $z8 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r74 = new crystal.model.RevisionHistory] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r74 = new crystal.model.RevisionHistory
crystal.server.AbstractStateChecker.getRelationship : $r74 = new crystal.model.RevisionHistory >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r75 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r75 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r74.<crystal.model.RevisionHistory: void <init>(java.lang.String,crystal.model.DataSource$RepoKind)>($r75, r3)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r74.<crystal.model.RevisionHistory: void <init>(java.lang.String,crystal.model.DataSource$RepoKind)>($r75, r3) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r76 = $r74
crystal.server.AbstractStateChecker.getRelationship : r76 = $r74 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r77 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r77 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z9 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r77)
crystal.server.AbstractStateChecker.getRelationship : $z9 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r77) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z9 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z9 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r78 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z9 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke r1.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>(r76)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke r1.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>(r76) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r84 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r84 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r12 = virtualinvoke $r84.<crystal.model.DataSource: crystal.model.RevisionHistory getHistory()>()
crystal.server.AbstractStateChecker.getRelationship : r12 = virtualinvoke $r84.<crystal.model.DataSource: crystal.model.RevisionHistory getHistory()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if r12 != null
crystal.server.AbstractStateChecker.getRelationship : if r12 != null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r85 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : if r12 != null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r90 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r90 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z10 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r90)
crystal.server.AbstractStateChecker.getRelationship : $z10 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r90) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z10 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z10 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r91 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z10 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z11 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean equals(java.lang.Object)>(r76)
crystal.server.AbstractStateChecker.getRelationship : $z11 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean equals(java.lang.Object)>(r76) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z11 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z11 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r97 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : if $z11 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z13 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean superHistory(crystal.model.RevisionHistory)>(r76)
crystal.server.AbstractStateChecker.getRelationship : $z13 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean superHistory(crystal.model.RevisionHistory)>(r76) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z13 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z13 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r108 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : if $z13 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z15 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean subHistory(crystal.model.RevisionHistory)>(r76)
crystal.server.AbstractStateChecker.getRelationship : $z15 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean subHistory(crystal.model.RevisionHistory)>(r76) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z15 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z15 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r119 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : if $z15 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r130 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r130 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z17 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r130)
crystal.server.AbstractStateChecker.getRelationship : $z17 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r130) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z17 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z17 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r131 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z17 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r140 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r140 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z18 = virtualinvoke $r140.<crystal.model.DataSource: boolean hasHistoryChanged()>()
crystal.server.AbstractStateChecker.getRelationship : $z18 = virtualinvoke $r140.<crystal.model.DataSource: boolean hasHistoryChanged()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z18 != 0
crystal.server.AbstractStateChecker.getRelationship : if $z18 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z19 = virtualinvoke r1.<crystal.model.DataSource: boolean hasHistoryChanged()>()
crystal.server.AbstractStateChecker.getRelationship : if $z18 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r143 = newarray (java.lang.String)[3]
crystal.server.AbstractStateChecker.getRelationship : $r143 = newarray (java.lang.String)[3] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r143[0] = "clone"
crystal.server.AbstractStateChecker.getRelationship : $r143[0] = "clone" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r143[1] = r4
crystal.server.AbstractStateChecker.getRelationship : $r143[1] = r4 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r143[2] = r7
crystal.server.AbstractStateChecker.getRelationship : $r143[2] = r7 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r13 = $r143
crystal.server.AbstractStateChecker.getRelationship : r13 = $r143 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r13, r6, 0)
crystal.server.AbstractStateChecker.getRelationship : r13 = $r143 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r144 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r15 = $r144 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r145 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r145 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r145.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r145.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r146 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r146 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r147 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146)
crystal.server.AbstractStateChecker.getRelationship : $r147 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t make a temp clone: ")
crystal.server.AbstractStateChecker.getRelationship : $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t make a temp clone: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r149 = virtualinvoke r15.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r149 = virtualinvoke r15.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r150 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r149)
crystal.server.AbstractStateChecker.getRelationship : $r150 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r149) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r151
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r13, r6, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r152 = newarray (java.lang.String)[2]]
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r13, r6, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r144 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r152 = newarray (java.lang.String)[2]] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r152 = newarray (java.lang.String)[2]
crystal.server.AbstractStateChecker.getRelationship : $r152 = newarray (java.lang.String)[2] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r152[0] = "pull"
crystal.server.AbstractStateChecker.getRelationship : $r152[0] = "pull" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r152[1] = r5
crystal.server.AbstractStateChecker.getRelationship : $r152[1] = r5 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r153 = $r152
crystal.server.AbstractStateChecker.getRelationship : r153 = $r152 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r154 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : r153 = $r152 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r16 = $r172 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r173 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r173 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r173.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r173.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r174 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r174 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r175 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r174)
crystal.server.AbstractStateChecker.getRelationship : $r175 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r174) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t pull into my temp clone: ")
crystal.server.AbstractStateChecker.getRelationship : $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t pull into my temp clone: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r177 = virtualinvoke r16.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r177 = virtualinvoke r16.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r178 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r177)
crystal.server.AbstractStateChecker.getRelationship : $r178 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r177) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r179
crystal.server.AbstractStateChecker.getRelationship : $r154 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r154.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : $r154 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r154.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r154.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r156 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
crystal.server.AbstractStateChecker.getRelationship : $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r156 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r157 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r156 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r157 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r158 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r153, $r157, 0)
crystal.server.AbstractStateChecker.getRelationship : $r157 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r158 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r153, $r157, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r159 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : r158 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r153, $r157, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r159 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z21 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r159)
crystal.server.AbstractStateChecker.getRelationship : $r159 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $z21 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r159) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z21 == 0
crystal.server.AbstractStateChecker.getRelationship : $z21 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r159) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if $z21 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r160 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z21 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r180 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()]
crystal.server.AbstractStateChecker.getRelationship : if $z21 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r180 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r180 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r180 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r181 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r181 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r181.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r181.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r182 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(run \'")
crystal.server.AbstractStateChecker.getRelationship : $r182 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(run \'") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r183 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r183 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r184 = virtualinvoke $r183.<java.lang.String: java.lang.String toLowerCase()>()
crystal.server.AbstractStateChecker.getRelationship : $r184 = virtualinvoke $r183.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r185 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r184)
crystal.server.AbstractStateChecker.getRelationship : $r185 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r184) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" heads\' to see heads, \'")
crystal.server.AbstractStateChecker.getRelationship : $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" heads\' to see heads, \'") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r187 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r187 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r188 = virtualinvoke $r187.<java.lang.String: java.lang.String toLowerCase()>()
crystal.server.AbstractStateChecker.getRelationship : $r188 = virtualinvoke $r187.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r189 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r188)
crystal.server.AbstractStateChecker.getRelationship : $r189 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r188) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r190 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" merge\' to merge)")
crystal.server.AbstractStateChecker.getRelationship : $r190 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" merge\' to merge)") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r191 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r191 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $i0 = virtualinvoke $r180.<java.lang.String: int indexOf(java.lang.String)>($r191)
crystal.server.AbstractStateChecker.getRelationship : $i0 = virtualinvoke $r180.<java.lang.String: int indexOf(java.lang.String)>($r191) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $i0 >= 0
crystal.server.AbstractStateChecker.getRelationship : if $i0 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r192 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : if $i0 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r193 = newarray (java.lang.String)[2]
crystal.server.AbstractStateChecker.getRelationship : $r193 = newarray (java.lang.String)[2] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r193[0] = "merge"
crystal.server.AbstractStateChecker.getRelationship : $r193[0] = "merge" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r193[1] = "--noninteractive"
crystal.server.AbstractStateChecker.getRelationship : $r193[1] = "--noninteractive" >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r194 = $r193
crystal.server.AbstractStateChecker.getRelationship : r194 = $r193 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r195 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getRelationship : r194 = $r193 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r17 = $r200 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r201 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r201 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r201.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r201.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r202 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r202 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r203 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r202)
crystal.server.AbstractStateChecker.getRelationship : $r203 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r202) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t execute merge: ")
crystal.server.AbstractStateChecker.getRelationship : $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Couldn\'t execute merge: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r205 = virtualinvoke r17.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r205 = virtualinvoke r17.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r206 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r205)
crystal.server.AbstractStateChecker.getRelationship : $r206 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r205) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r207
crystal.server.AbstractStateChecker.getRelationship : $r195 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z22 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r195)
crystal.server.AbstractStateChecker.getRelationship : $r195 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $z22 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r195) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z22 == 0
crystal.server.AbstractStateChecker.getRelationship : $z22 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r195) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if $z22 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r196 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : if $z22 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r208 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()]
crystal.server.AbstractStateChecker.getRelationship : if $z22 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r208 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r208 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r208 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $i2 = virtualinvoke $r208.<java.lang.String: int indexOf(java.lang.String)>("(branch merge, don\'t forget to commit)")
crystal.server.AbstractStateChecker.getRelationship : $i2 = virtualinvoke $r208.<java.lang.String: int indexOf(java.lang.String)>("(branch merge, don\'t forget to commit)") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $i2 >= 0
crystal.server.AbstractStateChecker.getRelationship : if $i2 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r209 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : if $i2 >= 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r210 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r210 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r211 = virtualinvoke $r210.<crystal.model.DataSource: java.lang.String getCompileCommand()>()
crystal.server.AbstractStateChecker.getRelationship : r211 = virtualinvoke $r210.<crystal.model.DataSource: java.lang.String getCompileCommand()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if r211 == null
crystal.server.AbstractStateChecker.getRelationship : if r211 == null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r212 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : if r211 == null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN>
crystal.server.AbstractStateChecker.getRelationship : if r211 == null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r222 = $r221 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r223 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r223 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r223.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r223.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r224 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r224 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r225 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r224)
crystal.server.AbstractStateChecker.getRelationship : $r225 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r224) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r226 = virtualinvoke $r225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Had and IO error trying to either compile or run tests: ")
crystal.server.AbstractStateChecker.getRelationship : $r226 = virtualinvoke $r225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Had and IO error trying to either compile or run tests: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r227 = virtualinvoke r222.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r227 = virtualinvoke r222.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r228 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r227)
crystal.server.AbstractStateChecker.getRelationship : $r228 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r227) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r229 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r229 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r229
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r259 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>]
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r259 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r259 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r259 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z23 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r259)
crystal.server.AbstractStateChecker.getRelationship : $z23 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r259) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z23 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z23 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r260 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z23 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r265 = new java.io.File
crystal.server.AbstractStateChecker.getRelationship : $r265 = new java.io.File >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r266 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r266 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r266.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r266.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r267 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractStateChecker.getRelationship : $r267 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r268 = virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
crystal.server.AbstractStateChecker.getRelationship : $r268 = virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r269 = virtualinvoke $r268.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r269 = virtualinvoke $r268.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r265.<java.io.File: void <init>(java.lang.String)>($r269)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r265.<java.io.File: void <init>(java.lang.String)>($r269) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.util.RunIt: boolean deleteDirectory(java.io.File)>($r265)
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.util.RunIt: boolean deleteDirectory(java.io.File)>($r265) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return r19
crystal.server.AbstractStateChecker.getRelationship : $r260 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r261 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r261 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r261.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r261.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r262 = virtualinvoke $r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the relationship: ")
crystal.server.AbstractStateChecker.getRelationship : $r262 = virtualinvoke $r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the relationship: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r263 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19)
crystal.server.AbstractStateChecker.getRelationship : $r263 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r264 = virtualinvoke $r263.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r264 = virtualinvoke $r263.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r260.<org.apache.log4j.Logger: void info(java.lang.Object)>($r264)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r260.<org.apache.log4j.Logger: void info(java.lang.Object)>($r264) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r265 = new java.io.File
crystal.server.AbstractStateChecker.getRelationship : $r212 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r212.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : $r212 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r212.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r213 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r212.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r213 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r214 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
crystal.server.AbstractStateChecker.getRelationship : $r213 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r214 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r214 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r18 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output tryCommand(java.lang.String,java.lang.String)>(r211, $r215)
crystal.server.AbstractStateChecker.getRelationship : $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r18 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output tryCommand(java.lang.String,java.lang.String)>(r211, $r215) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $i4 = virtualinvoke r18.<crystal.util.RunIt$Output: int getStatus()>()
crystal.server.AbstractStateChecker.getRelationship : r18 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output tryCommand(java.lang.String,java.lang.String)>(r211, $r215) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $i4 = virtualinvoke r18.<crystal.util.RunIt$Output: int getStatus()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $i4 == 0
crystal.server.AbstractStateChecker.getRelationship : $i4 = virtualinvoke r18.<crystal.util.RunIt$Output: int getStatus()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if $i4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String COMPILECONFLICT>
crystal.server.AbstractStateChecker.getRelationship : if $i4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r216 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : if $i4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r216 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r20 = virtualinvoke $r216.<crystal.model.DataSource: java.lang.String getTestCommand()>()
crystal.server.AbstractStateChecker.getRelationship : $r216 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r20 = virtualinvoke $r216.<crystal.model.DataSource: java.lang.String getTestCommand()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if r20 == null
crystal.server.AbstractStateChecker.getRelationship : r20 = virtualinvoke $r216.<crystal.model.DataSource: java.lang.String getTestCommand()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if r20 == null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r217 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : if r20 == null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN>
crystal.server.AbstractStateChecker.getRelationship : if r20 == null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : $r217 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r217.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : $r217 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r217.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r217.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
crystal.server.AbstractStateChecker.getRelationship : $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r21 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output tryCommand(java.lang.String,java.lang.String)>(r20, $r220)
crystal.server.AbstractStateChecker.getRelationship : $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r21 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output tryCommand(java.lang.String,java.lang.String)>(r20, $r220) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $i5 = virtualinvoke r21.<crystal.util.RunIt$Output: int getStatus()>()
crystal.server.AbstractStateChecker.getRelationship : r21 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output tryCommand(java.lang.String,java.lang.String)>(r20, $r220) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $i5 = virtualinvoke r21.<crystal.util.RunIt$Output: int getStatus()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $i5 == 0
crystal.server.AbstractStateChecker.getRelationship : $i5 = virtualinvoke r21.<crystal.util.RunIt$Output: int getStatus()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : if $i5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String TESTCONFLICT>
crystal.server.AbstractStateChecker.getRelationship : if $i5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN>
crystal.server.AbstractStateChecker.getRelationship : if $i5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECLEAN> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String TESTCONFLICT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String TESTCONFLICT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String COMPILECONFLICT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String COMPILECONFLICT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r221 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r209 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $i3 = virtualinvoke $r209.<java.lang.String: int indexOf(java.lang.String)>("Merge made by recursive.")
crystal.server.AbstractStateChecker.getRelationship : $i3 = virtualinvoke $r209.<java.lang.String: int indexOf(java.lang.String)>("Merge made by recursive.") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $i3 < 0
crystal.server.AbstractStateChecker.getRelationship : if $i3 < 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r210 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : if $i3 < 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECONFLICT>
crystal.server.AbstractStateChecker.getRelationship : r19 = <crystal.model.Relationship: java.lang.String MERGECONFLICT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r259 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>]
crystal.server.AbstractStateChecker.getRelationship : $r196 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r196.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : $r196 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r196.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r196.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r198 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
crystal.server.AbstractStateChecker.getRelationship : $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r198 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r199 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r198 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r199 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r158 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r194, $r199, 0)
crystal.server.AbstractStateChecker.getRelationship : $r199 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r158 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r194, $r199, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r208 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()]
crystal.server.AbstractStateChecker.getRelationship : r158 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r194, $r199, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r200 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r192 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $i1 = virtualinvoke $r192.<java.lang.String: int indexOf(java.lang.String)>("Auto-merging")
crystal.server.AbstractStateChecker.getRelationship : $i1 = virtualinvoke $r192.<java.lang.String: int indexOf(java.lang.String)>("Auto-merging") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $i1 < 0
crystal.server.AbstractStateChecker.getRelationship : if $i1 < 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r193 = newarray (java.lang.String)[2]
crystal.server.AbstractStateChecker.getRelationship : if $i1 < 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r230 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : $r230 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r231 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r231 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r231.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r231.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r232 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crystal is having trouble comparing")
crystal.server.AbstractStateChecker.getRelationship : $r232 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crystal is having trouble comparing") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r233 = virtualinvoke $r232.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
crystal.server.AbstractStateChecker.getRelationship : $r233 = virtualinvoke $r232.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r234 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ")
crystal.server.AbstractStateChecker.getRelationship : $r234 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r235 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.getRelationship : $r235 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r236 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractStateChecker.getRelationship : $r236 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r237 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r237 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r238 = virtualinvoke $r236.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r237)
crystal.server.AbstractStateChecker.getRelationship : $r238 = virtualinvoke $r236.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r237) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r239 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r239 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r230.<org.apache.log4j.Logger: void error(java.lang.Object)>($r239)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r230.<org.apache.log4j.Logger: void error(java.lang.Object)>($r239) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r240 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r240 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r240.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r240.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r241 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crystal is having trouble comparing\n")
crystal.server.AbstractStateChecker.getRelationship : $r241 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crystal is having trouble comparing\n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r242 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
crystal.server.AbstractStateChecker.getRelationship : $r242 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r243 = virtualinvoke $r242.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ")
crystal.server.AbstractStateChecker.getRelationship : $r243 = virtualinvoke $r242.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r244 = virtualinvoke $r243.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.getRelationship : $r244 = virtualinvoke $r243.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r245 = virtualinvoke $r244.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nfor the repository ")
crystal.server.AbstractStateChecker.getRelationship : $r245 = virtualinvoke $r244.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nfor the repository ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r246 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.server.AbstractStateChecker.getRelationship : $r246 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r247 = virtualinvoke $r245.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r246)
crystal.server.AbstractStateChecker.getRelationship : $r247 = virtualinvoke $r245.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r246) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r248 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in project ")
crystal.server.AbstractStateChecker.getRelationship : $r248 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in project ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r249 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>()
crystal.server.AbstractStateChecker.getRelationship : $r249 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r250 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r249)
crystal.server.AbstractStateChecker.getRelationship : $r250 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r249) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r251 = virtualinvoke $r250.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n")
crystal.server.AbstractStateChecker.getRelationship : $r251 = virtualinvoke $r250.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r252 = virtualinvoke $r251.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : r252 = virtualinvoke $r251.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r253 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r253 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r253.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r253.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r254 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r254 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r255 = virtualinvoke $r253.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r254)
crystal.server.AbstractStateChecker.getRelationship : $r255 = virtualinvoke $r253.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r254) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r256 = virtualinvoke $r255.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getRelationship : $r256 = virtualinvoke $r255.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r257 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r252)
crystal.server.AbstractStateChecker.getRelationship : $r257 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r252) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r258 = virtualinvoke $r257.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r258 = virtualinvoke $r257.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r258
crystal.server.AbstractStateChecker.getRelationship : $r160 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r161 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r160 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r161 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r161.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : $r161 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r161.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n path: ")
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r161.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n path: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r163 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractStateChecker.getRelationship : $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n path: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r163 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r164 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
crystal.server.AbstractStateChecker.getRelationship : $r163 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r164 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r164 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r160.<org.apache.log4j.Logger: void info(java.lang.Object)>($r165)
crystal.server.AbstractStateChecker.getRelationship : $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r160.<org.apache.log4j.Logger: void info(java.lang.Object)>($r165) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r166 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r160.<org.apache.log4j.Logger: void info(java.lang.Object)>($r165) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r166 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r167 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r166 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r167 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r167.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : $r167 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r167.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n pull output: ")
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r167.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n pull output: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r169 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n pull output: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r169 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r170 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169)
crystal.server.AbstractStateChecker.getRelationship : $r169 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r170 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r170 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r166.<org.apache.log4j.Logger: void info(java.lang.Object)>($r171)
crystal.server.AbstractStateChecker.getRelationship : $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r166.<org.apache.log4j.Logger: void info(java.lang.Object)>($r171) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r180 = virtualinvoke r158.<crystal.util.RunIt$Output: java.lang.String getOutput()>()]
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r166.<org.apache.log4j.Logger: void info(java.lang.Object)>($r171) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r172 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $z19 = virtualinvoke r1.<crystal.model.DataSource: boolean hasHistoryChanged()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z19 != 0
crystal.server.AbstractStateChecker.getRelationship : if $z19 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r141 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : if $z19 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r143 = newarray (java.lang.String)[3]
crystal.server.AbstractStateChecker.getRelationship : $r141 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z20 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r141)
crystal.server.AbstractStateChecker.getRelationship : $z20 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r141) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z20 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z20 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r142 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z20 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return r2
crystal.server.AbstractStateChecker.getRelationship : $r142 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r142.<org.apache.log4j.Logger: void info(java.lang.Object)>("same with old relationship")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r142.<org.apache.log4j.Logger: void info(java.lang.Object)>("same with old relationship") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return r2
crystal.server.AbstractStateChecker.getRelationship : $r131 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r132 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r132 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r132.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r132.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ")
crystal.server.AbstractStateChecker.getRelationship : $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.getRelationship : $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n")
crystal.server.AbstractStateChecker.getRelationship : $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r136 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r136 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r137 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136)
crystal.server.AbstractStateChecker.getRelationship : $r137 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r131.<org.apache.log4j.Logger: void info(java.lang.Object)>($r138)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r131.<org.apache.log4j.Logger: void info(java.lang.Object)>($r138) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r139 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : $r139 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r139.<org.apache.log4j.Logger: void info(java.lang.Object)>("not same, ahead, or behind")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r139.<org.apache.log4j.Logger: void info(java.lang.Object)>("not same, ahead, or behind") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r140 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r119 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z16 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r119)
crystal.server.AbstractStateChecker.getRelationship : $z16 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r119) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z16 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z16 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r120 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z16 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r129 = <crystal.model.Relationship: java.lang.String BEHIND>
crystal.server.AbstractStateChecker.getRelationship : $r129 = <crystal.model.Relationship: java.lang.String BEHIND> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r129
crystal.server.AbstractStateChecker.getRelationship : $r120 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r121 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r121 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r121.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r121.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ")
crystal.server.AbstractStateChecker.getRelationship : $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.getRelationship : $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n")
crystal.server.AbstractStateChecker.getRelationship : $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r125 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r125 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r126 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125)
crystal.server.AbstractStateChecker.getRelationship : $r126 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r120.<org.apache.log4j.Logger: void info(java.lang.Object)>($r127)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r120.<org.apache.log4j.Logger: void info(java.lang.Object)>($r127) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r128 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : $r128 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r128.<org.apache.log4j.Logger: void info(java.lang.Object)>("behind")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r128.<org.apache.log4j.Logger: void info(java.lang.Object)>("behind") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r129 = <crystal.model.Relationship: java.lang.String BEHIND>
crystal.server.AbstractStateChecker.getRelationship : $r108 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z14 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r108)
crystal.server.AbstractStateChecker.getRelationship : $z14 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r108) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z14 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z14 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r109 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z14 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r118 = <crystal.model.Relationship: java.lang.String AHEAD>
crystal.server.AbstractStateChecker.getRelationship : $r118 = <crystal.model.Relationship: java.lang.String AHEAD> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r118
crystal.server.AbstractStateChecker.getRelationship : $r109 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r110 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r110 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r110.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r110.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ")
crystal.server.AbstractStateChecker.getRelationship : $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.getRelationship : $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n")
crystal.server.AbstractStateChecker.getRelationship : $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r114 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r114 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r114)
crystal.server.AbstractStateChecker.getRelationship : $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r114) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r109.<org.apache.log4j.Logger: void info(java.lang.Object)>($r116)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r109.<org.apache.log4j.Logger: void info(java.lang.Object)>($r116) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r117 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : $r117 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r117.<org.apache.log4j.Logger: void info(java.lang.Object)>("ahead")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r117.<org.apache.log4j.Logger: void info(java.lang.Object)>("ahead") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r118 = <crystal.model.Relationship: java.lang.String AHEAD>
crystal.server.AbstractStateChecker.getRelationship : $r97 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z12 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r97)
crystal.server.AbstractStateChecker.getRelationship : $z12 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r97) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z12 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z12 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r98 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z12 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r107 = <crystal.model.Relationship: java.lang.String SAME>
crystal.server.AbstractStateChecker.getRelationship : $r107 = <crystal.model.Relationship: java.lang.String SAME> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r107
crystal.server.AbstractStateChecker.getRelationship : $r98 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r99 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r99 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r99.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r99.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ")
crystal.server.AbstractStateChecker.getRelationship : $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n yours: ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractStateChecker.getRelationship : $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n")
crystal.server.AbstractStateChecker.getRelationship : $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlog output: \n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r103 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>()
crystal.server.AbstractStateChecker.getRelationship : $r103 = virtualinvoke r10.<crystal.util.RunIt$Output: java.lang.String getOutput()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103)
crystal.server.AbstractStateChecker.getRelationship : $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r98.<org.apache.log4j.Logger: void info(java.lang.Object)>($r105)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r98.<org.apache.log4j.Logger: void info(java.lang.Object)>($r105) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r106 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : $r106 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r106.<org.apache.log4j.Logger: void info(java.lang.Object)>("same")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r106.<org.apache.log4j.Logger: void info(java.lang.Object)>("same") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r107 = <crystal.model.Relationship: java.lang.String SAME>
crystal.server.AbstractStateChecker.getRelationship : $r91 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r92 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r92 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r92.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r92.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("my history\n")
crystal.server.AbstractStateChecker.getRelationship : $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("my history\n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r94 = virtualinvoke r12.<crystal.model.RevisionHistory: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r94 = virtualinvoke r12.<crystal.model.RevisionHistory: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r95 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94)
crystal.server.AbstractStateChecker.getRelationship : $r95 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r91.<org.apache.log4j.Logger: void info(java.lang.Object)>($r96)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r91.<org.apache.log4j.Logger: void info(java.lang.Object)>($r96) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z11 = virtualinvoke r12.<crystal.model.RevisionHistory: boolean equals(java.lang.Object)>(r76)
crystal.server.AbstractStateChecker.getRelationship : $r85 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r85.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r85.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r86 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r86 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86)
crystal.server.AbstractStateChecker.getRelationship : $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Could not parse the history of your repository.")
crystal.server.AbstractStateChecker.getRelationship : $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Could not parse the history of your repository.") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r89
crystal.server.AbstractStateChecker.getRelationship : $r78 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r79 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r79 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r79.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r79.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("your history\n")
crystal.server.AbstractStateChecker.getRelationship : $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("your history\n") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r81 = virtualinvoke r76.<crystal.model.RevisionHistory: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r81 = virtualinvoke r76.<crystal.model.RevisionHistory: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81)
crystal.server.AbstractStateChecker.getRelationship : $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r78.<org.apache.log4j.Logger: void info(java.lang.Object)>($r83)
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r78.<org.apache.log4j.Logger: void info(java.lang.Object)>($r83) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke r1.<crystal.model.DataSource: void setHistory(crystal.model.RevisionHistory)>(r76)
crystal.server.AbstractStateChecker.getRelationship : r10 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r9, r5, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r74 = new crystal.model.RevisionHistory]
crystal.server.AbstractStateChecker.getRelationship : r10 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r9, r5, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : r10 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r62, r5, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)]
crystal.server.AbstractStateChecker.getRelationship : r10 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r27, r62, r5, 0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r74 = new crystal.model.RevisionHistory]
crystal.server.AbstractStateChecker.getRelationship : goto [?= (branch)] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r66 := @caughtexception
crystal.server.AbstractStateChecker.getRelationship : $r60 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r60.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..) - successfully update local repo and check cache error in get relationship")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r60.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..) - successfully update local repo and check cache error in get relationship") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r61 = newarray (java.lang.String)[3]
crystal.server.AbstractStateChecker.getRelationship : r49 = $r48 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r50 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r50 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z5 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r50)
crystal.server.AbstractStateChecker.getRelationship : $z5 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r50) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z5 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r51 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z5 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r52 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r52 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r52.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r52.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r53 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r53 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53)
crystal.server.AbstractStateChecker.getRelationship : $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getRelationship : $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r56 = virtualinvoke r49.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r56 = virtualinvoke r49.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56)
crystal.server.AbstractStateChecker.getRelationship : $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r58
crystal.server.AbstractStateChecker.getRelationship : $r51 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r51.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..) - ERROR: failed to update local repo and check cache error in get relationship")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r51.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..) - ERROR: failed to update local repo and check cache error in get relationship") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r52 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : r8 = $r38 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r39 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT>
crystal.server.AbstractStateChecker.getRelationship : $r39 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind GIT> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z4 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r39)
crystal.server.AbstractStateChecker.getRelationship : $z4 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r39) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z4 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r40 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log>
crystal.server.AbstractStateChecker.getRelationship : if $z4 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r41 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r41 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r41.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r42 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r42 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42)
crystal.server.AbstractStateChecker.getRelationship : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getRelationship : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r45 = virtualinvoke r8.<crystal.server.AbstractStateChecker$OperationException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r45 = virtualinvoke r8.<crystal.server.AbstractStateChecker$OperationException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45)
crystal.server.AbstractStateChecker.getRelationship : $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r47
crystal.server.AbstractStateChecker.getRelationship : $r40 = <crystal.server.AbstractStateChecker: org.apache.log4j.Logger _log> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r40.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..) - ERROR: failed to update local repo and check cache error in get relationship")
crystal.server.AbstractStateChecker.getRelationship : virtualinvoke $r40.<org.apache.log4j.Logger: void info(java.lang.Object)>("AbstractStateChecker::getRelationship(..) - ERROR: failed to update local repo and check cache error in get relationship") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r41 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r26 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r27 = virtualinvoke $r26.<crystal.client.ClientPreferences: java.lang.String getHgPath()>()
crystal.server.AbstractStateChecker.getRelationship : r27 = virtualinvoke $r26.<crystal.client.ClientPreferences: java.lang.String getHgPath()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r30 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
