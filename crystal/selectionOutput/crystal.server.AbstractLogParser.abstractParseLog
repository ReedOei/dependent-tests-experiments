crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.util.HashMap
crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.util.HashMap >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.util.HashMap: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.util.HashMap: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r2 = $r16
crystal.server.AbstractLogParser.abstractParseLog : r2 = $r16 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r3 = null
crystal.server.AbstractLogParser.abstractParseLog : r3 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r17 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r17 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r4 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r4 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4)
crystal.server.AbstractLogParser.abstractParseLog : $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r20 = (java.lang.String) $r19
crystal.server.AbstractLogParser.abstractParseLog : $r20 = (java.lang.String) $r19 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r5 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r22)
crystal.server.AbstractLogParser.abstractParseLog : r5 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r22) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r5
crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r5 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = 0
crystal.server.AbstractLogParser.abstractParseLog : i1 = 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0
crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r6 = r5[i1]
crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : return r2
crystal.server.AbstractLogParser.abstractParseLog : r6 = r5[i1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r23 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r23 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r23.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r23.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r24 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0
crystal.server.AbstractLogParser.abstractParseLog : $r24 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r25 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r25 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r26 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25)
crystal.server.AbstractLogParser.abstractParseLog : $r26 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r27 = (java.lang.String) $r26
crystal.server.AbstractLogParser.abstractParseLog : $r27 = (java.lang.String) $r26 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27)
crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
crystal.server.AbstractLogParser.abstractParseLog : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r30, "\n")
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r30, "\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = $r31
crystal.server.AbstractLogParser.abstractParseLog : r7 = $r31 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = null
crystal.server.AbstractLogParser.abstractParseLog : r8 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = null
crystal.server.AbstractLogParser.abstractParseLog : r9 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = null
crystal.server.AbstractLogParser.abstractParseLog : r10 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = null
crystal.server.AbstractLogParser.abstractParseLog : r11 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r32 = new java.util.ArrayList
crystal.server.AbstractLogParser.abstractParseLog : $r32 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r32.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r32.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r12 = $r32
crystal.server.AbstractLogParser.abstractParseLog : r12 = $r32 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r33 = virtualinvoke r7.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r11 != null
crystal.server.AbstractLogParser.abstractParseLog : if r11 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = ""
crystal.server.AbstractLogParser.abstractParseLog : if r11 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r9 != null
crystal.server.AbstractLogParser.abstractParseLog : if r9 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = ""
crystal.server.AbstractLogParser.abstractParseLog : if r9 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r10 != null
crystal.server.AbstractLogParser.abstractParseLog : if r10 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = ""
crystal.server.AbstractLogParser.abstractParseLog : if r10 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r8 == null
crystal.server.AbstractLogParser.abstractParseLog : if r8 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z14 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : if r8 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r98 = new java.lang.RuntimeException
crystal.server.AbstractLogParser.abstractParseLog : $r98 = new java.lang.RuntimeException >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r98.<java.lang.RuntimeException: void <init>(java.lang.String)>("Log contained a changeset description that did not start with \"changeset:\"")
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r98.<java.lang.RuntimeException: void <init>(java.lang.String)>("Log contained a changeset description that did not start with \"changeset:\"") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : throw $r98
crystal.server.AbstractLogParser.abstractParseLog : $z14 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z14 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z14 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r3 == null
crystal.server.AbstractLogParser.abstractParseLog : if $z14 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r92 = new crystal.server.AbstractLogParser$Checkpoint
crystal.server.AbstractLogParser.abstractParseLog : $r92 = new crystal.server.AbstractLogParser$Checkpoint >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r93 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r93 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r94 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r94 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r95 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r95 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r96 = virtualinvoke r11.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r96 = virtualinvoke r11.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r92.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r93, $r94, $r95, $r96, r12)
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r92.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r93, $r94, $r95, $r96, r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r91, $r92)
crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r91, $r92) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r3 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : r3 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : if r3 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r3)
crystal.server.AbstractLogParser.abstractParseLog : if r3 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r91 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : r10 = "" >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r8 == null
crystal.server.AbstractLogParser.abstractParseLog : r9 = "" >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r10 != null
crystal.server.AbstractLogParser.abstractParseLog : r11 = "" >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r9 != null
crystal.server.AbstractLogParser.abstractParseLog : $r33 = virtualinvoke r7.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r13 = virtualinvoke $r33.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : r13 = virtualinvoke $r33.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r34 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r34 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r35 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34)
crystal.server.AbstractLogParser.abstractParseLog : $r35 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r36 = (java.lang.String) $r35
crystal.server.AbstractLogParser.abstractParseLog : $r36 = (java.lang.String) $r35 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r36)
crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r36) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r37 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r40 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG>
crystal.server.AbstractLogParser.abstractParseLog : $r40 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r41 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40)
crystal.server.AbstractLogParser.abstractParseLog : $r41 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r41 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r41 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r42 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG>
crystal.server.AbstractLogParser.abstractParseLog : if $r41 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r45 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : $r45 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r46 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45)
crystal.server.AbstractLogParser.abstractParseLog : $r46 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r46 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r46 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r47 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : if $r46 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r55 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54)
crystal.server.AbstractLogParser.abstractParseLog : $r55 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r55 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r55 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r56 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : if $r55 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r60 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r59)
crystal.server.AbstractLogParser.abstractParseLog : $r60 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r59) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r60 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r60 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r61 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : if $r60 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r65 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r64)
crystal.server.AbstractLogParser.abstractParseLog : $r65 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r64) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r65 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r65 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r66 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : if $r65 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r69 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : $r69 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r69)
crystal.server.AbstractLogParser.abstractParseLog : $r70 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r69) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r70 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r70 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r71 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : if $r70 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r78 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels FILES>
crystal.server.AbstractLogParser.abstractParseLog : $r78 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels FILES> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r79 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r78)
crystal.server.AbstractLogParser.abstractParseLog : $r79 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r78) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r79 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r79 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r80 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels FILES>
crystal.server.AbstractLogParser.abstractParseLog : if $r79 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r83 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r83 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z13 = virtualinvoke $r83.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z13 = virtualinvoke $r83.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z13 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z13 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : if $z13 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r84 = staticinvoke <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon getInstance()>()
crystal.server.AbstractLogParser.abstractParseLog : $r84 = staticinvoke <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon getInstance()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r85 = virtualinvoke $r84.<java.lang.Object: java.lang.Class getClass()>()
crystal.server.AbstractLogParser.abstractParseLog : $r85 = virtualinvoke $r84.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r86 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r85)
crystal.server.AbstractLogParser.abstractParseLog : $r86 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r85) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r87 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r87 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r87.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r87.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to parse a line with an unexpected prefix: ")
crystal.server.AbstractLogParser.abstractParseLog : $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to parse a line with an unexpected prefix: ") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke $r86.<org.apache.log4j.Logger: void info(java.lang.Object)>($r90)
crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke $r86.<org.apache.log4j.Logger: void info(java.lang.Object)>($r90) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r80 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels FILES> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r81 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r80)
crystal.server.AbstractLogParser.abstractParseLog : $r81 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r80) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r82 = (java.lang.String) $r81
crystal.server.AbstractLogParser.abstractParseLog : $r82 = (java.lang.String) $r81 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z12 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r82)
crystal.server.AbstractLogParser.abstractParseLog : $z12 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r82) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z12 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z12 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : if $z12 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r83 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r71 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r72 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r71)
crystal.server.AbstractLogParser.abstractParseLog : $r72 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r71) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r73 = (java.lang.String) $r72
crystal.server.AbstractLogParser.abstractParseLog : $r73 = (java.lang.String) $r72 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z11 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>("not empty")
crystal.server.AbstractLogParser.abstractParseLog : $z11 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>("not empty") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z11 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z11 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r11 != null
crystal.server.AbstractLogParser.abstractParseLog : if $z11 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r78 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels FILES>
crystal.server.AbstractLogParser.abstractParseLog : if r11 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = r13
crystal.server.AbstractLogParser.abstractParseLog : if r11 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r74 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r74 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r74.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r74.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11)
crystal.server.AbstractLogParser.abstractParseLog : $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : r11 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : r11 = r13 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r66 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r67 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r66)
crystal.server.AbstractLogParser.abstractParseLog : $r67 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r66) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r68 = (java.lang.String) $r67
crystal.server.AbstractLogParser.abstractParseLog : $r68 = (java.lang.String) $r67 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z10 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r68)
crystal.server.AbstractLogParser.abstractParseLog : $z10 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r68) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r69 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : r11 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r61 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r62 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r61)
crystal.server.AbstractLogParser.abstractParseLog : $r62 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r61) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r63 = (java.lang.String) $r62
crystal.server.AbstractLogParser.abstractParseLog : $r63 = (java.lang.String) $r62 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z9 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r63)
crystal.server.AbstractLogParser.abstractParseLog : $z9 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r63) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : r10 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r56 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r57 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r56)
crystal.server.AbstractLogParser.abstractParseLog : $r57 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r56) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r58 = (java.lang.String) $r57
crystal.server.AbstractLogParser.abstractParseLog : $r58 = (java.lang.String) $r57 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z8 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r58)
crystal.server.AbstractLogParser.abstractParseLog : $z8 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r58) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : r9 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r47 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r48 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r47)
crystal.server.AbstractLogParser.abstractParseLog : $r48 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r47) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r49 = (java.lang.String) $r48
crystal.server.AbstractLogParser.abstractParseLog : $r49 = (java.lang.String) $r48 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z5 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r49)
crystal.server.AbstractLogParser.abstractParseLog : $z5 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r49) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r50 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : $r50 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r51 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : $r51 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r52 = virtualinvoke $r51.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r52 = virtualinvoke $r51.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r50.<java.util.StringTokenizer: void <init>(java.lang.String)>($r52)
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r50.<java.util.StringTokenizer: void <init>(java.lang.String)>($r52) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r14 = $r50
crystal.server.AbstractLogParser.abstractParseLog : r14 = $r50 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z6 = virtualinvoke r14.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $z6 = virtualinvoke r14.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z6 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z6 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r15 = virtualinvoke r14.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.abstractParseLog : if $z6 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : r15 = virtualinvoke r14.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i4 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $i4 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i5 = $i4 + 1
crystal.server.AbstractLogParser.abstractParseLog : $i5 = $i4 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r53 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i5)
crystal.server.AbstractLogParser.abstractParseLog : r53 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i5) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r53)
crystal.server.AbstractLogParser.abstractParseLog : interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r53) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z6 = virtualinvoke r14.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z6 = virtualinvoke r14.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z6 = virtualinvoke r14.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $r42 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r43 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r42)
crystal.server.AbstractLogParser.abstractParseLog : $r43 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r42) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r44 = (java.lang.String) $r43
crystal.server.AbstractLogParser.abstractParseLog : $r44 = (java.lang.String) $r43 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z4 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r44)
crystal.server.AbstractLogParser.abstractParseLog : $z4 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>($r44) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r45 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r37 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r37.<java.lang.String: boolean contains(java.lang.CharSequence)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r37.<java.lang.String: boolean contains(java.lang.CharSequence)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r38 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : r8 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : $r38 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r39 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13)
crystal.server.AbstractLogParser.abstractParseLog : $r39 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r13) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i2 = virtualinvoke $r39.<java.lang.String: int indexOf(java.lang.String)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $i2 = virtualinvoke $r39.<java.lang.String: int indexOf(java.lang.String)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i3 = $i2 + 1
crystal.server.AbstractLogParser.abstractParseLog : $i3 = $i2 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = virtualinvoke $r38.<java.lang.String: java.lang.String substring(int)>($i3)
crystal.server.AbstractLogParser.abstractParseLog : r8 = virtualinvoke $r38.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
