com.alibaba.dubbo.config.spring.SimpleRegistryService.register : specialinvoke r0.<com.alibaba.dubbo.config.spring.AbstractRegistryService: void register(java.lang.String,com.alibaba.dubbo.common.URL)>(r1, r2) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r4 = staticinvoke <com.alibaba.dubbo.rpc.RpcContext: com.alibaba.dubbo.rpc.RpcContext getContext()>()
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r4 = staticinvoke <com.alibaba.dubbo.rpc.RpcContext: com.alibaba.dubbo.rpc.RpcContext getContext()>() >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : r3 = virtualinvoke $r4.<com.alibaba.dubbo.rpc.RpcContext: java.lang.String getRemoteAddressString()>()
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : r3 = virtualinvoke $r4.<com.alibaba.dubbo.rpc.RpcContext: java.lang.String getRemoteAddressString()>() >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r5 = r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.concurrent.ConcurrentMap remoteRegistered>
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r5 = r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.concurrent.ConcurrentMap remoteRegistered> >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r3)
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : r16 = (java.util.Map) $r6
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : r16 = (java.util.Map) $r6 >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : if r16 != null
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : if r16 != null >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r12 = r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.concurrent.ConcurrentMap remoteRegistered>
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : if r16 != null >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r8 = virtualinvoke r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.Map getRegistered()>()
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r8 = virtualinvoke r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.Map getRegistered()>() >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r10 = (java.util.List) $r9
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r10 = (java.util.List) $r9 >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : virtualinvoke r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: void notify(java.lang.String,java.util.List)>(r1, $r10)
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : virtualinvoke r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: void notify(java.lang.String,java.util.List)>(r1, $r10) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : return
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r12 = r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.concurrent.ConcurrentMap remoteRegistered> >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r11 = new java.util.concurrent.ConcurrentHashMap
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r11 = new java.util.concurrent.ConcurrentHashMap >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>()
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>() >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, $r11)
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, $r11) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r14 = r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.concurrent.ConcurrentMap remoteRegistered>
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r14 = r0.<com.alibaba.dubbo.config.spring.SimpleRegistryService: java.util.concurrent.ConcurrentMap remoteRegistered> >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r15 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r3)
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : $r15 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : r16 = (java.util.Map) $r15
com.alibaba.dubbo.config.spring.SimpleRegistryService.register : r16 = (java.util.Map) $r15 >>>>>>>> com.alibaba.dubbo.config.spring.SimpleRegistryService.register : interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
