org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : return null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("blob")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("blob") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : goto [?= return $z2]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : goto [?= return $z2] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("blob")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("blob") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z2 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : goto [?= return $z3]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : goto [?= return $z3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: long snapshotInterval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: long snapshotInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : return $l0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r2 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r2 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.util.concurrent.ScheduledExecutorService scheduler>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.util.concurrent.ScheduledExecutorService scheduler> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : specialinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : specialinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r0, r1, z1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r0, r1, z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.remove : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.remove : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.remove : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void removeRecords(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.remove : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void removeRecords(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void snapshot()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void snapshot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void nextGeneration()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void nextGeneration()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r13.<org.slf4j.Logger: void trace(java.lang.String)>("Trying a copy file operation")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r13.<org.slf4j.Logger: void trace(java.lang.String)>("Trying a copy file operation") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $z1 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $z1 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void merge(java.util.List,boolean)>($r3, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void merge(java.util.List,boolean)>($r3, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r8 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r12 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r12 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r13 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r13 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$3.getFileNameSuffix : return ".refs"
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$3.getFileNameSuffix : return ".refs" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void append(java.util.List,java.io.File,boolean)>(r1, $r7, 1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void append(java.util.List,java.io.File,boolean)>(r1, $r7, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r16 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r16 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Merged files into references {}", r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Merged files into references {}", r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke r1.<java.util.List: void clear()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke r1.<java.util.List: void clear()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File getBlobRecordsFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File getBlobRecordsFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to delete file {}", r1, $r13)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to delete file {}", r1, $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.removeRecords : throw $r11
