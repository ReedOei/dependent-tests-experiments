org.apache.jackrabbit.oak.plugins.blob.CachingBlobStore.clearCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingBlobStore: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingBlobStore.clearCache : virtualinvoke $r1.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidateAll()>()
org.apache.jackrabbit.oak.plugins.blob.CachingBlobStore.clearCache : virtualinvoke $r1.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidateAll()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.collectGarbage : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void markAndSweep(boolean,boolean)>(z0, 0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.collectGarbage : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void markAndSweep(boolean,boolean)>(z0, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r3 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r3 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String root>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: void <init>(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: void <init>(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : r19 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : r19 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r5 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r5 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting Blob garbage collection with markOnly [{}]", $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting Blob garbage collection with markOnly [{}]", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void mark(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void mark(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Starting mark phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Starting mark phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $r1 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType DEFAULT>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $r1 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType DEFAULT> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : return $r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarkedStartMarker(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.lang.String)>($r6, $r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarkedStartMarker(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.lang.String)>($r6, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void iterateNodeTree(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r1, 0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void iterateNodeTree(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r1, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : throw $r14
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : throw $r14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r16 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r16 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r16.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Blob garbage collection error", $r15)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r16.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Blob garbage collection error", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : throw $r15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : throw $r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r18 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r18 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $z2 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isTraceEnabled()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $z2 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isTraceEnabled()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $z2 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $z2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r3, z3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r3, z3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : throw $r17
