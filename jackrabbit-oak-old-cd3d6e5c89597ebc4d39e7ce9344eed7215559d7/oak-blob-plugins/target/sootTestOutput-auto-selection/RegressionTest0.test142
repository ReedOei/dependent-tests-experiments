org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.setBlob : r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: org.apache.jackrabbit.oak.api.Blob blob> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.setId : r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: java.lang.String id> = r1
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.setId : r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: java.lang.String id> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.getBlob : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: org.apache.jackrabbit.oak.api.Blob blob>
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.getBlob : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: org.apache.jackrabbit.oak.api.Blob blob> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.getBlob : return $r1
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.getBlob : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r1 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ReferencedBlob{blob=")
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ReferencedBlob{blob=") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: org.apache.jackrabbit.oak.api.Blob blob>
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: org.apache.jackrabbit.oak.api.Blob blob> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3)
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id=\'")
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id=\'") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125)
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : return $r10
org.apache.jackrabbit.oak.plugins.blob.ReferencedBlob.toString : return $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r0, r1, z1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r0, r1, z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: java.io.File dir>
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: java.io.File dir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : virtualinvoke $r2.<org.apache.jackrabbit.core.data.FileDataStore: void setPath(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : virtualinvoke $r2.<org.apache.jackrabbit.core.data.FileDataStore: void setPath(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: int maxInlineSize>
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: int maxInlineSize> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : virtualinvoke $r2.<org.apache.jackrabbit.core.data.FileDataStore: void setMinRecordLength(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : virtualinvoke $r2.<org.apache.jackrabbit.core.data.FileDataStore: void setMinRecordLength(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : virtualinvoke $r2.<org.apache.jackrabbit.core.data.FileDataStore: void init(java.lang.String)>(null)
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : virtualinvoke $r2.<org.apache.jackrabbit.core.data.FileDataStore: void init(java.lang.String)>(null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r5 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : $r5 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : specialinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>($r2)
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : specialinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : return $r5
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.createDataStore : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: boolean errorBlob(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: boolean errorBlob(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.errorBlob : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("*ERROR*-")
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.errorBlob : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("*ERROR*-") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.errorBlob : return $z0
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.errorBlob : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : $r2 = new org.apache.jackrabbit.oak.plugins.blob.BlobStoreBlob
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : $r2 = new org.apache.jackrabbit.oak.plugins.blob.BlobStoreBlob >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.BlobStoreBlob: void <init>(org.apache.jackrabbit.oak.spi.blob.BlobStore,java.lang.String)>($r3, r1)
org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.BlobStoreBlob: void <init>(org.apache.jackrabbit.oak.spi.blob.BlobStore,java.lang.String)>($r3, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.serializer.FSBlobSerializer.deserialize : return $r2
