org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l0 = virtualinvoke r1.<java.io.File: long lastModified()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l0 = virtualinvoke r1.<java.io.File: long lastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l3 = $l1 - $l2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l3 = $l1 - $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $b4 = $l0 cmp $l3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $b4 = $l0 cmp $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping scheduled snapshot as it last executed within {} seconds", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping scheduled snapshot as it last executed within {} seconds", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : return $r1
