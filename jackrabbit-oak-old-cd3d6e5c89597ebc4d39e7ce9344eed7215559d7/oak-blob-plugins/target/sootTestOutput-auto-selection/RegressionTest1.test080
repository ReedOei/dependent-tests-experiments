org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : return null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getMetadataRecord : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("blob")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("blob") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : goto [?= return $z2]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : goto [?= return $z2] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("blob")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("blob") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z2 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: boolean skip()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: boolean skip()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File access$400(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File access$400(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : $r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : $r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".snapshot")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".snapshot") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l0 = virtualinvoke r1.<java.io.File: long lastModified()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l0 = virtualinvoke r1.<java.io.File: long lastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l3 = $l1 - $l2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l3 = $l1 - $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $b4 = $l0 cmp $l3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $b4 = $l0 cmp $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping scheduled snapshot as it last executed within {} seconds", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping scheduled snapshot as it last executed within {} seconds", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: long snapshotInterval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: long snapshotInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : return $l0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r5 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r8 = null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r8 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r6 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r6 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r5)
