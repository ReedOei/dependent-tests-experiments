org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteMetadataRecord : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteMetadataRecord : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteMetadataRecord : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteMetadataRecord : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getAllMetadataRecords : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getAllMetadataRecords : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getAllMetadataRecords : $r11 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r9, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getAllMetadataRecords : $r8 = new java.util.ArrayList
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getAllMetadataRecords : $r10 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r6 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.setReferenceKey : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: byte[] referenceKey> = r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Iterable)>(r0)
