org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : $b3 = l4 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : $r7 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : $r4 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : z2 = 1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : l4 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.util.concurrent.Executor executor>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.checkConsistency : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x")
