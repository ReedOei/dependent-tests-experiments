org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r1 = (java.util.concurrent.ThreadPoolExecutor) $r4
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r1 = (java.util.concurrent.ThreadPoolExecutor) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void collectGarbage(boolean)>(0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void collectGarbage(boolean)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $l1 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $l1 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.util.Set iterate()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.util.Set iterate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $i2 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $i2 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} blobs existing after gc : {}", $r6, r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} blobs existing after gc : {}", $r6, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : return r3
