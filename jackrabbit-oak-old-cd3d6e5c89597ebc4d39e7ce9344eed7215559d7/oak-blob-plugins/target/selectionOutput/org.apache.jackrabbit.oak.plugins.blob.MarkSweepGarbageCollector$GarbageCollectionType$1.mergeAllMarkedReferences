org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r9 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r8 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r8 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r10 = virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r10 = virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r3 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r3 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r12 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r12 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r13 = virtualinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r13 = virtualinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r4 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r4 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: java.util.Set refsNotAvailableFromRepos(java.util.List,java.util.List)>(r4, r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: java.util.Set refsNotAvailableFromRepos(java.util.List,java.util.List)>(r4, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r14 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r14 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Not all repositories have marked references available : {}", r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Not all repositories have marked references available : {}", r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r15 = new java.io.IOException
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r15 = new java.io.IOException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Not all repositories have marked references available")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Not all repositories have marked references available") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : throw $r15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r16 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r16 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void merge(java.util.List,java.io.File)>(r6, $r16)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void merge(java.util.List,java.io.File)>(r6, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r18 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r18 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r17 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r17 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r19 = virtualinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r19 = virtualinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r30 = interfaceinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r30 = interfaceinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r30)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l2 = interfaceinvoke $r20.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l2 = interfaceinvoke $r20.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r21 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r21 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest marker timestamp {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest marker timestamp {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l0 = interfaceinvoke $r23.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l0 = interfaceinvoke $r23.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r24 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r24 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest ref timestamp {}", $r25)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest ref timestamp {}", $r25) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $b1 = l2 cmp l0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $b1 = l2 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : return $l3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= return $l3]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= return $l3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : return $l3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r29 = (org.apache.jackrabbit.core.data.DataRecord) $r26
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r29 = (org.apache.jackrabbit.core.data.DataRecord) $r26 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r27 = interfaceinvoke r29.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r27 = interfaceinvoke r29.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r7 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.io.File copy(java.io.InputStream)>($r27)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r7 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.io.File copy(java.io.InputStream)>($r27) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
