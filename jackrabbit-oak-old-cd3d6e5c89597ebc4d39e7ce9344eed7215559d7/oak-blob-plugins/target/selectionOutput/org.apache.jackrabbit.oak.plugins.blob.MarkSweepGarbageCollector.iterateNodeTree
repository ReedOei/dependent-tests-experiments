org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : throw $r14
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : return
