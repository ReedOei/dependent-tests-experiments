org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r16 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)>($r2, r16)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r10 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in parents deletion for ")
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in parents deletion for ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r13 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r13 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r15, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r15, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : return
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)>($r2, r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)>($r2, r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r17 = virtualinvoke r16.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : return
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r17 = virtualinvoke r16.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if r17 != null
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r17 = virtualinvoke r16.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if r17 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if r17 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $i0 = lengthof r17
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $i0 = lengthof r17 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : z0 = virtualinvoke r16.<java.io.File: boolean delete()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : z0 = virtualinvoke r16.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r4 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : z0 = virtualinvoke r16.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r4 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3 = newarray (java.lang.Object)[3]
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[0] = r16
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[0] = r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[0] = r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[1] = $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[1] = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[1] = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[2] = $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[2] = $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Deleted parent [{}] of file [{}]: {}", $r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r3[2] = $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Deleted parent [{}] of file [{}]: {}", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r16 = virtualinvoke r16.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Deleted parent [{}] of file [{}]: {}", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r16 = virtualinvoke r16.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir>]
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : r16 = virtualinvoke r16.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r8 = virtualinvoke r16.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r8 = virtualinvoke r16.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Failed to list directory {}", $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r8 = virtualinvoke r16.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Failed to list directory {}", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Failed to list directory {}", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : $r9 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.deleteEmptyParentDirs : goto [?= return]
