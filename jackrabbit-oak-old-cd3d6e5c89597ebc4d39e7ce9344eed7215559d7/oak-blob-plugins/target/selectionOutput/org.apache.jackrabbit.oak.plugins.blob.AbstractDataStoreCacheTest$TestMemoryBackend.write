org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r5 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r7 = new org.apache.jackrabbit.core.data.DataStoreException
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r7 = new org.apache.jackrabbit.core.data.DataStoreException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r8 = newarray (java.lang.Object)[2]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r8 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r8[0] = r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r8[0] = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r9 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r9 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r8[1] = $r9
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r8[1] = $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("file %s of id %s", $r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("file %s of id %s", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : specialinvoke $r7.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : specialinvoke $r7.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : throw $r7
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r7 = new org.apache.jackrabbit.core.data.DataStoreException
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r13 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r14 = new org.apache.jackrabbit.core.data.DataStoreException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : specialinvoke $r14.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.Throwable)>($r13)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : specialinvoke $r14.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.Throwable)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : throw $r14
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r13 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : return
