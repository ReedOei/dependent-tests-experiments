org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : r4 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecordFromReference(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $i0 = lengthof r1
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $i0 = lengthof r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $l1 = (long) $i0
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $l1 = (long) $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $l2 = interfaceinvoke r4.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $l2 = interfaceinvoke r4.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l2)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : r5 = interfaceinvoke r4.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : r5 = interfaceinvoke r4.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r7 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : r5 = interfaceinvoke r4.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : virtualinvoke r5.<java.io.InputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : throw $r8
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r7 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r7 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r7, r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r7, r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("binary not equal", $z0)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r7, r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("binary not equal", $z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : virtualinvoke r5.<java.io.InputStream: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("binary not equal", $z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : virtualinvoke r5.<java.io.InputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.assertReference : return
