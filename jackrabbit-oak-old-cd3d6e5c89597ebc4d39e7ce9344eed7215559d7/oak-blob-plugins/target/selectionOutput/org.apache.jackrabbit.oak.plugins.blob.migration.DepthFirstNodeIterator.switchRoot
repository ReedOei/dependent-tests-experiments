org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r7 = new java.util.ArrayDeque >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : specialinvoke $r7.<java.util.ArrayDeque: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : specialinvoke $r7.<java.util.ArrayDeque: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r20 = r1
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r20 = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: java.util.Deque nameQueue>
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: java.util.Deque nameQueue> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r3 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r3 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r9 = interfaceinvoke r20.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r9 = interfaceinvoke r20.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : interfaceinvoke $r7.<java.util.Deque: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : interfaceinvoke $r7.<java.util.Deque: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r11 = new org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r11 = new org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: java.util.Deque nameQueue>
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: java.util.Deque nameQueue> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : specialinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState,java.util.Deque,java.util.Deque)>(r1, $r7, $r12)
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : specialinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState,java.util.Deque,java.util.Deque)>(r1, $r7, $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : return $r11
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r4 = (java.lang.String) $r13
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r4 = (java.lang.String) $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : z5 = 0
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : z5 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r14 = interfaceinvoke r20.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r14 = interfaceinvoke r20.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r5 = interfaceinvoke $r14.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r5 = interfaceinvoke $r14.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : interfaceinvoke $r7.<java.util.Deque: boolean add(java.lang.Object)>(r5)
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : interfaceinvoke $r7.<java.util.Deque: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z3 == 0
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if z5 != 0
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if z5 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r15 = <org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if z5 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r15 = <org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r16 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r16 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Can\'t found {} in the new root. Switching to /", $r16)
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Can\'t found {} in the new root. Switching to /", $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r17 = new org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r17 = new org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : specialinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r1)
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : specialinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : return $r17
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r6 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r18
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r6 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r18 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r19 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $r19 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r19)
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z4 == 0
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z4 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r20 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if $z4 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : goto [?= $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : goto [?= $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : r20 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : z5 = 1
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : z5 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.DepthFirstNodeIterator.switchRoot : if z5 != 0
