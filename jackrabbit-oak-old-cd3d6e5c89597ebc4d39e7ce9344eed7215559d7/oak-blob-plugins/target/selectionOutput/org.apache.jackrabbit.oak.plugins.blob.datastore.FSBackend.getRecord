org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File fsPathDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File getFile(org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: java.io.File getFile(org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $z1 = virtualinvoke r2.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r4 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r4 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $l2 = $l1 - l0
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $l2 = $l1 - l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("getRecord:Identifier [{}] not found. Took [{}] ms.", r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("getRecord:Identifier [{}] not found. Took [{}] ms.", r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r6 = new org.apache.jackrabbit.core.data.DataStoreException
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r6 = new org.apache.jackrabbit.core.data.DataStoreException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r7 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Identifier [")
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Identifier [") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found.")
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : specialinvoke $r6.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.String)>($r11)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : specialinvoke $r6.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.String)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : throw $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $z1 = virtualinvoke r2.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r4 = <org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r12 = new org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend$FSBackendDataRecord
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : $r12 = new org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend$FSBackendDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend$FSBackendDataRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend,org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend,org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>(r0, r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend$FSBackendDataRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend,org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend,org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>(r0, r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.FSBackend.getRecord : return $r12
