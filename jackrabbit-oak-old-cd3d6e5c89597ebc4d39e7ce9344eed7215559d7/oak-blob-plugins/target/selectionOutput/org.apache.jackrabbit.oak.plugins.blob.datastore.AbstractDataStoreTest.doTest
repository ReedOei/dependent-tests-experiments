org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r6 = new java.util.ArrayList >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r6.<java.util.ArrayList: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r6.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r7 = new java.util.HashMap
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r7 = new java.util.HashMap >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i14 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i14 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i14 >= 10
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i14 >= 10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i10 = i14 * 100
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i14 >= 10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r8 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r8 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r8.<java.util.Random: void <init>(long)>(1L)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r8.<java.util.Random: void <init>(long)>(1L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i16 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i16 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i16 >= $i2
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i16 >= $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i16 >= $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : return
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i17 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>($i3)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i17 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>($i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i17)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r22 = (org.apache.jackrabbit.core.data.DataRecord) $r9
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r22 = (org.apache.jackrabbit.core.data.DataRecord) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r10 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r22)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r10 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r11 = (java.lang.Integer) $r10
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r11 = (java.lang.Integer) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r12 = interfaceinvoke r22.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r12 = interfaceinvoke r22.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r23 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecord(org.apache.jackrabbit.core.data.DataIdentifier)>($r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r23 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecord(org.apache.jackrabbit.core.data.DataIdentifier)>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l4 = (long) i1
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l4 = (long) i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l5 = interfaceinvoke r23.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l5 = interfaceinvoke r23.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l5)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r13 = new org.apache.jackrabbit.core.data.RandomInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r13 = new org.apache.jackrabbit.core.data.RandomInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i6 = i1 + i0
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i6 = i1 + i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l8 = (long) $i6
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l8 = (long) $i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l7 = (long) i1
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l7 = (long) i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r13.<org.apache.jackrabbit.core.data.RandomInputStream: void <init>(long,long)>($l8, $l7)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r13.<org.apache.jackrabbit.core.data.RandomInputStream: void <init>(long,long)>($l8, $l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r24 = interfaceinvoke r23.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r24 = interfaceinvoke r23.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r5 = newarray (byte)[1]
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r5 = newarray (byte)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke r24.<java.io.InputStream: int read(byte[])>(r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke r24.<java.io.InputStream: int read(byte[])>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r14 = new java.io.SequenceInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r14 = new java.io.SequenceInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r15 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r15 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r15.<java.io.ByteArrayInputStream: void <init>(byte[])>(r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r15.<java.io.ByteArrayInputStream: void <init>(byte[])>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r14.<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>($r15, r24)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r14.<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>($r15, r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r25 = $r14
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r25 = $r14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $z0 = virtualinvoke $r8.<java.util.Random: boolean nextBoolean()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $z0 = virtualinvoke $r8.<java.util.Random: boolean nextBoolean()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r25 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest: java.io.InputStream readInputStreamRandomly(java.io.InputStream,java.util.Random)>($r14, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest: void assertEquals(java.io.InputStream,java.io.InputStream)>($r13, r25)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest: void assertEquals(java.io.InputStream,java.io.InputStream)>($r13, r25) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i16 = i16 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i16 = i16 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : goto [?= $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : goto [?= $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r25 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest: java.io.InputStream readInputStreamRandomly(java.io.InputStream,java.util.Random)>($r14, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest: void assertEquals(java.io.InputStream,java.io.InputStream)>($r13, r25)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i10 = i14 * 100 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i15 = 100000 - $i10
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i15 = 100000 - $i10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r16 = new org.apache.jackrabbit.core.data.RandomInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r16 = new org.apache.jackrabbit.core.data.RandomInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i11 = i15 + i0
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $i11 = i15 + i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l13 = (long) $i11
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l13 = (long) $i11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l12 = (long) i15
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $l12 = (long) i15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r16.<org.apache.jackrabbit.core.data.RandomInputStream: void <init>(long,long)>($l13, $l12)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : specialinvoke $r16.<org.apache.jackrabbit.core.data.RandomInputStream: void <init>(long,long)>($l13, $l12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r20 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream)>($r16)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : r20 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream)>($r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, $r17)
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i14 = i14 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : i14 = i14 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest.doTest : if i14 >= 10
