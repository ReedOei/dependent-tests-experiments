org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : return
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r4 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : return
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r4 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Invalidating [{}]", r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r4 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r9 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Could not delete file from staging", $r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Could not delete file from staging", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : return
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Invalidating [{}]", r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Invalidating [{}]", r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : r10 = (java.io.File) $r6
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : r10 = (java.io.File) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r1, r10)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : r10 = (java.io.File) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r1, r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r1, r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r10)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : return
