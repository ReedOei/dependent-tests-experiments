org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : return
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : return
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : return
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : return
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
