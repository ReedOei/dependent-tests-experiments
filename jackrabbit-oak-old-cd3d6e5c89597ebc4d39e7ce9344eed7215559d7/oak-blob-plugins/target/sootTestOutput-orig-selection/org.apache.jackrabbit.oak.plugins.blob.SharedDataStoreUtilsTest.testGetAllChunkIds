org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;"
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.getBlobStore : return $r2
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.getBlobStore : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.SharedDataStoreUtilsTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord writeStream(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord writeStream(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i1 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: int getMinRecordLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i1 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: int getMinRecordLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i2 = $i1 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i2 = $i1 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r2 = newarray (byte)[i0]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r2 = newarray (byte)[i0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i3 >= i0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i3 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i5 = virtualinvoke r7.<java.io.InputStream: int read(byte[],int,int)>(r2, i3, i4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i5 = virtualinvoke r7.<java.io.InputStream: int read(byte[],int,int)>(r2, i3, i4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i5 >= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i5 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = i3 + i5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = i3 + i5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i4 - i5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i4 - i5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r5 = new java.io.SequenceInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r5 = new java.io.SequenceInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r6 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r6 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r2, 0, i3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r2, 0, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : specialinvoke $r5.<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>($r6, r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : specialinvoke $r5.<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>($r6, r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>($r5, r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>($r5, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $z0 = $r3 instanceof org.apache.jackrabbit.oak.plugins.blob.datastore.TypedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $z0 = $r3 instanceof org.apache.jackrabbit.oak.plugins.blob.datastore.TypedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : return r8
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : return r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String getBlobId(org.apache.jackrabbit.core.data.DataRecord)>(r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String getBlobId(org.apache.jackrabbit.core.data.DataRecord)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(org.apache.jackrabbit.core.data.DataRecord)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(org.apache.jackrabbit.core.data.DataRecord)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $b1 = $l0 cmp -1L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $b1 = $l0 cmp -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : if $b1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : if $b1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : goto [?= return $z0]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : goto [?= return $z0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : return $r8
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker tracker>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker tracker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : if $r7 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : if $r7 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l1 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l1 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l2 = $l1 - l0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l2 = $l1 - l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l3 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l3 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r16.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploaded(long,java.util.concurrent.TimeUnit,long)>($l2, $r17, $l3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r16.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploaded(long,java.util.concurrent.TimeUnit,long)>($l2, $r17, $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r18.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploadCompleted(java.lang.String)>(r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r18.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploadCompleted(java.lang.String)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return r4
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.util.Iterator getAllRecords()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.util.Iterator getAllRecords()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r3 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataStore: java.util.Iterator getAllIdentifiers()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r3 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataStore: java.util.Iterator getAllIdentifiers()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r4 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r4 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,long)>(r0, l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,long)>(r0, l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r4 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r4 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r2 = (org.apache.jackrabbit.core.data.DataIdentifier) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r2 = (org.apache.jackrabbit.core.data.DataIdentifier) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5: org.apache.jackrabbit.core.data.DataRecord apply(org.apache.jackrabbit.core.data.DataIdentifier)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5: org.apache.jackrabbit.core.data.DataRecord apply(org.apache.jackrabbit.core.data.DataIdentifier)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r4 = $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r4 = $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$5.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: boolean apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: boolean apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: long val$maxLastModifiedTime>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: long val$maxLastModifiedTime> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $b1 = $l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $b1 = $l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean access$100(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean access$100(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r3
