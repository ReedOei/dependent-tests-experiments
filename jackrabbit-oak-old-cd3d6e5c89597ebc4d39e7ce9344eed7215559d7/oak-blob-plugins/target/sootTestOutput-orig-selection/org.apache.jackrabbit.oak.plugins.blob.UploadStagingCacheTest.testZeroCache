org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads in progress on close [{}]", $r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads in progress on close [{}]", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i1 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: int size()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i1 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads completed but not cleared from cache [{}]", $r6)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads completed but not cleared from cache [{}]", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r8 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r8 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r9 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: java.lang.String cacheInfoAsString()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r9 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: java.lang.String cacheInfoAsString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r1 = staticinvoke <com.google.common.base.Objects: com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)>("StagingCacheStats")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r1 = staticinvoke <com.google.common.base.Objects: com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)>("StagingCacheStats") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getRequestCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getRequestCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r2 = virtualinvoke $r1.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("requestCount", $l0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r2 = virtualinvoke $r1.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("requestCount", $l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getHitCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getHitCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r3 = virtualinvoke $r2.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("hitCount", $l1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r3 = virtualinvoke $r2.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("hitCount", $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getHitRate()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getHitRate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $b2 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $b2 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : if $b2 != 0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : if $b2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d1 = (double) l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d1 = (double) l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d0 = (double) l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d0 = (double) l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d2 = $d1 / $d0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d2 = $d1 / $d0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : return $d2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : return $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4[0] = $r5
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4[0] = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r4)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r7 = virtualinvoke $r3.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("hitRate", $r6)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r7 = virtualinvoke $r3.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("hitRate", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l2 = $l0 - $l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l2 = $l0 - $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : return $l2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : return $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r8 = virtualinvoke $r7.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("missCount", $l2)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r8 = virtualinvoke $r7.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("missCount", $l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getMissRate()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getMissRate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l1 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l1 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $b2 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $b2 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : if $b2 != 0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : if $b2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d1 = (double) l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d1 = (double) l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d0 = (double) l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d0 = (double) l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d2 = $d1 / $d0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d2 = $d1 / $d0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : return $d2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : return $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9[0] = $r10
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r9)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r12 = virtualinvoke $r8.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("missRate", $r11)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r12 = virtualinvoke $r8.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("missRate", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r13 = virtualinvoke $r12.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadCount", $l3)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r13 = virtualinvoke $r12.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadCount", $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadSuccessCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadSuccessCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r14 = virtualinvoke $r13.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadSuccessCount", $l4)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r14 = virtualinvoke $r13.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadSuccessCount", $l4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getElementCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getElementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r15 = virtualinvoke $r14.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("elementCount", $l5)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r15 = virtualinvoke $r14.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("elementCount", $l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentMemoryWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentMemoryWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r16 = virtualinvoke $r15.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("currentMemSize", $l6)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r16 = virtualinvoke $r15.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("currentMemSize", $l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l7 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l7 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r17 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l7)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r17 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r18 = virtualinvoke $r16.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("totalWeight", $r17)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r18 = virtualinvoke $r16.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("totalWeight", $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMaxTotalWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMaxTotalWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long maxWeight>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long maxWeight> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r19 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l8)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r19 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r20 = virtualinvoke $r18.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxWeight", $r19)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r20 = virtualinvoke $r18.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxWeight", $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r21 = virtualinvoke $r20.<com.google.common.base.Objects$ToStringHelper: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r21 = virtualinvoke $r20.<com.google.common.base.Objects$ToStringHelper: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : return $r21
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : return $r21 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Staging cache stats on close [{}]", $r9)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Staging cache stats on close [{}]", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r10 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r10 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r11)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r12 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r12 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService statsExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService statsExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r15)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r1 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r1 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.junit.rules.TemporaryFolder folder>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader: void <init>(java.io.File)>($r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader: void <init>(java.io.File)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: void init(int,org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader,java.io.File)>(i0, $r1, null)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: void init(int,org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader,java.io.File)>(i0, $r1, null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader uploader> = r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader uploader> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r4 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r4 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch taskLatch> = $r4
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch taskLatch> = $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r5 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r5 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch callbackLatch> = $r5
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch callbackLatch> = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r6 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r6 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch afterExecuteLatch> = $r6
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch afterExecuteLatch> = $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r7 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r7 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch taskLatch>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch taskLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch callbackLatch>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch callbackLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch afterExecuteLatch>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.CountDownLatch afterExecuteLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: void <init>(int,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(1, $r10, $r9, $r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: void <init>(int,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(1, $r10, $r9, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor> = $r7
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor> = $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r11 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r11 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r11.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>(r3, 500, $r12)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r11.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>(r3, 500, $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : virtualinvoke $r13.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r11)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : virtualinvoke $r13.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r15 = new org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r15 = new org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r15.<org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider: void <init>(java.util.concurrent.ScheduledExecutorService)>(r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r15.<org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider: void <init>(java.util.concurrent.ScheduledExecutorService)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider> = $r15
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider> = $r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r16 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r16 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.ScheduledExecutorService removeExecutor> = $r16
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.ScheduledExecutorService removeExecutor> = $r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r17 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r17 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.ScheduledExecutorService removeExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.util.concurrent.ScheduledExecutorService removeExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r17.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>($r19, 500, $r18)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : specialinvoke $r17.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>($r19, 500, $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : virtualinvoke $r20.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r17)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : virtualinvoke $r20.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader uploader>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestStagingUploader uploader> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r23 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r23 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r26 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache build(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>($r25, r2, 1, 8192L, $r24, null, $r23, $r22, null, 3000, 6000)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r26 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache build(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>($r25, r2, 1, 8192L, $r24, null, $r23, $r22, null, 3000, 6000) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads")
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> = $r26
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> = $r26 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : virtualinvoke $r28.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r27)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCacheTest.init : virtualinvoke $r28.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r27) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r7
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.put : $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.put : $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.put : return $r3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.put : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getIfPresent : return null
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getIfPresent : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getAllIdentifiers : $r1 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator emptyIterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getAllIdentifiers : $r1 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator emptyIterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getAllIdentifiers : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getAllIdentifiers : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : $r1 = new org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : $r1 = new org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : $r2 = <org.apache.jackrabbit.oak.stats.StatisticsProvider: org.apache.jackrabbit.oak.stats.StatisticsProvider NOOP>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : $r2 = <org.apache.jackrabbit.oak.stats.StatisticsProvider: org.apache.jackrabbit.oak.stats.StatisticsProvider NOOP> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,long)>(r0, $r2, 0L)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,long)>(r0, $r2, 0L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$2.getStats : return $r1
