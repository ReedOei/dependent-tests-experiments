org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Before submitting to super....")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Before submitting to super....") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After submitting to super....")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After submitting to super....") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.List futures>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.List futures> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r6 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r6 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.CountDownLatch afterLatch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.CountDownLatch afterLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : specialinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: void <init>(java.util.concurrent.CountDownLatch)>($r7)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : specialinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: void <init>(java.util.concurrent.CountDownLatch)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r2, $r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r2, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r8 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r8 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String)>("Added callback")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String)>("Added callback") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : return r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : return $r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....waiting for latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....waiting for latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch beforeLatch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch beforeLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void await()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void await()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....after acquiring latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....after acquiring latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed beforeExecute")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed beforeExecute") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Waiting for latch in callback")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Waiting for latch in callback") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: java.util.concurrent.CountDownLatch latch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: java.util.concurrent.CountDownLatch latch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(100L, $r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(100L, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Acquired latch in onSuccess")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Acquired latch in onSuccess") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After execution....counting down latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After execution....counting down latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch afterLatch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch afterLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("After execution....after counting down latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("After execution....after counting down latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed afterExecute")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed afterExecute") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCacheTest: java.io.InputStream randomStream(int,int)>(0, 4096)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCacheTest: java.io.InputStream randomStream(int,int)>(0, 4096) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r5 = virtualinvoke r2.<org.junit.rules.TemporaryFolder: java.io.File newFile()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r5 = virtualinvoke r2.<org.junit.rules.TemporaryFolder: java.io.File newFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCacheTest: java.io.File copyToFile(java.io.InputStream,java.io.File)>($r4, $r5)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCacheTest: java.io.File copyToFile(java.io.InputStream,java.io.File)>($r4, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r6 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345")
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: void write(java.lang.String,java.io.File)>($r9, r3)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: void write(java.lang.String,java.io.File)>($r9, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r4 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r4 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : virtualinvoke $r4.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : virtualinvoke $r4.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>(r2, r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>(r2, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r5 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r5 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("In TestCacheLoader after write [{}], [{}]", r1, r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("In TestCacheLoader after write [{}], [{}]", r1, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r10 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345")
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r14 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : $r14 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object getIfPresent(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object getIfPresent(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r5 = (java.io.File) $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r5 = (java.io.File) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : return $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : return r3
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.createFile : return r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345")
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File get(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File get(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: java.io.File load(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: java.io.File load(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = null
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: com.google.common.cache.CacheLoader val$loader>
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: com.google.common.cache.CacheLoader val$loader> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r7 = virtualinvoke $r6.<com.google.common.cache.CacheLoader: java.lang.Object load(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r7 = virtualinvoke $r6.<com.google.common.cache.CacheLoader: java.lang.Object load(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.FileInputStream load(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.FileInputStream load(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r4
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = (java.io.InputStream) $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = (java.io.InputStream) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r9, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r9, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r9, 0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r9, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : goto [?= return r2]
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : goto [?= return r2] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return $r3
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r5 = (java.io.File) $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r5 = (java.io.File) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : return $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $z0 = staticinvoke <com.google.common.io.Files: boolean equal(java.io.File,java.io.File)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : $z0 = staticinvoke <com.google.common.io.Files: boolean equal(java.io.File,java.io.File)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCache : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r3 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: java.lang.String cacheInfoAsString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r3 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: java.lang.String cacheInfoAsString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r2 = (java.util.Map$Entry) $r9
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r2 = (java.util.Map$Entry) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $i0 = interfaceinvoke $r10.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r3, r4)
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $i0 = interfaceinvoke $r10.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r3, r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l1 = (long) $i0
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l1 = (long) $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l2 = $l1 * 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l2 = $l1 * 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = l3 + $l2
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = l3 + $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Cache stats on close [{}]", $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Cache stats on close [{}]", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r4 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r4 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.util.concurrent.ExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : virtualinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : virtualinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: java.io.File val$path>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: java.io.File val$path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z1 = virtualinvoke $r2.<java.io.File: boolean equals(java.lang.Object)>($r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z1 = virtualinvoke $r2.<java.io.File: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: java.util.List val$exceptions>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: java.util.List val$exceptions> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: boolean access$000(java.io.File,java.util.List)>(r1, $r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: boolean access$000(java.io.File,java.util.List)>(r1, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.access$000 : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: boolean notInExceptions(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.access$000 : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: boolean notInExceptions(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : r2 = virtualinvoke r0.<java.io.File: java.lang.String getParent()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : r2 = virtualinvoke r0.<java.io.File: java.lang.String getParent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : r4 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : r4 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : return 1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.access$000 : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.access$000 : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z2 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : return 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.notInExceptions : return 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : goto [?= return $z3]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : goto [?= return $z3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r4 = (java.io.File) $r12
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r4 = (java.io.File) $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r14 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r14 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r13 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r13 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Download cache file absolute pre-upgrade path ")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Download cache file absolute pre-upgrade path ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : interfaceinvoke $r14.<org.slf4j.Logger: void trace(java.lang.String)>($r17)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : interfaceinvoke $r14.<org.slf4j.Logger: void trace(java.lang.String)>($r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r18 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r18 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r19 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r19 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r20 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r20 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $i0 = virtualinvoke $r20.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $i0 = virtualinvoke $r20.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r21)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r21) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r22 = virtualinvoke $r18.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r22 = virtualinvoke $r18.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : virtualinvoke $r22.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : virtualinvoke $r22.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r24 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r24 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r23 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Downloaded cache file absolute post-upgrade path ")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Downloaded cache file absolute post-upgrade path ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String)>($r27)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String)>($r27) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r4, $r18)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r4, $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r28 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r28 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Download cache file [{}] moved to [{}]", r4, $r18)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Download cache file [{}] moved to [{}]", r4, $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r4, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r4, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getParent()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getParent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 1
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : goto [?= return $z2]
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : goto [?= return $z2] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r2 = (java.io.File) $r12
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r2 = (java.io.File) $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r13 = virtualinvoke r2.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r13 = virtualinvoke r2.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File,boolean)>($r13, r2, 0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File,boolean)>($r13, r2, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r1, r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r1, r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = i0 + 1
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = i0 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r14 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r14 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Added file [{}} to in-memory cache", r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Added file [{}} to in-memory cache", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r2, r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r2, r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345")
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("12345") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $z0 = staticinvoke <com.google.common.io.Files: boolean equal(java.io.File,java.io.File)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : $z0 = staticinvoke <com.google.common.io.Files: boolean equal(java.io.File,java.io.File)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheIfPresent : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l4 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getElementCount()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l4 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getElementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l4)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l5 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long estimateCurrentWeight()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l5 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long estimateCurrentWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l1, $l5)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l1, $l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l6 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getLoadCount()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l6 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getLoadCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l2, $l6)
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l2, $l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $r4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l7 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getLoadSuccessCount()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : $l7 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getLoadSuccessCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l3, $l7)
