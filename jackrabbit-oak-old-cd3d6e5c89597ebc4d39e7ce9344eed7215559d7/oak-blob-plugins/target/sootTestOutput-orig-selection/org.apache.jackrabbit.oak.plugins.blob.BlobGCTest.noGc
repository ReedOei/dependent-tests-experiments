org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : $r1 = new org.apache.jackrabbit.oak.stats.Clock$Virtual >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : specialinvoke $r1.<org.apache.jackrabbit.oak.stats.Clock$Virtual: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : specialinvoke $r1.<org.apache.jackrabbit.oak.stats.Clock$Virtual: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : $r1 = dynamicinvoke "collectReferences" <org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V", handle: <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void lambda$getBlobReferenceRetriever$0(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>, class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : $r1 = dynamicinvoke "collectReferences" <org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V", handle: <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void lambda$getBlobReferenceRetriever$0(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>, class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: long startTime>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: long startTime> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : return $l0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void preSetup()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void preSetup()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r7 = interfaceinvoke $r6.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r7 = interfaceinvoke $r6.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r1 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r1 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r8 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r8 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r8.<java.util.Random: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r8.<java.util.Random: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i7 >= i1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i7 >= i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i8 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i8 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z5 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r41)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z5 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r41) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z5 != 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z5 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r42)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r42) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = i7 + 1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = i7 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest)>(r0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i9 >= i0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i9 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r28 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.io.InputStream randomStream(int,int)>(i9, i2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r28 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.io.InputStream randomStream(int,int)>(i9, i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r44 = interfaceinvoke $r27.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.api.Blob createBlob(java.io.InputStream)>($r28)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r44 = interfaceinvoke $r27.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.api.Blob createBlob(java.io.InputStream)>($r28) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.plugins.memory.ArrayBasedBlob createBlob(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.plugins.memory.ArrayBasedBlob createBlob(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : r7 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobStore: java.lang.String writeBlob(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : r7 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobStore: java.lang.String writeBlob(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r19 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r19 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r4 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r4 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r20 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String getIdForInputStream(java.io.InputStream)>($r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r20 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String getIdForInputStream(java.io.InputStream)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r5 = new java.security.DigestOutputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r5 = new java.security.DigestOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r6 = new org.apache.commons.io.output.NullOutputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r6 = new org.apache.commons.io.output.NullOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r5.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r6, r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r5.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r6, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : goto [?= $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : goto [?= $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r7)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : return $r8
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r5 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $i0 = lengthof r19
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $i0 = lengthof r19 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r11 = $r10.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r11 = $r10.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l1 = virtualinvoke $r11.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l1 = virtualinvoke $r11.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r21, r19, $l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r21, r19, $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, $r9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r14 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r14 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r15 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r15 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l2 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l2 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Blob created {} with timestamp {}", $r15, $r16)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Blob created {} with timestamp {}", $r15, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return r21
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return r21 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r3 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r3 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: void <init>(java.lang.String,org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r7, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: void <init>(java.lang.String,org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r7, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r30 = interfaceinvoke r44.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r30 = interfaceinvoke r44.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r4 = interfaceinvoke $r29.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>($r30)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r4 = interfaceinvoke $r29.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>($r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : return $r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r37 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r37 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r5 = (java.lang.String) $r37
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r5 = (java.lang.String) $r37 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r38 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r38 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>(r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z3 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r39)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z3 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r39) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z3 != 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z3 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r40 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r40 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r40.<java.util.Set: boolean add(java.lang.Object)>(r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r40.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r31 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r31 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r35 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>($r34)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r35 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>($r34) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r35.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("x", r44)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r35.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("x", r44) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = i9 + 1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = i9 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r11 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r11 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r10 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r10 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r12.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r1, $r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r12.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r1, $r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r15 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r15 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r14 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r14 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i5 = interfaceinvoke $r14.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i5 = interfaceinvoke $r14.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created blobs : {}", $r16)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created blobs : {}", $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r45 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r45 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r20 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r20 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r21 = (java.lang.Integer) $r20
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r21 = (java.lang.Integer) $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i10 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i10 = virtualinvoke $r21.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r22 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void delete(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeStore)>($r25, $r26)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void delete(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeStore)>($r25, $r26) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r4 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r4 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r5 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r5 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: boolean remove()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: boolean remove()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r7 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r7 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r6 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r6 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r3, $r7, $r6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r3, $r7, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r17 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r17 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i6 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i6 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted nodes : {}", $r18)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted nodes : {}", $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke $r19.<org.apache.jackrabbit.oak.stats.Clock: void waitUntil(long)>(5L)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke $r19.<org.apache.jackrabbit.oak.stats.Clock: void waitUntil(long)>(5L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void postSetup(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState)>($r9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void postSetup(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore) $r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore) $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r3 = r1.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r3 = r1.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void setReferencedBlobs(java.util.Set)>($r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void setReferencedBlobs(java.util.Set)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.setReferencedBlobs : r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs> = r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.setReferencedBlobs : r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : return $r9
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r1 = (java.util.concurrent.ThreadPoolExecutor) $r4
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r1 = (java.util.concurrent.ThreadPoolExecutor) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.junit.rules.TemporaryFolder folder>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor,java.lang.String)>(l0, r1, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor,java.lang.String)>(l0, r1, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = null
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>($r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r1 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r1 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type getType()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : $r1 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : $r1 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $r2 != $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $r2 != $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : goto [?= return $z1]
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : goto [?= return $z1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = staticinvoke <org.apache.jackrabbit.oak.spi.cluster.ClusterRepositoryInfo: java.lang.String getOrCreateId(org.apache.jackrabbit.oak.spi.state.NodeStore)>($r9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = staticinvoke <org.apache.jackrabbit.oak.spi.cluster.ClusterRepositoryInfo: java.lang.String getOrCreateId(org.apache.jackrabbit.oak.spi.state.NodeStore)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r13 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r10
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r13 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r11 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r11 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r12 = newarray (byte)[0]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r12 = newarray (byte)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r14 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r14 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r15 = virtualinvoke $r14.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r16)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r15 = virtualinvoke $r14.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>("-")
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>("-") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String type>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String type> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r4 = newarray (java.lang.Object)[0]
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r4 = newarray (java.lang.Object)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>($r3, r1, $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>($r3, r1, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : interfaceinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r11, $r15)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : interfaceinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r11, $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r13 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r13 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r4 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r4 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r6 = $r5.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r6 = $r5.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l0 = virtualinvoke $r6.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l0 = virtualinvoke $r6.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r2, r13, $l0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r2, r13, $l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r9 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r9 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r10 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r10 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l1 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l1 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Metadata created {} with timestamp {}", $r10, $r11)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Metadata created {} with timestamp {}", $r10, $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever referenceRetriever>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever referenceRetriever> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard wb>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard wb> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever,org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.concurrent.Executor,java.lang.String,int,long,java.lang.String,org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard)>($r8, $r7, r1, r2, 2048, l0, r16, $r6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever,org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.concurrent.Executor,java.lang.String,int,long,java.lang.String,org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard)>($r8, $r7, r1, r2, 2048, l0, r16, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : return $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void collectGarbage(boolean)>(0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void collectGarbage(boolean)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.collectGarbage : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void markAndSweep(boolean,boolean)>(z0, 0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.collectGarbage : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void markAndSweep(boolean,boolean)>(z0, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r3 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r3 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String root>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: void <init>(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: void <init>(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : r19 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : r19 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r5 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r5 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting Blob garbage collection with markOnly [{}]", $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting Blob garbage collection with markOnly [{}]", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void mark(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void mark(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Starting mark phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Starting mark phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType SHARED>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : return $r2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarkedStartMarker(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.lang.String)>($r6, $r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarkedStartMarker(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.lang.String)>($r6, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r4 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r4 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r5 = newarray (byte)[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r5 = newarray (byte)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r4, $r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void iterateNodeTree(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r1, 0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void iterateNodeTree(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r1, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r3 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r3 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector: void addReference(java.lang.String,java.lang.String)>(r3, null)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector: void addReference(java.lang.String,java.lang.String)>(r3, null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r24 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r24 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r8 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r8 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r3 = virtualinvoke $r8.<com.google.common.base.Joiner: com.google.common.base.Joiner skipNulls()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r3 = virtualinvoke $r8.<com.google.common.base.Joiner: com.google.common.base.Joiner skipNulls()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int batchCount>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int batchCount> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : return $i0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : return $i0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r4 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r24, $i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r4 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r24, $i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r17 = (java.util.List) $r15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r17 = (java.util.List) $r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r16 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r16 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : specialinvoke $r16.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4,com.google.common.base.Joiner,java.lang.String)>(r0, r3, r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : specialinvoke $r16.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4,com.google.common.base.Joiner,java.lang.String)>(r0, r3, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r5 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r17, $r16)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r5 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r17, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i5 = interfaceinvoke r5.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i5 = interfaceinvoke r5.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : virtualinvoke $r18.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>($i5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : virtualinvoke $r18.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>($i5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.io.BufferedWriter val$writer>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.io.BufferedWriter val$writer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>(r5, $r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>(r5, $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: java.lang.String apply(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: java.lang.String apply(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 this$1>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 this$1> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $z0 = $r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean val$logPath>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $z0 = $r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean val$logPath> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r3 = (java.lang.String) $r4
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r3 = (java.lang.String) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void writeAsLine(java.io.BufferedWriter,java.lang.String,boolean)>(r1, r3, 1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void writeAsLine(java.io.BufferedWriter,java.lang.String,boolean)>(r1, r3, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : virtualinvoke r1.<java.io.BufferedWriter: void flush()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : virtualinvoke r1.<java.io.BufferedWriter: void flush()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i3 = $i1 % $i2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i3 = $i1 % $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $i3 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $i3 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = (java.lang.String) r2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = (java.lang.String) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: int compare(java.lang.String,java.lang.String)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: int compare(java.lang.String,java.lang.String)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = $r3[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = $r3[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r5 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r5 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r6 = $r5[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r6 = $r5[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : return $i0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarked(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,java.lang.String)>($r10, r1, $r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarked(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,java.lang.String)>($r10, r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r4 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r4 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r5 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r5 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.File,java.lang.String)>($r5, $r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.File,java.lang.String)>($r5, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = null
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r5, r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r5, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("Ending mark phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("Ending mark phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if z0 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long sweep(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,long,boolean)>($r3, l0, z1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long sweep(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,long,boolean)>($r3, l0, z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r9 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r9 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l11 = virtualinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: long mergeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r10, r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l11 = virtualinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: long mergeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r10, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r9 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r9 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r8 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r8 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r10 = virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r10 = virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r3 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r3 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r4 = (java.util.Map$Entry) $r7
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r4 = (java.util.Map$Entry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r9 = (java.lang.String) $r8
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r9 = (java.lang.String) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : return r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r12 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r12 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r13 = virtualinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r13 = virtualinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r4 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r4 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: java.util.Set refsNotAvailableFromRepos(java.util.List,java.util.List)>(r4, r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: java.util.Set refsNotAvailableFromRepos(java.util.List,java.util.List)>(r4, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r4 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r4 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r1 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r1 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : specialinvoke $r1.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : specialinvoke $r1.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r2 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>("-")
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r2 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>("-") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r3 = virtualinvoke $r2.<com.google.common.base.Splitter: com.google.common.base.Splitter limit(int)>(2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r3 = virtualinvoke $r2.<com.google.common.base.Splitter: com.google.common.base.Splitter limit(int)>(2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.util.List splitToList(java.lang.CharSequence)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.util.List splitToList(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r6 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r6 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r6 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r6 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r7 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r7 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r8 = virtualinvoke $r6.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r8 = virtualinvoke $r6.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r10 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>($r5, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r10 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>($r5, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : return $r10
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : return $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r29 = (org.apache.jackrabbit.core.data.DataRecord) $r26
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r29 = (org.apache.jackrabbit.core.data.DataRecord) $r26 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r27 = interfaceinvoke r29.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r27 = interfaceinvoke r29.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r1 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r1 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r7 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.io.File copy(java.io.InputStream)>($r27)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r7 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.io.File copy(java.io.InputStream)>($r27) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r16 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r16 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void merge(java.util.List,java.io.File)>(r6, $r16)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void merge(java.util.List,java.io.File)>(r6, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r18 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r18 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r17 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r17 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r19 = virtualinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r19 = virtualinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r30 = interfaceinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r30 = interfaceinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r30)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r3 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r3 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Iterable)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Iterable)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r5 = (org.apache.jackrabbit.core.data.DataRecord) $r4
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r5 = (org.apache.jackrabbit.core.data.DataRecord) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l2 = interfaceinvoke $r20.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l2 = interfaceinvoke $r20.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : return $l0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r21 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r21 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest marker timestamp {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest marker timestamp {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l0 = interfaceinvoke $r23.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l0 = interfaceinvoke $r23.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r24 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r24 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest ref timestamp {}", $r25)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest ref timestamp {}", $r25) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $b1 = l2 cmp l0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $b1 = l2 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= return $l3]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= return $l3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : return $l3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : return $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Earliest reference available for timestamp [{}]", $r12)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Earliest reference available for timestamp [{}]", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b3 = l11 cmp l0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b3 = l11 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b3 >= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b3 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l12 = l11
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l12 = l11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r0, r1, z0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r0, r1, z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: boolean forceRetrieve>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: boolean forceRetrieve> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r20)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType DEFAULT>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType DEFAULT> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : return $r2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r22)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $i4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r24)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $i4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : virtualinvoke $r21.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void retrieve(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,int)>($r23, $r25, $i4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : virtualinvoke $r21.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void retrieve(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,int)>($r23, $r25, $i4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>("Starting retrieve of all blobs")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>("Starting retrieve of all blobs") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r7 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r7 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r8 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r8 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : i1 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean,org.slf4j.Logger,java.lang.String)>(r19, $r7, 1, $r8, "Retrieved blobs - ")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : i1 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean,org.slf4j.Logger,java.lang.String)>(r19, $r7, 1, $r8, "Retrieved blobs - ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r9 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r9 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of blobs present in BlobStore : [{}] ", $r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of blobs present in BlobStore : [{}] ", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $z0 = r19 instanceof java.io.Closeable
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $z0 = r19 instanceof java.io.Closeable >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r27 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r27 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r28 = virtualinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r28 = virtualinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l5 = virtualinvoke $r28.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l5 = virtualinvoke $r28.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : interfaceinvoke $r27.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Length of blob ids file retrieved from tracker {}", $r29)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : interfaceinvoke $r27.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Length of blob ids file retrieved from tracker {}", $r29) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l0 = virtualinvoke $r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l0 = virtualinvoke $r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $b1 = $l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $b1 = $l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $b1 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $b1 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : return $r3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void difference(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>(r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void difference(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r3 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r3 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>("Starting difference phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>("Starting difference phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r4 = new org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r4 = new org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r6 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r6 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r7 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: com.google.common.base.Function transformer>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r7 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: com.google.common.base.Function transformer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator: void <init>(java.io.File,java.io.File,com.google.common.base.Function)>($r5, $r6, $r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator: void <init>(java.io.File,java.io.File,com.google.common.base.Function)>($r5, $r6, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r8 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r8 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File gcCandidates>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File gcCandidates> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : i0 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean)>($r4, $r8, 1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : i0 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean)>($r4, $r8, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1: java.lang.String apply(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1: java.lang.String apply(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = $r2[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = $r2[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r9 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found candidates - ")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found candidates - ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r14 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r14 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>("Ending difference phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>("Ending difference phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>($l12)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>($l12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b2 = $l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b2 = $l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b2 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b2 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : l8 = -1L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : l8 = -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.api.jmx.CheckpointMBean checkpointMbean>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.api.jmx.CheckpointMBean checkpointMbean> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("maxModificationReferenceTime {} ", $r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("maxModificationReferenceTime {} ", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b3 = l7 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b3 = l7 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b3 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b3 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l9 = l7
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l9 = l7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b4 = l8 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b4 = l8 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b4 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b4 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l11 = $l9
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l11 = $l9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : goto [?= $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : goto [?= $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Calculated reference time {} ", $r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Calculated reference time {} ", $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l6 = $l11 - $l5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l6 = $l11 - $l5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : return $l6
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : return $l6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r15 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r15 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>("Starting sweep phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>("Starting sweep phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r16 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r16 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r17 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r17 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r0 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r1 = new java.sql.Timestamp
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r1 = new java.sql.Timestamp >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r1.<java.sql.Timestamp: void <init>(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r1.<java.sql.Timestamp: void <init>(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 23)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : return $r5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Sweeping blobs with modified time > than the configured max deleted time ({}). ", $r17)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Sweeping blobs with modified time > than the configured max deleted time ({}). ", $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l16 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l16 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : i17 = 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : i17 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r18 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r18 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r19 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r19 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r18, $r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r18, $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r20 = new java.util.ArrayDeque
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r20 = new java.util.ArrayDeque >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r20.<java.util.ArrayDeque: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r20.<java.util.ArrayDeque: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r21 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r21 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r22 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r22 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r23 = virtualinvoke $r22.<java.nio.charset.Charset: java.lang.String name()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r23 = virtualinvoke $r22.<java.nio.charset.Charset: java.lang.String name()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r21, $r23)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r21, $r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r54, $i4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r54, $i4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r43 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r43 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r4 = (java.util.List) $r43
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r4 = (java.util.List) $r43 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i7 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i7 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l8 = (long) $i7
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l8 = (long) $i7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = l14 + $l8
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = l14 + $l8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r44 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r44 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r45 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r44)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r45 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r44) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r46 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r46 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l9 = virtualinvoke $r45.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: long sweepInternal(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.List,java.util.ArrayDeque,long)>($r46, r4, $r20, l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l9 = virtualinvoke $r45.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: long sweepInternal(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.List,java.util.ArrayDeque,long)>($r46, r4, $r20, l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l2 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l2 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Blob ids to be deleted {}", r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Blob ids to be deleted {}", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r5 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r5 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8[0] = r5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8[0] = r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r9 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r9 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: long countDeleteChunks(java.util.List,long)>($r9, l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: long countDeleteChunks(java.util.List,long)>($r9, l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : i6 = 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : i6 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r3 = (java.lang.String) $r4
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r3 = (java.lang.String) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("maxLastModifiedTime {}", $r6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("maxLastModifiedTime {}", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r8 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r8 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r10 = (org.apache.jackrabbit.core.data.DataRecord) $r9
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r10 = (org.apache.jackrabbit.core.data.DataRecord) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l2 = interfaceinvoke $r10.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l2 = interfaceinvoke $r10.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("store.get(id).getLastModified() {}", $r11)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("store.get(id).getLastModified() {}", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b3 = l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b3 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b3 <= 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b3 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r16 = (org.apache.jackrabbit.core.data.DataRecord) $r15
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r16 = (org.apache.jackrabbit.core.data.DataRecord) $r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l4 = interfaceinvoke $r16.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l4 = interfaceinvoke $r16.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b5 = $l4 cmp l0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b5 = $l4 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b5 >= 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b5 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l1 = (long) i6
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l1 = (long) i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : return $l1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : return $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $b1 = l3 cmp 1L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $b1 = l3 cmp 1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $b1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $b1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Blob [{}] not deleted", r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Blob [{}] not deleted", r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : return l2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : return l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = l15 + $l9
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = l15 + $l9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r47 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r20)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r47 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>($r47, r53)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>($r47, r53) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r5 = virtualinvoke $r20.<java.util.ArrayDeque: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r5 = virtualinvoke $r20.<java.util.ArrayDeque: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r20.<java.util.ArrayDeque: void clear()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r20.<java.util.ArrayDeque: void clear()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r54)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r54) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r53)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r53) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r25 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r24)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r25 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r27 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r27 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r28 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r28 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r25.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void handleRemoves(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.io.File,java.io.File)>($r26, $r27, $r28)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r25.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void handleRemoves(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.io.File,java.io.File)>($r26, $r27, $r28) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.handleRemoves : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.handleRemoves : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b5 = l14 cmp l15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b5 = l14 cmp l15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b5 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b5 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r39 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r39 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38 = newarray (java.lang.Object)[3]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[0] = $r40
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[0] = $r40 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[1] = $r41
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[1] = $r41 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r42 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r42 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[2] = $r42
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[2] = $r42 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Deleted only [{}] blobs entries from the [{}] candidates identified. This may happen if blob modified time is > than the max deleted time ({})", $r38)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Deleted only [{}] blobs entries from the [{}] candidates identified. This may happen if blob modified time is > than the max deleted time ({})", $r38) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b6 = l16 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b6 = l16 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b6 <= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b6 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r30 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r29)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r30 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r29) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r30.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void removeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r31)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r30.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void removeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r31) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r3 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r3 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r4 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r4 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r14 = (java.util.Map$Entry) $r10
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r14 = (java.util.Map$Entry) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r12 = (java.lang.String) $r11
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r12 = (java.lang.String) $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z2 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z2 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r15 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r15 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r4 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r4 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r5 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r5 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r7 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r7 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r32 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r32 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String)>("Ending sweep phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String)>("Ending sweep phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : return l15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : return l15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $b4 = $l3 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $b4 = $l3 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l6 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l6 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r9 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r9 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8 = newarray (java.lang.Object)[4]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r10 = virtualinvoke r19.<com.google.common.base.Stopwatch: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r10 = virtualinvoke r19.<com.google.common.base.Stopwatch: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[0] = $r10
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l5 = virtualinvoke r19.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l5 = virtualinvoke r19.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[1] = $r12
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[1] = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[2] = $r13
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[2] = $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>($l6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>($l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[3] = $r14
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[3] = $r14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Blob garbage collection completed in {} ({} ms). Number of blobs deleted [{}] with max modification time of [{}]", $r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Blob garbage collection completed in {} ({} ms). Number of blobs deleted [{}] with max modification time of [{}]", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r20 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r20 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $z4 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isTraceEnabled()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $z4 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isTraceEnabled()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $z4 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $z4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r3, z3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r3, z3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $l1 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $l1 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.util.Set iterate()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.util.Set iterate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r1 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r1 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : return r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $i2 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $i2 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} blobs existing after gc : {}", $r6, r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} blobs existing after gc : {}", $r6, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : return r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : $r1 = new org.apache.jackrabbit.oak.stats.Clock$Virtual >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : specialinvoke $r1.<org.apache.jackrabbit.oak.stats.Clock$Virtual: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : specialinvoke $r1.<org.apache.jackrabbit.oak.stats.Clock$Virtual: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.getClock : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : $r1 = dynamicinvoke "collectReferences" <org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V", handle: <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void lambda$getBlobReferenceRetriever$0(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>, class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : $r1 = dynamicinvoke "collectReferences" <org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V", handle: <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void lambda$getBlobReferenceRetriever$0(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>, class "(Lorg/apache/jackrabbit/oak/plugins/blob/ReferenceCollector;)V") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.getBlobReferenceRetriever : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: long startTime>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: long startTime> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : return $l0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.access$000 : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1: java.util.concurrent.atomic.AtomicReference val$props>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1: java.util.concurrent.atomic.AtomicReference val$props> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : $r5 = specialinvoke r0.<org.apache.jackrabbit.oak.spi.whiteboard.DefaultWhiteboard: org.apache.jackrabbit.oak.spi.whiteboard.Registration register(java.lang.Class,java.lang.Object,java.util.Map)>(r1, r2, r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : $r5 = specialinvoke r0.<org.apache.jackrabbit.oak.spi.whiteboard.DefaultWhiteboard: org.apache.jackrabbit.oak.spi.whiteboard.Registration register(java.lang.Class,java.lang.Object,java.util.Map)>(r1, r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : return $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$1.register : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void preSetup()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void preSetup()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r7 = interfaceinvoke $r6.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r7 = interfaceinvoke $r6.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r1 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r1 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r8 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r8 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r8.<java.util.Random: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r8.<java.util.Random: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i7 >= i1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i7 >= i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i8 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i8 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z5 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r41)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z5 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r41) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z5 != 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z5 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r42)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r42) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = i7 + 1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i7 = i7 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest)>(r0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i9 >= i0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if i9 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r28 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.io.InputStream randomStream(int,int)>(i9, i2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r28 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.io.InputStream randomStream(int,int)>(i9, i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r44 = interfaceinvoke $r27.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.api.Blob createBlob(java.io.InputStream)>($r28)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r44 = interfaceinvoke $r27.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.api.Blob createBlob(java.io.InputStream)>($r28) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.plugins.memory.ArrayBasedBlob createBlob(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.plugins.memory.ArrayBasedBlob createBlob(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : r7 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobStore: java.lang.String writeBlob(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : r7 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobStore: java.lang.String writeBlob(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r19 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r19 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r4 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r4 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r20 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String getIdForInputStream(java.io.InputStream)>($r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r20 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.lang.String getIdForInputStream(java.io.InputStream)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r5 = new java.security.DigestOutputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r5 = new java.security.DigestOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r6 = new org.apache.commons.io.output.NullOutputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r6 = new org.apache.commons.io.output.NullOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r5.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r6, r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : specialinvoke $r5.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r6, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : goto [?= $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : goto [?= $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r7)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : return $r8
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getIdForInputStream : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r5 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $i0 = lengthof r19
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $i0 = lengthof r19 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r9 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r11 = $r10.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r11 = $r10.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l1 = virtualinvoke $r11.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l1 = virtualinvoke $r11.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r21, r19, $l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r21, r19, $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, $r9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r14 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r14 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r15 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r15 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l2 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $l2 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Blob created {} with timestamp {}", $r15, $r16)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Blob created {} with timestamp {}", $r15, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return r21
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return r21 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.writeBlob : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r3 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r3 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: org.apache.jackrabbit.oak.spi.blob.BlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: void <init>(java.lang.String,org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r7, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: void <init>(java.lang.String,org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r7, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.createBlob : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r30 = interfaceinvoke r44.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r30 = interfaceinvoke r44.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore$TestBlob.getContentIdentity : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r4 = interfaceinvoke $r29.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>($r30)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r4 = interfaceinvoke $r29.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>($r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : return $r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.resolveChunks : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r37 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r37 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r5 = (java.lang.String) $r37
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r5 = (java.lang.String) $r37 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r38 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r38 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>(r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z3 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r39)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z3 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r39) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z3 != 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z3 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r40 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r40 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r40.<java.util.Set: boolean add(java.lang.Object)>(r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r40.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r31 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r31 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r35 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>($r34)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r35 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>($r34) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r35.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("x", r44)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r35.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("x", r44) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = i9 + 1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i9 = i9 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r11 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r11 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r10 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r10 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r12.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r1, $r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r12.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r1, $r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r15 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r15 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r14 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r14 = $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsAdded> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i5 = interfaceinvoke $r14.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i5 = interfaceinvoke $r14.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created blobs : {}", $r16)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created blobs : {}", $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r45 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : r45 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r20 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r20 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r21 = (java.lang.Integer) $r20
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r21 = (java.lang.Integer) $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i10 = virtualinvoke $r21.<java.lang.Integer: int intValue()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : i10 = virtualinvoke $r21.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r22 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c")
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void delete(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeStore)>($r25, $r26)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void delete(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeStore)>($r25, $r26) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r4 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r4 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r5 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r5 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: boolean remove()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: boolean remove()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r7 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r7 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r6 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : $r6 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r3, $r7, $r6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.delete : interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r3, $r7, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : goto [?= $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r17 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r17 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i6 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $i6 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted nodes : {}", $r18)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted nodes : {}", $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke $r19.<org.apache.jackrabbit.oak.stats.Clock: void waitUntil(long)>(5L)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke $r19.<org.apache.jackrabbit.oak.stats.Clock: void waitUntil(long)>(5L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void postSetup(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState)>($r9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: void postSetup(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore) $r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore) $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r3 = r1.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : $r3 = r1.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$BlobStoreState: java.util.Set blobsPresent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void setReferencedBlobs(java.util.Set)>($r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.postSetup : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: void setReferencedBlobs(java.util.Set)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.setReferencedBlobs : r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs> = r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.setReferencedBlobs : r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : return $r9
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.setUp : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r1 = (java.util.concurrent.ThreadPoolExecutor) $r4
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r1 = (java.util.concurrent.ThreadPoolExecutor) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.junit.rules.TemporaryFolder folder>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor,java.lang.String)>(l0, r1, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector initGC(long,java.util.concurrent.ThreadPoolExecutor,java.lang.String)>(l0, r1, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = null
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>($r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r1 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r1 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type getType()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : $r1 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : $r1 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getType : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $r2 != $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $r2 != $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : goto [?= return $z1]
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : goto [?= return $z1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = staticinvoke <org.apache.jackrabbit.oak.spi.cluster.ClusterRepositoryInfo: java.lang.String getOrCreateId(org.apache.jackrabbit.oak.spi.state.NodeStore)>($r9)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : r16 = staticinvoke <org.apache.jackrabbit.oak.spi.cluster.ClusterRepositoryInfo: java.lang.String getOrCreateId(org.apache.jackrabbit.oak.spi.state.NodeStore)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r13 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r10
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r13 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r11 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r11 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r12 = newarray (byte)[0]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r12 = newarray (byte)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r14 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r14 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r15 = virtualinvoke $r14.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r16)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r15 = virtualinvoke $r14.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>("-")
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>("-") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String type>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String type> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getType : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r4 = newarray (java.lang.Object)[0]
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r4 = newarray (java.lang.Object)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>($r3, r1, $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : $r5 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[])>($r3, r1, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getNameFromId : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : interfaceinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r11, $r15)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : interfaceinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r11, $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r13 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r13 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r4 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r4 = new org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: org.apache.jackrabbit.oak.plugins.blob.BlobGCTest this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r6 = $r5.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r6 = $r5.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l0 = virtualinvoke $r6.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l0 = virtualinvoke $r6.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r2, r13, $l0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore,java.lang.String,byte[],long)>(r0, r2, r13, $l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r9 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r9 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r10 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r10 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l1 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $l1 = $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Metadata created {} with timestamp {}", $r10, $r11)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Metadata created {} with timestamp {}", $r10, $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r5 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever referenceRetriever>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever referenceRetriever> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard wb>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard wb> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever,org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.concurrent.Executor,java.lang.String,int,long,java.lang.String,org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard)>($r8, $r7, r1, r2, 2048, l0, r16, $r6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : specialinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void <init>(org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever,org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.concurrent.Executor,java.lang.String,int,long,java.lang.String,org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard)>($r8, $r7, r1, r2, 2048, l0, r16, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : return $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.initGC : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void collectGarbage(boolean)>(0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void collectGarbage(boolean)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.collectGarbage : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void markAndSweep(boolean,boolean)>(z0, 0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.collectGarbage : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void markAndSweep(boolean,boolean)>(z0, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r3 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r3 = new org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String root>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: void <init>(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: void <init>(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : r19 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : r19 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r5 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r5 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting Blob garbage collection with markOnly [{}]", $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting Blob garbage collection with markOnly [{}]", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void mark(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void mark(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Starting mark phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Starting mark phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: boolean isShared(org.apache.jackrabbit.oak.spi.blob.BlobStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType SHARED>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : return $r2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType.get : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarkedStartMarker(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.lang.String)>($r6, $r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarkedStartMarker(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.lang.String)>($r6, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r4 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r4 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r5 = newarray (byte)[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r5 = newarray (byte)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r4, $r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarkedStartMarker : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void iterateNodeTree(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r1, 0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void iterateNodeTree(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r1, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r6 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : r2 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r7 = new java.util.concurrent.atomic.AtomicInteger >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever marker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r8 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,boolean,java.util.concurrent.atomic.AtomicInteger,java.io.BufferedWriter)>(r0, z0, $r7, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.BlobReferenceRetriever: void collectReferences(org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore: java.util.Set referencedBlobs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r3 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : r3 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector: void addReference(java.lang.String,java.lang.String)>(r3, null)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.ReferenceCollector: void addReference(java.lang.String,java.lang.String)>(r3, null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r24 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r24 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator resolveChunks(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r8 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r8 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r3 = virtualinvoke $r8.<com.google.common.base.Joiner: com.google.common.base.Joiner skipNulls()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r3 = virtualinvoke $r8.<com.google.common.base.Joiner: com.google.common.base.Joiner skipNulls()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int batchCount>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int batchCount> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : return $i0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getBatchCount : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : return $i0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.access$100 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r4 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r24, $i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r4 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r24, $i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r17 = (java.util.List) $r15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r17 = (java.util.List) $r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r16 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r16 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : specialinvoke $r16.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4,com.google.common.base.Joiner,java.lang.String)>(r0, r3, r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : specialinvoke $r16.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4,com.google.common.base.Joiner,java.lang.String)>(r0, r3, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r5 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r17, $r16)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : r5 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r17, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean debugMode> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i5 = interfaceinvoke r5.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i5 = interfaceinvoke r5.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : virtualinvoke $r18.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>($i5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : virtualinvoke $r18.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>($i5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.io.BufferedWriter val$writer>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.io.BufferedWriter val$writer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>(r5, $r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>(r5, $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: java.lang.String apply(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: java.lang.String apply(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 this$1>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4 this$1> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $z0 = $r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean val$logPath>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : $z0 = $r2.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: boolean val$logPath> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4$1.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r3 = (java.lang.String) $r4
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : r3 = (java.lang.String) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void writeAsLine(java.io.BufferedWriter,java.lang.String,boolean)>(r1, r3, 1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void writeAsLine(java.io.BufferedWriter,java.lang.String,boolean)>(r1, r3, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : virtualinvoke r1.<java.io.BufferedWriter: void flush()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.saveBatchToFile : virtualinvoke r1.<java.io.BufferedWriter: void flush()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: java.util.concurrent.atomic.AtomicInteger val$count> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i3 = $i1 % $i2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : $i3 = $i1 % $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $i3 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : if $i3 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$4.addReference : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$MemoryBlobStoreNodeStore.lambda$getBlobReferenceRetriever$0 : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of valid blob references marked under mark phase of Blob garbage collection [{}]", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r12 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File,java.util.Comparator)>($r12, $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = (java.lang.String) r2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = (java.lang.String) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: int compare(java.lang.String,java.lang.String)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5: int compare(java.lang.String,java.lang.String)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = $r3[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r4 = $r3[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r5 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r5 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r6 = $r5[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $r6 = $r5[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : return $i0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$5.compare : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.iterateNodeTree : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String repoId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarked(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,java.lang.String)>($r10, r1, $r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void addMarked(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,java.lang.String)>($r10, r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r4 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r4 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r5 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r5 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getNameFromId(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.File,java.lang.String)>($r5, $r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.addMarked : interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.File,java.lang.String)>($r5, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = null
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : $r5 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = $r5
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : r8 = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r5, r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: void addMetadataRecord(java.io.InputStream,java.lang.String)>($r5, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.addMetadataRecord : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("Ending mark phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.mark : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>("Ending mark phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if z0 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long sweep(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,long,boolean)>($r3, l0, z1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long sweep(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,long,boolean)>($r3, l0, z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r9 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r9 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l11 = virtualinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: long mergeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r10, r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l11 = virtualinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: long mergeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>($r10, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r9 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r9 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r8 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r8 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r10 = virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r10 = virtualinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r3 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r3 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r4 = (java.util.Map$Entry) $r7
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : r4 = (java.util.Map$Entry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r9 = (java.lang.String) $r8
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r9 = (java.lang.String) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : return r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllMetadataRecords : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r12 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r12 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r11 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r13 = virtualinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r13 = virtualinvoke $r11.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r4 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r4 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: java.util.Set refsNotAvailableFromRepos(java.util.List,java.util.List)>(r4, r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: java.util.Set refsNotAvailableFromRepos(java.util.List,java.util.List)>(r4, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r4 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r4 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REPOSITORY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r1 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r1 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: java.lang.String id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : specialinvoke $r1.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : specialinvoke $r1.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getIdentifier : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r2 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>("-")
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r2 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>("-") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r3 = virtualinvoke $r2.<com.google.common.base.Splitter: com.google.common.base.Splitter limit(int)>(2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r3 = virtualinvoke $r2.<com.google.common.base.Splitter: com.google.common.base.Splitter limit(int)>(2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.util.List splitToList(java.lang.CharSequence)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.util.List splitToList(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r6 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : $r6 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType.getIdFromName : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$2.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r6 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r6 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r7 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r7 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : specialinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r8 = virtualinvoke $r6.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r8 = virtualinvoke $r6.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : $r5 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getIdFromName(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$3.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r10 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>($r5, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : $r10 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>($r5, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : return $r10
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.refsNotAvailableFromRepos : return $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z0 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r29 = (org.apache.jackrabbit.core.data.DataRecord) $r26
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r29 = (org.apache.jackrabbit.core.data.DataRecord) $r26 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r27 = interfaceinvoke r29.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r27 = interfaceinvoke r29.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r1 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r1 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getStream : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r7 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.io.File copy(java.io.InputStream)>($r27)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r7 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.io.File copy(java.io.InputStream)>($r27) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r16 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r16 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void merge(java.util.List,java.io.File)>(r6, $r16)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void merge(java.util.List,java.io.File)>(r6, $r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r18 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r18 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r17 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r17 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r19 = virtualinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r19 = virtualinvoke $r17.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r30 = interfaceinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : r30 = interfaceinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r30)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$1: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r3 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r3 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Iterable)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Iterable)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r5 = (org.apache.jackrabbit.core.data.DataRecord) $r4
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : $r5 = (org.apache.jackrabbit.core.data.DataRecord) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.getEarliestRecord : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l2 = interfaceinvoke $r20.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l2 = interfaceinvoke $r20.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord: long lastModified> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : return $l0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore$TestRecord.getLastModified : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r21 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r21 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest marker timestamp {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest marker timestamp {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils: org.apache.jackrabbit.core.data.DataRecord getEarliestRecord(java.util.List)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l0 = interfaceinvoke $r23.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : l0 = interfaceinvoke $r23.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r24 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r24 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest ref timestamp {}", $r25)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : interfaceinvoke $r24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Earliest ref timestamp {}", $r25) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $b1 = l2 cmp l0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $b1 = l2 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : if $b1 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : $l3 = l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= return $l3]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : goto [?= return $l3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : return $l3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.mergeAllMarkedReferences : return $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r11 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Earliest reference available for timestamp [{}]", $r12)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Earliest reference available for timestamp [{}]", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b3 = l11 cmp l0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b3 = l11 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b3 >= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b3 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l12 = l11
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l12 = l11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r13 = new org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r0, r1, z0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: void <init>(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,boolean)>(r0, r1, z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r13.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: boolean forceRetrieve>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: boolean forceRetrieve> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r20)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType DEFAULT>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType DEFAULT> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : return $r2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.get : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r22)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore access$000(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $i4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r24)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $i4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int access$100(org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector)>($r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : virtualinvoke $r21.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void retrieve(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,int)>($r23, $r25, $i4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : virtualinvoke $r21.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void retrieve(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState,int)>($r23, $r25, $i4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>("Starting retrieve of all blobs")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>("Starting retrieve of all blobs") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : r19 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : return $r3
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.getAllChunkIds : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r7 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r7 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r8 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r8 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : i1 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean,org.slf4j.Logger,java.lang.String)>(r19, $r7, 1, $r8, "Retrieved blobs - ")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : i1 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean,org.slf4j.Logger,java.lang.String)>(r19, $r7, 1, $r8, "Retrieved blobs - ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r9 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r9 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of blobs present in BlobStore : [{}] ", $r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Number of blobs present in BlobStore : [{}] ", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $z0 = r19 instanceof java.io.Closeable
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : $z0 = r19 instanceof java.io.Closeable >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.retrieve : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r27 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r27 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r28 = virtualinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r28 = virtualinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l5 = virtualinvoke $r28.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l5 = virtualinvoke $r28.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : interfaceinvoke $r27.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Length of blob ids file retrieved from tracker {}", $r29)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : interfaceinvoke $r27.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Length of blob ids file retrieved from tracker {}", $r29) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever: org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState fs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l0 = virtualinvoke $r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $l0 = virtualinvoke $r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $b1 = $l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $b1 = $l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $b1 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : if $b1 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : return $r3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobIdRetriever.call : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void difference(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>(r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void difference(org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r3 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r3 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>("Starting difference phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>("Starting difference phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r4 = new org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r4 = new org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r5 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r6 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r6 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r7 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: com.google.common.base.Function transformer>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r7 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: com.google.common.base.Function transformer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator: void <init>(java.io.File,java.io.File,com.google.common.base.Function)>($r5, $r6, $r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.FileIOUtils$FileLineDifferenceIterator: void <init>(java.io.File,java.io.File,com.google.common.base.Function)>($r5, $r6, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r8 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r8 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File gcCandidates>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File gcCandidates> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : i0 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean)>($r4, $r8, 1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : i0 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean)>($r4, $r8, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1: java.lang.String apply(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1: java.lang.String apply(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = $r2[0]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : $r3 = $r2[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$1.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r9 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found candidates - ")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found candidates - ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r14 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : $r14 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>("Ending difference phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.difference : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>("Ending difference phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>($l12)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>($l12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b2 = $l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b2 = $l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b2 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b2 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : l8 = -1L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : l8 = -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.api.jmx.CheckpointMBean checkpointMbean>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.api.jmx.CheckpointMBean checkpointMbean> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.api.jmx.CheckpointMBean checkpointMbean>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.api.jmx.CheckpointMBean checkpointMbean> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r7 = interfaceinvoke $r6.<org.apache.jackrabbit.oak.api.jmx.CheckpointMBean: java.util.Date getOldestCheckpointCreationDate()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r7 = interfaceinvoke $r6.<org.apache.jackrabbit.oak.api.jmx.CheckpointMBean: java.util.Date getOldestCheckpointCreationDate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : $r1 = new java.util.Date
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : $r1 = new java.util.Date >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean: long getOldestCheckpointCreationTimestamp()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean: long getOldestCheckpointCreationTimestamp()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : r1 = interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeStore: java.lang.Iterable checkpoints()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : r1 = interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeStore: java.lang.Iterable checkpoints()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : l3 = 9223372036854775807L
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : l3 = 9223372036854775807L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : $b0 = l3 cmp 9223372036854775807L
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : $b0 = l3 cmp 9223372036854775807L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : if $b0 != 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : if $b0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : l3 = 0L
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : l3 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : return l3
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationTimestamp : return l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : specialinvoke $r1.<java.util.Date: void <init>(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : specialinvoke $r1.<java.util.Date: void <init>(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : return $r1
org.apache.jackrabbit.oak.plugins.blob.BlobGCCheckpointRefTest$MemoryStoreCheckpointMBean.getOldestCheckpointCreationDate : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : l8 = virtualinvoke $r7.<java.util.Date: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : l8 = virtualinvoke $r7.<java.util.Date: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r8 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r8 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Oldest checkpoint data retrieved {} ", $r9)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Oldest checkpoint data retrieved {} ", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r2 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("maxModificationReferenceTime {} ", $r3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("maxModificationReferenceTime {} ", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b3 = l7 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b3 = l7 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b3 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b3 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l9 = l7
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l9 = l7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b4 = l8 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $b4 = l8 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b4 > 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : if $b4 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l11 = $l9
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l11 = $l9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : goto [?= $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : goto [?= $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r4 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Calculated reference time {} ", $r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Calculated reference time {} ", $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l5 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long maxLastModifiedInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l6 = $l11 - $l5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : $l6 = $l11 - $l5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : return $l6
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.getMaxModifiedTime : return $l6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r15 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r15 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>("Starting sweep phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>("Starting sweep phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r16 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r16 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r17 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r17 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r0 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r1 = new java.sql.Timestamp
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r1 = new java.sql.Timestamp >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r1.<java.sql.Timestamp: void <init>(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : specialinvoke $r1.<java.sql.Timestamp: void <init>(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 23)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : return $r5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.timestampToString : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Sweeping blobs with modified time > than the configured max deleted time ({}). ", $r17)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Sweeping blobs with modified time > than the configured max deleted time ({}). ", $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = null
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l16 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l16 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : i17 = 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : i17 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r18 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r18 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r19 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r19 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r18, $r19)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r53 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r18, $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r20 = new java.util.ArrayDeque
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r20 = new java.util.ArrayDeque >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r20.<java.util.ArrayDeque: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : specialinvoke $r20.<java.util.ArrayDeque: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r21 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r21 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGcCandidates()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r22 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r22 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r23 = virtualinvoke $r22.<java.nio.charset.Charset: java.lang.String name()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r23 = virtualinvoke $r22.<java.nio.charset.Charset: java.lang.String name()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r21, $r23)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r54 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r21, $r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: int getBatchCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r54, $i4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int)>(r54, $i4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r43 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r43 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r4 = (java.util.List) $r43
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r4 = (java.util.List) $r43 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i7 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $i7 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l8 = (long) $i7
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l8 = (long) $i7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = l14 + $l8
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l14 = l14 + $l8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r44 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r44 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r45 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r44)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r45 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r44) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r46 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r46 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l9 = virtualinvoke $r45.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: long sweepInternal(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.List,java.util.ArrayDeque,long)>($r46, r4, $r20, l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $l9 = virtualinvoke $r45.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: long sweepInternal(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.util.List,java.util.ArrayDeque,long)>($r46, r4, $r20, l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l2 = 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l2 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r6 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Blob ids to be deleted {}", r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Blob ids to be deleted {}", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r5 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : r5 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8[0] = r5
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r8[0] = r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r9 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r9 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: long countDeleteChunks(java.util.List,long)>($r9, l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : l3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: long countDeleteChunks(java.util.List,long)>($r9, l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : i6 = 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : i6 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r3 = (java.lang.String) $r4
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : r3 = (java.lang.String) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("maxLastModifiedTime {}", $r6)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("maxLastModifiedTime {}", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r8 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r8 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r10 = (org.apache.jackrabbit.core.data.DataRecord) $r9
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r10 = (org.apache.jackrabbit.core.data.DataRecord) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l2 = interfaceinvoke $r10.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l2 = interfaceinvoke $r10.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("store.get(id).getLastModified() {}", $r11)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("store.get(id).getLastModified() {}", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b3 = l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b3 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b3 <= 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b3 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r16 = (org.apache.jackrabbit.core.data.DataRecord) $r15
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $r16 = (org.apache.jackrabbit.core.data.DataRecord) $r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l4 = interfaceinvoke $r16.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l4 = interfaceinvoke $r16.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b5 = $l4 cmp l0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $b5 = $l4 cmp l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b5 >= 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : if $b5 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l1 = (long) i6
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : $l1 = (long) i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : return $l1
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.countDeleteChunks : return $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $b1 = l3 cmp 1L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $b1 = l3 cmp 1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $b1 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : if $b1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : $r10 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Blob [{}] not deleted", r5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Blob [{}] not deleted", r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : return l2
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.sweepInternal : return l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = l15 + $l9
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : l15 = l15 + $l9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r47 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r20)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r47 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>($r47, r53)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: void saveBatchToFile(java.util.List,java.io.BufferedWriter)>($r47, r53) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r5 = virtualinvoke $r20.<java.util.ArrayDeque: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : r5 = virtualinvoke $r20.<java.util.ArrayDeque: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r20.<java.util.ArrayDeque: void clear()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r20.<java.util.ArrayDeque: void clear()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r54)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r54) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r53)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: void closeQuietly(java.io.Closeable)>(r53) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : goto [?= $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r25 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r24)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r25 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r27 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r27 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r28 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r28 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getMarkedRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r25.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void handleRemoves(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.io.File,java.io.File)>($r26, $r27, $r28)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r25.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType: void handleRemoves(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore,java.io.File,java.io.File)>($r26, $r27, $r28) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.handleRemoves : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r2)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType.handleRemoves : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b5 = l14 cmp l15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b5 = l14 cmp l15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b5 == 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b5 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r39 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r39 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38 = newarray (java.lang.Object)[3]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[0] = $r40
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[0] = $r40 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[1] = $r41
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[1] = $r41 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r42 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r42 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>(l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[2] = $r42
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r38[2] = $r42 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Deleted only [{}] blobs entries from the [{}] candidates identified. This may happen if blob modified time is > than the max deleted time ({})", $r38)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Deleted only [{}] blobs entries from the [{}] candidates identified. This may happen if blob modified time is > than the max deleted time ({})", $r38) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b6 = l16 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $b6 = l16 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b6 <= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : if $b6 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r30 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r29)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r30 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType get(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r29) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r30.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void removeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r31)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : virtualinvoke $r30.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType: void removeAllMarkedReferences(org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore)>($r31) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r3 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r3 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r2 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType REFERENCES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r4 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r4 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r14 = (java.util.Map$Entry) $r10
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r14 = (java.util.Map$Entry) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r12 = (java.lang.String) $r11
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r12 = (java.lang.String) $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z2 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z2 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r15 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r15 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r4 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : r4 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore: java.util.Map metadata> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest$TimeLapsedBlobStore.deleteAllMetadataRecords : goto [?= $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r6 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r5 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r5 = <org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType MARKED_START_MARKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r7 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : $r7 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils$SharedStoreRecordType: java.lang.String getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$GarbageCollectionType$1.removeAllMarkedReferences : interfaceinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void deleteAllMetadataRecords(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r32 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : $r32 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String)>("Ending sweep phase of the garbage collector")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String)>("Ending sweep phase of the garbage collector") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : return l15
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.sweep : return l15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $b4 = $l3 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $b4 = $l3 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l6 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l6 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: long getMaxModifiedTime(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>()]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : virtualinvoke r19.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r9 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r9 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8 = newarray (java.lang.Object)[4]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r10 = virtualinvoke r19.<com.google.common.base.Stopwatch: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r10 = virtualinvoke r19.<com.google.common.base.Stopwatch: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[0] = $r10
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l5 = virtualinvoke r19.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r11)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $l5 = virtualinvoke r19.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[1] = $r12
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[1] = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[2] = $r13
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[2] = $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>($l6)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: java.lang.String timestampToString(long)>($l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[3] = $r14
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r8[3] = $r14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Blob garbage collection completed in {} ({} ms). Number of blobs deleted [{}] with max modification time of [{}]", $r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Blob garbage collection completed in {} ({} ms). Number of blobs deleted [{}] with max modification time of [{}]", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r20 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $r20 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $z4 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isTraceEnabled()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : $z4 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isTraceEnabled()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $z4 != 0
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : if $z4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r3, z3)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r3, z3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector.markAndSweep : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $l1 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $l1 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.util.Set iterate()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: java.util.Set iterate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore blobStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r1 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r1 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.GarbageCollectableBlobStore: java.util.Iterator getAllChunkIds(long)>(0L) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : return r2
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.iterate : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGCTest: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $i2 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $i2 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} blobs existing after gc : {}", $r6, r3)
org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} blobs existing after gc : {}", $r6, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGCTest.gcInternal : return r3
