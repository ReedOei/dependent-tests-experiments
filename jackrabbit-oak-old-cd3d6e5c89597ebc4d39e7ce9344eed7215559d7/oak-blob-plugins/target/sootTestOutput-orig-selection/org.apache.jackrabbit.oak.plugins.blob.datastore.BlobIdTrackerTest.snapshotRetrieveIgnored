org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r2 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r2 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.util.concurrent.ScheduledExecutorService scheduler>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.util.concurrent.ScheduledExecutorService scheduler> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : specialinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : specialinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;"
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.filter : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2.filter : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("blob")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("blob") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: long snapshotInterval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: long snapshotInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : return $l0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$200 : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z2 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : if $z2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : $z3 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : goto [?= return $z3]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$2$1.apply : goto [?= return $z3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : i2 = i0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : i2 = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : if i2 > i1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : if i2 > i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : i2 = i2 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : i2 = i2 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.range : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : r4 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : r4 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: void add(java.lang.String)>(r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: void add(java.lang.String)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.add : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.add : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.add : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.add : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : return r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.add : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: boolean skip()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: boolean skip()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File access$400(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File access$400(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : $r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : $r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".snapshot")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".snapshot") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void access$300(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void access$300(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$300 : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$300 : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot(boolean)>(0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot(boolean)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Finished taking snapshot")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Finished taking snapshot") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$3.getFileNameSuffix : return ".refs"
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$3.getFileNameSuffix : return ".refs" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z1 = virtualinvoke $r2.<java.io.File: boolean createNewFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z1 = virtualinvoke $r2.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File created {}", $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File created {}", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : r2 = virtualinvoke r1.<org.junit.rules.TemporaryFolder: java.io.File newFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : r2 = virtualinvoke r1.<org.junit.rules.TemporaryFolder: java.io.File newFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : $r4 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : $r4 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : $r5 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : $r5 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File get(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File get(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.util.Set readStringsAsSet(java.io.InputStream,boolean)>($r4, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.util.Set readStringsAsSet(java.io.InputStream,boolean)>($r4, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : return r3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieveFile : return r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : r1 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : r1 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: java.util.Iterator get()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: java.util.Iterator get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator emptyIterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.get : $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator emptyIterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : $z1 = r2 instanceof java.io.Closeable
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : $z1 = r2 instanceof java.io.Closeable >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTrackerTest.retrieve : return r1
