org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;"
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest: java.lang.String repoId>
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest: java.lang.String repoId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: void <init>(java.io.File,java.lang.String)>($r3, $r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: void <init>(java.io.File,java.lang.String)>($r3, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.initTracker : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : i2 = i0
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : i2 = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : if i2 > i1
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : if i2 > i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : $r2 = staticinvoke <com.google.common.base.Strings: java.lang.String padStart(java.lang.String,int,char)>($r1, 2, 48)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : $r2 = staticinvoke <com.google.common.base.Strings: java.lang.String padStart(java.lang.String,int,char)>($r1, 2, 48) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : i2 = i2 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : i2 = i2 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.range : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : r3 = virtualinvoke r2.<org.junit.rules.TemporaryFolder: java.io.File newFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : r3 = virtualinvoke r2.<org.junit.rules.TemporaryFolder: java.io.File newFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean)>($r4, r3, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: int writeStrings(java.util.Iterator,java.io.File,boolean)>($r4, r3, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: void track(java.io.File)>(r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: void track(java.io.File)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.util.concurrent.locks.ReentrantLock lock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.util.concurrent.locks.ReentrantLock lock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void lock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void lock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r4 = newarray (java.io.File)[1]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r4 = newarray (java.io.File)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r4[0] = r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r4[0] = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File delFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File delFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void append(java.util.List,java.io.File,boolean)>($r5, $r6, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void append(java.util.List,java.io.File,boolean)>($r5, $r6, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File delFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File delFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void sort(java.io.File)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.util.concurrent.locks.ReentrantLock lock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.util.concurrent.locks.ReentrantLock lock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.track : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : $r5 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : $r5 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.add : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : r2 = virtualinvoke r1.<org.junit.rules.TemporaryFolder: java.io.File newFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : r2 = virtualinvoke r1.<org.junit.rules.TemporaryFolder: java.io.File newFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : $r4 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : $r4 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : $r5 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : $r5 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File retrieve(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File retrieve(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File delFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker: java.io.File delFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r5, $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r5, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : return $r4
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$ActiveDeletionTracker.retrieve : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.util.Set readStringsAsSet(java.io.InputStream,boolean)>($r4, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: java.util.Set readStringsAsSet(java.io.InputStream,boolean)>($r4, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.ActiveDeletionTrackerStoreTest.retrieve : return r3
