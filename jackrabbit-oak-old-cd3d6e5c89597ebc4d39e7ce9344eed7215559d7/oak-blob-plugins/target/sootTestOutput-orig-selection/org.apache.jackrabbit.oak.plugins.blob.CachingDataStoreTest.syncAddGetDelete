org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r6 = <org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r6 = <org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Starting init")
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Starting init") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r7 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r7 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r7.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r7.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch taskLatch> = $r7
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch taskLatch> = $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r8 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r8 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch callbackLatch> = $r8
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch callbackLatch> = $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r9 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r9 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r9.<java.util.concurrent.CountDownLatch: void <init>(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r9.<java.util.concurrent.CountDownLatch: void <init>(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch afterExecuteLatch> = $r9
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch afterExecuteLatch> = $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r10 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r10 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch taskLatch>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch taskLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch callbackLatch>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch callbackLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch afterExecuteLatch>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.CountDownLatch afterExecuteLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: void <init>(int,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(1, $r13, $r12, $r11)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: void <init>(int,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(1, $r13, $r12, $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>(r2, 500, $r15)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>(r2, 500, $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r16.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r14)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r16.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r18 = new org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r18 = new org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r18.<org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider: void <init>(java.util.concurrent.ScheduledExecutorService)>(r2)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r18.<org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider: void <init>(java.util.concurrent.ScheduledExecutorService)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r19 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r19 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> = $r19
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> = $r19 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r23 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r23 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r20 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r20 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r21 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r21 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r20.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>($r22, 500, $r21)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r20.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>($r22, 500, $r21) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r23.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r20)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r23.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.junit.rules.TemporaryFolder folder>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r25 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r4 = virtualinvoke $r25.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r4 = virtualinvoke $r25.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: void <init>(java.io.File)>(r4)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: void <init>(java.io.File)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend backend> = $r26
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend backend> = $r26 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r27 = new org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r27 = new org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r27.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest,org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend)>(r0, $r26)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : specialinvoke $r27.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest,org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend)>(r0, $r26) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> = $r27
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> = $r27 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r28.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setStatisticsProvider(org.apache.jackrabbit.oak.stats.StatisticsProvider)>($r18)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r28.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setStatisticsProvider(org.apache.jackrabbit.oak.stats.StatisticsProvider)>($r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStatisticsProvider : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider> = r1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStatisticsProvider : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $l3 = (long) i1
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $l3 = (long) i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r29.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setCacheSize(long)>($l3)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r29.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setCacheSize(long)>($l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setCacheSize : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: long cacheSize> = l0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setCacheSize : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: long cacheSize> = l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r30 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r30 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r30.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setStagingSplitPercentage(int)>(i2)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r30.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setStagingSplitPercentage(int)>(i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStagingSplitPercentage : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> = i0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStagingSplitPercentage : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r31.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor> = $r10
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r31.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor> = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r33 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r33 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r32 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r32 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r33.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor> = $r32
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r33.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor> = $r32 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r34 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r34 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r35 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r35 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r34.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ExecutorService executor> = $r35
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r34.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ExecutorService executor> = $r35 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r37 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r37 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r36 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r36 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r38 = virtualinvoke $r36.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r38 = virtualinvoke $r36.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r37.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void init(java.lang.String)>($r38)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : virtualinvoke $r37.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void init(java.lang.String)>($r38) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $r3 != null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $r3 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r8 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/repository/datastore")
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/repository/datastore") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r11
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r7 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r7 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r7
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i0 < 0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i0 < 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i1 > 50
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i1 > 50 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z0 = 1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z0 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50")]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50")] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50")
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r12 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r12 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory> = $r12
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory> = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r14 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r14 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "tmp")
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "tmp") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> = $r14
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> = $r14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r16 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r16 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z1 = virtualinvoke $r17.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z1 = virtualinvoke $r17.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Temporary file created [{}]", $r18)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Temporary file created [{}]", $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r19 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend createBackend()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r19 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend createBackend()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1.createBackend : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend val$testBackend>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1.createBackend : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend val$testBackend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1.createBackend : return $r1
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest$1.createBackend : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> = $r19
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> = $r19 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : virtualinvoke $r20.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void init()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : virtualinvoke $r20.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void init()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r21 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r21 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r22)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r23 = new org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r23 = new org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r25 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r25 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: long cacheSize>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: long cacheSize> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int uploadThreads>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int uploadThreads> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r27 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r27 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r27.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r27.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r30 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r30 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingPurgeInterval>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingPurgeInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingRetryInterval>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingRetryInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r23.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void <init>(java.lang.String,java.io.File,long,int,int,com.google.common.cache.CacheLoader,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.ExecutorService,int,int)>($r24, $r25, $l2, $i3, $i4, $r26, $r27, $r28, $r29, $r30, $r31, $i5, $i6)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r23.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void <init>(java.lang.String,java.io.File,long,int,int,com.google.common.cache.CacheLoader,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.ExecutorService,int,int)>($r24, $r25, $l2, $i3, $i4, $r26, $r27, $r28, $r29, $r30, $r31, $i5, $i6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads")
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void deleteSerializedUploadMap(java.io.File)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void deleteSerializedUploadMap(java.io.File)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted asyncUploadMap [{}] from [{}]", "async-pending-uploads.ser", r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted asyncUploadMap [{}] from [{}]", "async-pending-uploads.ser", r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.setDownloadCache : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> = r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.setDownloadCache : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> = $r23
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> = $r23 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r39 = <org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : $r39 = <org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("Finished init")
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.init : interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("Finished init") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r10 = null
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r10 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r11 = null
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r11 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r5 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r5 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r10 = $r5
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r10 = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256")
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r6 = new java.security.DigestOutputStream
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r6 = new java.security.DigestOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r7 = new org.apache.commons.io.output.NullOutputStream
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r7 = new org.apache.commons.io.output.NullOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : specialinvoke $r7.<org.apache.commons.io.output.NullOutputStream: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : specialinvoke $r7.<org.apache.commons.io.output.NullOutputStream: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : specialinvoke $r6.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r7, r2)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : specialinvoke $r6.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r7, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r11 = $r6
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r11 = $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r8 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : $r8 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r8)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : r3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r6)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : return r3
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.getIdForInputStream : return r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r3 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r3 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r32 = staticinvoke <org.apache.jackrabbit.util.TransientFileFactory: org.apache.jackrabbit.util.TransientFileFactory getInstance()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r32 = staticinvoke <org.apache.jackrabbit.util.TransientFileFactory: org.apache.jackrabbit.util.TransientFileFactory getInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r4 = virtualinvoke r32.<org.apache.jackrabbit.util.TransientFileFactory: java.io.File createTransientFile(java.lang.String,java.lang.String,java.io.File)>("upload", null, $r7)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r4 = virtualinvoke r32.<org.apache.jackrabbit.util.TransientFileFactory: java.io.File createTransientFile(java.lang.String,java.lang.String,java.io.File)>("upload", null, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String DIGEST>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String DIGEST> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r9 = new java.security.DigestOutputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r9 = new java.security.DigestOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r10 = new java.io.FileOutputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r10 = new java.io.FileOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r9.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r10, r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r9.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r10, r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : l2 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r9)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : l2 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r9.<java.io.OutputStream: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r9.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : goto [?= $r11 = new org.apache.jackrabbit.core.data.DataIdentifier]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : goto [?= $r11 = new org.apache.jackrabbit.core.data.DataIdentifier] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r11 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r11 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r12 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r12 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String encodeHexString(byte[])>($r12)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String encodeHexString(byte[])>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r15 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r15 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14 = newarray (java.lang.Object)[3]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[0] = $r11
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[0] = $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[1] = $r16
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[1] = $r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $l0 = virtualinvoke r3.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r17)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $l0 = virtualinvoke r3.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[2] = $r18
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[2] = $r18 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("SHA-256 of [{}], length =[{}] took [{}] ms ", $r14)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("SHA-256 of [{}], length =[{}] took [{}] ms ", $r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r19 = virtualinvoke r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType getUpload()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r19 = virtualinvoke r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType getUpload()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r20 = <org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType SYNCHRONOUS>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r20 = <org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType SYNCHRONOUS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : if $r19 == $r20
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : if $r19 == $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r21 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r21 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r21.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void write(org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>($r11, r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r21.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void write(org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>($r11, r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r5 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r5 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r22 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r22 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Added blob [{}] to backend", $r11)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Added blob [{}] to backend", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r23 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r23 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r24 = virtualinvoke $r23.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache getDownloadCache()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r24 = virtualinvoke $r23.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache getDownloadCache()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getDownloadCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getDownloadCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getDownloadCache : return $r1
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getDownloadCache : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r25 = virtualinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r25 = virtualinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r24.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File)>($r25, r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r24.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File)>($r25, r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File,boolean)>(r1, r2, 1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File,boolean)>(r1, r2, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>]
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r1, r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r1, r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r35 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>($r11)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r35 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File getIfPresent(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File getIfPresent(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return null
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object getIfPresent(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object getIfPresent(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r5 = (java.io.File) $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r5 = (java.io.File) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : return $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : return $r5
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r8 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r8 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l2 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l2 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l3 = virtualinvoke r2.<java.io.File: long lastModified()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l3 = virtualinvoke r2.<java.io.File: long lastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore,org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend,org.apache.jackrabbit.core.data.DataIdentifier,long,long)>(r0, $r9, r1, $l2, $l3)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore,org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend,org.apache.jackrabbit.core.data.DataIdentifier,long,long)>(r0, $r9, r1, $l2, $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : return $r8
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : return $r35
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : return $r35 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : r24 = null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : r24 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore store>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache access$000(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>($r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache access$000(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : r24 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File get(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : r24 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File get(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : r7 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : r7 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : if r7 == null
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : if r7 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File get(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File get(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r5 = (java.io.File) $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r5 = (java.io.File) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : return $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : return $r4
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : if r24 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : if r24 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $z0 = virtualinvoke r24.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $z0 = virtualinvoke r24.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r9 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : $r9 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r24)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : return $r9
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord.getStream : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : r3 = virtualinvoke r2.<org.junit.rules.TemporaryFolder: java.io.File newFile()>()
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : r3 = virtualinvoke r2.<org.junit.rules.TemporaryFolder: java.io.File newFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r3)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : $z0 = staticinvoke <com.google.common.io.Files: boolean equal(java.io.File,java.io.File)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : $z0 = staticinvoke <com.google.common.io.Files: boolean equal(java.io.File,java.io.File)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r0)
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.CachingDataStoreTest.assertFile : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache getStagingCache()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache getStagingCache()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : return $r1
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r3 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.Iterator getAllIdentifiers()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r3 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.Iterator getAllIdentifiers()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : return $r3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getAllIdentifiers : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r4 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$3
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r4 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: java.util.Iterator getAllIdentifiers()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: java.util.Iterator getAllIdentifiers()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getAllIdentifiers : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r8 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator,java.util.Iterator)>($r5, $r7)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : $r8 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator,java.util.Iterator)>($r5, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : return $r8
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getAllIdentifiers : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r3 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r3 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void invalidate(java.lang.Object)>($r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void invalidate(java.lang.Object)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void invalidate(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void invalidate(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void invalidate(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void invalidate(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r4 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r4 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: void evicted(java.lang.String,java.io.File,com.google.common.cache.RemovalCause)>($r5, $r4, r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: void evicted(java.lang.String,java.io.File,com.google.common.cache.RemovalCause)>($r5, $r4, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = <com.google.common.cache.RemovalCause: com.google.common.cache.RemovalCause REPLACED>
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = <com.google.common.cache.RemovalCause: com.google.common.cache.RemovalCause REPLACED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r3 == $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r3 == $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r7)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r9 = virtualinvoke r3.<com.google.common.cache.RemovalCause: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r9 = virtualinvoke r3.<com.google.common.cache.RemovalCause: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] evicted with reason [{}]", r2, $r9)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] evicted with reason [{}]", r2, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void deleteRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void deleteRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r12 = virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: org.apache.jackrabbit.core.data.DataRecord getRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r12 = virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: org.apache.jackrabbit.core.data.DataRecord getRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : return null
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.getRecord : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r6 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r6 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l0 = interfaceinvoke r12.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l0 = interfaceinvoke r12.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r11 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r11 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Error retrieving record [{}]", r1, $r10)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Error retrieving record [{}]", r1, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : return null
