org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r0 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/blobstore/")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/blobstore/") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: long time>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: long time> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $b1 = $l0 cmp -1L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $b1 = $l0 cmp -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : if $b1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : if $b1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l2 = 0L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l2 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : goto [?= $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : goto [?= $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)>($r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)>($r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.lang.String getHomeDir()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.lang.String getHomeDir()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;"
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : $r2 = (org.apache.jackrabbit.core.data.DataIdentifier) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : $r2 = (org.apache.jackrabbit.core.data.DataIdentifier) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1: org.apache.jackrabbit.core.data.DataRecord apply(org.apache.jackrabbit.core.data.DataIdentifier)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1: org.apache.jackrabbit.core.data.DataRecord apply(org.apache.jackrabbit.core.data.DataIdentifier)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: void <init>(org.apache.jackrabbit.core.data.DataIdentifier,org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1)>(r1, null)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: void <init>(org.apache.jackrabbit.core.data.DataIdentifier,org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1)>(r1, null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$1.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.util.Iterator getAllRecords()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.util.Iterator getAllRecords()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r7 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r7 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r8 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.Iterator getAllRecords()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r8 = interfaceinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.Iterator getAllRecords()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : return $r8
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r2 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,long)>(r0, l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,long)>(r0, l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r4 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r4 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: boolean apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: boolean apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: long val$maxLastModifiedTime>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: long val$maxLastModifiedTime> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $b1 = $l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $b1 = $l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l2 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l2 = interfaceinvoke r1.<org.apache.jackrabbit.core.data.DataRecord: long getLastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: org.apache.jackrabbit.core.data.DataIdentifier id>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: org.apache.jackrabbit.core.data.DataIdentifier id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: org.apache.jackrabbit.core.data.DataIdentifier id>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: org.apache.jackrabbit.core.data.DataIdentifier id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(45)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $i1 = $i0 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $i1 = $i0 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : $l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : return $l2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLastModified : return $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: long val$maxLastModifiedTime>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $l3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4: long val$maxLastModifiedTime> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $b4 = $l2 cmp $l3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : $b4 = $l2 cmp $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if $b4 >= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : if $b4 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = (org.apache.jackrabbit.core.data.DataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: java.lang.String apply(org.apache.jackrabbit.core.data.DataRecord)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean access$100(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean access$100(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.access$100 : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(org.apache.jackrabbit.core.data.DataRecord)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(org.apache.jackrabbit.core.data.DataRecord)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getIdentifier : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: org.apache.jackrabbit.core.data.DataIdentifier id>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getIdentifier : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord: org.apache.jackrabbit.core.data.DataIdentifier id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getIdentifier : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getIdentifier : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : $r1 = new org.apache.jackrabbit.core.data.DataStoreException
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : $r1 = new org.apache.jackrabbit.core.data.DataStoreException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : $r2 = new java.lang.UnsupportedOperationException
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : $r2 = new java.lang.UnsupportedOperationException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : specialinvoke $r1.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.Throwable)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : specialinvoke $r1.<org.apache.jackrabbit.core.data.DataStoreException: void <init>(java.lang.Throwable)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : throw $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStoreTest$TimeDataRecord.getLength : throw $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $b1 = $l0 cmp -1L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $b1 = $l0 cmp -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : if $b1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : if $b1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$3.apply : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$4.apply : return 0
