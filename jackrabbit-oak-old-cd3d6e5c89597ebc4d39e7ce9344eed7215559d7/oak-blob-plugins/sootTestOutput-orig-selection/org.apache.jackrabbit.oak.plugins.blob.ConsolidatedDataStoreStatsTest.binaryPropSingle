org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r3 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: java.lang.String cacheInfoAsString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r3 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: java.lang.String cacheInfoAsString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Cache stats on close [{}]", $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Cache stats on close [{}]", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r4 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r4 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.util.concurrent.ExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : virtualinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : virtualinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads in progress on close [{}]", $r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads in progress on close [{}]", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i1 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: int size()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i1 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads completed but not cleared from cache [{}]", $r6)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads completed but not cleared from cache [{}]", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r8 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r8 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r9 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: java.lang.String cacheInfoAsString()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r9 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: java.lang.String cacheInfoAsString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r1 = staticinvoke <com.google.common.base.Objects: com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)>("StagingCacheStats")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r1 = staticinvoke <com.google.common.base.Objects: com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)>("StagingCacheStats") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getRequestCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getRequestCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r2 = virtualinvoke $r1.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("requestCount", $l0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r2 = virtualinvoke $r1.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("requestCount", $l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getHitCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getHitCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r3 = virtualinvoke $r2.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("hitCount", $l1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r3 = virtualinvoke $r2.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("hitCount", $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getHitRate()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getHitRate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $b2 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $b2 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : if $b2 != 0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : if $b2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d1 = (double) l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d1 = (double) l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d0 = (double) l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d0 = (double) l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d2 = $d1 / $d0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d2 = $d1 / $d0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : return $d2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : return $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4[0] = $r5
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4[0] = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r4)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r7 = virtualinvoke $r3.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("hitRate", $r6)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r7 = virtualinvoke $r3.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("hitRate", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l2 = $l0 - $l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l2 = $l0 - $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : return $l2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : return $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r8 = virtualinvoke $r7.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("missCount", $l2)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r8 = virtualinvoke $r7.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("missCount", $l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getMissRate()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getMissRate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l1 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l1 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $b2 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $b2 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : if $b2 != 0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : if $b2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d1 = (double) l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d1 = (double) l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d0 = (double) l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d0 = (double) l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d2 = $d1 / $d0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d2 = $d1 / $d0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : return $d2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : return $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9[0] = $r10
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r9)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r12 = virtualinvoke $r8.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("missRate", $r11)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r12 = virtualinvoke $r8.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("missRate", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r13 = virtualinvoke $r12.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadCount", $l3)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r13 = virtualinvoke $r12.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadCount", $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadSuccessCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadSuccessCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r14 = virtualinvoke $r13.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadSuccessCount", $l4)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r14 = virtualinvoke $r13.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadSuccessCount", $l4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getElementCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getElementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r15 = virtualinvoke $r14.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("elementCount", $l5)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r15 = virtualinvoke $r14.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("elementCount", $l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentMemoryWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentMemoryWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r16 = virtualinvoke $r15.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("currentMemSize", $l6)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r16 = virtualinvoke $r15.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("currentMemSize", $l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l7 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l7 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r17 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l7)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r17 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r18 = virtualinvoke $r16.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("totalWeight", $r17)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r18 = virtualinvoke $r16.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("totalWeight", $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMaxTotalWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMaxTotalWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long maxWeight>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long maxWeight> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r19 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l8)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r19 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r20 = virtualinvoke $r18.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxWeight", $r19)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r20 = virtualinvoke $r18.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxWeight", $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r21 = virtualinvoke $r20.<com.google.common.base.Objects$ToStringHelper: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r21 = virtualinvoke $r20.<com.google.common.base.Objects$ToStringHelper: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : return $r21
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : return $r21 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Staging cache stats on close [{}]", $r9)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Staging cache stats on close [{}]", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r10 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r10 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r11)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r12 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r12 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService statsExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService statsExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r15)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.junit.rules.TemporaryFolder folder>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFile()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File testFile> = $r5
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File testFile> = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.InputStream randomStream(int,int)>(0, 16384)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.InputStream randomStream(int,int)>(0, 16384) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File testFile>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File testFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>($r6, $r7)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>($r6, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r8 = new java.io.FileInputStream
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r8 = new java.io.FileInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File testFile>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File testFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>($r9)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.lang.String getIdForInputStream(java.io.InputStream)>($r8)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.lang.String getIdForInputStream(java.io.InputStream)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256")
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r5 = new java.security.DigestOutputStream
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r5 = new java.security.DigestOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r6 = new org.apache.commons.io.output.NullOutputStream
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r6 = new org.apache.commons.io.output.NullOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : specialinvoke $r5.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r6, r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : specialinvoke $r5.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r6, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : goto [?= $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : goto [?= $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r7 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r7)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : return $r8
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.getIdForInputStream : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/jackrabbit/oak/api/Blob;")
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/jackrabbit/oak/api/Blob;") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r11 = (org.apache.jackrabbit.oak.api.Blob) $r10
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r11 = (org.apache.jackrabbit.oak.api.Blob) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.api.Blob mockBlob> = $r11
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.api.Blob mockBlob> = $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r12 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.api.Blob mockBlob>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r12 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.api.Blob mockBlob> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r13 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r13 = interfaceinvoke $r12.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r16 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.api.Blob mockBlob>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r16 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.api.Blob mockBlob> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r17 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r16)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r17 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r18 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r18 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r19 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r19 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r20 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r20 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r21 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r21 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r22 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeStore initNodeStore(com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional)>($r17, $r18, $r19, $r20, $r21)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r22 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeStore initNodeStore(com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional)>($r17, $r18, $r19, $r20, $r21) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r8 = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeStore
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r8 = new org.apache.jackrabbit.oak.plugins.memory.MemoryNodeStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.memory.MemoryNodeStore: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.memory.MemoryNodeStore: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r9 = interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r9 = interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : r6 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : r6 = interfaceinvoke $r9.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeBuilder builder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeBuilder initNodeBuilder(org.apache.jackrabbit.oak.spi.state.NodeBuilder)>(r6)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeBuilder initNodeBuilder(org.apache.jackrabbit.oak.spi.state.NodeBuilder)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r6 = r0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r6 = r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $r3 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.lang.String testNodePathName>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $r3 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.lang.String testNodePathName> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r3)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r1 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r1 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r2 = (java.lang.String) $r5
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r2 = (java.lang.String) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r6 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : r6 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : return r6
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeBuilder : return r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z0 = virtualinvoke r0.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z0 = virtualinvoke r0.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r23 = virtualinvoke r0.<com.google.common.base.Optional: java.lang.Object get()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r23 = virtualinvoke r0.<com.google.common.base.Optional: java.lang.Object get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : interfaceinvoke r7.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("blobProp1", $r23)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : interfaceinvoke r7.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("blobProp1", $r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z1 = virtualinvoke r1.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z1 = virtualinvoke r1.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z2 = virtualinvoke r2.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z2 = virtualinvoke r2.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z3 = virtualinvoke r3.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z3 = virtualinvoke r3.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z3 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z4 = virtualinvoke r4.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $z4 = virtualinvoke r4.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z4 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : if $z4 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r11 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r11 = <org.apache.jackrabbit.oak.spi.commit.EmptyHook: org.apache.jackrabbit.oak.spi.commit.CommitHook INSTANCE> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r10 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r10 = <org.apache.jackrabbit.oak.spi.commit.CommitInfo: org.apache.jackrabbit.oak.spi.commit.CommitInfo EMPTY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r6, $r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState merge(org.apache.jackrabbit.oak.spi.state.NodeBuilder,org.apache.jackrabbit.oak.spi.commit.CommitHook,org.apache.jackrabbit.oak.spi.commit.CommitInfo)>(r6, $r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : return $r8
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> = $r22
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> = $r22 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r23 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r23 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r23.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r23.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch taskLatch> = $r23
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch taskLatch> = $r23 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r24 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r24 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r24.<java.util.concurrent.CountDownLatch: void <init>(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r24.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch callbackLatch> = $r24
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch callbackLatch> = $r24 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r25 = new java.util.concurrent.CountDownLatch
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r25 = new java.util.concurrent.CountDownLatch >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r25.<java.util.concurrent.CountDownLatch: void <init>(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r25.<java.util.concurrent.CountDownLatch: void <init>(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch afterExecuteLatch> = $r25
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch afterExecuteLatch> = $r25 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch taskLatch>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch taskLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch callbackLatch>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch callbackLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch afterExecuteLatch>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r27 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch afterExecuteLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: void <init>(int,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(1, $r29, $r28, $r27)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: void <init>(int,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch,java.util.concurrent.CountDownLatch)>(1, $r29, $r28, $r27) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor> = $r26
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor> = $r26 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r32 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r32 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r30 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r30 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r31 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r31 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r30.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>(r2, 500, $r31)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r30.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>(r2, 500, $r31) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r32.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r30)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r32.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r34 = new org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r34 = new org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r34.<org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider: void <init>(java.util.concurrent.ScheduledExecutorService)>(r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r34.<org.apache.jackrabbit.oak.stats.DefaultStatisticsProvider: void <init>(java.util.concurrent.ScheduledExecutorService)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider> = $r34
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider> = $r34 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r35 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r35 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> = $r35
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> = $r35 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r39 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: com.google.common.io.Closer closer>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r39 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: com.google.common.io.Closer closer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r36 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r36 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r38 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r38 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r37 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r37 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r36.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>($r38, 500, $r37)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r36.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService,int,java.util.concurrent.TimeUnit)>($r38, 500, $r37) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r39.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r36)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r39.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r36) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r41 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.junit.rules.TemporaryFolder folder>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r41 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r3 = virtualinvoke $r41.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r3 = virtualinvoke $r41.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r42 = new org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r42 = new org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r42.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest,java.io.File)>(r0, r3)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r42.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest,java.io.File)>(r0, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> = $r42
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> = $r42 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r44 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r44 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r43 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r43 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.stats.StatisticsProvider statsProvider> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r44.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setStatisticsProvider(org.apache.jackrabbit.oak.stats.StatisticsProvider)>($r43)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r44.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void setStatisticsProvider(org.apache.jackrabbit.oak.stats.StatisticsProvider)>($r43) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStatisticsProvider : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider> = r1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStatisticsProvider : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r46 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r46 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r45 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r45 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r46.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor> = $r45
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r46.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor> = $r45 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r48 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r48 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r47 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r47 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r48.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor> = $r47
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r48.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor> = $r47 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r50 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r50 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r49 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r49 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r51 = virtualinvoke $r49.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r51 = virtualinvoke $r49.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r50.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void init(java.lang.String)>($r51)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : virtualinvoke $r50.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void init(java.lang.String)>($r51) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $r3 != null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $r3 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r8 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/repository/datastore")
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/repository/datastore") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r11
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r7 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r7 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r7
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i0 < 0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i0 < 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i1 > 50
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : if $i1 > 50 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z0 = 1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z0 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50")]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50")] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50")
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Staging percentage cache should be between 0 and 50") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r12 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r12 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory> = $r12
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory> = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r14 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r14 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File rootDirectory> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "tmp")
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "tmp") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> = $r14
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> = $r14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r16 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r16 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z1 = virtualinvoke $r17.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $z1 = virtualinvoke $r17.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Temporary file created [{}]", $r18)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Temporary file created [{}]", $r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r19 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend createBackend()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r19 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend createBackend()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : $r1 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : $r1 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1: java.io.File val$datastoreRoot>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1: java.io.File val$datastoreRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: void <init>(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: void <init>(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : return $r1
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest$1.createBackend : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> = $r19
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> = $r19 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : virtualinvoke $r20.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void init()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : virtualinvoke $r20.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void init()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r21 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r21 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r22)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>($r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r23 = new org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r23 = new org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r25 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r25 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: long cacheSize>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: long cacheSize> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int uploadThreads>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int uploadThreads> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r26 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$1: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r27 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r27 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r27.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r27.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r28 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.stats.StatisticsProvider statisticsProvider> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r29 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: com.google.common.util.concurrent.ListeningExecutorService listeningExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r30 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r30 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ScheduledExecutorService schedulerExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $r31 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingPurgeInterval>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingPurgeInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingRetryInterval>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : $i6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingRetryInterval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r23.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void <init>(java.lang.String,java.io.File,long,int,int,com.google.common.cache.CacheLoader,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.ExecutorService,int,int)>($r24, $r25, $l2, $i3, $i4, $r26, $r27, $r28, $r29, $r30, $r31, $i5, $i6)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : specialinvoke $r23.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void <init>(java.lang.String,java.io.File,long,int,int,com.google.common.cache.CacheLoader,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.ExecutorService,int,int)>($r24, $r25, $l2, $i3, $i4, $r26, $r27, $r28, $r29, $r30, $r31, $i5, $i6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads")
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void deleteSerializedUploadMap(java.io.File)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void deleteSerializedUploadMap(java.io.File)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted asyncUploadMap [{}] from [{}]", "async-pending-uploads.ser", r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deleteSerializedUploadMap : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted asyncUploadMap [{}] from [{}]", "async-pending-uploads.ser", r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.setDownloadCache : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> = r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.setDownloadCache : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> = $r23
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.init : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> = $r23 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r52 = new org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r52 = new org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r52.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : specialinvoke $r52.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats stats> = $r52
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats stats> = $r52 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r54 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats stats>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r54 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r53 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r53 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r54.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> = $r53
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r54.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> = $r53 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r56 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats stats>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r56 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r55 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r55 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r56.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore cachingDataStore> = $r55
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.init : $r56.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore cachingDataStore> = $r55 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r13 = virtualinvoke r4.<com.google.common.base.Optional: java.lang.Object get()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r13 = virtualinvoke r4.<com.google.common.base.Optional: java.lang.Object get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r14 = (java.lang.Iterable) $r13
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r14 = (java.lang.Iterable) $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r15 = staticinvoke <org.apache.jackrabbit.oak.plugins.memory.MultiBinaryPropertyState: org.apache.jackrabbit.oak.api.PropertyState binaryPropertyFromBlob(java.lang.String,java.lang.Iterable)>("blobPropList", $r14)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : $r15 = staticinvoke <org.apache.jackrabbit.oak.plugins.memory.MultiBinaryPropertyState: org.apache.jackrabbit.oak.api.PropertyState binaryPropertyFromBlob(java.lang.String,java.lang.Iterable)>("blobPropList", $r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : interfaceinvoke r7.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(org.apache.jackrabbit.oak.api.PropertyState)>($r15)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.initNodeStore : interfaceinvoke r7.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(org.apache.jackrabbit.oak.api.PropertyState)>($r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch taskLatch>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch taskLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : virtualinvoke $r8.<java.util.concurrent.CountDownLatch: void countDown()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : virtualinvoke $r8.<java.util.concurrent.CountDownLatch: void countDown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch callbackLatch>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch callbackLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : virtualinvoke $r9.<java.util.concurrent.CountDownLatch: void countDown()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : virtualinvoke $r9.<java.util.concurrent.CountDownLatch: void countDown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : i0 = lengthof r3
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : i0 = lengthof r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : i1 = 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : i1 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : if i1 >= i0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : if i1 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : r6 = r3[i1]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : r6 = r3[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r11 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream)>(r6)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r11 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord addRecord(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r3 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r3 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r32 = staticinvoke <org.apache.jackrabbit.util.TransientFileFactory: org.apache.jackrabbit.util.TransientFileFactory getInstance()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r32 = staticinvoke <org.apache.jackrabbit.util.TransientFileFactory: org.apache.jackrabbit.util.TransientFileFactory getInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.io.File tmp> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r4 = virtualinvoke r32.<org.apache.jackrabbit.util.TransientFileFactory: java.io.File createTransientFile(java.lang.String,java.lang.String,java.io.File)>("upload", null, $r7)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r4 = virtualinvoke r32.<org.apache.jackrabbit.util.TransientFileFactory: java.io.File createTransientFile(java.lang.String,java.lang.String,java.io.File)>("upload", null, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String DIGEST>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String DIGEST> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r9 = new java.security.DigestOutputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r9 = new java.security.DigestOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r10 = new java.io.FileOutputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r10 = new java.io.FileOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r9.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r10, r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r9.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r10, r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : l2 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r9)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : l2 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r9.<java.io.OutputStream: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : virtualinvoke $r9.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : goto [?= $r11 = new org.apache.jackrabbit.core.data.DataIdentifier]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : goto [?= $r11 = new org.apache.jackrabbit.core.data.DataIdentifier] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r11 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r11 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r12 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r12 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String encodeHexString(byte[])>($r12)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String encodeHexString(byte[])>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : specialinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r15 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r15 = <org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14 = newarray (java.lang.Object)[3]
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[0] = $r11
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[0] = $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[1] = $r16
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[1] = $r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $l0 = virtualinvoke r3.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r17)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $l0 = virtualinvoke r3.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[2] = $r18
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r14[2] = $r18 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("SHA-256 of [{}], length =[{}] took [{}] ms ", $r14)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("SHA-256 of [{}], length =[{}] took [{}] ms ", $r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r19 = virtualinvoke r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType getUpload()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r19 = virtualinvoke r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType getUpload()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r20 = <org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType SYNCHRONOUS>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r20 = <org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType: org.apache.jackrabbit.oak.spi.blob.BlobOptions$UploadType SYNCHRONOUS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : if $r19 == $r20
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : if $r19 == $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r26 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r27 = virtualinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r27 = virtualinvoke $r11.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $z0 = virtualinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: boolean stage(java.lang.String,java.io.File)>($r27, r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $z0 = virtualinvoke $r26.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: boolean stage(java.lang.String,java.io.File)>($r27, r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.base.Optional put(java.lang.String,java.io.File)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.base.Optional put(java.lang.String,java.io.File)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.put : $r3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.base.Optional putOptionalDisregardingSize(java.lang.String,java.io.File,boolean)>(r1, r2, 0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.put : $r3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.base.Optional putOptionalDisregardingSize(java.lang.String,java.io.File,boolean)>(r1, r2, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markRequest()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markRequest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markRequest : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markRequest : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markRequest : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markRequest : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.atomic.AtomicLong currentSize>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.atomic.AtomicLong currentSize> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $l1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $l1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: long size>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: long size> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $b3 = $l1 cmp $l2
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $b3 = $l1 cmp $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $b3 > 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $b3 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $z3 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $z3 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $z3 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $z3 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r13 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r13 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $r13 != null
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $r13 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $z4 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $z4 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $z4 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : if $z4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r2, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r21 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r21 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] moved to staging cache [{}]", r2, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] moved to staging cache [{}]", r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r14.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markHit()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r14.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markHit()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markHit : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markHit : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markHit : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markHit : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r15.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void incrementCount()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r15.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void incrementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementCount : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void inc()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementCount : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void inc()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r16.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void incrementSize(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r16.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void incrementSize(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void inc(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void inc(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.cache.Weigher memWeigher>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.cache.Weigher memWeigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $i5 = interfaceinvoke $r17.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $i5 = interfaceinvoke $r17.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $r3 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $r3 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i0 = staticinvoke <org.apache.jackrabbit.oak.commons.StringUtils: int estimateMemoryUsage(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i0 = staticinvoke <org.apache.jackrabbit.oak.commons.StringUtils: int estimateMemoryUsage(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i1 = staticinvoke <org.apache.jackrabbit.oak.commons.StringUtils: int estimateMemoryUsage(java.lang.String)>($r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i1 = staticinvoke <org.apache.jackrabbit.oak.commons.StringUtils: int estimateMemoryUsage(java.lang.String)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i2 = $i0 + $i1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i2 = $i0 + $i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i3 = $i2 + 48
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : $i3 = $i2 + 48 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : return $i3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : return $i3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : return $i0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$1.weigh : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $l6 = (long) $i5
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $l6 = (long) $i5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void incrementMemSize(long)>($l6)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : virtualinvoke $r18.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void incrementMemSize(long)>($l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementMemSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementMemSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementMemSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void inc(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.incrementMemSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void inc(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r19 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.SettableFuture stage(java.lang.String,java.io.File)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r19 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.SettableFuture stage(java.lang.String,java.io.File)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : r3 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : r3 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r4 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r4 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache,java.lang.String,java.io.File)>(r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache,java.lang.String,java.io.File)>(r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : r10 = interfaceinvoke $r5.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>($r4)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : r10 = interfaceinvoke $r5.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Before submitting to super....")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Before submitting to super....") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.execute : interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After submitting to super....")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After submitting to super....") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.List futures>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.List futures> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r6 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r6 = new org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.CountDownLatch afterLatch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.CountDownLatch afterLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : specialinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: void <init>(java.util.concurrent.CountDownLatch)>($r7)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : specialinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: void <init>(java.util.concurrent.CountDownLatch)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r2, $r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r2, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r8 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : $r8 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String)>("Added callback")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String)>("Added callback") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : return r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.submit : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r6 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r6 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : specialinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache,java.lang.String,java.io.File,com.google.common.util.concurrent.SettableFuture)>(r0, r1, r2, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : specialinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache,java.lang.String,java.io.File,com.google.common.util.concurrent.SettableFuture)>(r0, r1, r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r10, $r6)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r10, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r7 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : $r7 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] scheduled for upload [{}]", r2, r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] scheduled for upload [{}]", r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : goto [?= return r3]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : goto [?= return r3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : return r3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.stage : return r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r20 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r19)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : $r20 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : return $r20
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.putOptionalDisregardingSize : return $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.put : return $r3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.put : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : $z0 = virtualinvoke $r4.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : $z0 = virtualinvoke $r4.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : return $z0
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.stage : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r35 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>($r11)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : $r35 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File getIfPresent(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File getIfPresent(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoadSuccess()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoadSuccess()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoadSuccess : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoadSuccess : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoadSuccess : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoadSuccess : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r7 = (java.io.File) $r6
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r7 = (java.io.File) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return $r7
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : return r2
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r8 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r8 = new org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l2 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l2 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l3 = virtualinvoke r2.<java.io.File: long lastModified()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $l3 = virtualinvoke r2.<java.io.File: long lastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore,org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend,org.apache.jackrabbit.core.data.DataIdentifier,long,long)>(r0, $r9, r1, $l2, $l3)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$FileCacheDataRecord: void <init>(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore,org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend,org.apache.jackrabbit.core.data.DataIdentifier,long,long)>(r0, $r9, r1, $l2, $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : return $r8
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : return $r35
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : return $r35 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.addRecord : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : i1 = i1 + 1
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : i1 = i1 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: void waitFinish()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: void waitFinish()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch afterExecuteLatch>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.CountDownLatch afterExecuteLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void await()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void await()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....waiting for latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....waiting for latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch beforeLatch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch beforeLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void await()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void await()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....after acquiring latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Before execution....after acquiring latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed beforeExecute")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed beforeExecute") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.beforeExecute : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats access$100(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats access$100(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$100 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$100 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$100 : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$100 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : r12 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.TimerStats$Context startUpLoaderTimer()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : r12 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.TimerStats$Context startUpLoaderTimer()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.startUpLoaderTimer : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.TimerStats uploadTimer>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.startUpLoaderTimer : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.TimerStats uploadTimer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.startUpLoaderTimer : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.TimerStats: org.apache.jackrabbit.oak.stats.TimerStats$Context time()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.startUpLoaderTimer : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.TimerStats: org.apache.jackrabbit.oak.stats.TimerStats$Context time()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.startUpLoaderTimer : return $r2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.startUpLoaderTimer : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingUploader access$200(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingUploader access$200(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$200 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingUploader uploader>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$200 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingUploader uploader> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$200 : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$200 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.lang.String val$id>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.lang.String val$id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.io.File val$upload>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.io.File val$upload> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingUploader: void write(java.lang.String,java.io.File)>($r6, $r5)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingUploader: void write(java.lang.String,java.io.File)>($r6, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore this$0>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : $r5 = $r3.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : $r5 = $r3.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : $r4 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : $r4 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : specialinvoke $r4.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : specialinvoke $r4.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void write(org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>($r4, r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore$2.write : virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void write(org.apache.jackrabbit.core.data.DataIdentifier,java.io.File)>($r4, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r5 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r5 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>($r5, $r6)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>($r5, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.write : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger access$300()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$300 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$300 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$300 : return $r0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$300 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.io.File val$upload>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4: java.io.File val$upload> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File added to backend [{}]", $r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File added to backend [{}]", $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : interfaceinvoke r12.<org.apache.jackrabbit.oak.stats.TimerStats$Context: long stop()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : interfaceinvoke r12.<org.apache.jackrabbit.oak.stats.TimerStats$Context: long stop()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : return $r9
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$4.call : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r3 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Waiting for latch in callback")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Waiting for latch in callback") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: java.util.concurrent.CountDownLatch latch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback: java.util.concurrent.CountDownLatch latch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(100L, $r4)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(100L, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Acquired latch in onSuccess")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String)>("Acquired latch in onSuccess") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor$TestFutureCallback.onSuccess : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r2 = (java.lang.Integer) r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r2 = (java.lang.Integer) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: void onSuccess(java.lang.Integer)>($r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: void onSuccess(java.lang.Integer)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger access$300()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Successfully added [{}], [{}]", $r5, $r4)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Successfully added [{}], [{}]", $r5, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap access$400(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r6)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap access$400(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$400 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$400 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$400 : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$400 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r12 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache access$500(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r11)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r12 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache access$500(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$500 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$500 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$500 : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$500 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : if $r12 == null
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : if $r12 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : staticinvoke <com.google.common.io.Files: void touch(java.io.File)>($r18)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : staticinvoke <com.google.common.io.Files: void touch(java.io.File)>($r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache access$500(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r19)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r20 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache access$500(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r22 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r21 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r21 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.io.File val$upload> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : virtualinvoke $r20.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File)>($r22, $r21)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : virtualinvoke $r20.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File)>($r22, $r21) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File,boolean)>(r1, r2, 1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void put(java.lang.String,java.io.File,boolean)>(r1, r2, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>]
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r1, r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r1, r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.FileCache.put : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger access$300()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r23 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r24 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("[{}] added to cache", $r24)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("[{}] added to cache", $r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap access$600(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r14 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap access$600(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$600 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$600 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$600 : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$600 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: java.lang.String val$id> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r15)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : goto [?= $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: com.google.common.util.concurrent.SettableFuture val$result>]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : goto [?= $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: com.google.common.util.concurrent.SettableFuture val$result>] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: com.google.common.util.concurrent.SettableFuture val$result>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : $r17 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5: com.google.common.util.concurrent.SettableFuture val$result> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : virtualinvoke $r17.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$5.onSuccess : virtualinvoke $r17.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r4 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After execution....counting down latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("After execution....counting down latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch afterLatch>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor: java.util.concurrent.CountDownLatch afterLatch> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r6 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("After execution....after counting down latch")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("After execution....after counting down latch") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r2 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r2 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore dataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r5 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache getCache()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r5 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache getCache()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getCache : return $r1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getCache : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : $r7 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache getStagingCache()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache getStagingCache()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed afterExecute")
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String)>("Completed afterExecute") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestPoolExecutor.afterExecute : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : return $r1
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCache : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r6)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : specialinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : r12 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r2, 0L, $r8)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : r12 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r2, 0L, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : interfaceinvoke r12.<java.util.concurrent.ScheduledFuture: java.lang.Object get()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : interfaceinvoke r12.<java.util.concurrent.ScheduledFuture: java.lang.Object get()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob.run : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob.run : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob.run : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void access$800(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$RemoveJob.run : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void access$800(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$800 : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void remove()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.access$800 : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void remove()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r3 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r3 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>("Starting purge of uploaded files")
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>("Starting purge of uploaded files") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r2 = (java.lang.String) $r8
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r2 = (java.lang.String) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z1 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z1 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r10 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r10 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("upload map contains id [{}]", r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("upload map contains id [{}]", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r12 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r12 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r16 = (java.io.File) $r12
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r16 = (java.io.File) $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r2, r16)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r2, r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r3 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r3 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Trying to delete file [{}]", r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Trying to delete file [{}]", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r4)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("deleted file [{}]", r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("deleted file [{}]", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.atomic.AtomicLong currentSize>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.atomic.AtomicLong currentSize> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $l1 = neg l0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $l1 = neg l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void decrementSize(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void decrementSize(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void dec(long)>(l0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void dec(long)>(l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.cache.Weigher memWeigher>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.cache.Weigher memWeigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $i3 = interfaceinvoke $r8.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $i3 = interfaceinvoke $r8.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void decrementMemSize(int)>($i3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void decrementMemSize(int)>($i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementMemSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementMemSize : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementMemSize : $l1 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementMemSize : $l1 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementMemSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void dec(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementMemSize : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void dec(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void decrementCount()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.deleteInternal : virtualinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void decrementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementCount : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void dec()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.decrementCount : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: void dec()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke r1.<java.util.Iterator: void remove()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke r1.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r13 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r13 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Cache [{}] file deleted for id [{}]", r16, r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Cache [{}] file deleted for id [{}]", r16, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = i0 + 1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = i0 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Finished removal of [{}] files", $r7)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Finished removal of [{}] files", $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r10 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : $r10 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>("After jobs completed")
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>("After jobs completed") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.waitFinish : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r10 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.lang.String testNodePathName>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $r10 = <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: java.lang.String testNodePathName> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $z0 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: boolean isFileSynced(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : $z0 = virtualinvoke r1.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: boolean isFileSynced(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if null != $r7
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if null != $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeState findLeafNode(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeState findLeafNode(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r7 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getParentPath(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r7 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getParentPath(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r2 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r2 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getName(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getName(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.spi.state.NodeStore nodeStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r11 = interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r11 = interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeStore: org.apache.jackrabbit.oak.spi.state.NodeState getRoot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r4 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r4 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r5 = (java.lang.String) $r10
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r5 = (java.lang.String) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $i0 = virtualinvoke r5.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $i0 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r6 = interfaceinvoke r11.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r6 = interfaceinvoke r11.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $z1 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $z1 = interfaceinvoke r6.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r11 = r6
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : r11 = r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r9 = interfaceinvoke r11.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : $r9 = interfaceinvoke r11.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : return $r9
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.findLeafNode : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z1 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z1 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : z8 = 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : z8 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r8 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getProperties()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r8 = interfaceinvoke r2.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r4 = (org.apache.jackrabbit.oak.api.PropertyState) $r9
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r4 = (org.apache.jackrabbit.oak.api.PropertyState) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z7 = z8
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z7 = z8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r10 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: org.apache.jackrabbit.oak.api.Type getType()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r10 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: org.apache.jackrabbit.oak.api.Type getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r11 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type BINARY>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r11 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type BINARY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $r10 == $r11
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $r10 == $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z9 = 1
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z9 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : goto [?= z8 = $z7 | $z9]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : goto [?= z8 = $z7 | $z9] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : z8 = $z7 | $z9
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : z8 = $z7 | $z9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r12 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: org.apache.jackrabbit.oak.api.Type getType()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r12 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: org.apache.jackrabbit.oak.api.Type getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r13 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type BINARY>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r13 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type BINARY> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $r12 != $r13
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $r12 != $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r19 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: org.apache.jackrabbit.oak.api.Type getType()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r19 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: org.apache.jackrabbit.oak.api.Type getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r20 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r19)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $r20 = interfaceinvoke r4.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r24 = (org.apache.jackrabbit.oak.api.Blob) $r20
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : r24 = (org.apache.jackrabbit.oak.api.Blob) $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if null == r24
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if null == r24 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z5 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: boolean haveRecordForBlob(org.apache.jackrabbit.oak.api.Blob)>(r24)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : $z5 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: boolean haveRecordForBlob(org.apache.jackrabbit.oak.api.Blob)>(r24) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.api.Blob: java.lang.String getContentIdentity()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x")
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : r3 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String getBlobId()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : r3 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String getBlobId()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.getBlobId : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.getBlobId : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.getBlobId : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.getBlobId : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore cachingDataStore>
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats: org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore cachingDataStore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $r5 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $r5 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : specialinvoke $r5.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : specialinvoke $r5.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $z2 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: boolean exists(org.apache.jackrabbit.core.data.DataIdentifier)>($r5)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : $z2 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: boolean exists(org.apache.jackrabbit.core.data.DataIdentifier)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : $z0 = virtualinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: boolean exists(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : $z0 = virtualinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: boolean exists(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.exists : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.exists : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.exists : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.exists : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.exists : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.exists : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.exists : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : return $z2
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.haveRecordForBlob : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z5 != 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : if $z5 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : return z8
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreCacheStats.isFileSynced : return z8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: void delete(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore,java.util.List)>(r2, r4)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest: void delete(org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore,java.util.List)>(r2, r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : r3 = (org.apache.jackrabbit.core.data.DataRecord) $r4
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : r3 = (org.apache.jackrabbit.core.data.DataRecord) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : if null == r3
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : if null == r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : $r5 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>()
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : $r5 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataRecord: org.apache.jackrabbit.core.data.DataIdentifier getIdentifier()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void deleteRecord(org.apache.jackrabbit.core.data.DataIdentifier)>($r5)
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: void deleteRecord(org.apache.jackrabbit.core.data.DataIdentifier)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r3 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r3 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void invalidate(java.lang.Object)>($r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void invalidate(java.lang.Object)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void invalidate(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void invalidate(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void invalidate(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void invalidate(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r4 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r4 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: void evicted(java.lang.String,java.io.File,com.google.common.cache.RemovalCause)>($r5, $r4, r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: void evicted(java.lang.String,java.io.File,com.google.common.cache.RemovalCause)>($r5, $r4, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = <com.google.common.cache.RemovalCause: com.google.common.cache.RemovalCause REPLACED>
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = <com.google.common.cache.RemovalCause: com.google.common.cache.RemovalCause REPLACED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r3 == $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r3 == $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r7)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r9 = virtualinvoke r3.<com.google.common.cache.RemovalCause: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r9 = virtualinvoke r3.<com.google.common.cache.RemovalCause: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] evicted with reason [{}]", r2, $r9)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] evicted with reason [{}]", r2, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void deleteRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.deleteRecord : virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void deleteRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend: java.util.Map _backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestMemoryBackend.deleteRecord : interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.delete : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.ConsolidatedDataStoreStatsTest.assertSyncedTrue : goto [?= return]
