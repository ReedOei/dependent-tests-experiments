org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend backend> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.spi.blob.AbstractSharedBackend: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r3 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: java.lang.String cacheInfoAsString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r3 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: java.lang.String cacheInfoAsString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r2 = (java.util.Map$Entry) $r9
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r2 = (java.util.Map$Entry) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $i0 = interfaceinvoke $r10.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r3, r4)
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $i0 = interfaceinvoke $r10.<com.google.common.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)>(r3, r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l1 = (long) $i0
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l1 = (long) $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l2 = $l1 * 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $l2 = $l1 * 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = l3 + $l2
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = l3 + $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Cache stats on close [{}]", $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Cache stats on close [{}]", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r4 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r4 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.util.concurrent.ExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : specialinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.close : virtualinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.close : virtualinvoke $r4.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void close()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.close : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r2 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads in progress on close [{}]", $r3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads in progress on close [{}]", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r5 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i1 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: int size()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $i1 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads completed but not cleared from cache [{}]", $r6)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Uploads completed but not cleared from cache [{}]", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r8 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r8 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r9 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: java.lang.String cacheInfoAsString()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r9 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: java.lang.String cacheInfoAsString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r1 = staticinvoke <com.google.common.base.Objects: com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)>("StagingCacheStats")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r1 = staticinvoke <com.google.common.base.Objects: com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)>("StagingCacheStats") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getRequestCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getRequestCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r2 = virtualinvoke $r1.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("requestCount", $l0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r2 = virtualinvoke $r1.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("requestCount", $l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getHitCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getHitCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r3 = virtualinvoke $r2.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("hitCount", $l1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r3 = virtualinvoke $r2.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("hitCount", $l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getHitRate()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getHitRate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $b2 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $b2 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : if $b2 != 0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : if $b2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d1 = (double) l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d1 = (double) l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d0 = (double) l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d0 = (double) l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d2 = $d1 / $d0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : $d2 = $d1 / $d0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : return $d2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitRate : return $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4[0] = $r5
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r4[0] = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r4)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r7 = virtualinvoke $r3.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("hitRate", $r6)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r7 = virtualinvoke $r3.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("hitRate", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l1 = interfaceinvoke $r2.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l2 = $l0 - $l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : $l2 = $l0 - $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : return $l2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissCount : return $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r8 = virtualinvoke $r7.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("missCount", $l2)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r8 = virtualinvoke $r7.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("missCount", $l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getMissRate()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $d1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: double getMissRate()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMissCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l1 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : l1 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $b2 = l1 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $b2 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : if $b2 != 0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : if $b2 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d1 = (double) l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d1 = (double) l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d0 = (double) l1
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d0 = (double) l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d2 = $d1 / $d0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : $d2 = $d1 / $d0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : return $d2
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMissRate : return $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9[0] = $r10
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r9[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r9)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1.2f", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r12 = virtualinvoke $r8.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("missRate", $r11)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r12 = virtualinvoke $r8.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("missRate", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r13 = virtualinvoke $r12.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadCount", $l3)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r13 = virtualinvoke $r12.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadCount", $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadSuccessCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getLoadSuccessCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r14 = virtualinvoke $r13.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadSuccessCount", $l4)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r14 = virtualinvoke $r13.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("loadSuccessCount", $l4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getElementCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getElementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r15 = virtualinvoke $r14.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("elementCount", $l5)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r15 = virtualinvoke $r14.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("elementCount", $l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentMemoryWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentMemoryWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentMemSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentMemoryWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r16 = virtualinvoke $r15.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("currentMemSize", $l6)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r16 = virtualinvoke $r15.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,long)>("currentMemSize", $l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l7 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l7 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long estimateCurrentWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r17 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l7)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r17 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r18 = virtualinvoke $r16.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("totalWeight", $r17)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r18 = virtualinvoke $r16.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("totalWeight", $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMaxTotalWeight()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $l8 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long getMaxTotalWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long maxWeight>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: long maxWeight> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getMaxTotalWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r19 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l8)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r19 = staticinvoke <org.apache.jackrabbit.oak.commons.IOUtils: java.lang.String humanReadableByteCount(long)>($l8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r20 = virtualinvoke $r18.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxWeight", $r19)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r20 = virtualinvoke $r18.<com.google.common.base.Objects$ToStringHelper: com.google.common.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxWeight", $r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r21 = virtualinvoke $r20.<com.google.common.base.Objects$ToStringHelper: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : $r21 = virtualinvoke $r20.<com.google.common.base.Objects$ToStringHelper: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : return $r21
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.cacheInfoAsString : return $r21 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Staging cache stats on close [{}]", $r9)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Staging cache stats on close [{}]", $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r10 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r10 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: com.google.common.util.concurrent.ListeningExecutorService executor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r11)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r10.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdown : interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.awaitTermination : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.isShutdown : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor: java.util.concurrent.ExecutorService delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestExecutor.shutdownNow : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r12 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r12 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService scheduledExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r13 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService scheduledExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r12.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r14 = new org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService statsExecutor>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : $r15 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ScheduledExecutorService statsExecutor> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r15)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : specialinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void <init>(java.util.concurrent.ExecutorService)>($r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.close : virtualinvoke $r14.<org.apache.jackrabbit.oak.commons.concurrent.ExecutorCloser: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.lang.String getHomeDir()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.lang.String getHomeDir()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r0 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r0 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/blobstore/")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("target/blobstore/") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: long time>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: long time> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $b1 = $l0 cmp -1L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $b1 = $l0 cmp -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : if $b1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : if $b1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l2 = 0L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $l2 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : goto [?= $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : goto [?= $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)>($r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : $r6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)>($r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getHomeDir : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore getBlobStore(java.lang.String)>($r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;"
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r3 = class "Lorg/apache/jackrabbit/oak/plugins/blob/datastore/OakFileDataStore;" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("dataStore", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/jackrabbit/core/data/DataStore;") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : r2 = (org.apache.jackrabbit.core.data.DataStore) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils: java.util.Map getConfig()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r0 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r1 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r2 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : r10 = (java.lang.String) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("ds.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("bs.") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getConfig : return r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : staticinvoke <org.apache.jackrabbit.oak.commons.PropertiesUtil: void populate(java.lang.Object,java.util.Map,boolean)>(r2, $r8, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : interfaceinvoke r2.<org.apache.jackrabbit.core.data.DataStore: void init(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : $r9 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : specialinvoke $r9.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: void <init>(org.apache.jackrabbit.core.data.DataStore)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreUtils.getBlobStore : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r3 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r3 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : specialinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : specialinvoke $r3.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord writeStream(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : $r4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord writeStream(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i1 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: int getMinRecordLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i1 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataStore: int getMinRecordLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i2 = $i1 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : $i2 = $i1 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r2 = newarray (byte)[i0]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r2 = newarray (byte)[i0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i3 >= i0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i3 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i5 = virtualinvoke r7.<java.io.InputStream: int read(byte[],int,int)>(r2, i3, i4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i5 = virtualinvoke r7.<java.io.InputStream: int read(byte[],int,int)>(r2, i3, i4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i5 >= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : if i5 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = i3 + i5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i3 = i3 + i5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i4 - i5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : i4 = i4 - i5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r3 = newarray (byte)[i3]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r3 = newarray (byte)[i3] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(byte[])>(r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(byte[])>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i0 = lengthof r0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i0 = lengthof r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if $i0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if $i0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: void <init>(byte[])>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: void <init>(byte[])>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : goto [?= return r8]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : goto [?= return r8] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : return r8
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeStream : return r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : return $r4
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addRecord : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.core.data.DataIdentifier identifier>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.core.data.DataIdentifier identifier> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : if $r1 != null
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : if $r1 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r3 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r3 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r4 = "0x"
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r4 = "0x" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i3 = virtualinvoke $r4.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i3 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i4 = lengthof $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i4 = lengthof $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i5 = 2 * $i4
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i5 = 2 * $i4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i6 = $i3 + $i5
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $i6 = $i3 + $i5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i6)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x")
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : i0 = lengthof r2
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : i0 = lengthof r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : i9 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : i9 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : if i9 >= i0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : if i9 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : b1 = r2[i9]
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : b1 = r2[i9] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : s2 = b1 & 255
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : s2 = b1 & 255 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $s7 = s2 >> 4
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $s7 = s2 >> 4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s7)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $s8 = s2 & 15
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $s8 = s2 & 15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s8)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : i9 = i9 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : i9 = i9 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : return $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.toString : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : specialinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : specialinvoke $r3.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.core.data.DataIdentifier identifier> = $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.core.data.DataIdentifier identifier> = $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.core.data.DataIdentifier identifier>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.core.data.DataIdentifier identifier> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getIdentifier : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x")
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : $r1 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : $r1 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getStream : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.io.InputStream getInputStream(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.io.InputStream getInputStream(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : $r1 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z1 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z1 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $b1 = $l0 cmp -1L
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $b1 = $l0 cmp -1L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : if $b1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : if $b1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r13 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.io.InputStream getStream(java.lang.String)>($r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r13 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.io.InputStream getStream(java.lang.String)>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $z0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean $assertionsDisabled>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $z0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean $assertionsDisabled> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $r1 = "0x"
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $r1 = "0x" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i0 = virtualinvoke $r1.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i0 = virtualinvoke $r1.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : r18 = virtualinvoke r17.<java.lang.String: java.lang.String substring(int)>($i0)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : r18 = virtualinvoke r17.<java.lang.String: java.lang.String substring(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i13 = virtualinvoke r18.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i13 = virtualinvoke r18.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i1 = i13 % 2
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i1 = i13 % 2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if $i1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if $i1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i14 = i13 / 2
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i14 = i13 / 2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : r20 = newarray (byte)[i14]
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : r20 = newarray (byte)[i14] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i15 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i15 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if i15 >= i14
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : if i15 >= i14 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i2 = 2 * i15
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i2 = 2 * i15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $c3 = virtualinvoke r18.<java.lang.String: char charAt(int)>($i2)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $c3 = virtualinvoke r18.<java.lang.String: char charAt(int)>($i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 16)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i7 = $i4 << 4
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i7 = $i4 << 4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i5 = 2 * i15
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i5 = 2 * i15 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i6 = $i5 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i6 = $i5 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $c8 = virtualinvoke r18.<java.lang.String: char charAt(int)>($i6)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $c8 = virtualinvoke r18.<java.lang.String: char charAt(int)>($i6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i9 = staticinvoke <java.lang.Character: int digit(char,int)>($c8, 16)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i9 = staticinvoke <java.lang.Character: int digit(char,int)>($c8, 16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i10 = $i7 | $i9
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $i10 = $i7 | $i9 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $b11 = (byte) $i10
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $b11 = (byte) $i10 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : r20[i15] = $b11
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : r20[i15] = $b11 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i15 = i15 + 1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : i15 = i15 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : goto [?= $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(byte[])>(r20)]
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : goto [?= $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(byte[])>(r20)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(byte[])>(r20)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord getInstance(byte[])>(r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getInstance : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : goto [?= $r4 = newarray (java.lang.Object)[1]]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : goto [?= $r4 = newarray (java.lang.Object)[1]] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : $r4 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : $r4[0] = r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : $r4[0] = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r6, "No DataRecord found for blobId [%s]", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r6, "No DataRecord found for blobId [%s]", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : return r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataRecord : return r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : r8 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : r8 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataRecord: java.io.InputStream getStream()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $z0 = r8 instanceof java.io.BufferedInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $z0 = r8 instanceof java.io.BufferedInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r5 = new java.io.BufferedInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r5 = new java.io.BufferedInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : r8 = $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : r8 = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r4 = staticinvoke <org.apache.jackrabbit.oak.spi.blob.stats.StatsCollectingStreams: java.io.InputStream wrap(org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector,java.lang.String,java.io.InputStream)>($r3, r1, r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : $r4 = staticinvoke <org.apache.jackrabbit.oak.spi.blob.stats.StatsCollectingStreams: java.io.InputStream wrap(org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector,java.lang.String,java.io.InputStream)>($r3, r1, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : return $r4
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getStream : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : return $r13
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : return $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : z0 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : z0 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : staticinvoke <com.google.common.io.ByteStreams: void skipFully(java.io.InputStream,long)>(r3, l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : staticinvoke <com.google.common.io.ByteStreams: void skipFully(java.io.InputStream,long)>(r3, l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : i3 = virtualinvoke r3.<java.io.InputStream: int read(byte[],int,int)>(r2, i1, i2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : i3 = virtualinvoke r3.<java.io.InputStream: int read(byte[],int,int)>(r2, i1, i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : z0 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : z0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : return i3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.readBlob : return i3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean isInMemoryRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean isInMemoryRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $r1 = virtualinvoke r0.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $r1 = virtualinvoke r0.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>($r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : if r0 != r1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : if r0 != r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $z0 = r1 instanceof org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $z0 = r1 instanceof org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : r2 = (org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord) r1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : r2 = (org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $r3 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $r3 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : return $z1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.equals : return $z1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean isInMemoryRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean isInMemoryRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : $r5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : $r5 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecord : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "BlobId must be specified")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "BlobId must be specified") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $z1 = virtualinvoke r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $z1 = virtualinvoke r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $r3 = r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $r3 = r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $r4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $r4 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord getDataRecord(java.lang.String)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $l0 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : $l0 = interfaceinvoke $r4.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data>
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: byte[] data> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : $i0 = lengthof $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : $i0 = lengthof $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : $l1 = (long) $i0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : $l1 = (long) $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : return $l1
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.getLength : return $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : return $l0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobLength : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r2 = new org.apache.jackrabbit.oak.spi.blob.BlobOptions >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.blob.BlobOptions: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String writeBlob(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord writeStream(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r3 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataRecord writeStream(java.io.InputStream,org.apache.jackrabbit.oak.spi.blob.BlobOptions)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String getBlobId(org.apache.jackrabbit.core.data.DataRecord)>(r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : r4 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String getBlobId(org.apache.jackrabbit.core.data.DataRecord)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(org.apache.jackrabbit.core.data.DataRecord)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(org.apache.jackrabbit.core.data.DataRecord)>(r0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.of : specialinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: void <init>(org.apache.jackrabbit.core.data.DataRecord)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String encodedValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : $z0 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : goto [?= return $z0]
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.hasLengthInfo : goto [?= return $z0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#")
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : return $r8
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId.encodedValue : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getBlobId : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker tracker>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker tracker> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : if $r7 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : if $r7 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : z1 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r16 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l1 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l1 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l2 = $l1 - l0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l2 = $l1 - l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l3 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $l3 = interfaceinvoke r3.<org.apache.jackrabbit.core.data.DataRecord: long getLength()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r16.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploaded(long,java.util.concurrent.TimeUnit,long)>($l2, $r17, $l3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r16.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploaded(long,java.util.concurrent.TimeUnit,long)>($l2, $r17, $l3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r18.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploadCompleted(java.lang.String)>(r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : interfaceinvoke $r18.<org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector: void uploadCompleted(java.lang.String)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return r4
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.writeBlob : return $r3
