org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $b4 = l1 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void <init>(java.io.File,java.io.File,int,long,org.apache.jackrabbit.oak.plugins.blob.StagingUploader,org.apache.jackrabbit.oak.plugins.blob.FileCache,org.apache.jackrabbit.oak.stats.StatisticsProvider,com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.ScheduledExecutorService,int,int)>(r0, r1, i0, l1, r2, r3, r4, r5, r6, i2, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getStatName : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads")
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling pending uploads") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r1, r2, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r7 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File uploadCacheSpace> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r10 = new org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: void <init>(org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache$3.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r12 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Scheduled [{}] pending uploads", $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.build : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.setDownloadCache : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> = r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.setDownloadCache : r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r2 = new java.util.Random >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $l2 = (long) i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r2.<java.util.Random: void <init>(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : r1 = newarray (byte)[i1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : $r3 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.randomStream : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.copyToFile : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest.getFile : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r4 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r4 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : virtualinvoke $r4.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : virtualinvoke $r4.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>(r2, r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>(r2, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r5 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : $r5 = <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("In TestCacheLoader after write [{}], [{}]", r1, r8)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("In TestCacheLoader after write [{}], [{}]", r1, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.write : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : r7 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : r7 = virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.markLoad : interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: void mark()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return null
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : if r7 == null
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : if r7 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File get(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File get(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: java.io.File load(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: java.io.File load(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r5 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = null
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: com.google.common.cache.CacheLoader val$loader>
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$3: com.google.common.cache.CacheLoader val$loader> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r7 = virtualinvoke $r6.<com.google.common.cache.CacheLoader: java.lang.Object load(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : $r7 = virtualinvoke $r6.<com.google.common.cache.CacheLoader: java.lang.Object load(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.FileInputStream load(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.FileInputStream load(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root>
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader: java.io.File root> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r2)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest: java.io.File getFile(java.lang.String,java.io.File)>(r1, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r3)
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r4
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r3
org.apache.jackrabbit.oak.plugins.blob.AbstractDataStoreCacheTest$TestCacheLoader.load : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = (java.io.InputStream) $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : r9 = (java.io.InputStream) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r9, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>(r9, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r9, 0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r9, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : goto [?= return r2]
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : goto [?= return r2] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return $r3
org.apache.jackrabbit.oak.plugins.blob.FileCache$3.load : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r4 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $r3 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$1: int weigh(java.lang.String,java.io.File)>($r4, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $l1 = $l0 / 4096L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $f0 = (float) $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : $i2 = staticinvoke <java.lang.Math: int round(float)>($f0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache$1.weigh : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r5 = (java.io.File) $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : $r5 = (java.io.File) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.get : return $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache.get : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : return $r4
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.get : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r2 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void invalidate(java.lang.String)>($r2)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void invalidate(java.lang.String)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.invalidate : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void invalidate(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.invalidate : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void invalidate(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = (java.lang.String) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = (java.lang.String) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r4 = (java.io.File) r2
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r4 = (java.io.File) r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: void evicted(java.lang.String,java.io.File,com.google.common.cache.RemovalCause)>($r5, $r4, r3)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: void evicted(java.lang.String,java.io.File,com.google.common.cache.RemovalCause)>($r5, $r4, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = <com.google.common.cache.RemovalCause: com.google.common.cache.RemovalCause REPLACED>
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r5 = <com.google.common.cache.RemovalCause: com.google.common.cache.RemovalCause REPLACED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r3 == $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : if r3 == $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$4: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r7 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File access$000(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r7)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: void recursiveDelete(java.io.File,java.io.File)>(r2, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r5 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted file [{}]", r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if r6 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z1 = virtualinvoke r6.<java.io.File: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r1 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r2 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $i0 = lengthof $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r3 = <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $z2 = virtualinvoke r6.<java.io.File: boolean delete()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Deleted directory [{}], [{}]", r6, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()]
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.recursiveDelete : goto [?= r6 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r9 = virtualinvoke r3.<com.google.common.cache.RemovalCause: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : $r9 = virtualinvoke r3.<com.google.common.cache.RemovalCause: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] evicted with reason [{}]", r2, $r9)
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("File [{}] evicted with reason [{}]", r2, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.FileCache$4.evicted : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if r2 == null
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File getIfPresent(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object getIfPresent(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object getIfPresent(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r5 = (java.io.File) $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : $r5 = (java.io.File) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : return $r5
org.apache.jackrabbit.oak.plugins.blob.FileCache.getIfPresent : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : return $r5
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getIfPresent : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCacheStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCacheStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache stagingCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCacheStats : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCacheStats : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getStats : return $r1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getStats : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCacheStats : return $r2
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getStagingCacheStats : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l4 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getElementCount()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l4 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getElementCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats countMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getElementCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("elements don\'t match", l0, $l4)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("elements don\'t match", l0, $l4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l5 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long estimateCurrentWeight()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l5 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long estimateCurrentWeight()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.CounterStats currentSizeMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.CounterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.estimateCurrentWeight : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("weight doesn\'t match", l1, $l5)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("weight doesn\'t match", l1, $l5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l6 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getHitCount()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l6 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getHitCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats hitMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getHitCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("hits count don\'t match", l2, $l6)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("hits count don\'t match", l2, $l6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l7 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getRequestCount()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : $l7 = interfaceinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean: long getRequestCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats requestMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getRequestCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("requests count don\'t match", l3, $l7)
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCacheTest.assertCacheStats : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("requests count don\'t match", l3, $l7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter>
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: org.apache.jackrabbit.oak.stats.MeterStats loadSuccessMeter> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>()
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.stats.MeterStats: long getCount()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0
org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats.getLoadSuccessCount : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getCacheStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache>
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getCacheStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: org.apache.jackrabbit.oak.plugins.blob.FileCache downloadCache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getCacheStats : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>()
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getCacheStats : $r2 = virtualinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheStatsMBean getStats()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.plugins.blob.FileCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache.getStats : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getCacheStats : return $r2
org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache.getCacheStats : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Weigher weigher> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $r5 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : l3 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache>
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCacheStats: com.google.common.cache.Cache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCacheStats.estimateCurrentWeight : return l3
