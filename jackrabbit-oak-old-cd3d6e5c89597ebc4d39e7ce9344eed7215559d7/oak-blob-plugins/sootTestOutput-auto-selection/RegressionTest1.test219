org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, 4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : virtualinvoke $r6.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : $r8 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUtils.getFile : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r0, r1, z1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void movePendingUploadsToStaging(java.io.File,java.io.File,boolean)>(r0, r1, z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r9 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "upload") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if r0 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z1 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: java.util.Map deSerializeUploadMap(java.io.File)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : r13 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $r4 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "async-pending-uploads.ser") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.deSerializeUploadMap : return r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.movePendingUploadsToStaging : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.upgrade : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $b1 = l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $b1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = new org.apache.jackrabbit.oak.plugins.blob.FileCache >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.FileCache: void <init>(long,java.io.File,com.google.common.cache.CacheLoader,java.util.concurrent.ExecutorService)>(l0, r0, r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r5 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File cacheRoot> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r7 = virtualinvoke $r5.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r8 = new org.apache.jackrabbit.oak.plugins.blob.FileCache$6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: void <init>(org.apache.jackrabbit.oak.plugins.blob.FileCache)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r9 = virtualinvoke $r7.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : r1 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$6: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : $z2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0
org.apache.jackrabbit.oak.plugins.blob.FileCache$6.apply : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r10 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("[{}] files put in im-memory cache", $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : return i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.FileCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$100 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $l1 = virtualinvoke r1.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Cache built with [{}] files from file system in [{}] seconds", $r4, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.setBlobStatsCollector : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> = r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.setBlobStatsCollector : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.oak.spi.blob.stats.BlobStatsCollector stats> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r4 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r4 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: java.util.List getAllMetadataRecords(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : return null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : return $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : i6 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : i6 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $z1 = $r8 instanceof org.apache.jackrabbit.core.data.MultiDataStoreAware
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $z1 = $r8 instanceof org.apache.jackrabbit.core.data.MultiDataStoreAware >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $l7 = (long) i6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $l7 = (long) i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : return $l7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : return $l7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.invalidate : virtualinvoke $r2.<org.apache.jackrabbit.oak.cache.CacheLIRS: void invalidate(java.lang.Object)>(r1)
