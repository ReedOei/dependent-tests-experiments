org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1: java.lang.String call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1: boolean val$resume>
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1: boolean val$resume> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1: org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration this$0>
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1: org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration: org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigrator access$000(org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration)>($r2)
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration: org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigrator access$000(org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration: org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigrator migrator>
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration.access$000 : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration: org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigrator migrator> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration.access$000 : return $r1
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration.access$000 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : z1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigrator: boolean start()>()
org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigration$1.call : z1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.migration.BlobMigrator: boolean start()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x")
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.util.Iterator getAllRecords()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllChunkIds : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.util.Iterator getAllRecords()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllRecords : $r3 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataStore: java.util.Iterator getAllIdentifiers()>()
