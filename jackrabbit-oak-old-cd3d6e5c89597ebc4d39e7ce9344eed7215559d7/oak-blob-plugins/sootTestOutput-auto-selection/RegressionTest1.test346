org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File markedRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getMarkedRefs : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getGarbage()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File garbage> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGarbage : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File home> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.close : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File gcCandidates>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File gcCandidates> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : return $r1
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getGcCandidates : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs>
org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File availableRefs> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState.getAvailableRefs : return $r1
