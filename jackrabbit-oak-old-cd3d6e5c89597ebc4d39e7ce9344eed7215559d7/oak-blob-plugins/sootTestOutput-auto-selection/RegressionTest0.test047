org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x")
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.resolveChunks : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r1 = new javax.management.openmbean.CompositeType
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r1 = new javax.management.openmbean.CompositeType >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r2 = class "Lorg/apache/jackrabbit/oak/plugins/blob/GarbageCollectionRepoStats;"
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r2 = class "Lorg/apache/jackrabbit/oak/plugins/blob/GarbageCollectionRepoStats;" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r6 = <org.apache.jackrabbit.oak.plugins.blob.BlobGC: java.lang.String[] FIELD_NAMES>
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r6 = <org.apache.jackrabbit.oak.plugins.blob.BlobGC: java.lang.String[] FIELD_NAMES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGC: java.lang.String[] FIELD_DESCRIPTIONS>
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r5 = <org.apache.jackrabbit.oak.plugins.blob.BlobGC: java.lang.String[] FIELD_DESCRIPTIONS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r4 = <org.apache.jackrabbit.oak.plugins.blob.BlobGC: javax.management.openmbean.OpenType[] FIELD_TYPES>
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : $r4 = <org.apache.jackrabbit.oak.plugins.blob.BlobGC: javax.management.openmbean.OpenType[] FIELD_TYPES> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : specialinvoke $r1.<javax.management.openmbean.CompositeType: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],javax.management.openmbean.OpenType[])>($r3, "Composite data type for datastore GC statistics", $r6, $r5, $r4)
org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : specialinvoke $r1.<javax.management.openmbean.CompositeType: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],javax.management.openmbean.OpenType[])>($r3, "Composite data type for datastore GC statistics", $r6, $r5, $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.BlobGC.createCompositeType : return $r1
