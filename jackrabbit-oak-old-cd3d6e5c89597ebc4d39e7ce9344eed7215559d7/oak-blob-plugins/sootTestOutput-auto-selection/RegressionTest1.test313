org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.setReferenceKey : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: byte[] referenceKey> = r1
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.setReferenceKey : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: byte[] referenceKey> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r5 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r1 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: java.lang.Integer call()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : r1 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0>
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob: org.apache.jackrabbit.oak.plugins.blob.FileCache this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2)
org.apache.jackrabbit.oak.plugins.blob.FileCache$CacheBuildJob.call : i0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.FileCache: int access$600(org.apache.jackrabbit.oak.plugins.blob.FileCache)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>()
org.apache.jackrabbit.oak.plugins.blob.FileCache.access$600 : $i0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: int build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent>
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.FileCache: java.io.File parent> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4)
org.apache.jackrabbit.oak.plugins.blob.FileCache.build : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils: void moveDownloadCache(java.io.File)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("tmp", "upload", "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r5 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download")
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "download") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r8 = staticinvoke <com.google.common.io.Files: com.google.common.collect.TreeTraverser fileTreeTraverser()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r9 = virtualinvoke $r8.<com.google.common.collect.TreeTraverser: com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r10 = new org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: void <init>(java.io.File,java.util.List)>(r0, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $r11 = virtualinvoke $r9.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : r3 = virtualinvoke $r11.<com.google.common.collect.FluentIterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i0 = lengthof r3
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i0 = lengthof r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i1 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i1 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : if i1 >= i0
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : if i1 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : return null
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils.moveDownloadCache : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $r2 = (java.io.File) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2)
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1: boolean apply(java.io.File)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>()
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : $z3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3
org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.DataStoreCacheUpgradeUtils$1.apply : return $z0
