org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setStagingSplitPercentage : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int stagingSplitPercentage> = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.CachingFileDataStore.getMinRecordLength : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.CachingFileDataStore: int minRecordLength>
org.apache.jackrabbit.oak.plugins.blob.datastore.CachingFileDataStore.getMinRecordLength : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.CachingFileDataStore: int minRecordLength> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.CachingFileDataStore.getMinRecordLength : return $i0
org.apache.jackrabbit.oak.plugins.blob.datastore.CachingFileDataStore.getMinRecordLength : return $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getType : $r1 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getType : $r1 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getType : return $r1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getType : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setPath : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = r1
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setPath : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: java.lang.String path> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setUploadThreads : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int uploadThreads> = i0
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.setUploadThreads : r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: int uploadThreads> = i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : return null
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getAllMetadataRecords : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r2 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type DEFAULT>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r2 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type DEFAULT> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : $z0 = $r2 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataStore : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataStore : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataStore : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getDataStore : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : i6 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : i6 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $z1 = $r8 instanceof org.apache.jackrabbit.core.data.MultiDataStoreAware
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $z1 = $r8 instanceof org.apache.jackrabbit.core.data.MultiDataStoreAware >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $l7 = (long) i6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : $l7 = (long) i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : return $l7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.countDeleteChunks : return $l7 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $i1 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $i1 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $l2 = (long) $i1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $l2 = (long) $i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: long countDeleteChunks(java.util.List,long)>(r1, l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $l3 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: long countDeleteChunks(java.util.List,long)>(r1, l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $b4 = $l2 cmp $l3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $b4 = $l2 cmp $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : if $b4 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : if $b4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $z0 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : $z0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.deleteChunks : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String extractBlobId(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : r2 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.lang.String extractBlobId(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.extractBlobId : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.extractBlobId : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.extractBlobId : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.extractBlobId : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.extractBlobId : return r1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.extractBlobId : return r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x")
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord.isInstance : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : $r6 = new org.apache.jackrabbit.core.data.DataIdentifier
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : $r6 = new org.apache.jackrabbit.core.data.DataIdentifier >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : specialinvoke $r6.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : specialinvoke $r6.<org.apache.jackrabbit.core.data.DataIdentifier: void <init>(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : r3 = interfaceinvoke $r7.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getReference : r3 = interfaceinvoke $r7.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean isInMemoryRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean isInMemoryRecord(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $r1 = virtualinvoke r0.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $r1 = virtualinvoke r0.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>($r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : $z0 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.InMemoryDataRecord: boolean isInstance(java.lang.String)>($r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : return $z0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.isInMemoryRecord : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r3 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getRecordIfStored : $r3 = interfaceinvoke $r2.<org.apache.jackrabbit.core.data.DataStore: org.apache.jackrabbit.core.data.DataRecord getRecordIfStored(org.apache.jackrabbit.core.data.DataIdentifier)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache>
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore: org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : $r4 = virtualinvoke r1.<org.apache.jackrabbit.core.data.DataIdentifier: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.AbstractSharedCachingDataStore.getRecordIfStored : r2 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.CompositeDataStoreCache: java.io.File getIfPresent(java.lang.String)>($r4)
