org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore$NoOpMap.entrySet : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.setReferenceKey : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: byte[] referenceKey> = r1
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.setReferenceKey : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: byte[] referenceKey> = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r5 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.deleteAllMetadataRecords : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r5 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r5 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r6 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>($r7, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i0 = lengthof r3
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i0 = lengthof r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i1 = 0
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : i1 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : if i1 >= i0
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : if i1 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : return null
org.apache.jackrabbit.oak.plugins.blob.datastore.OakFileDataStore.getMetadataRecord : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z0 = r0 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r1 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r0
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r1 = (org.apache.jackrabbit.oak.plugins.blob.SharedDataStore) r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type getType()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r2 = interfaceinvoke $r1.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type getType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $z0 = $r1 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : return $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getType : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED>
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $r3 = <org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore$Type SHARED> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $r2 != $r3
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : if $r2 != $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 1
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : $z1 = 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : goto [?= return $z1]
org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : goto [?= return $z1] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.SharedDataStoreUtils.isShared : return $z1
