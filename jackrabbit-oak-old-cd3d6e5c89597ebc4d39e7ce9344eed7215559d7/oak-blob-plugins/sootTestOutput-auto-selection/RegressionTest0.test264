org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: boolean skip()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File access$400(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : r1 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File access$400(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : $r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : $r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".snapshot")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".snapshot") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.getSnapshotMarkerFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$400 : return $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l0 = virtualinvoke r1.<java.io.File: long lastModified()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l0 = virtualinvoke r1.<java.io.File: long lastModified()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.stats.Clock clock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.stats.Clock clock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.stats.Clock: long getTime()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l3 = $l1 - $l2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $l3 = $l1 - $l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $b4 = $l0 cmp $l3
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : $b4 = $l0 cmp $l3 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $b4 <= 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : if $b4 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker this$0> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void access$300(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void access$300(org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$300 : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$300 : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot(boolean)>(0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: void snapshot(boolean)>(0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $z1 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: boolean SKIP_TRACKER> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : r28 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : r28 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : if z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : if z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r19 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : virtualinvoke $r19.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void snapshot()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : virtualinvoke $r19.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void snapshot()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void nextGeneration()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void nextGeneration()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r4 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : $r0 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.access$000 : return $r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Closed writer") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $r5 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r9 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : z0 = virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File renamed {}", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r13.<org.slf4j.Logger: void trace(java.lang.String)>("Trying a copy file operation")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r13.<org.slf4j.Logger: void trace(java.lang.String)>("Trying a copy file operation") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $z1 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $z1 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>($r14, $r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>($r14, $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r24 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r24 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unable to copy process file to corresponding gen file. Some elements may be missed", $r23)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unable to copy process file to corresponding gen file. Some elements may be missed", $r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r1 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r6 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type IN_PROCESS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gen") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".process") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$1.getFileNameSuffix : return $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> = $r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r10 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r12 = staticinvoke <com.google.common.io.Files: java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset)>($r11, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.BufferedWriter writer> = $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r13 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File processFile> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.nextGeneration : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Created new process file and writer over {} ", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void merge(java.util.List,boolean)>($r3, 0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: void merge(java.util.List,boolean)>($r3, 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if r1 == null
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r7 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r7 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r8 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r12 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r12 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r13 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r13 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$3.getFileNameSuffix : return ".refs"
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type$3.getFileNameSuffix : return ".refs" >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void append(java.util.List,java.io.File,boolean)>(r1, $r7, 1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : staticinvoke <org.apache.jackrabbit.oak.commons.FileIOUtils: void append(java.util.List,java.io.File,boolean)>(r1, $r7, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r18 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r18.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r18.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : throw $r17
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : throw $r17 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : throw $r5
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : throw $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r26 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r26 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error taking snapshot", $r25)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error taking snapshot", $r25) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r27 = new java.io.IOException
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r27 = new java.io.IOException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Snapshot error", $r25)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Snapshot error", $r25) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : throw $r27
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : throw $r27 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r8 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failure in taking snapshot", $r7)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failure in taking snapshot", $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r16 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r16 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Merged files into references {}", r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Merged files into references {}", r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke r1.<java.util.List: void clear()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : interfaceinvoke r1.<java.util.List: void clear()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock refLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.merge : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.concurrent.locks.ReentrantLock snapshotLock> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.snapshot : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r21 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r21 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r20 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $l2 = virtualinvoke r28.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r20)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $l2 = virtualinvoke r28.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r20) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Completed snapshot in [{}]", $r22)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Completed snapshot in [{}]", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : r29 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : r29 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore store> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : r1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File getBlobRecordsFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : r1 = virtualinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File getBlobRecordsFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r2 = new java.io.File
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r2 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.io.File rootDir> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r3 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r7 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type REFS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore$Type: java.lang.String getFileNameSuffix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : if $z0 != 0
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : return $r2
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore datastore>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.apache.jackrabbit.oak.plugins.blob.SharedDataStore datastore> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r4 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r6 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String prefix> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String instanceId>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r8 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.lang.String instanceId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".refs")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".refs") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.File,java.lang.String)>(r1, $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.SharedDataStore: void addMetadataRecord(java.io.File,java.lang.String)>(r1, $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addMetadataRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addMetadataRecord : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.apache.jackrabbit.core.data.DataStore delegate> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addMetadataRecord : $z0 = $r3 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addMetadataRecord : $z0 = $r3 instanceof org.apache.jackrabbit.oak.plugins.blob.SharedDataStore >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addMetadataRecord : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.addMetadataRecord : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r14 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r14 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $l1 = virtualinvoke r29.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r13)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $l1 = virtualinvoke r29.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Added blob id metadata record in DataStore in [{}]", $r15)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Added blob id metadata record in DataStore in [{}]", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r16 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r16 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted blob record file after snapshot and upload {}", r1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleted blob record file after snapshot and upload {}", r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r17 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r17 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: java.io.File getSnapshotMarkerFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r17)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r18 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r18 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>("Updated snapshot marker")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String)>("Updated snapshot marker") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r6 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r24 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : $r24 = <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Finished taking snapshot")
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Finished taking snapshot") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to in cleaning up {}", r1, $r23)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker.snapshot : interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to in cleaning up {}", r1, $r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 1
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.skip : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob: long interval> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l0)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping scheduled snapshot as it last executed within {} seconds", $r4)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$SnapshotJob.run : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping scheduled snapshot as it last executed within {} seconds", $r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z1 = virtualinvoke $r2.<java.io.File: boolean createNewFile()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $z1 = virtualinvoke $r2.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File created {}", $r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.getBlobRecordsFile : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File created {}", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations>
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r20 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore: java.util.List generations> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r21 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22)
org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Process file renamed to {}", $r22) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.BlobIdTracker$BlobIdStore.close : goto [?= return]
