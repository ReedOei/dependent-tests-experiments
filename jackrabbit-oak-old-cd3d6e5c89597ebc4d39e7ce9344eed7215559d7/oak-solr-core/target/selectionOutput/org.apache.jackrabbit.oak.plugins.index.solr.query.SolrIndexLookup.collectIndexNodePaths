org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
