org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $r4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $i3 = lengthof $r4
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $i3 = lengthof $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : r3 = newarray (double)[$i3]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : r3 = newarray (double)[$i3] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long estimate(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : l0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long estimate(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : l1 = virtualinvoke r2.<org.apache.solr.common.SolrDocumentList: long getNumFound()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : l1 = virtualinvoke r2.<org.apache.solr.common.SolrDocumentList: long getNumFound()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : l2 = l1 - l0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : l2 = l1 - l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d1 = (double) l2
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d1 = (double) l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, 2.0)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, 2.0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $l4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long threshold>
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $l4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long threshold> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d3 = (double) $l4
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d3 = (double) $l4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $b5 = $d2 cmpl $d3
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $b5 = $d2 cmpl $d3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : if $b5 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : if $b5 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : i8 = 0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : if $b5 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : return
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : i8 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $i6 = lengthof r3
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $i6 = lengthof r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : if i8 >= $i6
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : if i8 >= $i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights>
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : if i8 >= $i6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r3, 5)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r3, 5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights> = $r5
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights> = $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : return
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d6 = $r6[i8]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d6 = $r6[i8] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d5 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double alpha>
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d5 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double alpha> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d4 = (double) l2
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d4 = (double) l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d7 = $d5 * $d4
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d7 = $d5 * $d4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $l7 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long getInput(org.apache.jackrabbit.oak.spi.query.Filter,int)>(r1, i8)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $l7 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long getInput(org.apache.jackrabbit.oak.spi.query.Filter,int)>(r1, i8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d8 = (double) $l7
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d8 = (double) $l7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d9 = $d7 * $d8
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d9 = $d7 * $d8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d10 = $d6 + $d9
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $d10 = $d6 + $d9 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : r3[i8] = $d10
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : r3[i8] = $d10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : i8 = i8 + 1
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : i8 = i8 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : goto [?= $i6 = lengthof r3]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : goto [?= $i6 = lengthof r3] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.update : $i6 = lengthof r3
