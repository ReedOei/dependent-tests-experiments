org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3[0] = "AND"
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3[0] = "AND" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("q.op", $r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("q.op", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r6 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r7 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getPathField()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r7 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getPathField()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" score")
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" score") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5[0] = $r10
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("fl", $r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("fl", $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getCatchAllField()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getCatchAllField()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if r2 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i0 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i1 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: int getRows()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i1 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: int getRows()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15[0] = $r16
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15[0] = $r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("rows", $r15)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("rows", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : return
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i0 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13[0] = r2
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13[0] = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("df", $r13)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("df", $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15 = newarray (java.lang.String)[1]
