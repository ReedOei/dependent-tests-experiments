org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r6 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/solr/oak/conf/")
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/solr/oak/conf/") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : r3 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : r3 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r11 = new java.io.FileOutputStream
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r11 = new java.io.FileOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r12 = newarray (java.nio.file.attribute.FileAttribute)[0]
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r12 = newarray (java.nio.file.attribute.FileAttribute)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r13 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>(r2, r1, ".xml", $r12)
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r13 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>(r2, r1, ".xml", $r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r14 = interfaceinvoke $r13.<java.nio.file.Path: java.io.File toFile()>()
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : $r14 = interfaceinvoke $r13.<java.nio.file.Path: java.io.File toFile()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File)>($r14)
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File)>($r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r3, $r11)
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r3, $r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : virtualinvoke r3.<java.io.InputStream: void close()>()
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : virtualinvoke r3.<java.io.InputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : virtualinvoke $r11.<java.io.FileOutputStream: void flush()>()
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : virtualinvoke $r11.<java.io.FileOutputStream: void flush()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : virtualinvoke $r11.<java.io.FileOutputStream: void close()>()
org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : virtualinvoke $r11.<java.io.FileOutputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.server.RemoteSolrServerProvider.copy : return
