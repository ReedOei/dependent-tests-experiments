org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : r2 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.query.fulltext.FullTextTerm: java.lang.String getPropertyName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if r2 != null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if r2 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r11 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1: java.util.HashSet val$relPaths>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if r2 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("../")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("../") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $z0 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("./")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r4 = new java.lang.IllegalArgumentException
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r5 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative parent is not supported:")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative parent is not supported:") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : throw $r4
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("./") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r4 = new java.lang.IllegalArgumentException
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $i0 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: int getDepth(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $i0 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: int getDepth(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $i0 <= 1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $i0 <= 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getParentPath(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : if $i0 <= 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r9 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1: java.util.HashSet val$relPaths>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r9 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1: java.util.HashSet val$relPaths> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : virtualinvoke $r9.<java.util.HashSet: boolean add(java.lang.Object)>("")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : virtualinvoke $r9.<java.util.HashSet: boolean add(java.lang.Object)>("") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : return 1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getParentPath(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r10 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1: java.util.HashSet val$relPaths>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r10 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1: java.util.HashSet val$relPaths> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : goto [?= return 1]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : goto [?= return 1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : return 1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : $r11 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1: java.util.HashSet val$relPaths> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>("")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>("") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : goto [?= return 1]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : goto [?= return 1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex$1.visit : return 1
