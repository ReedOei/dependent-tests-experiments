org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r9 = new org.apache.solr.client.solrj.SolrQuery >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : specialinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : specialinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: void setDefaults(org.apache.solr.client.solrj.SolrQuery,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>($r9, r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: void setDefaults(org.apache.solr.client.solrj.SolrQuery,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>($r9, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3[0] = "AND"
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r3[0] = "AND" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("q.op", $r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("q.op", $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r6 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r7 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getPathField()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r7 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getPathField()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getPathField : return "path_exact"
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getPathField : return "path_exact" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" score")
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" score") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5[0] = $r10
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r5[0] = $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("fl", $r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("fl", $r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getCatchAllField()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getCatchAllField()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getCatchAllField : return "catch_all"
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getCatchAllField : return "catch_all" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if r2 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i0 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i0 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13[0] = r2
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r13[0] = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("df", $r13)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("df", $r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i1 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: int getRows()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $i1 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: int getRows()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getRows : return 10
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getRows : return 10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15[0] = $r16
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : $r15[0] = $r16 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("rows", $r15)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.setDefaults : virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>("rows", $r15) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r10 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r5 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r5 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r5 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r5 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r11 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r11 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $r11 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $r11 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r195 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r195 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r196 = interfaceinvoke r195.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r196 = interfaceinvoke r195.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z25 = interfaceinvoke r196.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z25 = interfaceinvoke r196.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z25 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z25 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r198 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan: java.util.List getSortOrder()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r198 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan: java.util.List getSortOrder()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r198 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r198 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r199 = interfaceinvoke r198.<java.util.List: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r199 = interfaceinvoke r198.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z26 = interfaceinvoke r199.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z26 = interfaceinvoke r199.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z26 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z26 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r203 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r203 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r203 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r203 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z4 = interfaceinvoke r203.<java.util.Collection: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z4 = interfaceinvoke r203.<java.util.Collection: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z4 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z33 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPrimaryTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z33 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPrimaryTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.useForPrimaryTypes : return 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.useForPrimaryTypes : return 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z33 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z33 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r12 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getQueryStatement()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r12 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getQueryStatement()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $r12 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $r12 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r42 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getQueryStatement()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r42 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getQueryStatement()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z2 = virtualinvoke $r42.<java.lang.String: boolean contains(java.lang.CharSequence)>("rep:excerpt")
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z2 = virtualinvoke $r42.<java.lang.String: boolean contains(java.lang.CharSequence)>("rep:excerpt") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z2 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z34 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPathRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z34 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPathRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParserTest$1.useForPathRestrictions : return 1
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParserTest$1.useForPathRestrictions : return 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z34 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z34 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r234 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r234 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r234 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r234 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r30 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan: java.lang.String getPathPrefix()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r30 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan: java.lang.String getPathPrefix()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r235 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: java.lang.String purgePath(org.apache.jackrabbit.oak.spi.query.Filter,java.lang.String)>(r0, $r30)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r235 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: java.lang.String purgePath(org.apache.jackrabbit.oak.spi.query.Filter,java.lang.String)>(r0, $r30) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : if r1 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils: java.lang.CharSequence partialEscape(java.lang.CharSequence)>(r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils: java.lang.CharSequence partialEscape(java.lang.CharSequence)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : $r2 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : i2 = 0
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : i2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if i2 >= $i1
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if i2 >= $i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 92
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 92 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 33
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 33 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 40
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 40 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 41
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 41 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 58
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 58 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 94
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 94 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 91
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 91 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 93
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 93 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 47
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : if c0 == 47 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : i2 = i2 + 1
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : i2 = i2 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : goto [?= $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>()]
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : goto [?= $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : return $r2
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrUtils.partialEscape : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : return $r4
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.purgePath : return $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r236 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getFieldForPathRestriction(org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction)>(r234)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r236 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.lang.String getFieldForPathRestriction(org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction)>(r234) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : r3 = null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : r3 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : $r2 = <org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration$1: int[] $SwitchMap$org$apache$jackrabbit$oak$spi$query$Filter$PathRestriction>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : $r2 = <org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration$1: int[] $SwitchMap$org$apache$jackrabbit$oak$spi$query$Filter$PathRestriction> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : $i0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: int ordinal()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : $i0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: int ordinal()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : $i1 = $r2[$i0]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : $i1 = $r2[$i0] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : tableswitch($i1) {     case 1:
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : tableswitch($i1) {     case 1: >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : r3 = "path_des"
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : r3 = "path_des" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : goto [?= return r3]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : goto [?= return r3] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : return r3
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.getFieldForPathRestriction : return r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r236 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if r236 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r31 = <org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction ALL_CHILDREN>
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r31 = <org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction ALL_CHILDREN> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z1 = virtualinvoke r234.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: boolean equals(java.lang.Object)>($r31)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z1 = virtualinvoke r234.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: boolean equals(java.lang.Object)>($r31) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r35 = newarray (java.lang.String)[1]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r35 = newarray (java.lang.String)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r36 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r36 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r236)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r236) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r35[0] = $r40
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r35[0] = $r40 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : virtualinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addFilterQuery(java.lang.String[])>($r35)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : virtualinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addFilterQuery(java.lang.String[])>($r35) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : goto [?= $z35 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean collapseJcrContentNodes()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : goto [?= $z35 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean collapseJcrContentNodes()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z35 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean collapseJcrContentNodes()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z35 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean collapseJcrContentNodes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.collapseJcrContentNodes : return 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.DefaultSolrConfiguration.collapseJcrContentNodes : return 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z35 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z35 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $i4 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $i4 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $i4 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $i4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*:*")
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*:*") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r237 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : r237 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : virtualinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setQuery(java.lang.String)>(r237)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : virtualinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setQuery(java.lang.String)>(r237) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r14 = <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r14 = <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z0 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $z0 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r15 = <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: org.slf4j.Logger log>
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r15 = <org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r16 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getQueryStatement()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r16 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getQueryStatement()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r17 = virtualinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : $r17 = virtualinvoke $r9.<org.apache.solr.client.solrj.SolrQuery: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("JCR query {} has been converted to Solr query {}", $r16, $r17)
org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("JCR query {} has been converted to Solr query {}", $r16, $r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.FilterQueryParser.getQuery : return $r9
