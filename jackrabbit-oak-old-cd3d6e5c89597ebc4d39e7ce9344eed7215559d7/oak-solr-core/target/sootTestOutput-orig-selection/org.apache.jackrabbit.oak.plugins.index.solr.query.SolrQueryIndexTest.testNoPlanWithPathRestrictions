org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r4 = new org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r4.<org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r4.<org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.query.ast.NodeTypeInfoProvider: org.apache.jackrabbit.oak.query.ast.NodeTypeInfo getNodeTypeInfo(java.lang.String)>("nt:base")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.query.ast.NodeTypeInfoProvider: org.apache.jackrabbit.oak.query.ast.NodeTypeInfo getNodeTypeInfo(java.lang.String)>("nt:base") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r5 = new org.apache.jackrabbit.oak.query.ast.SelectorImpl
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r5 = new org.apache.jackrabbit.oak.query.ast.SelectorImpl >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r5.<org.apache.jackrabbit.oak.query.ast.SelectorImpl: void <init>(org.apache.jackrabbit.oak.query.ast.NodeTypeInfo,java.lang.String)>(r3, r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r5.<org.apache.jackrabbit.oak.query.ast.SelectorImpl: void <init>(org.apache.jackrabbit.oak.query.ast.NodeTypeInfo,java.lang.String)>(r3, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : return $r5
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r12 = new org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r12 = new org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r4 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r4 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr"
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type")
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2 = newarray (java.lang.String)[2]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2 = newarray (java.lang.String)[2] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[0] = "oak:index"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[0] = "oak:index" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[1] = r1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[1] = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String concat(java.lang.String,java.lang.String[])>(r0, $r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String concat(java.lang.String,java.lang.String[])>(r0, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : return $r3
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (java.lang.String) $r10
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (java.lang.String) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>(r14, $r13, r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>(r14, $r13, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $i0 = interfaceinvoke r4.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r7 = (java.lang.String) $r13
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r7 = (java.lang.String) $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r8 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration getConfiguration(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r8 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration getConfiguration(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r17 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r17 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r3 = (java.lang.String) $r9
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r3 = (java.lang.String) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : goto [?= $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : goto [?= $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z3 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z3 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z3 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : return $r8
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r9 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.solr.client.solrj.SolrClient getServer(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r9 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.solr.client.solrj.SolrClient getServer(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r19 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r19 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r3 = (java.lang.String) $r11
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r3 = (java.lang.String) $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : goto [?= $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : goto [?= $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r18)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z3 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z3 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z3 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r9 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r9 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>($r9)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r10 = new org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r10 = new org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer: void <init>(org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfigurationProvider)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer: void <init>(org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfigurationProvider)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrServerType", null)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrServerType", null) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = r2
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: org.apache.jackrabbit.oak.spi.state.NodeState nodeState>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: org.apache.jackrabbit.oak.spi.state.NodeState nodeState> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : if r3 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : if r3 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r5 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type STRING>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r5 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type STRING> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r5)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = (java.lang.String) $r6
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = (java.lang.String) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : return r7
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : return r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r3 = "embedded"
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r3 = "embedded" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r16 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrHomePath", "solr")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r16 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrHomePath", "solr") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r17 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("coreName", "oak")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r17 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("coreName", "oak") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r18 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrContext", null)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r18 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrContext", null) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r12 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("httpPort", "0")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r12 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("httpPort", "0") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r12)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if r18 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if r18 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r13 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r13 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration: void <init>(java.lang.String,java.lang.String)>(r16, r17)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration: void <init>(java.lang.String,java.lang.String)>(r16, r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : return $r13
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : return $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r5 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r5 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r5 != null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r5 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r10 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r10 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z0 = $r10 instanceof java.lang.Class
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z0 = $r10 instanceof java.lang.Class >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r24 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r24 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r25 = (java.lang.Class) $r24
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r25 = (java.lang.Class) $r24 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= r1 = $r25]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= r1 = $r25] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r1 = $r25
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r1 = $r25 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r2 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r2 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i0 = lengthof r2
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i0 = lengthof r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if i2 >= i0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if i2 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r4 = r2[i2]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r4 = r2[i2] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r20 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r20 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $i1 = lengthof $r20
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $i1 = lengthof $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $i1 != 1
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $i1 != 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r21 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r21 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r22 = $r21[0]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r22 = $r21[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z1 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>($r23)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z1 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>($r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> = r4
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> = r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = i2 + 1
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = i2 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r14 != null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r14 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r7 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r7 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6[0] = r0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6[0] = r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r9 = (org.apache.jackrabbit.oak.plugins.index.solr.server.SolrServerProvider) $r8
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r9 = (org.apache.jackrabbit.oak.plugins.index.solr.server.SolrServerProvider) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : return $r9
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : return $r10
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : return $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r8 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r8 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r9 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r9 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r10 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator getEstimator(java.lang.String)>(r7)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r10 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator getEstimator(java.lang.String)>(r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r2 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r2 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : if $z0 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r3 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r3 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r5 = (org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator) $r4
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r5 = (org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : return $r5
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r11 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan getIndexPlan(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration,org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator,java.util.List,java.lang.String)>(r1, r8, r10, r2, r7)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r11 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan getIndexPlan(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration,org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator,java.util.List,java.lang.String)>(r1, r8, r10, r2, r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: int getMatchingFilterRestrictions(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>(r1, r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: int getMatchingFilterRestrictions(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : i2 = 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : i2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r3 != null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r3 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r9 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r9 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r9 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r9 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r10 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r10 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i1 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r11 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r11 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r11 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r11 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r6 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r6 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r13 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r13 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r13 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r13 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r4 = <org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction NO_RESTRICTION>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r4 = <org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction NO_RESTRICTION> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r5 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r5 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z1 = virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: boolean equals(java.lang.Object)>($r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z1 = virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z1 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z2 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPathRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z2 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPathRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPathRestrictions : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("pathRestrictions", 0)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPathRestrictions : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("pathRestrictions", 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : z1 = z0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : z1 = z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r3 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: org.apache.jackrabbit.oak.spi.state.NodeState definition>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r3 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: org.apache.jackrabbit.oak.spi.state.NodeState definition> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : r2 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : r2 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : if r2 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : return z1
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : return z1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPathRestrictions : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPathRestrictions : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z2 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r14 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Set getPrimaryTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r14 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Set getPrimaryTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i3 = interfaceinvoke $r14.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i3 = interfaceinvoke $r14.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i3 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i3 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z0 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPrimaryTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z0 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPrimaryTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("primaryTypes", 0)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("primaryTypes", 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : return i2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : return i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : return null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : return null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r11 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r11 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : return r5
