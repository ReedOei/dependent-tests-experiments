org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $z0 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: boolean hasChildNode(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : r15 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : r15 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r2 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type NAME>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r2 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type NAME> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r3 = interfaceinvoke r15.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object,org.apache.jackrabbit.oak.api.Type)>("jcr:primaryType", "oak:QueryIndexDefinition", $r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r3 = interfaceinvoke r15.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object,org.apache.jackrabbit.oak.api.Type)>("jcr:primaryType", "oak:QueryIndexDefinition", $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r4 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("type", "solr")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r4 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("type", "solr") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("async", "async")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("async", "async") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("reindex", $r6)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : interfaceinvoke $r5.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("reindex", $r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r8 = interfaceinvoke r15.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r8 = interfaceinvoke r15.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder child(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("solrServerType", "embedded")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : interfaceinvoke $r8.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(java.lang.String,java.lang.Object)>("solrServerType", "embedded") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : if r1 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $z1 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $z1 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : if $z1 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r10 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type STRINGS>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r10 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type STRINGS> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.memory.PropertyStates: org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String,java.lang.Object,org.apache.jackrabbit.oak.api.Type)>("usedProperties", r1, $r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : $r11 = staticinvoke <org.apache.jackrabbit.oak.plugins.memory.PropertyStates: org.apache.jackrabbit.oak.api.PropertyState createProperty(java.lang.String,java.lang.Object,org.apache.jackrabbit.oak.api.Type)>("usedProperties", r1, $r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : interfaceinvoke r15.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(org.apache.jackrabbit.oak.api.PropertyState)>($r11)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : interfaceinvoke r15.<org.apache.jackrabbit.oak.spi.state.NodeBuilder: org.apache.jackrabbit.oak.spi.state.NodeBuilder setProperty(org.apache.jackrabbit.oak.api.PropertyState)>($r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : return r15
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookupTest.newSolrIndexDefinition : return r15 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr"
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type")
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2 = newarray (java.lang.String)[2]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2 = newarray (java.lang.String)[2] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[0] = "oak:index"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[0] = "oak:index" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[1] = r1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[1] = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String concat(java.lang.String,java.lang.String[])>(r0, $r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String concat(java.lang.String,java.lang.String[])>(r0, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : return $r3
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (java.lang.String) $r10
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (java.lang.String) $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = interfaceinvoke r14.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>(r14, $r13, r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>(r14, $r13, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2
