org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r6 = new java.io.File >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r0)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r7 = new java.io.StringWriter
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r7 = new java.io.StringWriter >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : specialinvoke $r7.<java.io.StringWriter: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : specialinvoke $r7.<java.io.StringWriter: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r8 = interfaceinvoke r1.<javax.jcr.Session: javax.jcr.Workspace getWorkspace()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r8 = interfaceinvoke r1.<javax.jcr.Session: javax.jcr.Workspace getWorkspace()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r9 = interfaceinvoke $r8.<javax.jcr.Workspace: javax.jcr.nodetype.NodeTypeManager getNodeTypeManager()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r9 = interfaceinvoke $r8.<javax.jcr.Workspace: javax.jcr.nodetype.NodeTypeManager getNodeTypeManager()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : r4 = interfaceinvoke $r9.<javax.jcr.nodetype.NodeTypeManager: javax.jcr.nodetype.NodeTypeIterator getAllNodeTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : r4 = interfaceinvoke $r9.<javax.jcr.nodetype.NodeTypeManager: javax.jcr.nodetype.NodeTypeIterator getAllNodeTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $z0 = interfaceinvoke r4.<javax.jcr.nodetype.NodeTypeIterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $z0 = interfaceinvoke r4.<javax.jcr.nodetype.NodeTypeIterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : r23 = interfaceinvoke r4.<javax.jcr.nodetype.NodeTypeIterator: javax.jcr.nodetype.NodeType nextNodeType()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : r23 = interfaceinvoke r4.<javax.jcr.nodetype.NodeTypeIterator: javax.jcr.nodetype.NodeType nextNodeType()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : r5 = interfaceinvoke r23.<javax.jcr.nodetype.NodeType: javax.jcr.nodetype.NodeType[] getSupertypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : r5 = interfaceinvoke r23.<javax.jcr.nodetype.NodeType: javax.jcr.nodetype.NodeType[] getSupertypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if r5 == null
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if r5 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i0 = lengthof r5
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i0 = lengthof r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r14 = interfaceinvoke r23.<javax.jcr.nodetype.NodeType: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r14 = interfaceinvoke r23.<javax.jcr.nodetype.NodeType: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r15 = virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r14)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r15 = virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" => ")
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" => ") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : i4 = 0
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : i4 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i1 = lengthof r5
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i1 = lengthof r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if i4 >= $i1
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if i4 >= $i1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r18 = r5[i4]
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r18 = r5[i4] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r19 = interfaceinvoke $r18.<javax.jcr.nodetype.NodeType: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r19 = interfaceinvoke $r18.<javax.jcr.nodetype.NodeType: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r19)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r19) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i2 = lengthof r5
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i2 = lengthof r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i3 = $i2 - 1
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $i3 = $i2 - 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if i4 >= $i3
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if i4 >= $i3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(char)>(32)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(char)>(32) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : i4 = i4 + 1
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : i4 = i4 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : goto [?= $i1 = lengthof r5]
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : goto [?= $i1 = lengthof r5] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(char)>(10)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(char)>(10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : goto [?= $z0 = interfaceinvoke r4.<javax.jcr.nodetype.NodeTypeIterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : goto [?= $z0 = interfaceinvoke r4.<javax.jcr.nodetype.NodeTypeIterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(char)>(44)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r7.<java.io.StringWriter: java.io.StringWriter append(char)>(44) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r10 = new java.io.FileOutputStream
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r10 = new java.io.FileOutputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r6)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r11 = virtualinvoke $r7.<java.io.StringWriter: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r11 = virtualinvoke $r7.<java.io.StringWriter: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8")
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r10.<java.io.FileOutputStream: void write(byte[])>($r12)
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r10.<java.io.FileOutputStream: void write(byte[])>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r10.<java.io.FileOutputStream: void flush()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r10.<java.io.FileOutputStream: void flush()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r10.<java.io.FileOutputStream: void close()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : virtualinvoke $r10.<java.io.FileOutputStream: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>()
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if $z1 != 0
org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.NodeTypeIndexingUtils.createPrimaryTypeSynonymsFile : return $r6
