org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r4 = new org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r4.<org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r4.<org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.query.ast.NodeTypeInfoProvider: org.apache.jackrabbit.oak.query.ast.NodeTypeInfo getNodeTypeInfo(java.lang.String)>("nt:base")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.query.ast.NodeTypeInfoProvider: org.apache.jackrabbit.oak.query.ast.NodeTypeInfo getNodeTypeInfo(java.lang.String)>("nt:base") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r5 = new org.apache.jackrabbit.oak.query.ast.SelectorImpl
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r5 = new org.apache.jackrabbit.oak.query.ast.SelectorImpl >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r5.<org.apache.jackrabbit.oak.query.ast.SelectorImpl: void <init>(org.apache.jackrabbit.oak.query.ast.NodeTypeInfo,java.lang.String)>(r3, r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r5.<org.apache.jackrabbit.oak.query.ast.SelectorImpl: void <init>(org.apache.jackrabbit.oak.query.ast.NodeTypeInfo,java.lang.String)>(r3, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : return $r5
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r12 = new org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r12 = new org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r4 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r4 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr"
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type")
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: java.lang.String getName()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r10 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.lang.String createIndexNodePath(java.lang.String,java.lang.String)>(r1, $r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2 = newarray (java.lang.String)[2]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2 = newarray (java.lang.String)[2] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[0] = "oak:index"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[0] = "oak:index" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[1] = r1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r2[1] = r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String concat(java.lang.String,java.lang.String[])>(r0, $r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : $r3 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String concat(java.lang.String,java.lang.String[])>(r0, $r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : return $r3
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.createIndexNodePath : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $i0 = interfaceinvoke r4.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r7 = (java.lang.String) $r13
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r7 = (java.lang.String) $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r8 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration getConfiguration(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r8 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration getConfiguration(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r17 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r17 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r3 = (java.lang.String) $r9
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r3 = (java.lang.String) $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : r16 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : goto [?= $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : goto [?= $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z3 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $z3 = interfaceinvoke r16.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z3 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : return $r8
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getConfiguration : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r9 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.solr.client.solrj.SolrClient getServer(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r9 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.solr.client.solrj.SolrClient getServer(java.lang.String,org.apache.jackrabbit.oak.spi.state.NodeState)>(r7, r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r4 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r19 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r19 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r3 = (java.lang.String) $r11
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r3 = (java.lang.String) $r11 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : r18 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : goto [?= $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : goto [?= $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r18)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>(r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z3 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $z3 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: boolean hasChildNode(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z3 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r8 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r9 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("server")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r9 = interfaceinvoke r18.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("server") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>($r9)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r8.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>($r9) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r10 = new org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : $r10 = new org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer: void <init>(org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfigurationProvider)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : specialinvoke $r10.<org.apache.jackrabbit.oak.plugins.index.solr.server.OakSolrServer: void <init>(org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfigurationProvider)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrServerType", null)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrServerType", null) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = r2
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: org.apache.jackrabbit.oak.spi.state.NodeState nodeState>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r4 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: org.apache.jackrabbit.oak.spi.state.NodeState nodeState> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : if r3 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : if r3 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r5 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type STRING>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r5 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type STRING> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r5)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = (java.lang.String) $r6
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : r7 = (java.lang.String) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : return r7
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getStringValueFor : return r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r3 = "embedded"
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r3 = "embedded" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r16 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrHomePath", "solr")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r16 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrHomePath", "solr") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r17 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("coreName", "oak")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r17 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("coreName", "oak") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r18 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrContext", null)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r18 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("solrContext", null) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r12 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("httpPort", "0")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r12 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider: java.lang.String getStringValueFor(java.lang.String,java.lang.String)>("httpPort", "0") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r12)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if r18 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : if r18 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r13 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : $r13 = new org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration: void <init>(java.lang.String,java.lang.String)>(r16, r17)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : specialinvoke $r13.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.EmbeddedSolrServerConfiguration: void <init>(java.lang.String,java.lang.String)>(r16, r17) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : return $r13
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.NodeStateSolrServerConfigurationProvider.getSolrServerConfiguration : return $r13 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r5 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r5 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r5 != null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r5 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r10 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r10 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z0 = $r10 instanceof java.lang.Class
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z0 = $r10 instanceof java.lang.Class >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r24 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r24 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Type type> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r25 = (java.lang.Class) $r24
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r25 = (java.lang.Class) $r24 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= r1 = $r25]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= r1 = $r25] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r1 = $r25
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r1 = $r25 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r2 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r2 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i0 = lengthof r2
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i0 = lengthof r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if i2 >= i0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if i2 >= i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r4 = r2[i2]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r4 = r2[i2] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r20 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r20 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $i1 = lengthof $r20
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $i1 = lengthof $r20 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $i1 != 1
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $i1 != 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r21 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r21 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r22 = $r21[0]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r22 = $r21[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z1 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>($r23)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $z1 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>($r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> = r4
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> = r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = i2 + 1
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : i2 = i2 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r14 != null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : if $r14 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r7 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r7 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration: java.lang.reflect.Constructor constructor> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6 = newarray (java.lang.Object)[1]
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6[0] = r0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r6[0] = r0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r9 = (org.apache.jackrabbit.oak.plugins.index.solr.server.SolrServerProvider) $r8
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : $r9 = (org.apache.jackrabbit.oak.plugins.index.solr.server.SolrServerProvider) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : return $r9
org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration.getProvider : return $r9 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : return $r10
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getServer : return $r10 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r8 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r8 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r9 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r9 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r10 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator getEstimator(java.lang.String)>(r7)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r10 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator getEstimator(java.lang.String)>(r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r2 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r2 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : if $z0 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r3 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r3 = <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.util.Map estimators> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r5 = (org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator) $r4
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : $r5 = (org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : return $r5
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getEstimator : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r11 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan getIndexPlan(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration,org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator,java.util.List,java.lang.String)>(r1, r8, r10, r2, r7)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r11 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan getIndexPlan(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration,org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator,java.util.List,java.lang.String)>(r1, r8, r10, r2, r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: int getMatchingFilterRestrictions(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>(r1, r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $i0 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: int getMatchingFilterRestrictions(org.apache.jackrabbit.oak.spi.query.Filter,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>(r1, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : i2 = 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : i2 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r3 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r3 != null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r3 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r9 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r9 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r9 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r9 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r10 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r10 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getFulltextConditions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i1 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i1 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r11 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r11 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r11 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r11 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r6 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r6 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r7 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction getPropertyRestriction(java.lang.String)>("native*solr")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r7 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction getPropertyRestriction(java.lang.String)>("native*solr") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r7 != null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r7 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction getPropertyRestriction(java.lang.String)>("native*lucene")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction getPropertyRestriction(java.lang.String)>("native*lucene") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r8 != null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r8 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z3 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z3 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPropertyRestrictions : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("propertyRestrictions", 0)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPropertyRestrictions : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("propertyRestrictions", 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : z1 = z0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : z1 = z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r3 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: org.apache.jackrabbit.oak.spi.state.NodeState definition>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r3 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: org.apache.jackrabbit.oak.spi.state.NodeState definition> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : r2 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : r2 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : if r2 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r4 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type BOOLEAN>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r4 = <org.apache.jackrabbit.oak.api.Type: org.apache.jackrabbit.oak.api.Type BOOLEAN> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r5 = interfaceinvoke r2.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r4)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r5 = interfaceinvoke r2.<org.apache.jackrabbit.oak.api.PropertyState: java.lang.Object getValue(org.apache.jackrabbit.oak.api.Type)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r6 = (java.lang.Boolean) $r5
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : $r6 = (java.lang.Boolean) $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : return z1
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getBooleanValueFor : return z1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPropertyRestrictions : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPropertyRestrictions : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z3 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z3 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r12 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r12 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z4 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: boolean hasIgnoredProperties(java.util.Collection,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>($r12, r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z4 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: boolean hasIgnoredProperties(java.util.Collection,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>($r12, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : r3 = (org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction) $r4
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : r3 = (org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction) $r4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: boolean isIgnoredProperty(org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>(r3, r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: boolean isIgnoredProperty(org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction,org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration)>(r3, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r3 = "native*lucene"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r3 = "native*lucene" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r2 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r2 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z0 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r5 = "native*solr"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r5 = "native*solr" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r4 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r4 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z2 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z2 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r6 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.util.Collection getUsedProperties()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r6 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.util.Collection getUsedProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: java.lang.Iterable getStringValuesFor(java.lang.String)>("usedProperties")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: java.lang.Iterable getStringValuesFor(java.lang.String)>("usedProperties") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : r6 = null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : r6 = null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : $r3 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: org.apache.jackrabbit.oak.spi.state.NodeState definition>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : $r3 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: org.apache.jackrabbit.oak.spi.state.NodeState definition> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : r2 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : r2 = interfaceinvoke $r3.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.api.PropertyState getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : if r2 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : if r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : return r6
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getStringValuesFor : return r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : if r1 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : return r6
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getUsedProperties : return r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r7 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r7 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z3 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("/")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z3 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("/") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z3 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z3 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r9 = "rep:excerpt"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r9 = "rep:excerpt" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r8 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r8 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z4 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r11 = "oak:scoreExplanation"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r11 = "oak:scoreExplanation" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r10 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r10 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z5 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z5 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r13 = "rep:facet"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r13 = "rep:facet" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r12 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r12 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z6 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z6 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r15 = ":localname"
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r15 = ":localname" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r14 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r14 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z7 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z7 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r16 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r16 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z8 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>("function*")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z8 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>("function*") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z8 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z8 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r17 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.util.Collection getIgnoredProperties()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r17 = interfaceinvoke r1.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: java.util.Collection getIgnoredProperties()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: java.lang.Iterable getStringValuesFor(java.lang.String)>("ignoredProperties")
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : r1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: java.lang.Iterable getStringValuesFor(java.lang.String)>("ignoredProperties") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : if r1 == null
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : if r1 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : r6 = <org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfigurationDefaults: java.util.Collection IGNORED_PROPERTIES>
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : r6 = <org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfigurationDefaults: java.util.Collection IGNORED_PROPERTIES> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : return r6
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.getIgnoredProperties : return r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r18 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $r18 = r0.<org.apache.jackrabbit.oak.spi.query.Filter$PropertyRestriction: java.lang.String propertyName> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z9 = interfaceinvoke $r17.<java.util.Collection: boolean contains(java.lang.Object)>($r18)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z9 = interfaceinvoke $r17.<java.util.Collection: boolean contains(java.lang.Object)>($r18) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z9 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : if $z9 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z11 = 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : $z11 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : return $z11
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.isIgnoredProperty : return $z11 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : return 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.hasIgnoredProperties : return 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z4 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z4 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : i2 = i2 + 1
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : i2 = i2 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r13 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r13 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r13 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $r13 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r4 = <org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction NO_RESTRICTION>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r4 = <org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction NO_RESTRICTION> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r5 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r5 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z1 = virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: boolean equals(java.lang.Object)>($r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z1 = virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z1 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r14 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Set getPrimaryTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $r14 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Set getPrimaryTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i3 = interfaceinvoke $r14.<java.util.Set: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $i3 = interfaceinvoke $r14.<java.util.Set: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i3 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $i3 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z0 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPrimaryTypes()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : $z0 = interfaceinvoke r2.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.OakSolrConfiguration: boolean useForPrimaryTypes()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("primaryTypes", 0)
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : $z0 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration: boolean getBooleanValueFor(java.lang.String,boolean)>("primaryTypes", 0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.configuration.nodestate.OakSolrNodeStateConfiguration.useForPrimaryTypes : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if i2 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : if i2 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : return i2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getMatchingFilterRestrictions : return i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : if $i0 <= 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : if $i0 <= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r6 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder planBuilder(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r6 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder planBuilder(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r2 = new org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r2 = new org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : specialinvoke $r2.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r3 = virtualinvoke $r2.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setCostPerExecution(double)>(1.5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r3 = virtualinvoke $r2.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setCostPerExecution(double)>(1.5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setCostPerEntry(double)>(0.3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r4 = virtualinvoke $r3.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setCostPerEntry(double)>(0.3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setFilter(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r5 = virtualinvoke $r4.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setFilter(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setFulltextIndex(boolean)>(1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setFulltextIndex(boolean)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setIncludesNodeData(boolean)>(1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setIncludesNodeData(boolean)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setDelayed(boolean)>(1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setDelayed(boolean)>(1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : return $r8
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.planBuilder : return $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $l1 = virtualinvoke r3.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long estimate(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $l1 = virtualinvoke r3.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long estimate(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : l2 = 0L
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : l2 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : i3 = 0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : i3 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : if i3 >= 5
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : if i3 >= 5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d0 = (double) l2
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d0 = (double) l2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights>
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $r2 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: double[] weights> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d1 = $r2[i3]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d1 = $r2[i3] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $l1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long getInput(org.apache.jackrabbit.oak.spi.query.Filter,int)>(r1, i3)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $l1 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: long getInput(org.apache.jackrabbit.oak.spi.query.Filter,int)>(r1, i3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $z0 = <org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: boolean $assertionsDisabled>
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $z0 = <org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator: boolean $assertionsDisabled> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $z0 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $z0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r10 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r10 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r10 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r10 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r11 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r11 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.util.Collection getPropertyRestrictions()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $i4 = interfaceinvoke $r11.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $i4 = interfaceinvoke $r11.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l5 = (long) $i4
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l5 = (long) $i4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : goto [?= return $l5]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : goto [?= return $l5] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l5
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d2 = (double) $l1
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d2 = (double) $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d3 = $d1 * $d2
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d3 = $d1 * $d2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d4 = $d0 + $d3
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $d4 = $d0 + $d3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : l2 = (long) $d4
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : l2 = (long) $d4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : i3 = i3 + 1
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : i3 = i3 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 1
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $z1 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: boolean containsNativeConstraint()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $z1 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: boolean containsNativeConstraint()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l6 = 0L
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l6 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l6
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l6 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 2
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r8 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r8 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r9 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r9 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $i3 = virtualinvoke $r9.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: int ordinal()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $i3 = virtualinvoke $r9.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: int ordinal()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l7 = (long) $i3
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l7 = (long) $i3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : goto [?= return $l7]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : goto [?= return $l7] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l7
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 3
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r4 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r4 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r4 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r4 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r5 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r5 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction getPathRestriction()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r6 = virtualinvoke $r5.<org.apache.jackrabbit.oak.spi.query.Filter$PathRestriction: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("/")
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("/") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $i2 = lengthof $r7
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $i2 = lengthof $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l8 = (long) $i2
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l8 = (long) $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : goto [?= return $l8]
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : goto [?= return $l8] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l8
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l8 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 4
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if i0 != 4 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $r2 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: org.apache.jackrabbit.oak.spi.query.fulltext.FullTextExpression getFullTextConstraint()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r2 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : if $r2 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l9 = 0L
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : $l9 = 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l9
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.getInput : return $l9 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $l0 = staticinvoke <java.lang.Math: long max(long,long)>(0L, l2)
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : $l0 = staticinvoke <java.lang.Math: long max(long,long)>(0L, l2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : return $l0
org.apache.jackrabbit.oak.plugins.index.solr.query.LMSEstimator.estimate : return $l0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setEstimatedEntryCount(long)>($l1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r7 = virtualinvoke $r6.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setEstimatedEntryCount(long)>($l1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setSortOrder(java.util.List)>(r4)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setSortOrder(java.util.List)>(r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r9 = virtualinvoke $r8.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setPlanName(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r9 = virtualinvoke $r8.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setPlanName(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r10 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.lang.String getPathPrefix(java.lang.String)>(r5)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r10 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex: java.lang.String getPathPrefix(java.lang.String)>(r5) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : r2 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getAncestorPath(java.lang.String,int)>(r1, 2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : r2 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.String getAncestorPath(java.lang.String,int)>(r1, 2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : $z0 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: boolean denotesRoot(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : $z0 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: boolean denotesRoot(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : $r3 = ""
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : $r3 = "" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : goto [?= return $r3]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : goto [?= return $r3] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : return $r3
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPathPrefix : return $r3 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r11 = virtualinvoke $r9.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setPathPrefix(java.lang.String)>($r10)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r11 = virtualinvoke $r9.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder setPathPrefix(java.lang.String)>($r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r12 = virtualinvoke $r11.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan build()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : $r12 = virtualinvoke $r11.<org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan$Builder: org.apache.jackrabbit.oak.spi.query.QueryIndex$IndexPlan build()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : return $r12
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getIndexPlan : return $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r11 == null
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if r11 == null >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r11)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r11) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : return r5
