org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r4 = new org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r4.<org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r4.<org.apache.jackrabbit.oak.query.NodeStateNodeTypeInfoProvider: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.query.ast.NodeTypeInfoProvider: org.apache.jackrabbit.oak.query.ast.NodeTypeInfo getNodeTypeInfo(java.lang.String)>("nt:base")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : r3 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.query.ast.NodeTypeInfoProvider: org.apache.jackrabbit.oak.query.ast.NodeTypeInfo getNodeTypeInfo(java.lang.String)>("nt:base") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r5 = new org.apache.jackrabbit.oak.query.ast.SelectorImpl
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : $r5 = new org.apache.jackrabbit.oak.query.ast.SelectorImpl >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r5.<org.apache.jackrabbit.oak.query.ast.SelectorImpl: void <init>(org.apache.jackrabbit.oak.query.ast.NodeTypeInfo,java.lang.String)>(r3, r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : specialinvoke $r5.<org.apache.jackrabbit.oak.query.ast.SelectorImpl: void <init>(org.apache.jackrabbit.oak.query.ast.NodeTypeInfo,java.lang.String)>(r3, r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : return $r5
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndexTest.newSelector : return $r5 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r12 = new org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $r12 = new org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r3)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : specialinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void <init>(org.apache.jackrabbit.oak.spi.state.NodeState)>(r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r4 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter)>(r1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r4 = virtualinvoke $r12.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r2 = specialinvoke r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: java.util.Collection collectIndexNodePaths(org.apache.jackrabbit.oak.spi.query.Filter,boolean)>(r1, 1) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: void collectIndexNodePaths(org.apache.jackrabbit.oak.spi.state.NodeState,java.lang.String,java.util.Collection)>($r6, "/", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index")
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r3 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: org.apache.jackrabbit.oak.spi.state.NodeState getChildNode(java.lang.String)>("oak:index") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r6 = interfaceinvoke r3.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.Iterable getChildNodeEntries()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r5 = (org.apache.jackrabbit.oak.spi.state.ChildNodeEntry) $r7 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r5.<org.apache.jackrabbit.oak.spi.state.ChildNodeEntry: org.apache.jackrabbit.oak.spi.state.NodeState getNodeState()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = staticinvoke <org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer: boolean isSolrIndexNode(org.apache.jackrabbit.oak.spi.state.NodeState)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr"
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r1 = "solr" >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type")
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $r2 = interfaceinvoke r0.<org.apache.jackrabbit.oak.spi.state.NodeState: java.lang.String getString(java.lang.String)>("type") >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0
org.apache.jackrabbit.oak.plugins.index.solr.util.SolrIndexInitializer.isSolrIndexNode : return $z0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : if z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root>
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r14 = r0.<org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup: org.apache.jackrabbit.oak.spi.state.NodeState root> >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r8 = interfaceinvoke r1.<org.apache.jackrabbit.oak.spi.query.Filter: java.lang.String getPath()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $r9 = staticinvoke <org.apache.jackrabbit.oak.commons.PathUtils: java.lang.Iterable elements(java.lang.String)>($r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrIndexLookup.collectIndexNodePaths : return $r2 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $i0 = interfaceinvoke r4.<java.util.Collection: int size()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0)
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if $z0 == 0
org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.index.solr.query.SolrQueryIndex.getPlans : return r5
