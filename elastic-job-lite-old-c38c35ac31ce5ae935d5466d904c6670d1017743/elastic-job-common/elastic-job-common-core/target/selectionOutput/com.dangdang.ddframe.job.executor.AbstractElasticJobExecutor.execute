com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z0 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z0 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z0 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r6 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r6 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : r3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : r3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z1 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z1 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z1 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z1 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r16 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z1 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r1, r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z1 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r23 := @caughtexception
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r24 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r24.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r24.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r25 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r25 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z6 = interfaceinvoke $r25.<java.util.Map: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z6 = interfaceinvoke $r25.<java.util.Map: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z6 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z6 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z8 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z6 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z7 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z7 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z7 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z7 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r27 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z7 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : throw $r23
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r27 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r28 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_ERROR>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r28 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_ERROR> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r26 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r26 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r29 = virtualinvoke $r26.<java.lang.Object: java.lang.String toString()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r29 = virtualinvoke $r26.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r27.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r28, $r29)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r27.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r28, $r29) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : throw $r23
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z8 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z8 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z8 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r31 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z8 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : throw $r23
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r31 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r30 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_FINISHED>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r30 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_FINISHED> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r31.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r30, "")
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r31.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r30, "") >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= throw $r23]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= throw $r23] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : throw $r23
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r7 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r23 := @caughtexception
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r7 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r7.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r7.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r8 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r8 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z2 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z2 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z2 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z2 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z4 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z2 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z3 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z3 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r10 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z3 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : return
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r10 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_ERROR>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_ERROR> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r12 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r12 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r10.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r11, $r12)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r10.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r11, $r12) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= return]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : return
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z4 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z4 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z4 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r14 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z4 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : return
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r14 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r13 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_FINISHED>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r13 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_FINISHED> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r14.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r13, "")
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r14.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r13, "") >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= return]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : return
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r16 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r15 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_RUNNING>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r15 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_RUNNING> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r16.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r15, "")
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r16.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r15, "") >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r1, r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r16.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r15, "") >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r23 := @caughtexception
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z5 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z5 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r17 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z5 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : return
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r17 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r18 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r18 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r21 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_FINISHED>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r21 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_FINISHED> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r19 = newarray (java.lang.Object)[1]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r19 = newarray (java.lang.Object)[1] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r20 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r20 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r19[0] = $r20
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r19[0] = $r20 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Sharding item for job \'%s\' is empty.", $r19)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Sharding item for job \'%s\' is empty.", $r19) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r17.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r18, $r21, $r22)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r17.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r18, $r21, $r22) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : return
