com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r4 = (com.dangdang.ddframe.job.executor.JobFacade) $r3
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r4 = (com.dangdang.ddframe.job.executor.JobFacade) $r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r4.<com.dangdang.ddframe.job.executor.JobFacade: void checkJobExecutionEnvironment()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r4.<com.dangdang.ddframe.job.executor.JobFacade: void checkJobExecutionEnvironment()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : goto [?= $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)]
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : goto [?= $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)] >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r6 = (com.dangdang.ddframe.job.executor.JobFacade) $r5
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r6 = (com.dangdang.ddframe.job.executor.JobFacade) $r5 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r9 = (com.dangdang.ddframe.job.executor.JobFacade) $r8
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r9 = (com.dangdang.ddframe.job.executor.JobFacade) $r8 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r10 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r10 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String taskId>
com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String taskId> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : return $r1
com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING>
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING> >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r9.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r10, $r11, "Job \'test_job\' execute begin.")
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r9.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r10, $r11, "Job \'test_job\' execute begin.") >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r12 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r12 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r13 = (com.dangdang.ddframe.job.executor.JobFacade) $r12
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r13 = (com.dangdang.ddframe.job.executor.JobFacade) $r12 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map shardingItemParameters>
com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map shardingItemParameters> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : return $r1
com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r13.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r15)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r13.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r15) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r16 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r16 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r17 = (com.dangdang.ddframe.job.executor.JobFacade) $r16
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r17 = (com.dangdang.ddframe.job.executor.JobFacade) $r16 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r17.<com.dangdang.ddframe.job.executor.JobFacade: void beforeJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r17.<com.dangdang.ddframe.job.executor.JobFacade: void beforeJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r19 = (com.dangdang.ddframe.job.executor.JobFacade) $r18
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r19 = (com.dangdang.ddframe.job.executor.JobFacade) $r18 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r19.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r19.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r21 = (com.dangdang.ddframe.job.executor.JobFacade) $r20
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r21 = (com.dangdang.ddframe.job.executor.JobFacade) $r20 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r21.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r21.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r23 = (com.dangdang.ddframe.job.executor.JobFacade) $r22
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r23 = (com.dangdang.ddframe.job.executor.JobFacade) $r22 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r24 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r24 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r25 = interfaceinvoke $r24.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r25 = interfaceinvoke $r24.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r23.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r25)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r23.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r25) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r26 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r26 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r27 = (com.dangdang.ddframe.job.executor.JobFacade) $r26
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r27 = (com.dangdang.ddframe.job.executor.JobFacade) $r26 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r27.<com.dangdang.ddframe.job.executor.JobFacade: void afterJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r27.<com.dangdang.ddframe.job.executor.JobFacade: void afterJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r1 = new java.util.HashMap
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r1 = new java.util.HashMap >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(2, 1.0F)
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(2, 1.0F) >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "A")
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "A") >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "B")
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "B") >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r6 = new com.dangdang.ddframe.job.executor.ShardingContexts
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : $r6 = new com.dangdang.ddframe.job.executor.ShardingContexts >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : specialinvoke $r6.<com.dangdang.ddframe.job.executor.ShardingContexts: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.util.Map)>("fake_task_id", "test_job", 2, "", $r1)
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : specialinvoke $r6.<com.dangdang.ddframe.job.executor.ShardingContexts: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.util.Map)>("fake_task_id", "test_job", 2, "", $r1) >>>>>>>> com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : return $r6
com.dangdang.ddframe.job.fixture.ShardingContextsBuilder.getMultipleShardingContexts : return $r6 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.ShardingContexts shardingContexts> = r1
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.ShardingContexts shardingContexts> = r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r2 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r2 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r3 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.config.JobRootConfiguration loadJobRootConfiguration(boolean)>(1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r3 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.config.JobRootConfiguration loadJobRootConfiguration(boolean)>(1) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r5 = new com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r5 = new com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : specialinvoke $r5.<com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration: void <init>(boolean)>(z0)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : specialinvoke $r5.<com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration: void <init>(boolean)>(z0) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : interfaceinvoke $r4.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r5)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : interfaceinvoke $r4.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r5) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r7 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r7 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r8 = interfaceinvoke $r7.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r8 = interfaceinvoke $r7.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r11 = new com.dangdang.ddframe.job.executor.type.DataflowJobExecutor
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r11 = new com.dangdang.ddframe.job.executor.type.DataflowJobExecutor >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r12 = new com.dangdang.ddframe.job.fixture.job.TestDataflowJob
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r12 = new com.dangdang.ddframe.job.fixture.job.TestDataflowJob >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r13 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.fixture.job.JobCaller jobCaller>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r13 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.fixture.job.JobCaller jobCaller> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : specialinvoke $r12.<com.dangdang.ddframe.job.fixture.job.TestDataflowJob: void <init>(com.dangdang.ddframe.job.fixture.job.JobCaller)>($r13)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : specialinvoke $r12.<com.dangdang.ddframe.job.fixture.job.TestDataflowJob: void <init>(com.dangdang.ddframe.job.fixture.job.JobCaller)>($r13) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r14 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r14 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : specialinvoke $r11.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void <init>(com.dangdang.ddframe.job.api.dataflow.DataflowJob,com.dangdang.ddframe.job.executor.JobFacade)>($r12, $r14)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : specialinvoke $r11.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void <init>(com.dangdang.ddframe.job.api.dataflow.DataflowJob,com.dangdang.ddframe.job.executor.JobFacade)>($r12, $r14) >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r1 = new com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r1 = new com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r2 = staticinvoke <com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder newBuilder(java.lang.String,java.lang.String,int)>("test_job", "0/1 * * * * ?", 3)
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r2 = staticinvoke <com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder newBuilder(java.lang.String,java.lang.String,int)>("test_job", "0/1 * * * * ?", 3) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : $r2 = new com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder
com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : $r2 = new com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : specialinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: void <init>(java.lang.String,java.lang.String,int,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>(r0, r1, i0, null)
com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : specialinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: void <init>(java.lang.String,java.lang.String,int,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>(r0, r1, i0, null) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : return $r2
com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : return $r2 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r3 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum JOB_EXCEPTION_HANDLER>
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r3 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum JOB_EXCEPTION_HANDLER> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r4 = virtualinvoke $r3.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r4 = virtualinvoke $r3.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String key>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String key> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : return $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : return $r1 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r5 = class "Lcom/dangdang/ddframe/job/fixture/handler/IgnoreJobExceptionHandler;"
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r5 = class "Lcom/dangdang/ddframe/job/fixture/handler/IgnoreJobExceptionHandler;" >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>()
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>() >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r7 = virtualinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r4, $r6)
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r7 = virtualinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r4, $r6) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : $r3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : $r3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : virtualinvoke $r3.<com.dangdang.ddframe.job.executor.handler.JobProperties: void put(java.lang.String,java.lang.String)>(r1, r2)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : virtualinvoke $r3.<com.dangdang.ddframe.job.executor.handler.JobProperties: void put(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : r3 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum 'from'(java.lang.String)>(r1)
com.dangdang.ddframe.job.executor.handler.JobProperties.put : r3 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum 'from'(java.lang.String)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r1 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] values()>()
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r1 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] values()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r0 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] $VALUES>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r0 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] $VALUES> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r2 = (com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[]) $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r2 = (com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[]) $r1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : return $r2
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : return $r2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i0 = lengthof r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i0 = lengthof r1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i1 = 0
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i1 = 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if i1 >= i0
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if i1 >= i0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r2 = r1[i1]
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r2 = r1[i1] >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $r3 = virtualinvoke r2.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $r3 = virtualinvoke r2.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if $z0 == 0
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : return r2
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : return r2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null == r3
com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null == r3 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null != r2
com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null != r2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : $r4 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map>
com.dangdang.ddframe.job.executor.handler.JobProperties.put : $r4 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : virtualinvoke $r4.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r3, r2)
com.dangdang.ddframe.job.executor.handler.JobProperties.put : virtualinvoke $r4.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r3, r2) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r8 = virtualinvoke $r7.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration build()>()
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r8 = virtualinvoke $r7.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration build()>() >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z0 != 0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z4 = 1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z4 = 1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.")]
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.")] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.")
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r2)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r2) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z1 != 0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z1 != 0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z5 = 1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z5 = 1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.")]
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.")] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.")
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $i0 <= 0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $i0 <= 0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z6 = 1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z6 = 1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.")]
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.")] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.")
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r3 = new com.dangdang.ddframe.job.config.JobCoreConfiguration
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r3 = new com.dangdang.ddframe.job.config.JobCoreConfiguration >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r9 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r9 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r8 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r8 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r7 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String shardingItemParameters>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r7 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String shardingItemParameters> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r6 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobParameter>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r6 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobParameter> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean failover>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean failover> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean misfire>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean misfire> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r5 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String description>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r5 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String description> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r4 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r4 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : specialinvoke $r3.<com.dangdang.ddframe.job.config.JobCoreConfiguration: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,com.dangdang.ddframe.job.executor.handler.JobProperties,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>($r9, $r8, $i1, $r7, $r6, $z3, $z2, $r5, $r4, null)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : specialinvoke $r3.<com.dangdang.ddframe.job.config.JobCoreConfiguration: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,com.dangdang.ddframe.job.executor.handler.JobProperties,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>($r9, $r8, $i1, $r7, $r6, $z3, $z2, $r5, $r4, null) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : return $r3
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : return $r3 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r9 = class "Lcom/dangdang/ddframe/job/fixture/job/TestDataflowJob;"
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r9 = class "Lcom/dangdang/ddframe/job/fixture/job/TestDataflowJob;" >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getCanonicalName()>()
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getCanonicalName()>() >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $z0 = r0.<com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration: boolean streamingProcess>
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : $z0 = r0.<com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration: boolean streamingProcess> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : specialinvoke $r1.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: void <init>(com.dangdang.ddframe.job.config.JobCoreConfiguration,java.lang.String,boolean)>($r8, $r10, $z0)
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : specialinvoke $r1.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: void <init>(com.dangdang.ddframe.job.config.JobCoreConfiguration,java.lang.String,boolean)>($r8, $r10, $z0) >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : return $r1
com.dangdang.ddframe.job.fixture.config.TestDataflowJobConfiguration.getTypeConfig : return $r1 >>>>>>>> com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.getCoreConfig : $r1 = r0.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration coreConfig>
com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.getCoreConfig : $r1 = r0.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration coreConfig> >>>>>>>> com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.getCoreConfig : return $r1
com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.getCoreConfig : return $r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: java.lang.String jobName>
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : return $r1
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration jobRootConfig>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration jobRootConfig> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r4 = interfaceinvoke $r3.<com.dangdang.ddframe.job.config.JobRootConfiguration: com.dangdang.ddframe.job.config.JobTypeConfiguration getTypeConfig()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r4 = interfaceinvoke $r3.<com.dangdang.ddframe.job.config.JobRootConfiguration: com.dangdang.ddframe.job.config.JobTypeConfiguration getTypeConfig()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r5 = interfaceinvoke $r4.<com.dangdang.ddframe.job.config.JobTypeConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration getCoreConfig()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r5 = interfaceinvoke $r4.<com.dangdang.ddframe.job.config.JobTypeConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration getCoreConfig()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r6 = virtualinvoke $r5.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties getJobProperties()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r6 = virtualinvoke $r5.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties getJobProperties()>() >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties>
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : return $r1
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r2 = virtualinvoke $r6.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.lang.String get(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r2 = virtualinvoke $r6.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.lang.String get(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r2 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map>
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r2 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $z0 = virtualinvoke $r2.<java.util.EnumMap: boolean containsKey(java.lang.Object)>(r1)
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $z0 = virtualinvoke $r2.<java.util.EnumMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : if $z0 == 0
com.dangdang.ddframe.job.executor.handler.JobProperties.get : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getDefaultValue()>()
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getDefaultValue()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String defaultValue>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String defaultValue> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : return $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : return $r5
com.dangdang.ddframe.job.executor.handler.JobProperties.get : return $r5 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r7 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class getClassType()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r7 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class getClassType()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class classType>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class classType> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : return $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r12)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r12) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : if $z0 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r9 = virtualinvoke r12.<java.lang.Class: java.lang.Object newInstance()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r9 = virtualinvoke r12.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r9
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r9 >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r2 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY>
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r2 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY> >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : if $z0 != 0
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r3 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY>
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r3 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY> >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r5 = (java.util.concurrent.ExecutorService) $r4
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r5 = (java.util.concurrent.ExecutorService) $r4 >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : return $r5
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : return $r5 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r3 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map>
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r3 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r4 = virtualinvoke $r3.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r1)
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r4 = virtualinvoke $r3.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = (java.lang.String) $r4
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = (java.lang.String) $r4 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : goto [?= return $r5]
com.dangdang.ddframe.job.executor.handler.JobProperties.get : goto [?= return $r5] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: int shardingTotalCount>
com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : return $i0
com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : return $i0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.type.DataflowJobExecutor dataflowJobExecutor> = $r11
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.type.DataflowJobExecutor dataflowJobExecutor> = $r11 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r15 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : $r15 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : staticinvoke <com.dangdang.ddframe.job.executor.type.ElasticJobVerify: void prepareForIsNotMisfire(com.dangdang.ddframe.job.executor.JobFacade,com.dangdang.ddframe.job.executor.ShardingContexts)>($r15, r1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.setUp : staticinvoke <com.dangdang.ddframe.job.executor.type.ElasticJobVerify: void prepareForIsNotMisfire(com.dangdang.ddframe.job.executor.JobFacade,com.dangdang.ddframe.job.executor.ShardingContexts)>($r15, r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r2 = interfaceinvoke r0.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r2 = interfaceinvoke r0.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r2)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r2) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : interfaceinvoke $r3.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : interfaceinvoke $r3.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $z0 = interfaceinvoke r0.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r6)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $z0 = interfaceinvoke r0.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r6) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r11 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r11 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $z1 = interfaceinvoke r0.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r12)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $z1 = interfaceinvoke r0.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r12) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r15)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.prepareForIsNotMisfire : interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r15) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r1 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r1 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r1.<com.dangdang.ddframe.job.executor.JobFacade: void checkJobExecutionEnvironment()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r1.<com.dangdang.ddframe.job.executor.JobFacade: void checkJobExecutionEnvironment()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= $r2 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= $r2 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r2 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r2 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : r38 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : r38 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z0 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z0 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.isAllowSendJobEvent : $z0 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean allowSendJobEvent>
com.dangdang.ddframe.job.executor.ShardingContexts.isAllowSendJobEvent : $z0 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean allowSendJobEvent> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.isAllowSendJobEvent : return $z0
com.dangdang.ddframe.job.executor.ShardingContexts.isAllowSendJobEvent : return $z0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z0 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r22 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r22 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r23 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r23 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r26 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r26 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r24 = newarray (java.lang.Object)[1]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r24 = newarray (java.lang.Object)[1] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r25 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r25 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r24[0] = $r25
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r24[0] = $r25 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Job \'%s\' execute begin.", $r24)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Job \'%s\' execute begin.", $r24) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r22.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r23, $r26, $r27)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r22.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r23, $r26, $r27) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r4 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r4 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z1 = interfaceinvoke $r3.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r5)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z1 = interfaceinvoke $r3.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r5) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z1 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z1 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r6 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r6 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: void beforeJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r38)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: void beforeJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r38) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= $r7 = <com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource NORMAL_TRIGGER>]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= $r7 = <com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource NORMAL_TRIGGER>] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r7 = <com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource NORMAL_TRIGGER>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r7 = <com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource NORMAL_TRIGGER> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void execute(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r38, $r7)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void execute(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r38, $r7) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z0 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z0 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : r3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : r3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z1 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z1 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r16 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r16 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r15 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_RUNNING>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r15 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_RUNNING> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r16.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r15, "")
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r16.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r15, "") >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r1, r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r3 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r3 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $i1 = interfaceinvoke r3.<java.util.Collection: int size()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $i1 = interfaceinvoke r3.<java.util.Collection: int size()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : if 1 != $i1
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : if 1 != $i1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r6 = new java.util.concurrent.CountDownLatch
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r6 = new java.util.concurrent.CountDownLatch >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $i2 = interfaceinvoke r3.<java.util.Collection: int size()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $i2 = interfaceinvoke r3.<java.util.Collection: int size()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>($i2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>($i2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r28 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r28 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : if $z0 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r7 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r7 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r8 = (java.lang.Integer) $r7
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r8 = (java.lang.Integer) $r7 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r9 = new com.dangdang.ddframe.job.event.type.JobExecutionEvent
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r9 = new com.dangdang.ddframe.job.event.type.JobExecutionEvent >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r10 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r10 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r11 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r11 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r9.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void <init>(java.lang.String,java.lang.String,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource,int)>($r10, $r11, r2, i0)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r9.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void <init>(java.lang.String,java.lang.String,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource,int)>($r10, $r11, r2, i0) >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>()
com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>() >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostName()>()
com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostName()>() >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getHostName : return $r2
com.dangdang.ddframe.job.util.env.IpUtils.getHostName : return $r2 >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r5 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress>
com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r5 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress> >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : if null == $r5
com.dangdang.ddframe.job.util.env.IpUtils.getIp : if null == $r5 >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r8 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress>
com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r8 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress> >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : return $r8
com.dangdang.ddframe.job.util.env.IpUtils.getIp : return $r8 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r12 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.concurrent.ExecutorService executorService>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r12 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.concurrent.ExecutorService executorService> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z1 = interfaceinvoke $r12.<java.util.concurrent.ExecutorService: boolean isShutdown()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z1 = interfaceinvoke $r12.<java.util.concurrent.ExecutorService: boolean isShutdown()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : if $z1 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : if $z1 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r14 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.concurrent.ExecutorService executorService>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r14 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.concurrent.ExecutorService executorService> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r13 = new com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r13 = new com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r13.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: void <init>(com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor,com.dangdang.ddframe.job.executor.ShardingContexts,int,com.dangdang.ddframe.job.event.type.JobExecutionEvent,java.util.concurrent.CountDownLatch)>(r0, r1, i0, $r9, $r6)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r13.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: void <init>(com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor,com.dangdang.ddframe.job.executor.ShardingContexts,int,com.dangdang.ddframe.job.event.type.JobExecutionEvent,java.util.concurrent.CountDownLatch)>(r0, r1, i0, $r9, $r6) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r14.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r13)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r14.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r13) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : goto [?= $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : goto [?= $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r4 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor this$0>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r4 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor this$0> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: com.dangdang.ddframe.job.executor.ShardingContexts val$shardingContexts>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: com.dangdang.ddframe.job.executor.ShardingContexts val$shardingContexts> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $i0 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: int val$each>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $i0 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: int val$each> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r2 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: com.dangdang.ddframe.job.event.type.JobExecutionEvent val$jobExecutionEvent>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r2 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: com.dangdang.ddframe.job.event.type.JobExecutionEvent val$jobExecutionEvent> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : staticinvoke <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void access$000(com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor,com.dangdang.ddframe.job.executor.ShardingContexts,int,com.dangdang.ddframe.job.event.type.JobExecutionEvent)>($r4, $r3, $i0, $r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : staticinvoke <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void access$000(com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor,com.dangdang.ddframe.job.executor.ShardingContexts,int,com.dangdang.ddframe.job.event.type.JobExecutionEvent)>($r4, $r3, $i0, $r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.access$000 : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,int,com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r1, i0, r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.access$000 : specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.executor.ShardingContexts,int,com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r1, i0, r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z0 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z0 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r12 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r12 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r12.<com.dangdang.ddframe.job.executor.JobFacade: void postJobExecutionEvent(com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r12.<com.dangdang.ddframe.job.executor.JobFacade: void postJobExecutionEvent(com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void await()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void await()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r4 = <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: org.slf4j.Logger log>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r4 = <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: org.slf4j.Logger log> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r5 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r5 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Job \'{}\' executing, item is: \'{}\'.", $r5, $r6)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Job \'{}\' executing, item is: \'{}\'.", $r5, $r6) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r7 = new com.dangdang.ddframe.job.api.ShardingContext
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r7 = new com.dangdang.ddframe.job.api.ShardingContext >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r7.<com.dangdang.ddframe.job.api.ShardingContext: void <init>(com.dangdang.ddframe.job.executor.ShardingContexts,int)>(r1, i0)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : specialinvoke $r7.<com.dangdang.ddframe.job.api.ShardingContext: void <init>(com.dangdang.ddframe.job.executor.ShardingContexts,int)>(r1, i0) >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getJobName : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String jobName>
com.dangdang.ddframe.job.executor.ShardingContexts.getJobName : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getJobName : return $r1
com.dangdang.ddframe.job.executor.ShardingContexts.getJobName : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getShardingTotalCount : $i0 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: int shardingTotalCount>
com.dangdang.ddframe.job.executor.ShardingContexts.getShardingTotalCount : $i0 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getShardingTotalCount : return $i0
com.dangdang.ddframe.job.executor.ShardingContexts.getShardingTotalCount : return $i0 >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getJobParameter : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String jobParameter>
com.dangdang.ddframe.job.executor.ShardingContexts.getJobParameter : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String jobParameter> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getJobParameter : return $r1
com.dangdang.ddframe.job.executor.ShardingContexts.getJobParameter : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : virtualinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.api.ShardingContext)>($r7)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : virtualinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: void process(com.dangdang.ddframe.job.api.ShardingContext)>($r7) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : $r3 = virtualinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration getJobRootConfig()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : $r3 = virtualinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration getJobRootConfig()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobRootConfig : $r1 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration jobRootConfig>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobRootConfig : $r1 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration jobRootConfig> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobRootConfig : return $r1
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobRootConfig : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : $r4 = interfaceinvoke $r3.<com.dangdang.ddframe.job.config.JobRootConfiguration: com.dangdang.ddframe.job.config.JobTypeConfiguration getTypeConfig()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : $r4 = interfaceinvoke $r3.<com.dangdang.ddframe.job.config.JobRootConfiguration: com.dangdang.ddframe.job.config.JobTypeConfiguration getTypeConfig()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : r2 = (com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration) $r4
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : r2 = (com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration) $r4 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : $z0 = virtualinvoke r2.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: boolean isStreamingProcess()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : $z0 = virtualinvoke r2.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: boolean isStreamingProcess()>() >>>>>>>> com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.isStreamingProcess : $z0 = r0.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: boolean streamingProcess>
com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.isStreamingProcess : $z0 = r0.<com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration: boolean streamingProcess> >>>>>>>> com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.isStreamingProcess : return $z0
com.dangdang.ddframe.job.config.dataflow.DataflowJobConfiguration.isStreamingProcess : return $z0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : if $z0 == 0
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void streamingExecute(com.dangdang.ddframe.job.api.ShardingContext)>(r1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void streamingExecute(com.dangdang.ddframe.job.api.ShardingContext)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : r3 = specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : r3 = specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData : $r2 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.api.dataflow.DataflowJob dataflowJob>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData : $r2 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.api.dataflow.DataflowJob dataflowJob> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData : $r3 = interfaceinvoke $r2.<com.dangdang.ddframe.job.api.dataflow.DataflowJob: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData : $r3 = interfaceinvoke $r2.<com.dangdang.ddframe.job.api.dataflow.DataflowJob: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1) >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : $r2 = r0.<com.dangdang.ddframe.job.fixture.job.TestDataflowJob: com.dangdang.ddframe.job.fixture.job.JobCaller jobCaller>
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : $r2 = r0.<com.dangdang.ddframe.job.fixture.job.TestDataflowJob: com.dangdang.ddframe.job.fixture.job.JobCaller jobCaller> >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : $i0 = virtualinvoke r1.<com.dangdang.ddframe.job.api.ShardingContext: int getShardingItem()>()
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : $i0 = virtualinvoke r1.<com.dangdang.ddframe.job.api.ShardingContext: int getShardingItem()>() >>>>>>>> com.dangdang.ddframe.job.api.ShardingContext.getShardingItem : $i0 = r0.<com.dangdang.ddframe.job.api.ShardingContext: int shardingItem>
com.dangdang.ddframe.job.api.ShardingContext.getShardingItem : $i0 = r0.<com.dangdang.ddframe.job.api.ShardingContext: int shardingItem> >>>>>>>> com.dangdang.ddframe.job.api.ShardingContext.getShardingItem : return $i0
com.dangdang.ddframe.job.api.ShardingContext.getShardingItem : return $i0 >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : $r3 = interfaceinvoke $r2.<com.dangdang.ddframe.job.fixture.job.JobCaller: java.util.List fetchData(int)>($i0)
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : $r3 = interfaceinvoke $r2.<com.dangdang.ddframe.job.fixture.job.JobCaller: java.util.List fetchData(int)>($i0) >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : return $r3
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData : return $r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData : return $r3
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData : return $r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if null == r3
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if null == r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z0 != 0
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void processData(com.dangdang.ddframe.job.api.ShardingContext,java.util.List)>(r1, r3)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void processData(com.dangdang.ddframe.job.api.ShardingContext,java.util.List)>(r1, r3) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData : $r3 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.api.dataflow.DataflowJob dataflowJob>
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData : $r3 = r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.api.dataflow.DataflowJob dataflowJob> >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData : interfaceinvoke $r3.<com.dangdang.ddframe.job.api.dataflow.DataflowJob: void processData(com.dangdang.ddframe.job.api.ShardingContext,java.util.List)>(r1, r2)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData : interfaceinvoke $r3.<com.dangdang.ddframe.job.api.dataflow.DataflowJob: void processData(com.dangdang.ddframe.job.api.ShardingContext,java.util.List)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : if $z0 == 0
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : $r5 = r0.<com.dangdang.ddframe.job.fixture.job.TestDataflowJob: com.dangdang.ddframe.job.fixture.job.JobCaller jobCaller>
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : $r5 = r0.<com.dangdang.ddframe.job.fixture.job.TestDataflowJob: com.dangdang.ddframe.job.fixture.job.JobCaller jobCaller> >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : interfaceinvoke $r5.<com.dangdang.ddframe.job.fixture.job.JobCaller: void processData(java.lang.Object)>(r4)
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : interfaceinvoke $r5.<com.dangdang.ddframe.job.fixture.job.JobCaller: void processData(java.lang.Object)>(r4) >>>>>>>> com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $r2 = virtualinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.executor.JobFacade getJobFacade()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $r2 = virtualinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.executor.JobFacade getJobFacade()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobFacade : $r1 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobFacade : $r1 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobFacade : return $r1
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getJobFacade : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z1 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: boolean isEligibleForJobRunning()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z1 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: boolean isEligibleForJobRunning()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z1 != 0
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z1 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : goto [?= return]
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : goto [?= return]
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r21 = virtualinvoke r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent executionSuccess()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r21 = virtualinvoke r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent executionSuccess()>() >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r2 = new com.dangdang.ddframe.job.event.type.JobExecutionEvent
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r2 = new com.dangdang.ddframe.job.event.type.JobExecutionEvent >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r11 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String id>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r11 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String id> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r10 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String hostname>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r10 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String hostname> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r9 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String ip>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r9 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String ip> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r8 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String taskId>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r8 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String taskId> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r7 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String jobName>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r7 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r6 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource source>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r6 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource source> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $i0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: int shardingItem>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $i0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: int shardingItem> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r5 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date startTime>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r5 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date startTime> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r4 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date completeTime>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r4 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date completeTime> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $z0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: boolean success>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $z0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: boolean success> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r3 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable failureCause>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r3 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable failureCause> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : specialinvoke $r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource,int,java.util.Date,java.util.Date,boolean,com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable)>($r11, $r10, $r9, $r8, $r7, $r6, $i0, $r5, $r4, $z0, $r3)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : specialinvoke $r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource,int,java.util.Date,java.util.Date,boolean,com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable)>($r11, $r10, $r9, $r8, $r7, $r6, $i0, $r5, $r4, $z0, $r3) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r12 = new java.util.Date
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : $r12 = new java.util.Date >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : specialinvoke $r12.<java.util.Date: void <init>()>()
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : specialinvoke $r12.<java.util.Date: void <init>()>() >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : virtualinvoke $r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setCompleteTime(java.util.Date)>($r12)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : virtualinvoke $r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setCompleteTime(java.util.Date)>($r12) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.setCompleteTime : r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date completeTime> = r1
com.dangdang.ddframe.job.event.type.JobExecutionEvent.setCompleteTime : r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date completeTime> = r1 >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : virtualinvoke $r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setSuccess(boolean)>(1)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : virtualinvoke $r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setSuccess(boolean)>(1) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.setSuccess : r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: boolean success> = z0
com.dangdang.ddframe.job.event.type.JobExecutionEvent.setSuccess : r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: boolean success> = z0 >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : return $r2
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionSuccess : return $r2 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r8 = <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: org.slf4j.Logger log>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r8 = <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: org.slf4j.Logger log> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Job \'{}\' executed, item is: \'{}\'.", $r9, $r10)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Job \'{}\' executed, item is: \'{}\'.", $r9, $r10) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z1 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $z1 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r11 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r11 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r11.<com.dangdang.ddframe.job.executor.JobFacade: void postJobExecutionEvent(com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r21)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r11.<com.dangdang.ddframe.job.executor.JobFacade: void postJobExecutionEvent(com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r21) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : goto [?= return]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r5 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: java.util.concurrent.CountDownLatch val$latch>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : $r5 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1: java.util.concurrent.CountDownLatch val$latch> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : goto [?= return]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r22 = virtualinvoke r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent executionFailure(java.lang.Throwable)>($r13)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : r22 = virtualinvoke r2.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent executionFailure(java.lang.Throwable)>($r13) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r3 = new com.dangdang.ddframe.job.event.type.JobExecutionEvent
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r3 = new com.dangdang.ddframe.job.event.type.JobExecutionEvent >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r5 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String id>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r5 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String id> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r6 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String hostname>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r6 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String hostname> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r7 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String ip>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r7 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String ip> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r8 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String taskId>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r8 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String taskId> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r9 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String jobName>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r9 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r10 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource source>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r10 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource source> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $i0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: int shardingItem>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $i0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: int shardingItem> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r11 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date startTime>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r11 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date startTime> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r12 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date completeTime>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r12 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: java.util.Date completeTime> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $z0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: boolean success>
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $z0 = r0.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: boolean success> >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r4 = new com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r4 = new com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : specialinvoke $r4.<com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable: void <init>(java.lang.Throwable)>(r1)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : specialinvoke $r4.<com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable: void <init>(java.lang.Throwable)>(r1) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : specialinvoke $r3.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource,int,java.util.Date,java.util.Date,boolean,com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable)>($r5, $r6, $r7, $r8, $r9, $r10, $i0, $r11, $r12, $z0, $r4)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : specialinvoke $r3.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.dangdang.ddframe.job.event.type.JobExecutionEvent$ExecutionSource,int,java.util.Date,java.util.Date,boolean,com.dangdang.ddframe.job.event.type.JobExecutionEventThrowable)>($r5, $r6, $r7, $r8, $r9, $r10, $i0, $r11, $r12, $z0, $r4) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r13 = new java.util.Date
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : $r13 = new java.util.Date >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : specialinvoke $r13.<java.util.Date: void <init>()>()
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : specialinvoke $r13.<java.util.Date: void <init>()>() >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : virtualinvoke $r3.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setCompleteTime(java.util.Date)>($r13)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : virtualinvoke $r3.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setCompleteTime(java.util.Date)>($r13) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : virtualinvoke $r3.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setSuccess(boolean)>(0)
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : virtualinvoke $r3.<com.dangdang.ddframe.job.event.type.JobExecutionEvent: void setSuccess(boolean)>(0) >>>>>>>> com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : return $r3
com.dangdang.ddframe.job.event.type.JobExecutionEvent.executionFailure : return $r3 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r14 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r14 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r14.<com.dangdang.ddframe.job.executor.JobFacade: void postJobExecutionEvent(com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r22)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r14.<com.dangdang.ddframe.job.executor.JobFacade: void postJobExecutionEvent(com.dangdang.ddframe.job.event.type.JobExecutionEvent)>(r22) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r15 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r15 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r17 = staticinvoke <com.dangdang.ddframe.job.exception.ExceptionUtil: java.lang.String transform(java.lang.Throwable)>($r13)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r17 = staticinvoke <com.dangdang.ddframe.job.exception.ExceptionUtil: java.lang.String transform(java.lang.Throwable)>($r13) >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : if null != r0
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : if null != r0 >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : $r5 = new java.io.StringWriter
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : $r5 = new java.io.StringWriter >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : specialinvoke $r5.<java.io.StringWriter: void <init>()>()
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : specialinvoke $r5.<java.io.StringWriter: void <init>()>() >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : $r6 = new java.io.PrintWriter
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : $r6 = new java.io.PrintWriter >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5)
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5) >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : r11 = null
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : r11 = null >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r6)
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r6) >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : if $r6 == null
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : if $r6 == null >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : goto [?= virtualinvoke $r6.<java.io.PrintWriter: void close()>()]
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : goto [?= virtualinvoke $r6.<java.io.PrintWriter: void close()>()] >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : virtualinvoke $r6.<java.io.PrintWriter: void close()>()
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : virtualinvoke $r6.<java.io.PrintWriter: void close()>() >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : goto [?= $r14 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>()]
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : goto [?= $r14 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>()] >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : $r14 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>()
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : $r14 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>() >>>>>>>> com.dangdang.ddframe.job.exception.ExceptionUtil.transform : return $r14
com.dangdang.ddframe.job.exception.ExceptionUtil.transform : return $r14 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r20 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.handler.JobExceptionHandler jobExceptionHandler>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r20 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.handler.JobExceptionHandler jobExceptionHandler> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r19 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : $r19 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r20.<com.dangdang.ddframe.job.executor.handler.JobExceptionHandler: void handleException(java.lang.String,java.lang.Throwable)>($r19, $r13)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process : interfaceinvoke $r20.<com.dangdang.ddframe.job.executor.handler.JobExceptionHandler: void handleException(java.lang.String,java.lang.Throwable)>($r19, $r13) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r7 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r7 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r7.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r7.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r8 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r8 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z2 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z2 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z2 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z2 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z3 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: boolean isAllowSendJobEvent()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z3 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : if $z3 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r10 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r10 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_ERROR>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_ERROR> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.util.Map itemErrorMessages> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r12 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r12 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r10.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r11, $r12)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r10.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>(r3, $r11, $r12) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= return]
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r40 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r40 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r41 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r41 = virtualinvoke r38.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r42 = interfaceinvoke $r41.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r42 = interfaceinvoke $r41.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z3 = interfaceinvoke $r40.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r42)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $z3 = interfaceinvoke $r40.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r42) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r8 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r8 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r8.<com.dangdang.ddframe.job.executor.JobFacade: void failoverIfNecessary()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r8.<com.dangdang.ddframe.job.executor.JobFacade: void failoverIfNecessary()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : $r9 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.executor.JobFacade jobFacade> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute : interfaceinvoke $r9.<com.dangdang.ddframe.job.executor.JobFacade: void afterJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r38)
