com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r4 = (com.dangdang.ddframe.job.executor.JobFacade) $r3
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r4 = (com.dangdang.ddframe.job.executor.JobFacade) $r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r4.<com.dangdang.ddframe.job.executor.JobFacade: void checkJobExecutionEnvironment()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r4.<com.dangdang.ddframe.job.executor.JobFacade: void checkJobExecutionEnvironment()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : goto [?= $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)]
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : goto [?= $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)] >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r6 = (com.dangdang.ddframe.job.executor.JobFacade) $r5
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r6 = (com.dangdang.ddframe.job.executor.JobFacade) $r5 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r6.<com.dangdang.ddframe.job.executor.JobFacade: com.dangdang.ddframe.job.executor.ShardingContexts getShardingContexts()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r8 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r9 = (com.dangdang.ddframe.job.executor.JobFacade) $r8
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r9 = (com.dangdang.ddframe.job.executor.JobFacade) $r8 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r10 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r10 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String getTaskId()>() >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String taskId>
com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.lang.String taskId> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : return $r1
com.dangdang.ddframe.job.executor.ShardingContexts.getTaskId : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING>
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r11 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING> >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r9.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r10, $r11, "Job \'test_job\' execute begin.")
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r9.<com.dangdang.ddframe.job.executor.JobFacade: void postJobStatusTraceEvent(java.lang.String,com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State,java.lang.String)>($r10, $r11, "Job \'test_job\' execute begin.") >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r12 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r12 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r13 = (com.dangdang.ddframe.job.executor.JobFacade) $r12
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r13 = (com.dangdang.ddframe.job.executor.JobFacade) $r12 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map shardingItemParameters>
com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : $r1 = r0.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map shardingItemParameters> >>>>>>>> com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : return $r1
com.dangdang.ddframe.job.executor.ShardingContexts.getShardingItemParameters : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r13.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r15)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r13.<com.dangdang.ddframe.job.executor.JobFacade: boolean misfireIfRunning(java.util.Collection)>($r15) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r16 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r16 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r17 = (com.dangdang.ddframe.job.executor.JobFacade) $r16
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r17 = (com.dangdang.ddframe.job.executor.JobFacade) $r16 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r17.<com.dangdang.ddframe.job.executor.JobFacade: void beforeJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r17.<com.dangdang.ddframe.job.executor.JobFacade: void beforeJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r19 = (com.dangdang.ddframe.job.executor.JobFacade) $r18
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r19 = (com.dangdang.ddframe.job.executor.JobFacade) $r18 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r19.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r19.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobBegin(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r21 = (com.dangdang.ddframe.job.executor.JobFacade) $r20
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r21 = (com.dangdang.ddframe.job.executor.JobFacade) $r20 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r21.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r21.<com.dangdang.ddframe.job.executor.JobFacade: void registerJobCompleted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r23 = (com.dangdang.ddframe.job.executor.JobFacade) $r22
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r23 = (com.dangdang.ddframe.job.executor.JobFacade) $r22 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r24 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r24 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.ShardingContexts: java.util.Map getShardingItemParameters()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r25 = interfaceinvoke $r24.<java.util.Map: java.util.Set keySet()>()
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r25 = interfaceinvoke $r24.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r23.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r25)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r23.<com.dangdang.ddframe.job.executor.JobFacade: boolean isExecuteMisfired(java.util.Collection)>($r25) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r26 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r26 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r27 = (com.dangdang.ddframe.job.executor.JobFacade) $r26
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : $r27 = (com.dangdang.ddframe.job.executor.JobFacade) $r26 >>>>>>>> com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r27.<com.dangdang.ddframe.job.executor.JobFacade: void afterJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1)
com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire : interfaceinvoke $r27.<com.dangdang.ddframe.job.executor.JobFacade: void afterJobExecuted(com.dangdang.ddframe.job.executor.ShardingContexts)>(r1) >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r2 = staticinvoke <com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder newBuilder(java.lang.String,java.lang.String,int)>("test_job", "0/1 * * * * ?", 3)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r2 = staticinvoke <com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder newBuilder(java.lang.String,java.lang.String,int)>("test_job", "0/1 * * * * ?", 3) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : $r2 = new com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder
com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : $r2 = new com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : specialinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: void <init>(java.lang.String,java.lang.String,int,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>(r0, r1, i0, null)
com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : specialinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: void <init>(java.lang.String,java.lang.String,int,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>(r0, r1, i0, null) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : return $r2
com.dangdang.ddframe.job.config.JobCoreConfiguration.newBuilder : return $r2 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r3 = virtualinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder shardingItemParameters(java.lang.String)>("0=A,1=B,2=C")
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r3 = virtualinvoke $r2.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder shardingItemParameters(java.lang.String)>("0=A,1=B,2=C") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.shardingItemParameters : if null == r1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.shardingItemParameters : if null == r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.shardingItemParameters : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String shardingItemParameters> = r1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.shardingItemParameters : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String shardingItemParameters> = r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.shardingItemParameters : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.shardingItemParameters : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r4 = virtualinvoke $r3.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobParameter(java.lang.String)>("param")
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r4 = virtualinvoke $r3.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobParameter(java.lang.String)>("param") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobParameter : if null == r1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobParameter : if null == r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobParameter : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobParameter> = r1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobParameter : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobParameter> = r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobParameter : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobParameter : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r5 = virtualinvoke $r4.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder failover(boolean)>(1)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r5 = virtualinvoke $r4.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder failover(boolean)>(1) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.failover : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean failover> = z0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.failover : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean failover> = z0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.failover : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.failover : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r6 = virtualinvoke $r5.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder misfire(boolean)>(0)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r6 = virtualinvoke $r5.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder misfire(boolean)>(0) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.misfire : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean misfire> = z0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.misfire : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean misfire> = z0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.misfire : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.misfire : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : r1 = virtualinvoke $r6.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder description(java.lang.String)>("desc")
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : r1 = virtualinvoke $r6.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder description(java.lang.String)>("desc") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.description : if null == r1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.description : if null == r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.description : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String description> = r1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.description : r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String description> = r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.description : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.description : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r7 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String jobExceptionHandlerClassName>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r7 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String jobExceptionHandlerClassName> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : if null != $r7
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : if null != $r7 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r21 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum JOB_EXCEPTION_HANDLER>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r21 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum JOB_EXCEPTION_HANDLER> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r22 = virtualinvoke $r21.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r22 = virtualinvoke $r21.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String key>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String key> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : return $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getKey : return $r1 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r23 = class "Lcom/dangdang/ddframe/job/fixture/handler/ThrowJobExceptionHandler;"
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r23 = class "Lcom/dangdang/ddframe/job/fixture/handler/ThrowJobExceptionHandler;" >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getCanonicalName()>()
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getCanonicalName()>() >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r22, $r24)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r22, $r24) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : $r3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : $r3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : virtualinvoke $r3.<com.dangdang.ddframe.job.executor.handler.JobProperties: void put(java.lang.String,java.lang.String)>(r1, r2)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : virtualinvoke $r3.<com.dangdang.ddframe.job.executor.handler.JobProperties: void put(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : r3 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum 'from'(java.lang.String)>(r1)
com.dangdang.ddframe.job.executor.handler.JobProperties.put : r3 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum 'from'(java.lang.String)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r1 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] values()>()
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r1 = staticinvoke <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] values()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r0 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] $VALUES>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r0 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[] $VALUES> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r2 = (com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[]) $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : $r2 = (com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum[]) $r1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : return $r2
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.values : return $r2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i0 = lengthof r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i0 = lengthof r1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i1 = 0
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i1 = 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if i1 >= i0
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if i1 >= i0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r2 = r1[i1]
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : r2 = r1[i1] >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $r3 = virtualinvoke r2.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $r3 = virtualinvoke r2.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if $z0 == 0
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : return r2
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : return r2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null == r3
com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null == r3 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null != r2
com.dangdang.ddframe.job.executor.handler.JobProperties.put : if null != r2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : $r4 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map>
com.dangdang.ddframe.job.executor.handler.JobProperties.put : $r4 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.put : virtualinvoke $r4.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r3, r2)
com.dangdang.ddframe.job.executor.handler.JobProperties.put : virtualinvoke $r4.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r3, r2) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : return r0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.jobProperties : return r0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : goto [?= $r12 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String executorServiceHandlerClassName>]
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : goto [?= $r12 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String executorServiceHandlerClassName>] >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r12 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String executorServiceHandlerClassName>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r12 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String executorServiceHandlerClassName> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : if null == $r12
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : if null == $r12 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r13 = new com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r13 = new com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration build()>()
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration build()>() >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z0 != 0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z4 = 1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z4 = 1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.")]
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.")] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.")
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "jobName can not be empty.") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r2)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r2) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z1 != 0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $z1 != 0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z5 = 1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z5 = 1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.")]
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.")] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.")
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "cron can not be empty.") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $i0 <= 0
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : if $i0 <= 0 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z6 = 1
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z6 = 1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.")]
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.")] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.")
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "shardingTotalCount should larger than zero.") >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r3 = new com.dangdang.ddframe.job.config.JobCoreConfiguration
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r3 = new com.dangdang.ddframe.job.config.JobCoreConfiguration >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r9 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r9 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r8 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r8 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String cron> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $i1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r7 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String shardingItemParameters>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r7 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String shardingItemParameters> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r6 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobParameter>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r6 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String jobParameter> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean failover>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z3 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean failover> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean misfire>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $z2 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: boolean misfire> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r5 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String description>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r5 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: java.lang.String description> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r4 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties>
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : $r4 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : specialinvoke $r3.<com.dangdang.ddframe.job.config.JobCoreConfiguration: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,com.dangdang.ddframe.job.executor.handler.JobProperties,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>($r9, $r8, $i1, $r7, $r6, $z3, $z2, $r5, $r4, null)
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : specialinvoke $r3.<com.dangdang.ddframe.job.config.JobCoreConfiguration: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,com.dangdang.ddframe.job.executor.handler.JobProperties,com.dangdang.ddframe.job.config.JobCoreConfiguration$1)>($r9, $r8, $i1, $r7, $r6, $z3, $z2, $r5, $r4, null) >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : return $r3
com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder.build : return $r3 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r15 = class "Lcom/dangdang/ddframe/job/fixture/job/TestSimpleJob;"
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r15 = class "Lcom/dangdang/ddframe/job/fixture/job/TestSimpleJob;" >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getCanonicalName()>()
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getCanonicalName()>() >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : specialinvoke $r13.<com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration: void <init>(com.dangdang.ddframe.job.config.JobCoreConfiguration,java.lang.String)>($r14, $r16)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : specialinvoke $r13.<com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration: void <init>(com.dangdang.ddframe.job.config.JobCoreConfiguration,java.lang.String)>($r14, $r16) >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : return $r13
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : return $r13 >>>>>>>> com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration.getCoreConfig : $r1 = r0.<com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration coreConfig>
com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration.getCoreConfig : $r1 = r0.<com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration coreConfig> >>>>>>>> com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration.getCoreConfig : return $r1
com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration.getCoreConfig : return $r1 >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: java.lang.String jobName>
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: java.lang.String jobName> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : return $r1
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobName : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration jobRootConfig>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r3 = r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: com.dangdang.ddframe.job.config.JobRootConfiguration jobRootConfig> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r4 = interfaceinvoke $r3.<com.dangdang.ddframe.job.config.JobRootConfiguration: com.dangdang.ddframe.job.config.JobTypeConfiguration getTypeConfig()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r4 = interfaceinvoke $r3.<com.dangdang.ddframe.job.config.JobRootConfiguration: com.dangdang.ddframe.job.config.JobTypeConfiguration getTypeConfig()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r5 = interfaceinvoke $r4.<com.dangdang.ddframe.job.config.JobTypeConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration getCoreConfig()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r5 = interfaceinvoke $r4.<com.dangdang.ddframe.job.config.JobTypeConfiguration: com.dangdang.ddframe.job.config.JobCoreConfiguration getCoreConfig()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r6 = virtualinvoke $r5.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties getJobProperties()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r6 = virtualinvoke $r5.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties getJobProperties()>() >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties>
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : $r1 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: com.dangdang.ddframe.job.executor.handler.JobProperties jobProperties> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : return $r1
com.dangdang.ddframe.job.config.JobCoreConfiguration.getJobProperties : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r2 = virtualinvoke $r6.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.lang.String get(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum)>(r1)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r2 = virtualinvoke $r6.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.lang.String get(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r2 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map>
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r2 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $z0 = virtualinvoke $r2.<java.util.EnumMap: boolean containsKey(java.lang.Object)>(r1)
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $z0 = virtualinvoke $r2.<java.util.EnumMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : if $z0 == 0
com.dangdang.ddframe.job.executor.handler.JobProperties.get : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getDefaultValue()>()
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getDefaultValue()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String defaultValue>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String defaultValue> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : return $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getDefaultValue : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : return $r5
com.dangdang.ddframe.job.executor.handler.JobProperties.get : return $r5 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r7 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class getClassType()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r7 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class getClassType()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class classType>
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : $r1 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.Class classType> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : return $r1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.getClassType : return $r1 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r12)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r12) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : if $z0 == 0
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r9 = virtualinvoke r12.<java.lang.Class: java.lang.Object newInstance()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r9 = virtualinvoke r12.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r9
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r9 >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r2 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY>
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r2 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY> >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : if $z0 != 0
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r3 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY>
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r3 = <com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry: java.util.Map REGISTRY> >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r5 = (java.util.concurrent.ExecutorService) $r4
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : $r5 = (java.util.concurrent.ExecutorService) $r4 >>>>>>>> com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : return $r5
com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistry.getExecutorServiceHandler : return $r5 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r3 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map>
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r3 = r0.<com.dangdang.ddframe.job.executor.handler.JobProperties: java.util.EnumMap map> >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r4 = virtualinvoke $r3.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r1)
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r4 = virtualinvoke $r3.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = (java.lang.String) $r4
com.dangdang.ddframe.job.executor.handler.JobProperties.get : $r5 = (java.lang.String) $r4 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties.get : goto [?= return $r5]
com.dangdang.ddframe.job.executor.handler.JobProperties.get : goto [?= return $r5] >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: int shardingTotalCount>
com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : $i0 = r0.<com.dangdang.ddframe.job.config.JobCoreConfiguration: int shardingTotalCount> >>>>>>>> com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : return $i0
com.dangdang.ddframe.job.config.JobCoreConfiguration.getShardingTotalCount : return $i0 >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r8 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum JOB_EXCEPTION_HANDLER>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r8 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum JOB_EXCEPTION_HANDLER> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r9 = virtualinvoke $r8.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r9 = virtualinvoke $r8.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r10 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String jobExceptionHandlerClassName>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r10 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String jobExceptionHandlerClassName> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r9, $r10)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r9, $r10) >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r17 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum EXECUTOR_SERVICE_HANDLER>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r17 = <com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum EXECUTOR_SERVICE_HANDLER> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r18 = virtualinvoke $r17.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r18 = virtualinvoke $r17.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r19 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String executorServiceHandlerClassName>
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : $r19 = r0.<com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration: java.lang.String executorServiceHandlerClassName> >>>>>>>> com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r18, $r19)
com.dangdang.ddframe.job.fixture.config.TestSimpleJobConfiguration.getTypeConfig : virtualinvoke r1.<com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder: com.dangdang.ddframe.job.config.JobCoreConfiguration$Builder jobProperties(java.lang.String,java.lang.String)>($r18, $r19) >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i1 = i1 + 1
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : i1 = i1 + 1 >>>>>>>> com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : goto [?= (branch)]
com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum.from : goto [?= (branch)] >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r8 = specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.Object getDefaultHandler(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum,java.lang.String)>(r1, r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r8 = specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.Object getDefaultHandler(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum,java.lang.String)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r4 = <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: org.slf4j.Logger log>
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r4 = <com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: org.slf4j.Logger log> >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r5 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getKey()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Cannot instantiation class \'{}\', use default \'{}\' class.", r2, $r5)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Cannot instantiation class \'{}\', use default \'{}\' class.", r2, $r5) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r6 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getDefaultValue()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r6 = virtualinvoke r1.<com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum: java.lang.String getDefaultValue()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>()
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>() >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : return $r8
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getDefaultHandler : return $r8 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r8
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r8 >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r11 = specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.Object getDefaultHandler(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum,java.lang.String)>(r1, r2)
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : $r11 = specialinvoke r0.<com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor: java.lang.Object getDefaultHandler(com.dangdang.ddframe.job.executor.handler.JobProperties$JobPropertiesEnum,java.lang.String)>(r1, r2) >>>>>>>> com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r11
com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.getHandler : return $r11 >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r2 = new com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r2 = new com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r3 = new java.lang.StringBuilder
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r3 = new java.lang.StringBuilder >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inner-job-")
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inner-job-") >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $i0 = virtualinvoke $r7.<java.lang.Runtime: int availableProcessors()>()
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $i0 = virtualinvoke $r7.<java.lang.Runtime: int availableProcessors()>() >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $i1 = $i0 * 2
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $i1 = $i0 * 2 >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : specialinvoke $r2.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: void <init>(java.lang.String,int)>($r6, $i1)
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : specialinvoke $r2.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: void <init>(java.lang.String,int)>($r6, $i1) >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r8 = virtualinvoke $r2.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ExecutorService createExecutorService()>()
com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : $r8 = virtualinvoke $r2.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ExecutorService createExecutorService()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3 >>>>>>>> com.dangdang.ddframe.job.executor.handler.impl.DefaultExecutorServiceHandler.createExecutorService : return $r8
