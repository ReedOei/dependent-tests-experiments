com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r3 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.google.common.eventbus.EventBus eventBus>
com.dangdang.ddframe.job.event.JobEventBus.register : $r3 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.google.common.eventbus.EventBus eventBus> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.dangdang.ddframe.job.event.JobEventConfiguration jobEventConfig>
com.dangdang.ddframe.job.event.JobEventBus.register : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.dangdang.ddframe.job.event.JobEventConfiguration jobEventConfig> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r4 = interfaceinvoke $r2.<com.dangdang.ddframe.job.event.JobEventConfiguration: com.dangdang.ddframe.job.event.JobEventListener createJobEventListener()>()
com.dangdang.ddframe.job.event.JobEventBus.register : $r4 = interfaceinvoke $r2.<com.dangdang.ddframe.job.event.JobEventConfiguration: com.dangdang.ddframe.job.event.JobEventListener createJobEventListener()>() >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : $r1 = new com.dangdang.ddframe.job.event.fixture.TestJobEventListener
com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : $r1 = new com.dangdang.ddframe.job.event.fixture.TestJobEventListener >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : $r2 = r0.<com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration: com.dangdang.ddframe.job.event.fixture.JobEventCaller jobEventCaller>
com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : $r2 = r0.<com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration: com.dangdang.ddframe.job.event.fixture.JobEventCaller jobEventCaller> >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : specialinvoke $r1.<com.dangdang.ddframe.job.event.fixture.TestJobEventListener: void <init>(com.dangdang.ddframe.job.event.fixture.JobEventCaller)>($r2)
com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : specialinvoke $r1.<com.dangdang.ddframe.job.event.fixture.TestJobEventListener: void <init>(com.dangdang.ddframe.job.event.fixture.JobEventCaller)>($r2) >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : return $r1
com.dangdang.ddframe.job.event.fixture.TestJobEventConfiguration.createJobEventListener : return $r1 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : virtualinvoke $r3.<com.google.common.eventbus.EventBus: void register(java.lang.Object)>($r4)
com.dangdang.ddframe.job.event.JobEventBus.register : virtualinvoke $r3.<com.google.common.eventbus.EventBus: void register(java.lang.Object)>($r4) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : r0.<com.dangdang.ddframe.job.event.JobEventBus: boolean isRegistered> = 1
com.dangdang.ddframe.job.event.JobEventBus.register : r0.<com.dangdang.ddframe.job.event.JobEventBus: boolean isRegistered> = 1 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : goto [?= return]
com.dangdang.ddframe.job.event.JobEventBus.register : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBusTest: com.dangdang.ddframe.job.event.JobEventBus jobEventBus>
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBusTest: com.dangdang.ddframe.job.event.JobEventBus jobEventBus> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r1 = class "Lcom/dangdang/ddframe/job/event/JobEventBus;"
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r1 = class "Lcom/dangdang/ddframe/job/event/JobEventBus;" >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("isRegistered")
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("isRegistered") >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r4 = staticinvoke <org.unitils.util.ReflectionUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)>($r2, $r3)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r4 = staticinvoke <org.unitils.util.ReflectionUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)>($r2, $r3) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r5 = (java.lang.Boolean) $r4
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r5 = (java.lang.Boolean) $r4 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>()
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r8 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>($r7)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r8 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>($r7) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r8)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r8) >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>()
com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>() >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostName()>()
com.dangdang.ddframe.job.util.env.IpUtils.getHostName : $r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostName()>() >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getHostName : return $r2
com.dangdang.ddframe.job.util.env.IpUtils.getHostName : return $r2 >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r5 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress>
com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r5 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress> >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : if null == $r5
com.dangdang.ddframe.job.util.env.IpUtils.getIp : if null == $r5 >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r8 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress>
com.dangdang.ddframe.job.util.env.IpUtils.getIp : $r8 = <com.dangdang.ddframe.job.util.env.IpUtils: java.lang.String cachedIpAddress> >>>>>>>> com.dangdang.ddframe.job.util.env.IpUtils.getIp : return $r8
com.dangdang.ddframe.job.util.env.IpUtils.getIp : return $r8 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : $z0 = r0.<com.dangdang.ddframe.job.event.JobEventBus: boolean isRegistered>
com.dangdang.ddframe.job.event.JobEventBus.post : $z0 = r0.<com.dangdang.ddframe.job.event.JobEventBus: boolean isRegistered> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : if $z0 == 0
com.dangdang.ddframe.job.event.JobEventBus.post : if $z0 == 0 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject executorServiceObject>
com.dangdang.ddframe.job.event.JobEventBus.post : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject executorServiceObject> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : $z1 = virtualinvoke $r2.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: boolean isShutdown()>()
com.dangdang.ddframe.job.event.JobEventBus.post : $z1 = virtualinvoke $r2.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: boolean isShutdown()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $z0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>()
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $z0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : return $z0
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : return $z0 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : if $z1 != 0
com.dangdang.ddframe.job.event.JobEventBus.post : if $z1 != 0 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : $r3 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.google.common.eventbus.EventBus eventBus>
com.dangdang.ddframe.job.event.JobEventBus.post : $r3 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.google.common.eventbus.EventBus eventBus> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.post : virtualinvoke $r3.<com.google.common.eventbus.EventBus: void post(java.lang.Object)>(r1)
com.dangdang.ddframe.job.event.JobEventBus.post : virtualinvoke $r3.<com.google.common.eventbus.EventBus: void post(java.lang.Object)>(r1) >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventListener.isExecutionEventCalled : $z0 = <com.dangdang.ddframe.job.event.fixture.TestJobEventListener: boolean executionEventCalled>
com.dangdang.ddframe.job.event.fixture.TestJobEventListener.isExecutionEventCalled : $z0 = <com.dangdang.ddframe.job.event.fixture.TestJobEventListener: boolean executionEventCalled> >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventListener.isExecutionEventCalled : return $z0
com.dangdang.ddframe.job.event.fixture.TestJobEventListener.isExecutionEventCalled : return $z0 >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventListener.listen : $r2 = r0.<com.dangdang.ddframe.job.event.fixture.TestJobEventListener: com.dangdang.ddframe.job.event.fixture.JobEventCaller jobEventCaller>
com.dangdang.ddframe.job.event.fixture.TestJobEventListener.listen : $r2 = r0.<com.dangdang.ddframe.job.event.fixture.TestJobEventListener: com.dangdang.ddframe.job.event.fixture.JobEventCaller jobEventCaller> >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventListener.listen : interfaceinvoke $r2.<com.dangdang.ddframe.job.event.fixture.JobEventCaller: void call()>()
com.dangdang.ddframe.job.event.fixture.TestJobEventListener.listen : interfaceinvoke $r2.<com.dangdang.ddframe.job.event.fixture.JobEventCaller: void call()>() >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventListener.listen : <com.dangdang.ddframe.job.event.fixture.TestJobEventListener: boolean executionEventCalled> = 1
