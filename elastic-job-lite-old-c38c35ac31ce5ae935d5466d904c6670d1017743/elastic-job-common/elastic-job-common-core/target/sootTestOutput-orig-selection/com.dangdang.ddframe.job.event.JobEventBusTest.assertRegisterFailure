com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r3 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.google.common.eventbus.EventBus eventBus>
com.dangdang.ddframe.job.event.JobEventBus.register : $r3 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.google.common.eventbus.EventBus eventBus> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.dangdang.ddframe.job.event.JobEventConfiguration jobEventConfig>
com.dangdang.ddframe.job.event.JobEventBus.register : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBus: com.dangdang.ddframe.job.event.JobEventConfiguration jobEventConfig> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r4 = interfaceinvoke $r2.<com.dangdang.ddframe.job.event.JobEventConfiguration: com.dangdang.ddframe.job.event.JobEventListener createJobEventListener()>()
com.dangdang.ddframe.job.event.JobEventBus.register : $r4 = interfaceinvoke $r2.<com.dangdang.ddframe.job.event.JobEventConfiguration: com.dangdang.ddframe.job.event.JobEventListener createJobEventListener()>() >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : $r1 = new com.dangdang.ddframe.job.event.JobEventListenerConfigurationException
com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : $r1 = new com.dangdang.ddframe.job.event.JobEventListenerConfigurationException >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : $r2 = new java.lang.RuntimeException
com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : $r2 = new java.lang.RuntimeException >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("assert failure")
com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("assert failure") >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : specialinvoke $r1.<com.dangdang.ddframe.job.event.JobEventListenerConfigurationException: void <init>(java.lang.Exception)>($r2)
com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : specialinvoke $r1.<com.dangdang.ddframe.job.event.JobEventListenerConfigurationException: void <init>(java.lang.Exception)>($r2) >>>>>>>> com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : throw $r1
com.dangdang.ddframe.job.event.fixture.TestJobEventFailureConfiguration.createJobEventListener : throw $r1 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : $r6 = <com.dangdang.ddframe.job.event.JobEventBus: org.slf4j.Logger log>
com.dangdang.ddframe.job.event.JobEventBus.register : $r6 = <com.dangdang.ddframe.job.event.JobEventBus: org.slf4j.Logger log> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBus.register : interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Elastic job: create JobEventListener failure, error is: ", $r5)
com.dangdang.ddframe.job.event.JobEventBus.register : interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Elastic job: create JobEventListener failure, error is: ", $r5) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBusTest: com.dangdang.ddframe.job.event.JobEventBus jobEventBus>
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r2 = r0.<com.dangdang.ddframe.job.event.JobEventBusTest: com.dangdang.ddframe.job.event.JobEventBus jobEventBus> >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r1 = class "Lcom/dangdang/ddframe/job/event/JobEventBus;"
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r1 = class "Lcom/dangdang/ddframe/job/event/JobEventBus;" >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("isRegistered")
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("isRegistered") >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r4 = staticinvoke <org.unitils.util.ReflectionUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)>($r2, $r3)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r4 = staticinvoke <org.unitils.util.ReflectionUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)>($r2, $r3) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r5 = (java.lang.Boolean) $r4
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r5 = (java.lang.Boolean) $r4 >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>()
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r8 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>($r7)
com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : $r8 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>($r7) >>>>>>>> com.dangdang.ddframe.job.event.JobEventBusTest.assertIsRegistered : staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r8)
