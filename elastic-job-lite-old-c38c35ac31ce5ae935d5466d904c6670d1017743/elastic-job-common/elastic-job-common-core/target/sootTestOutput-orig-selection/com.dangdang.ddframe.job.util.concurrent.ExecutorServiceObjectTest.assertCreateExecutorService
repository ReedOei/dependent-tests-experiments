com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getActiveThreadCount : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getActiveThreadCount : $i0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>()
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getActiveThreadCount : $i0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getActiveThreadCount : return $i0
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getActiveThreadCount : return $i0 >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getWorkQueueSize : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.BlockingQueue workQueue>
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getWorkQueueSize : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.BlockingQueue workQueue> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getWorkQueueSize : $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int size()>()
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getWorkQueueSize : $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int size()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getWorkQueueSize : return $i0
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.getWorkQueueSize : return $i0 >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $z0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>()
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : $z0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : return $z0
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.isShutdown : return $z0 >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r1 = r0.<com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r1) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>($r2) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObject.createExecutorService : return $r3 >>>>>>>> com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObjectTest$FooTask.run : staticinvoke <com.dangdang.ddframe.job.util.concurrent.BlockUtils: void sleep(long)>(1000L)
com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObjectTest$FooTask.run : staticinvoke <com.dangdang.ddframe.job.util.concurrent.BlockUtils: void sleep(long)>(1000L) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : staticinvoke <java.lang.Thread: void sleep(long)>(l0)
com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : staticinvoke <java.lang.Thread: void sleep(long)>(l0) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.BlockUtils.waitingShortTime : staticinvoke <com.dangdang.ddframe.job.util.concurrent.BlockUtils: void sleep(long)>(100L)
com.dangdang.ddframe.job.util.concurrent.BlockUtils.waitingShortTime : staticinvoke <com.dangdang.ddframe.job.util.concurrent.BlockUtils: void sleep(long)>(100L) >>>>>>>> com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : goto [?= return]
com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> com.dangdang.ddframe.job.util.concurrent.BlockUtils.sleep : virtualinvoke $r2.<java.lang.Thread: void interrupt()>()
