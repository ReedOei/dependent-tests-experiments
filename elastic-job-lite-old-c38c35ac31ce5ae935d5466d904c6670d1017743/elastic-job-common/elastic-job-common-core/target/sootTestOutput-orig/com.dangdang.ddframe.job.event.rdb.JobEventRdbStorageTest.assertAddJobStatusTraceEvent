com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : interfaceinvoke r41.<java.sql.PreparedStatement: boolean execute()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r10 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : r38 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getOriginalTaskId()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r13 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : interfaceinvoke r41.<java.sql.PreparedStatement: void close()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r22 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getMessage()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r17 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: com.dangdang.ddframe.job.context.ExecutionType getExecutionType()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r9 = r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: javax.sql.DataSource dataSource>
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r19 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getShardingItems()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r12 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getJobName()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r14 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getSlaveId()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r20 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State getState()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r26 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String getTaskId()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : z1 = 1
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : z1 = 0
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : r40 = null
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : if r41 == null goto (branch)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r24 = new java.sql.Timestamp
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : r41 = interfaceinvoke r39.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>("INSERT INTO `JOB_STATUS_TRACE_LOG` (`id`, `job_name`, `original_task_id`, `task_id`, `slave_id`, `source`, `execution_type`, `sharding_item`,  `state`, `message`, `creation_time`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);")
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r7 = <com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State TASK_STAGING>
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : interfaceinvoke r41.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, r38)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.addJobStatusTraceEvent : $r15 = virtualinvoke r1.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$Source getSource()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : r5 = interfaceinvoke r4.<java.sql.DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(null, null, r2, 0, 0)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : interfaceinvoke r5.<java.sql.ResultSet: void close()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : z1 = 1
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : z1 = 0
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : $r8 = interfaceinvoke r5.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("INDEX_NAME")
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : r4 = interfaceinvoke r1.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : $z2 = interfaceinvoke r5.<java.sql.ResultSet: boolean next()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : if z1 != 0 goto (branch)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createTaskIdIndexIfNeeded : if r5 == null goto return
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getExecutionType : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: com.dangdang.ddframe.job.context.ExecutionType executionType>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getShardingItems : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String shardingItems>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getSlaveId : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String slaveId>
com.dangdang.ddframe.job.event.rdb.DatabaseType$1.apply : $r2 = (com.dangdang.ddframe.job.event.rdb.DatabaseType) r1
com.dangdang.ddframe.job.event.rdb.DatabaseType$1.apply : $r2 = staticinvoke <com.dangdang.ddframe.job.event.rdb.DatabaseType: java.lang.String access$000(com.dangdang.ddframe.job.event.rdb.DatabaseType)>(r1)
com.dangdang.ddframe.job.event.rdb.DatabaseType.values : $r0 = <com.dangdang.ddframe.job.event.rdb.DatabaseType: com.dangdang.ddframe.job.event.rdb.DatabaseType[] $VALUES>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getMessage : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String message>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getSource : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$Source source>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getJobName : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String jobName>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getState : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: com.dangdang.ddframe.job.event.type.JobStatusTraceEvent$State state>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getTaskId : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String taskId>
com.dangdang.ddframe.job.event.rdb.DatabaseType.access$000 : $r1 = r0.<com.dangdang.ddframe.job.event.rdb.DatabaseType: java.lang.String productName>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getOriginalTaskId : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.lang.String originalTaskId>
com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.getCreationTime : $r1 = r0.<com.dangdang.ddframe.job.event.type.JobStatusTraceEvent: java.util.Date creationTime>
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobExecutionTableAndIndexIfNeeded : $r6 = newarray (java.lang.String)[1]
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobExecutionTableAndIndexIfNeeded : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobExecutionTableAndIndexIfNeeded : r2 = interfaceinvoke r1.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobExecutionTableAndIndexIfNeeded : if r3 == null goto return
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobExecutionTableAndIndexIfNeeded : interfaceinvoke r3.<java.sql.ResultSet: void close()>()
com.dangdang.ddframe.job.event.rdb.DatabaseType.valueFrom : $r11 = virtualinvoke r1.<com.google.common.base.Optional: java.lang.Object get()>()
com.dangdang.ddframe.job.event.rdb.DatabaseType.valueFrom : $z0 = virtualinvoke r1.<com.google.common.base.Optional: boolean isPresent()>()
com.dangdang.ddframe.job.event.rdb.DatabaseType.valueFrom : $r2 = staticinvoke <com.dangdang.ddframe.job.event.rdb.DatabaseType: com.dangdang.ddframe.job.event.rdb.DatabaseType[] values()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : $z0 = interfaceinvoke r35.<java.sql.ResultSet: boolean next()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : $r10 = newarray (java.lang.Object)[3]
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : interfaceinvoke r35.<java.sql.ResultSet: void close()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : r33 = interfaceinvoke r31.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r2)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : r35 = interfaceinvoke r33.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : $r12 = r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: javax.sql.DataSource dataSource>
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.getOriginalTaskId : r32 = null
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.initTablesAndIndexes : $r5 = interfaceinvoke r1.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.initTablesAndIndexes : interfaceinvoke r1.<java.sql.Connection: void close()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.initTablesAndIndexes : if r1 == null goto return
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.initTablesAndIndexes : specialinvoke r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: void createJobStatusTraceTableAndIndexIfNeeded(java.sql.Connection)>(r1)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.initTablesAndIndexes : $r4 = r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: javax.sql.DataSource dataSource>
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.initTablesAndIndexes : specialinvoke r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: void createJobExecutionTableAndIndexIfNeeded(java.sql.Connection)>(r1)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.truncateString : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r1)
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobStatusTraceTableAndIndexIfNeeded : $r6 = newarray (java.lang.String)[1]
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobStatusTraceTableAndIndexIfNeeded : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobStatusTraceTableAndIndexIfNeeded : r2 = interfaceinvoke r1.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobStatusTraceTableAndIndexIfNeeded : specialinvoke r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: void createTaskIdIndexIfNeeded(java.sql.Connection,java.lang.String,java.lang.String)>(r1, "JOB_STATUS_TRACE_LOG", "TASK_ID_STATE_INDEX")
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobStatusTraceTableAndIndexIfNeeded : interfaceinvoke r3.<java.sql.ResultSet: void close()>()
com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage.createJobStatusTraceTableAndIndexIfNeeded : if r3 == null goto specialinvoke r0.<com.dangdang.ddframe.job.event.rdb.JobEventRdbStorage: void createTaskIdIndexIfNeeded(java.sql.Connection,java.lang.String,java.lang.String)>(r1, "JOB_STATUS_TRACE_LOG", "TASK_ID_STATE_INDEX")
