org.apache.xml.security.utils.JavaUtils.binaryCompare : $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r0, r1)
org.apache.xml.security.utils.PRNG.createBytes : r0 = newarray (byte)[i0]
org.apache.xml.security.utils.PRNG.createBytes : $r1 = staticinvoke <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG getInstance()>()
org.apache.xml.security.utils.PRNG.createBytes : return r0
org.apache.xml.security.utils.Base64.encodeFullBlock : i1 = 0
org.apache.xml.security.utils.Base64.encodeFullBlock : $i6 = i0 + i2
org.apache.xml.security.utils.Base64.encodeFullBlock : i4 = i20 & 63
org.apache.xml.security.utils.Base64.encodeFullBlock : i2 = 0
org.apache.xml.security.utils.Base64.encodeFullBlock : $b9 = r0[i0]
org.apache.xml.security.utils.Base64.encodeFullBlock : i3 = 3
org.apache.xml.security.utils.Base64.encodeFullBlock : return r1
org.apache.xml.security.utils.Base64.encodeFullBlock : i5 = i1 << 8
org.apache.xml.security.utils.Base64.encodeFullBlock : r1 = newarray (char)[4]
org.apache.xml.security.utils.Base64.encodeFullBlock : i20 = i20 >> 6
org.apache.xml.security.utils.Base64.encodeFullBlock : $c21 = staticinvoke <org.apache.xml.security.utils.Base64: char getChar(int)>(i4)
org.apache.xml.security.utils.Base64.encodeBlock : $i10 = i0 + i4
org.apache.xml.security.utils.Base64.encodeBlock : if i2 >= 2 goto return r1
org.apache.xml.security.utils.Base64.encodeBlock : r1[3] = 61
org.apache.xml.security.utils.Base64.encodeBlock : i17 = i1 & 63
org.apache.xml.security.utils.Base64.encodeBlock : i16 = 3
org.apache.xml.security.utils.Base64.encodeBlock : if b5 >= 0 goto $i14 = b5
org.apache.xml.security.utils.Base64.encodeBlock : r1 = newarray (char)[4]
org.apache.xml.security.utils.Base64.encodeBlock : if i2 < 2 goto $i9 = i2
org.apache.xml.security.utils.Base64.encodeBlock : i1 = 0
org.apache.xml.security.utils.Base64.encodeBlock : i15 = i1 << 8
org.apache.xml.security.utils.Base64.encodeBlock : if i2 >= 1 goto (branch)
org.apache.xml.security.utils.Base64.encodeBlock : $i7 = lengthof r0
org.apache.xml.security.utils.Base64.encodeBlock : i1 = i15 + i6
org.apache.xml.security.utils.Base64.encodeBlock : i1 = i1 >> 6
org.apache.xml.security.utils.Base64.encodeBlock : return r1
org.apache.xml.security.utils.Base64.encodeBlock : $c18 = staticinvoke <org.apache.xml.security.utils.Base64: char getChar(int)>(i17)
org.apache.xml.security.utils.Base64.encodeBlock : i4 = 0
org.apache.xml.security.utils.Base64.encode : $i12 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $i8 = i0 % 4
org.apache.xml.security.utils.Base64.encode : i3 = 0
org.apache.xml.security.utils.Base64.encode : if i0 <= 3 goto i9 = 2147483647
org.apache.xml.security.utils.Base64.encode : $i15 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $i5 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $r7 = staticinvoke <org.apache.xml.security.utils.Base64: char[] encodeBlock(byte[],int)>(r0, i2)
org.apache.xml.security.utils.Base64.encode : $r4 = staticinvoke <org.apache.xml.security.utils.Base64: char[] encodeFullBlock(byte[],int)>(r0, i4)
org.apache.xml.security.utils.Base64.encode : if i3 < i9 goto $i15 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.xml.security.utils.Base64.encode : i9 = 2147483647
org.apache.xml.security.utils.Base64.encode : $i0 = staticinvoke <org.apache.xml.security.utils.Base64: int getBase64WrapLength()>()
org.apache.xml.security.utils.Base64.encode : $i14 = i3 + 4
org.apache.xml.security.utils.Base64.encode : $i10 = i1 / i9
org.apache.xml.security.utils.Base64.encode : $r2 = new java.lang.StringBuffer
org.apache.xml.security.utils.Base64.encode : i4 = 0
org.apache.xml.security.utils.Base64.getChar : $i1 = 65 + i0
org.apache.xml.security.utils.Base64.getChar : if i0 != 62 goto (branch)
org.apache.xml.security.utils.Base64.getChar : if i0 != 63 goto return 63
org.apache.xml.security.utils.Base64.getChar : if i0 < 52 goto (branch)
org.apache.xml.security.utils.Base64.getChar : $i6 = i0 - 52
org.apache.xml.security.utils.Base64.getChar : return 47
org.apache.xml.security.utils.Base64.getChar : if i0 < 0 goto (branch)
org.apache.xml.security.utils.Base64.getChar : if i0 < 26 goto (branch)
org.apache.xml.security.utils.Base64.getBase64WrapLength : $i0 = <org.apache.xml.security.utils.Base64: int _base64length>
org.apache.xml.security.utils.HexDump.toByteArray : $l3 = l0 >> 8
org.apache.xml.security.utils.HexDump.toByteArray : $i1 = (int) l0
org.apache.xml.security.utils.HexDump.toByteArray : $l21 = l0 >> 56
org.apache.xml.security.utils.HexDump.toByteArray : $l18 = l0 >> 48
org.apache.xml.security.utils.HexDump.toByteArray : $l12 = l0 >> 32
org.apache.xml.security.utils.HexDump.toByteArray : r0 = newarray (byte)[8]
org.apache.xml.security.utils.HexDump.toByteArray : $l6 = l0 >> 16
org.apache.xml.security.utils.HexDump.toByteArray : return r0
org.apache.xml.security.utils.HexDump.toByteArray : $l15 = l0 >> 40
org.apache.xml.security.utils.HexDump.toByteArray : $l9 = l0 >> 24
org.apache.xml.security.utils.PRNG.nextBytes : $r2 = r0.<org.apache.xml.security.utils.PRNG: java.security.SecureRandom _sr>
org.apache.xml.security.utils.PRNG.getInstance : $r0 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.PRNG.getInstance : $r2 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.HexDump.toString : $r1 = new java.lang.String
