org.apache.xml.security.utils.PRNG.createBytes : r0 = newarray (byte)[i0] >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : $r1 = staticinvoke <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG getInstance()>()
org.apache.xml.security.utils.PRNG.createBytes : $r1 = staticinvoke <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG getInstance()>() >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : $r0 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.PRNG.getInstance : $r0 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : if $r0 != null
org.apache.xml.security.utils.PRNG.getInstance : if $r0 != null >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : $r1 = new java.security.SecureRandom
org.apache.xml.security.utils.PRNG.getInstance : $r1 = new java.security.SecureRandom >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
org.apache.xml.security.utils.PRNG.getInstance : specialinvoke $r1.<java.security.SecureRandom: void <init>()>() >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : staticinvoke <org.apache.xml.security.utils.PRNG: void init(java.security.SecureRandom)>($r1)
org.apache.xml.security.utils.PRNG.getInstance : staticinvoke <org.apache.xml.security.utils.PRNG: void init(java.security.SecureRandom)>($r1) >>>>>>>> org.apache.xml.security.utils.PRNG.init : $r1 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.PRNG.init : $r1 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> >>>>>>>> org.apache.xml.security.utils.PRNG.init : if $r1 != null
org.apache.xml.security.utils.PRNG.init : if $r1 != null >>>>>>>> org.apache.xml.security.utils.PRNG.init : $r2 = new org.apache.xml.security.utils.PRNG
org.apache.xml.security.utils.PRNG.init : $r2 = new org.apache.xml.security.utils.PRNG >>>>>>>> org.apache.xml.security.utils.PRNG.init : specialinvoke $r2.<org.apache.xml.security.utils.PRNG: void <init>(java.security.SecureRandom)>(r0)
org.apache.xml.security.utils.PRNG.init : specialinvoke $r2.<org.apache.xml.security.utils.PRNG: void <init>(java.security.SecureRandom)>(r0) >>>>>>>> org.apache.xml.security.utils.PRNG.init : <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> = $r2
org.apache.xml.security.utils.PRNG.init : <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> = $r2 >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : $r2 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.PRNG.getInstance : $r2 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : return $r2
org.apache.xml.security.utils.PRNG.getInstance : return $r2 >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : virtualinvoke $r1.<org.apache.xml.security.utils.PRNG: void nextBytes(byte[])>(r0)
org.apache.xml.security.utils.PRNG.createBytes : virtualinvoke $r1.<org.apache.xml.security.utils.PRNG: void nextBytes(byte[])>(r0) >>>>>>>> org.apache.xml.security.utils.PRNG.nextBytes : $r2 = r0.<org.apache.xml.security.utils.PRNG: java.security.SecureRandom _sr>
org.apache.xml.security.utils.PRNG.nextBytes : $r2 = r0.<org.apache.xml.security.utils.PRNG: java.security.SecureRandom _sr> >>>>>>>> org.apache.xml.security.utils.PRNG.nextBytes : virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
org.apache.xml.security.utils.PRNG.nextBytes : virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : return r0
org.apache.xml.security.utils.PRNG.createBytes : return r0 >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.xml.security.utils.HexDump.byteArrayToHexString : staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : $r2 = new java.lang.StringBuffer
org.apache.xml.security.utils.HexDump.byteArrayToHexString : $r2 = new java.lang.StringBuffer >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
org.apache.xml.security.utils.HexDump.byteArrayToHexString : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : r1 = $r2
org.apache.xml.security.utils.HexDump.byteArrayToHexString : r1 = $r2 >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : i1 = lengthof r0
org.apache.xml.security.utils.HexDump.byteArrayToHexString : i1 = lengthof r0 >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : i2 = 0
org.apache.xml.security.utils.HexDump.byteArrayToHexString : i2 = 0 >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : if i2 >= i1
org.apache.xml.security.utils.HexDump.byteArrayToHexString : if i2 >= i1 >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.xml.security.utils.HexDump.byteArrayToHexString : $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.utils.HexDump.byteArrayToHexString : return $r4
org.apache.xml.security.utils.HexDump.byteArrayToHexString : return $r4 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r1 = new java.lang.String
org.apache.xml.security.utils.Base64.decode : $r1 = new java.lang.String >>>>>>>> org.apache.xml.security.utils.Base64.decode : specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, "UTF-8")
org.apache.xml.security.utils.Base64.decode : specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, "UTF-8") >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r3 = staticinvoke <org.apache.xml.security.utils.Base64: byte[] decode(java.lang.String)>($r1)
org.apache.xml.security.utils.Base64.decode : $r3 = staticinvoke <org.apache.xml.security.utils.Base64: byte[] decode(java.lang.String)>($r1) >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i6 = virtualinvoke r0.<java.lang.String: int length()>()
org.apache.xml.security.utils.Base64.decode : $i6 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : if $i6 >= 30
org.apache.xml.security.utils.Base64.decode : if $i6 >= 30 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r4 = <org.apache.xml.security.utils.Base64: org.apache.log4j.Category cat>
org.apache.xml.security.utils.Base64.decode : $r4 = <org.apache.xml.security.utils.Base64: org.apache.log4j.Category cat> >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r5 = new java.lang.StringBuilder
org.apache.xml.security.utils.Base64.decode : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.xml.security.utils.Base64.decode : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.xml.security.utils.Base64.decode : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I was asked to decode \"")
org.apache.xml.security.utils.Base64.decode : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I was asked to decode \"") >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.xml.security.utils.Base64.decode : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")
org.apache.xml.security.utils.Base64.decode : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.xml.security.utils.Base64.decode : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : virtualinvoke $r4.<org.apache.log4j.Category: void debug(java.lang.Object)>($r9)
org.apache.xml.security.utils.Base64.decode : virtualinvoke $r4.<org.apache.log4j.Category: void debug(java.lang.Object)>($r9) >>>>>>>> org.apache.xml.security.utils.Base64.decode : goto [?= $r17 = new java.util.StringTokenizer]
org.apache.xml.security.utils.Base64.decode : goto [?= $r17 = new java.util.StringTokenizer] >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r17 = new java.util.StringTokenizer
org.apache.xml.security.utils.Base64.decode : $r17 = new java.util.StringTokenizer >>>>>>>> org.apache.xml.security.utils.Base64.decode : specialinvoke $r17.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r0, " \n\r\t", 0)
org.apache.xml.security.utils.Base64.decode : specialinvoke $r17.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r0, " \n\r\t", 0) >>>>>>>> org.apache.xml.security.utils.Base64.decode : r1 = $r17
org.apache.xml.security.utils.Base64.decode : r1 = $r17 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $r18 = new java.lang.StringBuffer
org.apache.xml.security.utils.Base64.decode : $r18 = new java.lang.StringBuffer >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i7 = virtualinvoke r0.<java.lang.String: int length()>()
org.apache.xml.security.utils.Base64.decode : $i7 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : specialinvoke $r18.<java.lang.StringBuffer: void <init>(int)>($i7)
org.apache.xml.security.utils.Base64.decode : specialinvoke $r18.<java.lang.StringBuffer: void <init>(int)>($i7) >>>>>>>> org.apache.xml.security.utils.Base64.decode : r2 = $r18
org.apache.xml.security.utils.Base64.decode : r2 = $r18 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $z0 = virtualinvoke r1.<java.util.StringTokenizer: boolean hasMoreElements()>()
org.apache.xml.security.utils.Base64.decode : $z0 = virtualinvoke r1.<java.util.StringTokenizer: boolean hasMoreElements()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : if $z0 == 0
org.apache.xml.security.utils.Base64.decode : if $z0 == 0 >>>>>>>> org.apache.xml.security.utils.Base64.decode : r21 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.xml.security.utils.Base64.decode : r21 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : i0 = 0
org.apache.xml.security.utils.Base64.decode : i0 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i8 = virtualinvoke r21.<java.lang.String: int length()>()
org.apache.xml.security.utils.Base64.decode : $i8 = virtualinvoke r21.<java.lang.String: int length()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : i1 = $i8 - 1
org.apache.xml.security.utils.Base64.decode : i1 = $i8 - 1 >>>>>>>> org.apache.xml.security.utils.Base64.decode : if i1 <= 0
org.apache.xml.security.utils.Base64.decode : if i1 <= 0 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i10 = virtualinvoke r21.<java.lang.String: int length()>()
org.apache.xml.security.utils.Base64.decode : $i10 = virtualinvoke r21.<java.lang.String: int length()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i11 = $i10 / 4
org.apache.xml.security.utils.Base64.decode : $i11 = $i10 / 4 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i12 = $i11 * 3
org.apache.xml.security.utils.Base64.decode : $i12 = $i11 * 3 >>>>>>>> org.apache.xml.security.utils.Base64.decode : i13 = $i12 - i0
org.apache.xml.security.utils.Base64.decode : i13 = $i12 - i0 >>>>>>>> org.apache.xml.security.utils.Base64.decode : r3 = newarray (byte)[i13]
org.apache.xml.security.utils.Base64.decode : r3 = newarray (byte)[i13] >>>>>>>> org.apache.xml.security.utils.Base64.decode : i2 = 0
org.apache.xml.security.utils.Base64.decode : i2 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.decode : i3 = 0
org.apache.xml.security.utils.Base64.decode : i3 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.decode : $i14 = virtualinvoke r21.<java.lang.String: int length()>()
org.apache.xml.security.utils.Base64.decode : $i14 = virtualinvoke r21.<java.lang.String: int length()>() >>>>>>>> org.apache.xml.security.utils.Base64.decode : if i2 >= $i14
org.apache.xml.security.utils.Base64.decode : if i2 >= $i14 >>>>>>>> org.apache.xml.security.utils.Base64.decode : return r3
org.apache.xml.security.utils.Base64.decode : return r3 >>>>>>>> org.apache.xml.security.utils.Base64.decode : return $r3
