org.apache.xml.security.utils.HexDump.toByteArray : r0 = newarray (byte)[8] >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i1 = (int) l0
org.apache.xml.security.utils.HexDump.toByteArray : $i1 = (int) l0 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b2 = (byte) $i1
org.apache.xml.security.utils.HexDump.toByteArray : $b2 = (byte) $i1 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[7] = $b2
org.apache.xml.security.utils.HexDump.toByteArray : r0[7] = $b2 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l3 = l0 >> 8
org.apache.xml.security.utils.HexDump.toByteArray : $l3 = l0 >> 8 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i4 = (int) $l3
org.apache.xml.security.utils.HexDump.toByteArray : $i4 = (int) $l3 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b5 = (byte) $i4
org.apache.xml.security.utils.HexDump.toByteArray : $b5 = (byte) $i4 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[6] = $b5
org.apache.xml.security.utils.HexDump.toByteArray : r0[6] = $b5 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l6 = l0 >> 16
org.apache.xml.security.utils.HexDump.toByteArray : $l6 = l0 >> 16 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i7 = (int) $l6
org.apache.xml.security.utils.HexDump.toByteArray : $i7 = (int) $l6 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b8 = (byte) $i7
org.apache.xml.security.utils.HexDump.toByteArray : $b8 = (byte) $i7 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[5] = $b8
org.apache.xml.security.utils.HexDump.toByteArray : r0[5] = $b8 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l9 = l0 >> 24
org.apache.xml.security.utils.HexDump.toByteArray : $l9 = l0 >> 24 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i10 = (int) $l9
org.apache.xml.security.utils.HexDump.toByteArray : $i10 = (int) $l9 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b11 = (byte) $i10
org.apache.xml.security.utils.HexDump.toByteArray : $b11 = (byte) $i10 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[4] = $b11
org.apache.xml.security.utils.HexDump.toByteArray : r0[4] = $b11 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l12 = l0 >> 32
org.apache.xml.security.utils.HexDump.toByteArray : $l12 = l0 >> 32 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i13 = (int) $l12
org.apache.xml.security.utils.HexDump.toByteArray : $i13 = (int) $l12 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b14 = (byte) $i13
org.apache.xml.security.utils.HexDump.toByteArray : $b14 = (byte) $i13 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[3] = $b14
org.apache.xml.security.utils.HexDump.toByteArray : r0[3] = $b14 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l15 = l0 >> 40
org.apache.xml.security.utils.HexDump.toByteArray : $l15 = l0 >> 40 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i16 = (int) $l15
org.apache.xml.security.utils.HexDump.toByteArray : $i16 = (int) $l15 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b17 = (byte) $i16
org.apache.xml.security.utils.HexDump.toByteArray : $b17 = (byte) $i16 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[2] = $b17
org.apache.xml.security.utils.HexDump.toByteArray : r0[2] = $b17 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l18 = l0 >> 48
org.apache.xml.security.utils.HexDump.toByteArray : $l18 = l0 >> 48 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i19 = (int) $l18
org.apache.xml.security.utils.HexDump.toByteArray : $i19 = (int) $l18 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b20 = (byte) $i19
org.apache.xml.security.utils.HexDump.toByteArray : $b20 = (byte) $i19 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[1] = $b20
org.apache.xml.security.utils.HexDump.toByteArray : r0[1] = $b20 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $l21 = l0 >> 56
org.apache.xml.security.utils.HexDump.toByteArray : $l21 = l0 >> 56 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $i22 = (int) $l21
org.apache.xml.security.utils.HexDump.toByteArray : $i22 = (int) $l21 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : $b23 = (byte) $i22
org.apache.xml.security.utils.HexDump.toByteArray : $b23 = (byte) $i22 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : r0[0] = $b23
org.apache.xml.security.utils.HexDump.toByteArray : r0[0] = $b23 >>>>>>>> org.apache.xml.security.utils.HexDump.toByteArray : return r0
org.apache.xml.security.utils.HexDump.toByteArray : return r0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i0 = staticinvoke <org.apache.xml.security.utils.Base64: int getBase64WrapLength()>()
org.apache.xml.security.utils.Base64.encode : $i0 = staticinvoke <org.apache.xml.security.utils.Base64: int getBase64WrapLength()>() >>>>>>>> org.apache.xml.security.utils.Base64.getBase64WrapLength : $i0 = <org.apache.xml.security.utils.Base64: int _base64length>
org.apache.xml.security.utils.Base64.getBase64WrapLength : $i0 = <org.apache.xml.security.utils.Base64: int _base64length> >>>>>>>> org.apache.xml.security.utils.Base64.getBase64WrapLength : return $i0
org.apache.xml.security.utils.Base64.getBase64WrapLength : return $i0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $r1 = staticinvoke <org.apache.xml.security.utils.Base64: java.lang.String encode(byte[],int)>(r0, $i0)
org.apache.xml.security.utils.Base64.encode : $r1 = staticinvoke <org.apache.xml.security.utils.Base64: java.lang.String encode(byte[],int)>(r0, $i0) >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i5 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $i5 = lengthof r0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i6 = $i5 + 2
org.apache.xml.security.utils.Base64.encode : $i6 = $i5 + 2 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i7 = $i6 / 3
org.apache.xml.security.utils.Base64.encode : $i7 = $i6 / 3 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i1 = $i7 * 4
org.apache.xml.security.utils.Base64.encode : i1 = $i7 * 4 >>>>>>>> org.apache.xml.security.utils.Base64.encode : if i0 <= 3
org.apache.xml.security.utils.Base64.encode : if i0 <= 3 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i8 = i0 % 4
org.apache.xml.security.utils.Base64.encode : $i8 = i0 % 4 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i9 = i0 - $i8
org.apache.xml.security.utils.Base64.encode : i9 = i0 - $i8 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i10 = i1 / i9
org.apache.xml.security.utils.Base64.encode : $i10 = i1 / i9 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i11 = 2 * $i10
org.apache.xml.security.utils.Base64.encode : $i11 = 2 * $i10 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i1 = i1 + $i11
org.apache.xml.security.utils.Base64.encode : i1 = i1 + $i11 >>>>>>>> org.apache.xml.security.utils.Base64.encode : goto [?= $r2 = new java.lang.StringBuffer]
org.apache.xml.security.utils.Base64.encode : goto [?= $r2 = new java.lang.StringBuffer] >>>>>>>> org.apache.xml.security.utils.Base64.encode : $r2 = new java.lang.StringBuffer
org.apache.xml.security.utils.Base64.encode : $r2 = new java.lang.StringBuffer >>>>>>>> org.apache.xml.security.utils.Base64.encode : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(i1)
org.apache.xml.security.utils.Base64.encode : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(i1) >>>>>>>> org.apache.xml.security.utils.Base64.encode : r1 = $r2
org.apache.xml.security.utils.Base64.encode : r1 = $r2 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i12 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $i12 = lengthof r0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i13 = $i12 / 3
org.apache.xml.security.utils.Base64.encode : $i13 = $i12 / 3 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i2 = $i13 * 3
org.apache.xml.security.utils.Base64.encode : i2 = $i13 * 3 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i3 = 0
org.apache.xml.security.utils.Base64.encode : i3 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i4 = 0
org.apache.xml.security.utils.Base64.encode : i4 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : if i4 >= i2
org.apache.xml.security.utils.Base64.encode : if i4 >= i2 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i14 = i3 + 4
org.apache.xml.security.utils.Base64.encode : $i14 = i3 + 4 >>>>>>>> org.apache.xml.security.utils.Base64.encode : if $i14 <= i9
org.apache.xml.security.utils.Base64.encode : if $i14 <= i9 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $r4 = staticinvoke <org.apache.xml.security.utils.Base64: char[] encodeFullBlock(byte[],int)>(r0, i4)
org.apache.xml.security.utils.Base64.encode : $r4 = staticinvoke <org.apache.xml.security.utils.Base64: char[] encodeFullBlock(byte[],int)>(r0, i4) >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i1 = 0
org.apache.xml.security.utils.Base64.encodeFullBlock : i1 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i2 = 0
org.apache.xml.security.utils.Base64.encodeFullBlock : i2 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : if i2 >= 3
org.apache.xml.security.utils.Base64.encodeFullBlock : if i2 >= 3 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i5 = i1 << 8
org.apache.xml.security.utils.Base64.encodeFullBlock : i5 = i1 << 8 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $i6 = i0 + i2
org.apache.xml.security.utils.Base64.encodeFullBlock : $i6 = i0 + i2 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $b7 = r0[$i6]
org.apache.xml.security.utils.Base64.encodeFullBlock : $b7 = r0[$i6] >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $s8 = 255 & $b7
org.apache.xml.security.utils.Base64.encodeFullBlock : $s8 = 255 & $b7 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i1 = i5 + $s8
org.apache.xml.security.utils.Base64.encodeFullBlock : i1 = i5 + $s8 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i2 = i2 + 1
org.apache.xml.security.utils.Base64.encodeFullBlock : i2 = i2 + 1 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : goto [?= (branch)]
org.apache.xml.security.utils.Base64.encodeFullBlock : goto [?= (branch)] >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $b9 = r0[i0]
org.apache.xml.security.utils.Base64.encodeFullBlock : $b9 = r0[i0] >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $s10 = $b9 & 255
org.apache.xml.security.utils.Base64.encodeFullBlock : $s10 = $b9 & 255 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $i11 = $s10 << 16
org.apache.xml.security.utils.Base64.encodeFullBlock : $i11 = $s10 << 16 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $i12 = i0 + 1
org.apache.xml.security.utils.Base64.encodeFullBlock : $i12 = i0 + 1 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $b13 = r0[$i12]
org.apache.xml.security.utils.Base64.encodeFullBlock : $b13 = r0[$i12] >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $s14 = $b13 & 255
org.apache.xml.security.utils.Base64.encodeFullBlock : $s14 = $b13 & 255 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $i15 = $s14 << 8
org.apache.xml.security.utils.Base64.encodeFullBlock : $i15 = $s14 << 8 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $i16 = $i11 + $i15
org.apache.xml.security.utils.Base64.encodeFullBlock : $i16 = $i11 + $i15 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $i17 = i0 + 2
org.apache.xml.security.utils.Base64.encodeFullBlock : $i17 = i0 + 2 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $b18 = r0[$i17]
org.apache.xml.security.utils.Base64.encodeFullBlock : $b18 = r0[$i17] >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $s19 = $b18 & 255
org.apache.xml.security.utils.Base64.encodeFullBlock : $s19 = $b18 & 255 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i20 = $i16 + $s19
org.apache.xml.security.utils.Base64.encodeFullBlock : i20 = $i16 + $s19 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : r1 = newarray (char)[4]
org.apache.xml.security.utils.Base64.encodeFullBlock : r1 = newarray (char)[4] >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i3 = 3
org.apache.xml.security.utils.Base64.encodeFullBlock : i3 = 3 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : if i3 < 0
org.apache.xml.security.utils.Base64.encodeFullBlock : if i3 < 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i4 = i20 & 63
org.apache.xml.security.utils.Base64.encodeFullBlock : i4 = i20 & 63 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : $c21 = staticinvoke <org.apache.xml.security.utils.Base64: char getChar(int)>(i4)
org.apache.xml.security.utils.Base64.encodeFullBlock : $c21 = staticinvoke <org.apache.xml.security.utils.Base64: char getChar(int)>(i4) >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 < 0
org.apache.xml.security.utils.Base64.getChar : if i0 < 0 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 >= 26
org.apache.xml.security.utils.Base64.getChar : if i0 >= 26 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 < 26
org.apache.xml.security.utils.Base64.getChar : if i0 < 26 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 >= 52
org.apache.xml.security.utils.Base64.getChar : if i0 >= 52 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 < 52
org.apache.xml.security.utils.Base64.getChar : if i0 < 52 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 >= 62
org.apache.xml.security.utils.Base64.getChar : if i0 >= 62 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 != 62
org.apache.xml.security.utils.Base64.getChar : if i0 != 62 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : if i0 != 63
org.apache.xml.security.utils.Base64.getChar : if i0 != 63 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : return 47
org.apache.xml.security.utils.Base64.getChar : return 47 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : r1[i3] = $c21
org.apache.xml.security.utils.Base64.encodeFullBlock : r1[i3] = $c21 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i20 = i20 >> 6
org.apache.xml.security.utils.Base64.encodeFullBlock : i20 = i20 >> 6 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : i3 = i3 + -1
org.apache.xml.security.utils.Base64.encodeFullBlock : i3 = i3 + -1 >>>>>>>> org.apache.xml.security.utils.Base64.encodeFullBlock : return r1
org.apache.xml.security.utils.Base64.encodeFullBlock : return r1 >>>>>>>> org.apache.xml.security.utils.Base64.encode : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4)
org.apache.xml.security.utils.Base64.encode : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4) >>>>>>>> org.apache.xml.security.utils.Base64.encode : i4 = i4 + 3
org.apache.xml.security.utils.Base64.encode : i4 = i4 + 3 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i3 = i3 + 4
org.apache.xml.security.utils.Base64.encode : i3 = i3 + 4 >>>>>>>> org.apache.xml.security.utils.Base64.encode : goto [?= (branch)]
org.apache.xml.security.utils.Base64.encode : goto [?= (branch)] >>>>>>>> org.apache.xml.security.utils.Base64.encode : if i3 < i9
org.apache.xml.security.utils.Base64.encode : if i3 < i9 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $i15 = lengthof r0
org.apache.xml.security.utils.Base64.encode : $i15 = lengthof r0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : if i2 >= $i15
org.apache.xml.security.utils.Base64.encode : if i2 >= $i15 >>>>>>>> org.apache.xml.security.utils.Base64.encode : $r7 = staticinvoke <org.apache.xml.security.utils.Base64: char[] encodeBlock(byte[],int)>(r0, i2)
org.apache.xml.security.utils.Base64.encode : $r7 = staticinvoke <org.apache.xml.security.utils.Base64: char[] encodeBlock(byte[],int)>(r0, i2) >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i1 = 0
org.apache.xml.security.utils.Base64.encodeBlock : i1 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i7 = lengthof r0
org.apache.xml.security.utils.Base64.encodeBlock : $i7 = lengthof r0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i8 = $i7 - i0
org.apache.xml.security.utils.Base64.encodeBlock : $i8 = $i7 - i0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i2 = $i8 - 1
org.apache.xml.security.utils.Base64.encodeBlock : i2 = $i8 - 1 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if i2 < 2
org.apache.xml.security.utils.Base64.encodeBlock : if i2 < 2 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i9 = i2
org.apache.xml.security.utils.Base64.encodeBlock : $i9 = i2 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i3 = $i9
org.apache.xml.security.utils.Base64.encodeBlock : i3 = $i9 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i4 = 0
org.apache.xml.security.utils.Base64.encodeBlock : i4 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if i4 >= 3
org.apache.xml.security.utils.Base64.encodeBlock : if i4 >= 3 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i10 = i0 + i4
org.apache.xml.security.utils.Base64.encodeBlock : $i10 = i0 + i4 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i11 = lengthof r0
org.apache.xml.security.utils.Base64.encodeBlock : $i11 = lengthof r0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if $i10 >= $i11
org.apache.xml.security.utils.Base64.encodeBlock : if $i10 >= $i11 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i12 = i0 + i4
org.apache.xml.security.utils.Base64.encodeBlock : $i12 = i0 + i4 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $b13 = r0[$i12]
org.apache.xml.security.utils.Base64.encodeBlock : $b13 = r0[$i12] >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : goto [?= b5 = $b13]
org.apache.xml.security.utils.Base64.encodeBlock : goto [?= b5 = $b13] >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : b5 = $b13
org.apache.xml.security.utils.Base64.encodeBlock : b5 = $b13 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if b5 >= 0
org.apache.xml.security.utils.Base64.encodeBlock : if b5 >= 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i14 = b5 + 256
org.apache.xml.security.utils.Base64.encodeBlock : $i14 = b5 + 256 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : goto [?= i6 = $i14]
org.apache.xml.security.utils.Base64.encodeBlock : goto [?= i6 = $i14] >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i6 = $i14
org.apache.xml.security.utils.Base64.encodeBlock : i6 = $i14 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i15 = i1 << 8
org.apache.xml.security.utils.Base64.encodeBlock : i15 = i1 << 8 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i1 = i15 + i6
org.apache.xml.security.utils.Base64.encodeBlock : i1 = i15 + i6 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i4 = i4 + 1
org.apache.xml.security.utils.Base64.encodeBlock : i4 = i4 + 1 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : goto [?= (branch)]
org.apache.xml.security.utils.Base64.encodeBlock : goto [?= (branch)] >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $b13 = 0
org.apache.xml.security.utils.Base64.encodeBlock : $b13 = 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $i14 = b5
org.apache.xml.security.utils.Base64.encodeBlock : $i14 = b5 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : r1 = newarray (char)[4]
org.apache.xml.security.utils.Base64.encodeBlock : r1 = newarray (char)[4] >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i16 = 3
org.apache.xml.security.utils.Base64.encodeBlock : i16 = 3 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if i16 < 0
org.apache.xml.security.utils.Base64.encodeBlock : if i16 < 0 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i17 = i1 & 63
org.apache.xml.security.utils.Base64.encodeBlock : i17 = i1 & 63 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : $c18 = staticinvoke <org.apache.xml.security.utils.Base64: char getChar(int)>(i17)
org.apache.xml.security.utils.Base64.encodeBlock : $c18 = staticinvoke <org.apache.xml.security.utils.Base64: char getChar(int)>(i17) >>>>>>>> org.apache.xml.security.utils.Base64.getChar : $i1 = 65 + i0
org.apache.xml.security.utils.Base64.getChar : $i1 = 65 + i0 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : $c2 = (char) $i1
org.apache.xml.security.utils.Base64.getChar : $c2 = (char) $i1 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : return $c2
org.apache.xml.security.utils.Base64.getChar : return $c2 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : r1[i16] = $c18
org.apache.xml.security.utils.Base64.encodeBlock : r1[i16] = $c18 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i1 = i1 >> 6
org.apache.xml.security.utils.Base64.encodeBlock : i1 = i1 >> 6 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : i16 = i16 + -1
org.apache.xml.security.utils.Base64.encodeBlock : i16 = i16 + -1 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : $i6 = i0 - 52
org.apache.xml.security.utils.Base64.getChar : $i6 = i0 - 52 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : $i7 = 48 + $i6
org.apache.xml.security.utils.Base64.getChar : $i7 = 48 + $i6 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : $c8 = (char) $i7
org.apache.xml.security.utils.Base64.getChar : $c8 = (char) $i7 >>>>>>>> org.apache.xml.security.utils.Base64.getChar : return $c8
org.apache.xml.security.utils.Base64.getChar : return $c8 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if i2 >= 1
org.apache.xml.security.utils.Base64.encodeBlock : if i2 >= 1 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : if i2 >= 2
org.apache.xml.security.utils.Base64.encodeBlock : if i2 >= 2 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : r1[3] = 61
org.apache.xml.security.utils.Base64.encodeBlock : r1[3] = 61 >>>>>>>> org.apache.xml.security.utils.Base64.encodeBlock : return r1
org.apache.xml.security.utils.Base64.encodeBlock : return r1 >>>>>>>> org.apache.xml.security.utils.Base64.encode : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7)
org.apache.xml.security.utils.Base64.encode : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7) >>>>>>>> org.apache.xml.security.utils.Base64.encode : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.xml.security.utils.Base64.encode : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.utils.Base64.encode : return $r9
org.apache.xml.security.utils.Base64.encode : return $r9 >>>>>>>> org.apache.xml.security.utils.Base64.encode : return $r1
org.apache.xml.security.utils.Base64.encode : return $r1 >>>>>>>> org.apache.xml.security.utils.HexDump.toString : $r1 = new java.lang.String
org.apache.xml.security.utils.HexDump.toString : $r1 = new java.lang.String >>>>>>>> org.apache.xml.security.utils.HexDump.toString : specialinvoke $r1.<java.lang.String: void <init>(byte[])>(r0)
org.apache.xml.security.utils.HexDump.toString : specialinvoke $r1.<java.lang.String: void <init>(byte[])>(r0) >>>>>>>> org.apache.xml.security.utils.HexDump.toString : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>()
org.apache.xml.security.utils.HexDump.toString : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.utils.HexDump.toString : return $r2
org.apache.xml.security.utils.HexDump.toString : return $r2 >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : r0 = newarray (byte)[i0]
org.apache.xml.security.utils.PRNG.createBytes : r0 = newarray (byte)[i0] >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : $r1 = staticinvoke <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG getInstance()>()
org.apache.xml.security.utils.PRNG.createBytes : $r1 = staticinvoke <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG getInstance()>() >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : $r0 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.PRNG.getInstance : $r0 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : if $r0 != null
org.apache.xml.security.utils.PRNG.getInstance : if $r0 != null >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : $r2 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng>
org.apache.xml.security.utils.PRNG.getInstance : $r2 = <org.apache.xml.security.utils.PRNG: org.apache.xml.security.utils.PRNG _prng> >>>>>>>> org.apache.xml.security.utils.PRNG.getInstance : return $r2
org.apache.xml.security.utils.PRNG.getInstance : return $r2 >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : virtualinvoke $r1.<org.apache.xml.security.utils.PRNG: void nextBytes(byte[])>(r0)
org.apache.xml.security.utils.PRNG.createBytes : virtualinvoke $r1.<org.apache.xml.security.utils.PRNG: void nextBytes(byte[])>(r0) >>>>>>>> org.apache.xml.security.utils.PRNG.nextBytes : $r2 = r0.<org.apache.xml.security.utils.PRNG: java.security.SecureRandom _sr>
org.apache.xml.security.utils.PRNG.nextBytes : $r2 = r0.<org.apache.xml.security.utils.PRNG: java.security.SecureRandom _sr> >>>>>>>> org.apache.xml.security.utils.PRNG.nextBytes : virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
org.apache.xml.security.utils.PRNG.nextBytes : virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1) >>>>>>>> org.apache.xml.security.utils.PRNG.createBytes : return r0
org.apache.xml.security.utils.PRNG.createBytes : return r0 >>>>>>>> org.apache.xml.security.utils.JavaUtils.binaryCompare : $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r0, r1)
org.apache.xml.security.utils.JavaUtils.binaryCompare : $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r0, r1) >>>>>>>> org.apache.xml.security.utils.JavaUtils.binaryCompare : return $z0
org.apache.xml.security.utils.JavaUtils.binaryCompare : return $z0 >>>>>>>> org.apache.xml.security.utils.Base64.encode : i9 = 2147483647
