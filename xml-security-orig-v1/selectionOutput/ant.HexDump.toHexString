ant.HexDump.toHexString : staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> ant.HexDump.toHexString : $z0 = <ant.HexDump: boolean WITH_BYTE_SEPARATOR>
ant.HexDump.toHexString : $z0 = <ant.HexDump: boolean WITH_BYTE_SEPARATOR> >>>>>>>> ant.HexDump.toHexString : if $z0 == 0
ant.HexDump.toHexString : if $z0 == 0 >>>>>>>> ant.HexDump.toHexString : $i6 = i1 * 3
ant.HexDump.toHexString : if $z0 == 0 >>>>>>>> ant.HexDump.toHexString : $i7 = i1 * 2
ant.HexDump.toHexString : $i7 = i1 * 2 >>>>>>>> ant.HexDump.toHexString : r1 = newarray (char)[$i7]
ant.HexDump.toHexString : r1 = newarray (char)[$i7] >>>>>>>> ant.HexDump.toHexString : i3 = i0
ant.HexDump.toHexString : i3 = i0 >>>>>>>> ant.HexDump.toHexString : i4 = 0
ant.HexDump.toHexString : i4 = 0 >>>>>>>> ant.HexDump.toHexString : $i8 = i0 + i1
ant.HexDump.toHexString : $i8 = i0 + i1 >>>>>>>> ant.HexDump.toHexString : if i3 >= $i8
ant.HexDump.toHexString : if i3 >= $i8 >>>>>>>> ant.HexDump.toHexString : $i9 = i3
ant.HexDump.toHexString : if i3 >= $i8 >>>>>>>> ant.HexDump.toHexString : $r4 = new java.lang.String
ant.HexDump.toHexString : $r4 = new java.lang.String >>>>>>>> ant.HexDump.toHexString : specialinvoke $r4.<java.lang.String: void <init>(char[])>(r1)
ant.HexDump.toHexString : specialinvoke $r4.<java.lang.String: void <init>(char[])>(r1) >>>>>>>> ant.HexDump.toHexString : return $r4
ant.HexDump.toHexString : $i9 = i3 >>>>>>>> ant.HexDump.toHexString : i3 = i3 + 1
ant.HexDump.toHexString : i3 = i3 + 1 >>>>>>>> ant.HexDump.toHexString : b5 = r0[$i9]
ant.HexDump.toHexString : b5 = r0[$i9] >>>>>>>> ant.HexDump.toHexString : i10 = i4 + 1
ant.HexDump.toHexString : i10 = i4 + 1 >>>>>>>> ant.HexDump.toHexString : $r2 = <ant.HexDump: char[] HEX_DIGITS>
ant.HexDump.toHexString : $r2 = <ant.HexDump: char[] HEX_DIGITS> >>>>>>>> ant.HexDump.toHexString : $b11 = b5 >>> 4
ant.HexDump.toHexString : $b11 = b5 >>> 4 >>>>>>>> ant.HexDump.toHexString : $b12 = $b11 & 15
ant.HexDump.toHexString : $b12 = $b11 & 15 >>>>>>>> ant.HexDump.toHexString : $c13 = $r2[$b12]
ant.HexDump.toHexString : $c13 = $r2[$b12] >>>>>>>> ant.HexDump.toHexString : r1[i4] = $c13
ant.HexDump.toHexString : r1[i4] = $c13 >>>>>>>> ant.HexDump.toHexString : i4 = i10 + 1
ant.HexDump.toHexString : i4 = i10 + 1 >>>>>>>> ant.HexDump.toHexString : $r3 = <ant.HexDump: char[] HEX_DIGITS>
ant.HexDump.toHexString : $r3 = <ant.HexDump: char[] HEX_DIGITS> >>>>>>>> ant.HexDump.toHexString : $b14 = b5 & 15
ant.HexDump.toHexString : $b14 = b5 & 15 >>>>>>>> ant.HexDump.toHexString : $c15 = $r3[$b14]
ant.HexDump.toHexString : $c15 = $r3[$b14] >>>>>>>> ant.HexDump.toHexString : r1[i10] = $c15
ant.HexDump.toHexString : r1[i10] = $c15 >>>>>>>> ant.HexDump.toHexString : $z1 = <ant.HexDump: boolean WITH_BYTE_SEPARATOR>
ant.HexDump.toHexString : $z1 = <ant.HexDump: boolean WITH_BYTE_SEPARATOR> >>>>>>>> ant.HexDump.toHexString : if $z1 == 0
ant.HexDump.toHexString : if $z1 == 0 >>>>>>>> ant.HexDump.toHexString : $i16 = i4
ant.HexDump.toHexString : if $z1 == 0 >>>>>>>> ant.HexDump.toHexString : $i8 = i0 + i1
ant.HexDump.toHexString : $i16 = i4 >>>>>>>> ant.HexDump.toHexString : i4 = i4 + 1
ant.HexDump.toHexString : i4 = i4 + 1 >>>>>>>> ant.HexDump.toHexString : $c17 = <ant.HexDump: char BYTE_SEPARATOR>
ant.HexDump.toHexString : $c17 = <ant.HexDump: char BYTE_SEPARATOR> >>>>>>>> ant.HexDump.toHexString : r1[$i16] = $c17
ant.HexDump.toHexString : r1[$i16] = $c17 >>>>>>>> ant.HexDump.toHexString : goto [?= $i8 = i0 + i1]
ant.HexDump.toHexString : goto [?= $i8 = i0 + i1] >>>>>>>> ant.HexDump.toHexString : $i8 = i0 + i1
ant.HexDump.toHexString : $i6 = i1 * 3 >>>>>>>> ant.HexDump.toHexString : r1 = newarray (char)[$i6]
ant.HexDump.toHexString : r1 = newarray (char)[$i6] >>>>>>>> ant.HexDump.toHexString : goto [?= i3 = i0]
ant.HexDump.toHexString : goto [?= i3 = i0] >>>>>>>> ant.HexDump.toHexString : i3 = i0
