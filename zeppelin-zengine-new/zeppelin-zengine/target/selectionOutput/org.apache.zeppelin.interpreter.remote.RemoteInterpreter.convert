org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r2 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult: java.lang.String getCode()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult: java.lang.String getCode()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r7 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code valueOf(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r7 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code valueOf(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : r3 = $r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : r3 = $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r8 = virtualinvoke r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult: java.util.List getMsg()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r8 = virtualinvoke r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult: java.util.List getMsg()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : return r3
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : r5 = (org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage) $r9
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : r5 = (org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage) $r9 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r10 = virtualinvoke r5.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage: java.lang.String getType()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r10 = virtualinvoke r5.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage: java.lang.String getType()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r11 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type valueOf(java.lang.String)>($r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r11 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type valueOf(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r12 = virtualinvoke r5.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage: java.lang.String getData()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $r12 = virtualinvoke r5.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage: java.lang.String getData()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterResult: void add(org.apache.zeppelin.interpreter.InterpreterResult$Type,java.lang.String)>($r11, $r12)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterResult: void add(org.apache.zeppelin.interpreter.InterpreterResult$Type,java.lang.String)>($r11, $r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.convert : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
