org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r2 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r2 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : if r2 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : if r2 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r7 = virtualinvoke r2.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistry()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : if r2 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : return
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r7 = virtualinvoke r2.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistry()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : if $r7 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : if $r7 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r3 = virtualinvoke r2.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistry()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : if $r7 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : return
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r3 = virtualinvoke r2.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistry()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r8 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r8 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r10 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r10 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Push local angular object registry from ZeppelinServer to remote interpreter group {}", $r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Push local angular object registry from ZeppelinServer to remote interpreter group {}", $r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r11 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r11 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : specialinvoke $r11.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreter)>(r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : specialinvoke $r11.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreter)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r4 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2: java.lang.reflect.Type getType()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r4 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2: java.lang.reflect.Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r12 = new com.google.gson.Gson
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r12 = new com.google.gson.Gson >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : specialinvoke $r12.<com.google.gson.Gson: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : specialinvoke $r12.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r5 = $r12
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : r5 = $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r13 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>(r3, r4)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : $r13 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>(r3, r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : virtualinvoke r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: void angularRegistryPush(java.lang.String)>($r13)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : virtualinvoke r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: void angularRegistryPush(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.pushAngularObjectRegistryToRemote : return
