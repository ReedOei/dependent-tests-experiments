org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r5 = newarray (java.lang.String)[1] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r5[0] = r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r5[0] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r6 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r6 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r3, $r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r3, $r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r7 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : return 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : $r7 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading {}", r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading {}", r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterListFromJson(java.nio.file.Path)>(r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterListFromJson(java.nio.file.Path)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void registerInterpreters(java.util.List,java.lang.String)>(r4, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void registerInterpreters(java.util.List,java.lang.String)>(r4, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.registerInterpreterFromPath : return 1
