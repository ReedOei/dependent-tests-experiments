org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars[] $VALUES> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r2 = (org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars[]) $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r2 = (org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars[]) $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars$VarType type>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars$VarType type> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : $i0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int intValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : $i0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int intValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : return $i0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : return $i0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBucketName : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_BUCKET>
org.apache.zeppelin.conf.ZeppelinConfiguration.getBucketName : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_BUCKET> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBucketName : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBucketName : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBucketName : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getBucketName : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getUser : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_USER>
org.apache.zeppelin.conf.ZeppelinConfiguration.getUser : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_USER> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getUser : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getUser : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getUser : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getUser : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isS3ServerSideEncryption : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_SSE>
org.apache.zeppelin.conf.ZeppelinConfiguration.isS3ServerSideEncryption : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_SSE> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isS3ServerSideEncryption : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.isS3ServerSideEncryption : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isS3ServerSideEncryption : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration.isS3ServerSideEncryption : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyRegion : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_KMS_KEY_REGION>
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyRegion : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_KMS_KEY_REGION> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyRegion : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyRegion : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyRegion : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyRegion : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyID : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_KMS_KEY_ID>
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyID : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_KMS_KEY_ID> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyID : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyID : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyID : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3KMSKeyID : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3EncryptionMaterialsProviderClass : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_EMP>
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3EncryptionMaterialsProviderClass : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_EMP> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3EncryptionMaterialsProviderClass : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3EncryptionMaterialsProviderClass : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getS3EncryptionMaterialsProviderClass : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getS3EncryptionMaterialsProviderClass : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getEndpoint : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_ENDPOINT>
org.apache.zeppelin.conf.ZeppelinConfiguration.getEndpoint : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_S3_ENDPOINT> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getEndpoint : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getEndpoint : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getEndpoint : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getEndpoint : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumNpmRegistry : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HELIUM_NPM_REGISTRY>
org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumNpmRegistry : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HELIUM_NPM_REGISTRY> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumNpmRegistry : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumNpmRegistry : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumNpmRegistry : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumNpmRegistry : return $r2 >>>>>>>> org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : $r2 = new java.io.File
org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : $r2 = new java.io.File >>>>>>>> org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : $r3 = r0.<org.apache.zeppelin.helium.HeliumBundleFactory: java.io.File heliumBundleDirectory>
org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : $r3 = r0.<org.apache.zeppelin.helium.HeliumBundleFactory: java.io.File heliumBundleDirectory> >>>>>>>> org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1)
org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1) >>>>>>>> org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : return $r2
org.apache.zeppelin.helium.HeliumBundleFactory.getHeliumPackageDirectory : return $r2 >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.unload : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: java.util.concurrent.ExecutorService executor>
org.apache.zeppelin.helium.HeliumApplicationFactory.unload : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.unload : $r3 = new org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication
org.apache.zeppelin.helium.HeliumApplicationFactory.unload : $r3 = new org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.unload : specialinvoke $r3.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: void <init>(org.apache.zeppelin.helium.HeliumApplicationFactory,org.apache.zeppelin.notebook.Paragraph,java.lang.String)>(r0, r1, r2)
org.apache.zeppelin.helium.HeliumApplicationFactory.unload : specialinvoke $r3.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: void <init>(org.apache.zeppelin.helium.HeliumApplicationFactory,org.apache.zeppelin.notebook.Paragraph,java.lang.String)>(r0, r1, r2) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.unload : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3)
org.apache.zeppelin.helium.HeliumApplicationFactory.unload : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : r1 = null
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : r1 = null >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r3 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: org.apache.zeppelin.notebook.Paragraph paragraph>
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r3 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: org.apache.zeppelin.notebook.Paragraph paragraph> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: java.lang.String appId>
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: java.lang.String appId> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : r1 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.ApplicationState getApplicationState(java.lang.String)>($r4)
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : r1 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.ApplicationState getApplicationState(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : r2 = $r12
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : r2 = $r12 >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r13 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: org.apache.zeppelin.helium.HeliumApplicationFactory this$0>
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r13 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication: org.apache.zeppelin.helium.HeliumApplicationFactory this$0> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r14 = staticinvoke <org.apache.zeppelin.helium.HeliumApplicationFactory: org.slf4j.Logger access$000(org.apache.zeppelin.helium.HeliumApplicationFactory)>($r13)
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r14 = staticinvoke <org.apache.zeppelin.helium.HeliumApplicationFactory: org.slf4j.Logger access$000(org.apache.zeppelin.helium.HeliumApplicationFactory)>($r13) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.access$000 : $r1 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.slf4j.Logger logger>
org.apache.zeppelin.helium.HeliumApplicationFactory.access$000 : $r1 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.access$000 : return $r1
org.apache.zeppelin.helium.HeliumApplicationFactory.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r15 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : $r15 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r15, r2)
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r15, r2) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : if r1 == null
org.apache.zeppelin.helium.HeliumApplicationFactory$UnloadApplication.run : if r1 == null >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.run : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: java.util.concurrent.ExecutorService executor>
org.apache.zeppelin.helium.HeliumApplicationFactory.run : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.run : $r3 = new org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication
org.apache.zeppelin.helium.HeliumApplicationFactory.run : $r3 = new org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.run : specialinvoke $r3.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: void <init>(org.apache.zeppelin.helium.HeliumApplicationFactory,org.apache.zeppelin.notebook.Paragraph,java.lang.String)>(r0, r1, r2)
org.apache.zeppelin.helium.HeliumApplicationFactory.run : specialinvoke $r3.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: void <init>(org.apache.zeppelin.helium.HeliumApplicationFactory,org.apache.zeppelin.notebook.Paragraph,java.lang.String)>(r0, r1, r2) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.run : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3)
org.apache.zeppelin.helium.HeliumApplicationFactory.run : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : r1 = null
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : r1 = null >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r3 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: org.apache.zeppelin.notebook.Paragraph paragraph>
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r3 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: org.apache.zeppelin.notebook.Paragraph paragraph> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: java.lang.String appId>
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r4 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: java.lang.String appId> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : r1 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.ApplicationState getApplicationState(java.lang.String)>($r4)
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : r1 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.ApplicationState getApplicationState(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : r2 = $r10
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : r2 = $r10 >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r11 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: org.apache.zeppelin.helium.HeliumApplicationFactory this$0>
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r11 = r0.<org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication: org.apache.zeppelin.helium.HeliumApplicationFactory this$0> >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r12 = staticinvoke <org.apache.zeppelin.helium.HeliumApplicationFactory: org.slf4j.Logger access$000(org.apache.zeppelin.helium.HeliumApplicationFactory)>($r11)
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r12 = staticinvoke <org.apache.zeppelin.helium.HeliumApplicationFactory: org.slf4j.Logger access$000(org.apache.zeppelin.helium.HeliumApplicationFactory)>($r11) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r13 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : $r13 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r13, r2)
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r13, r2) >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : if r1 == null
org.apache.zeppelin.helium.HeliumApplicationFactory$RunApplication.run : if r1 == null >>>>>>>> org.apache.zeppelin.helium.HeliumApplicationFactory.setApplicationEventListener : r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.apache.zeppelin.helium.ApplicationEventListener applicationEventListener> = r1
org.apache.zeppelin.helium.HeliumApplicationFactory.setApplicationEventListener : r0.<org.apache.zeppelin.helium.HeliumApplicationFactory: org.apache.zeppelin.helium.ApplicationEventListener applicationEventListener> = r1 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r5 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r5 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $r5 == null
org.apache.zeppelin.helium.Helium.loadConf : if $r5 == null >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r6 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r6 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z0 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.helium.Helium.loadConf : $z0 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z0 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z0 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths>
org.apache.zeppelin.helium.Helium.loadConf : $r7 = r0.<org.apache.zeppelin.helium.Helium: java.lang.String registryPaths> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r2 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.zeppelin.helium.Helium.loadConf : r2 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r3 = r2
org.apache.zeppelin.helium.Helium.loadConf : r3 = r2 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i0 = lengthof r3
org.apache.zeppelin.helium.Helium.loadConf : i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i1 = 0
org.apache.zeppelin.helium.Helium.loadConf : i1 = 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if i1 >= i0
org.apache.zeppelin.helium.Helium.loadConf : if i1 >= i0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r4 = r3[i1]
org.apache.zeppelin.helium.Helium.loadConf : r4 = r3[i1] >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("http://")
org.apache.zeppelin.helium.Helium.loadConf : $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("http://") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z1 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z1 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("https://")
org.apache.zeppelin.helium.Helium.loadConf : $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("https://") >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z2 == 0
org.apache.zeppelin.helium.Helium.loadConf : if $z2 == 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r12 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger>
org.apache.zeppelin.helium.Helium.loadConf : $r12 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Add helium local registry {}", r4)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Add helium local registry {}", r4) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r13 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry>
org.apache.zeppelin.helium.Helium.loadConf : $r13 = r0.<org.apache.zeppelin.helium.Helium: java.util.List registry> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r14 = new org.apache.zeppelin.helium.HeliumLocalRegistry
org.apache.zeppelin.helium.Helium.loadConf : $r14 = new org.apache.zeppelin.helium.HeliumLocalRegistry >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r14.<org.apache.zeppelin.helium.HeliumLocalRegistry: void <init>(java.lang.String,java.lang.String)>(r4, r4)
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r14.<org.apache.zeppelin.helium.HeliumLocalRegistry: void <init>(java.lang.String,java.lang.String)>(r4, r4) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : i1 = i1 + 1
org.apache.zeppelin.helium.Helium.loadConf : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : goto [?= (branch)]
org.apache.zeppelin.helium.Helium.loadConf : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r15 = new java.io.File
org.apache.zeppelin.helium.Helium.loadConf : $r15 = new java.io.File >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r16 = $r15
org.apache.zeppelin.helium.Helium.loadConf : r16 = $r15 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $z5 = virtualinvoke r16.<java.io.File: boolean isFile()>()
org.apache.zeppelin.helium.Helium.loadConf : $z5 = virtualinvoke r16.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : if $z5 != 0
org.apache.zeppelin.helium.Helium.loadConf : if $z5 != 0 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r17 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger>
org.apache.zeppelin.helium.Helium.loadConf : $r17 = r0.<org.apache.zeppelin.helium.Helium: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{} does not exists", r1)
org.apache.zeppelin.helium.Helium.loadConf : interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{} does not exists", r1) >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : $r18 = new org.apache.zeppelin.helium.HeliumConf
org.apache.zeppelin.helium.Helium.loadConf : $r18 = new org.apache.zeppelin.helium.HeliumConf >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r18.<org.apache.zeppelin.helium.HeliumConf: void <init>()>()
org.apache.zeppelin.helium.Helium.loadConf : specialinvoke $r18.<org.apache.zeppelin.helium.HeliumConf: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : r19 = $r18
org.apache.zeppelin.helium.Helium.loadConf : r19 = $r18 >>>>>>>> org.apache.zeppelin.helium.Helium.loadConf : return r19
org.apache.zeppelin.helium.Helium.loadConf : return r19 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.addParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.addParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.addParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.addParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.addParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r1, $i0)
org.apache.zeppelin.notebook.Note.addParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r1, $i0) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : r2 = $r4
org.apache.zeppelin.notebook.Note.insertParagraph : r2 = $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4
org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor r2
org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>]
org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>] >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.insertParagraph : $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : if $r7 == null
org.apache.zeppelin.notebook.Note.insertParagraph : if $r7 == null >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r1 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r1.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r1.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r2 = $r1
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor r3
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return r2]
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return r2] >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return r2
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return r2 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.runAll : $r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r2 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r2 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r3
org.apache.zeppelin.notebook.Note.getConfig : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("cronExecutingUser")
org.apache.zeppelin.notebook.Note.runAll : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("cronExecutingUser") >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r1 = (java.lang.String) $r6
org.apache.zeppelin.notebook.Note.runAll : r1 = (java.lang.String) $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : if null != r1
org.apache.zeppelin.notebook.Note.runAll : if null != r1 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r1 = "anonymous"
org.apache.zeppelin.notebook.Note.runAll : r1 = "anonymous" >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.notebook.Note.runAll : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : r1 = $r3
org.apache.zeppelin.notebook.Note.getParagraphs : r1 = $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor r1
org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : return $r4
org.apache.zeppelin.notebook.Note.getParagraphs : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.runAll : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.runAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : if $z0 == 0
