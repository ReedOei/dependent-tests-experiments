org.apache.zeppelin.notebook.Folder.rename : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id>
org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : return $r1
org.apache.zeppelin.notebook.Folder.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : return $z0
org.apache.zeppelin.notebook.Folder.isRoot : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z0 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.rename : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r9 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Folder.rename : $r9 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c0 != 47
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c0 != 47 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i2 = $i1 - 1
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i2 = $i1 - 1 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c3 != 47
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c3 != 47 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> = $r9
org.apache.zeppelin.notebook.Folder.rename : r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> = $r9 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r10 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.rename : $r10 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r11 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.rename : $r11 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Rename {} to {}", r2, $r11)
org.apache.zeppelin.notebook.Folder.rename : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Rename {} to {}", r2, $r11) >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r3 = $r12
org.apache.zeppelin.notebook.Folder.rename : r3 = $r12 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : entermonitor $r12
org.apache.zeppelin.notebook.Folder.rename : entermonitor $r12 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r13 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : $r13 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.rename : $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.rename : r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.rename : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z1 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : exitmonitor r3
org.apache.zeppelin.notebook.Folder.rename : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : goto [?= $r21 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>]
org.apache.zeppelin.notebook.Folder.rename : goto [?= $r21 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>] >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r21 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.rename : $r21 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $r22 = interfaceinvoke $r21.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.rename : $r22 = interfaceinvoke $r21.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : r23 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.rename : r23 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.rename : $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : if $z3 == 0
org.apache.zeppelin.notebook.Folder.rename : if $z3 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void notifyRenamed(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void notifyRenamed(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.Folder.notifyRenamed : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners> >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.notifyRenamed : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.notifyRenamed : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.notifyRenamed : if $z0 == 0
org.apache.zeppelin.notebook.Folder.notifyRenamed : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>()
org.apache.zeppelin.notebook.Folder.getNotesRecursively : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList
org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.getNotes : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.getNotes : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r3)
org.apache.zeppelin.notebook.Folder.getNotes : specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : return $r1
org.apache.zeppelin.notebook.Folder.getNotes : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.getNotesRecursively : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.getNotesRecursively : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.getNotesRecursively : r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Folder.getNotesRecursively : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : if $z0 == 0
org.apache.zeppelin.notebook.Folder.getNotesRecursively : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotesRecursively : return r1
org.apache.zeppelin.notebook.Folder.getNotesRecursively : return r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.isTrash : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : if $z0 == 0
org.apache.zeppelin.notebook.Folder.isTrash : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.isTrash : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/")
org.apache.zeppelin.notebook.Folder.isTrash : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : $r3 = $r2[0]
org.apache.zeppelin.notebook.Folder.isTrash : $r3 = $r2[0] >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("~Trash")
org.apache.zeppelin.notebook.Folder.isTrash : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("~Trash") >>>>>>>> org.apache.zeppelin.notebook.Folder.isTrash : return $z1
org.apache.zeppelin.notebook.Folder.isTrash : return $z1 >>>>>>>> org.apache.zeppelin.notebook.Folder.getChildren : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.getChildren : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.getChildren : return $r1
