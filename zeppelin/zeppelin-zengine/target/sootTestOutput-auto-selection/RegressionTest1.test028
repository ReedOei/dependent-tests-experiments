org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars[] $VALUES> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r2 = (org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars[]) $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : $r2 = (org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars[]) $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.values : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars$VarType type>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars$VarType type> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getType : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : $i0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int intValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : $i0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int intValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : return $i0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : return $i0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumRegistry : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HELIUM_REGISTRY>
org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumRegistry : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HELIUM_REGISTRY> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumRegistry : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumRegistry : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r8 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r8 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $r8 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $r8 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r9 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r9 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z2 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z2 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if r1 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if r1 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z0 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[A-Za-z]:\\\\.*")
org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[A-Za-z]:\\\\.*") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r3
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumRegistry : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getHeliumRegistry : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CREDENTIALS_PERSIST>
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CREDENTIALS_PERSIST> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z2 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z2 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $r7 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $r7 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z3 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z3 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getMongoDatabase : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_MONGO_DATABASE>
org.apache.zeppelin.conf.ZeppelinConfiguration.getMongoDatabase : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_MONGO_DATABASE> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getMongoDatabase : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getMongoDatabase : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getMongoDatabase : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getMongoDatabase : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : return $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = new java.net.URI
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = new java.net.URI >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r6
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r6 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>] >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r10 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r10 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r11 = new java.io.File
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r11 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r14)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r16 = $r11
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r16 = $r11 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke r16.<java.io.File: java.net.URI toURI()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke r16.<java.io.File: java.net.URI toURI()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r18 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r18 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r18
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r18 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r20 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r20 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r21 = virtualinvoke $r20.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r21 = virtualinvoke $r20.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r22 = interfaceinvoke $r19.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r21)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r22 = interfaceinvoke $r19.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r21) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r22.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r22.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r2.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r2.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r5 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r6 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r6 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r10
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r10 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r3 != $r2
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r3 != $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1 >>>>>>>> org.apache.zeppelin.notebook.Note$1.run : $r2 = r0.<org.apache.zeppelin.notebook.Note$1: org.apache.zeppelin.notebook.Note this$0>
org.apache.zeppelin.notebook.Note$1.run : $r2 = r0.<org.apache.zeppelin.notebook.Note$1: org.apache.zeppelin.notebook.Note this$0> >>>>>>>> org.apache.zeppelin.notebook.Note$1.run : $r3 = r0.<org.apache.zeppelin.notebook.Note$1: org.apache.zeppelin.user.AuthenticationInfo val$subject>
org.apache.zeppelin.notebook.Note$1.run : $r3 = r0.<org.apache.zeppelin.notebook.Note$1: org.apache.zeppelin.user.AuthenticationInfo val$subject> >>>>>>>> org.apache.zeppelin.notebook.Note$1.run : virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>($r3)
org.apache.zeppelin.notebook.Note$1.run : virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2 = staticinvoke <org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo newInstance()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2 = staticinvoke <org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo newInstance()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo.newInstance : $r0 = new org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo
org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo.newInstance : $r0 = new org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo.newInstance : specialinvoke $r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: void <init>()>()
org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo.newInstance : specialinvoke $r0.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo.newInstance : return $r0
org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo.newInstance : return $r0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: java.lang.String name> = "Notebook Path"
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: java.lang.String name> = "Notebook Path" >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : $r4 = <org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo$Type: org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo$Type INPUT>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : $r4 = <org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo$Type: org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo$Type INPUT> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo$Type type> = $r4
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo$Type type> = $r4 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: java.util.List value> = $r5
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: java.util.List value> = $r5 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getNotebookDirPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getNotebookDirPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : $r1 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : $r1 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : return $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getNotebookDirPath : return $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: java.lang.String selected> = $r6
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : r2.<org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo: java.lang.String selected> = $r6 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : return r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getSettings : return r3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r1 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r1.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : specialinvoke $r1.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r2 = $r1
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r8 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r3 = $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : entermonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $r9 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor r3
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return r2]
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : goto [?= return r2] >>>>>>>> org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return r2
org.apache.zeppelin.notebook.Note.generateParagraphsInfo : return r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r2 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Note.getUserNote : $r2 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r2.<org.apache.zeppelin.notebook.Note: void <init>()>()
org.apache.zeppelin.notebook.Note.getUserNote : specialinvoke $r2.<org.apache.zeppelin.notebook.Note: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3 = $r2
org.apache.zeppelin.notebook.Note.getUserNote : r3 = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getName : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r1
org.apache.zeppelin.notebook.Note.getName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r2
org.apache.zeppelin.notebook.Note.getName : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r7
org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.lang.String name> = $r7 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r8 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r8
org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r2 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r2 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r3
org.apache.zeppelin.notebook.Note.getConfig : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r9
org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.util.Map config> = $r9 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r10 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>()
org.apache.zeppelin.notebook.Note.getUserNote : $r10 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getAngularObjects()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.getAngularObjects : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1
org.apache.zeppelin.notebook.Note.getAngularObjects : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r10
org.apache.zeppelin.notebook.Note.getUserNote : r3.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r10 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $r11 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getUserNote : $r11 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.getUserNote : r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.getUserNote : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0
org.apache.zeppelin.notebook.Note.getUserNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getUserNote : return r3
org.apache.zeppelin.notebook.Note.getUserNote : return r3 >>>>>>>> org.apache.zeppelin.notebook.Note.isPersonalizedMode : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.isPersonalizedMode : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isPersonalizedMode : r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("personalizedMode")
org.apache.zeppelin.notebook.Note.isPersonalizedMode : r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("personalizedMode") >>>>>>>> org.apache.zeppelin.notebook.Note.isPersonalizedMode : if null == r1
org.apache.zeppelin.notebook.Note.isPersonalizedMode : if null == r1 >>>>>>>> org.apache.zeppelin.notebook.Note.isPersonalizedMode : $z1 = 0
org.apache.zeppelin.notebook.Note.isPersonalizedMode : $z1 = 0 >>>>>>>> org.apache.zeppelin.notebook.Note.isPersonalizedMode : return $z1
org.apache.zeppelin.notebook.Note.isPersonalizedMode : return $z1 >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void startDelayedPersistTimer(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1)
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void startDelayedPersistTimer(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : r3 = r0
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : r3 = r0 >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : entermonitor r0
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : entermonitor r0 >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist>
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist> >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : if $r6 == null
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : if $r6 == null >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r7 = <org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledThreadPoolExecutor delayedPersistThreadPool>
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r7 = <org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledThreadPoolExecutor delayedPersistThreadPool> >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r4 = new org.apache.zeppelin.notebook.Note$1
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r4 = new org.apache.zeppelin.notebook.Note$1 >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : specialinvoke $r4.<org.apache.zeppelin.notebook.Note$1: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1)
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : specialinvoke $r4.<org.apache.zeppelin.notebook.Note$1: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $l1 = (long) i0
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $l1 = (long) i0 >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r9 = virtualinvoke $r7.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, $l1, $r8)
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : $r9 = virtualinvoke $r7.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, $l1, $r8) >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist> = $r9
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist> = $r9 >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : exitmonitor r3
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : goto [?= return]
org.apache.zeppelin.notebook.Note.startDelayedPersistTimer : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Note.onOutputUpdate : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.onOutputUpdate : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.onOutputUpdate : if $r4 == null
org.apache.zeppelin.notebook.Note.onOutputUpdate : if $r4 == null >>>>>>>> org.apache.zeppelin.notebook.repo.GitNotebookRepo.save : specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2)
org.apache.zeppelin.notebook.repo.GitNotebookRepo.save : specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r1, r2) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r3 = new com.google.gson.GsonBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r3 = new com.google.gson.GsonBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r3.<com.google.gson.GsonBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r3.<com.google.gson.GsonBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r9 = interfaceinvoke r7.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r13, $r8)
