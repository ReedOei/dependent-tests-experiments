org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r3 = "getId" >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r8 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sleep")
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sleep") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z1 == 0
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r12 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ")
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r21 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r14 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r7 = $r14 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r15 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r15 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r16 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r16 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r17 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl2: ")
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl2: ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r16, $r20)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r16, $r20) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r6 = $r15
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r6 = $r15 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : goto [?= $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()]
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : goto [?= $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $r27 == null
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $r27 == null >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r28 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : if $r27 == null >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : return r6
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r28 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r29 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r29 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getParagraphId()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r30 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: java.lang.String getParagraphId()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : interfaceinvoke $r28.<org.apache.zeppelin.resource.ResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($r29, $r30, "result", r6)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : interfaceinvoke $r28.<org.apache.zeppelin.resource.ResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($r29, $r30, "result", r6) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : return r6
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r21 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r22 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r22 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r23 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl2: ")
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl2: ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r21.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r22, $r26)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r21.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r22, $r26) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r6 = $r21
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r6 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r12 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r13 = $r12[1]
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r12 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r14 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r13 = $r12[1] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r13 = $r12[1] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r14 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $l2 = (long) $i1
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r14 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l2)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r14 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l2) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : goto [?= $r15 = new org.apache.zeppelin.interpreter.InterpreterResult]
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l2) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r14 := @caughtexception
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : goto [?= $r15 = new org.apache.zeppelin.interpreter.InterpreterResult] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r15 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r8 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r4 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r4 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r5 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r4, $r11)
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : specialinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r4, $r11) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r6 = $r8
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : r6 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : goto [?= $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()]
org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : goto [?= $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()] >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter2.interpret : $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
