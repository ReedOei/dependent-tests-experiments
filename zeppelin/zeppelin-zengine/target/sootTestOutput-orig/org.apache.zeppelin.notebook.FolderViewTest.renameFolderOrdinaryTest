org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getNameWithoutPath : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getNameWithoutPath : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Note.getNameWithoutPath : if i0 >= 0 goto $i1 = i0 + 1
org.apache.zeppelin.notebook.Note.getNameWithoutPath : $i1 = i0 + 1
org.apache.zeppelin.notebook.FolderView.renameFolder : return r5
org.apache.zeppelin.notebook.FolderView.renameFolder : virtualinvoke r5.<org.apache.zeppelin.notebook.Folder: void rename(java.lang.String)>(r4)
org.apache.zeppelin.notebook.FolderView.renameFolder : $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.apache.zeppelin.notebook.FolderView.renameFolder : r4 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.renameFolder : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.FolderView.renameFolder : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.renameFolder : r3 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.renameFolder : r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r3)
org.apache.zeppelin.notebook.FolderView.renameFolder : $r7 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.renameFolder : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r3)
org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor r4
org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>()
org.apache.zeppelin.notebook.FolderView.getFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getFolder : r2 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Note.getFolderId : return r2
org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getFolderId : return "/"
org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1)
org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0 goto r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r16 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r14 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r8 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r6 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r10 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void merge(org.apache.zeppelin.notebook.Folder)>(r1)
org.apache.zeppelin.notebook.FolderView.onFolderRenamed : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Folder.addNote : exitmonitor r3
org.apache.zeppelin.notebook.Folder.addNote : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1
org.apache.zeppelin.notebook.Folder.merge : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.merge : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.util.List getNotes()>()
org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r1
org.apache.zeppelin.notebook.Note.setName : $r3 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47)
org.apache.zeppelin.notebook.Note.setName : r1 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String normalizeNoteName(java.lang.String)>(r1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)", "org.apache.zeppelin.notebook.utility.IdHashes.encode")]
org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger
org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : return r4
org.apache.zeppelin.notebook.Note.normalizeNoteName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : $i0 = virtualinvoke r4.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Note.normalizeNoteName : r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Note.normalizeNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.FolderView.hasFolder : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Folder.removeChild : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.removeChild : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList
org.apache.zeppelin.notebook.FolderView.removeFolder : virtualinvoke r10.<org.apache.zeppelin.notebook.Folder: void removeChild(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolder : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.removeFolder : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.removeFolder : if r3 == null goto return
org.apache.zeppelin.notebook.FolderView.removeFolder : exitmonitor r2
org.apache.zeppelin.notebook.FolderView.removeFolder : r10 = virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder getParent()>()
org.apache.zeppelin.notebook.FolderView.removeFolder : $r9 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.removeFolder : $r11 = virtualinvoke r10.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/"
org.apache.zeppelin.notebook.Folder.getParentFolderId : if i0 >= 0 goto $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.countNotes : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.FolderViewTest.createNote : return r2
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.FolderView folderView>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r1 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.FolderView.createFolder : $r12 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()
org.apache.zeppelin.notebook.FolderView.createFolder : return r2
org.apache.zeppelin.notebook.FolderView.createFolder : $r9 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor r3
org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0)
org.apache.zeppelin.notebook.FolderView.createFolder : r5 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.createFolder : $r7 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>(r2)
org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = new org.apache.zeppelin.notebook.Folder
org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $i0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: int countNotes()>()
org.apache.zeppelin.notebook.FolderView.countNotes : $i1 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: int countNotes()>()
org.apache.zeppelin.notebook.FolderView.countNotes : return i0
org.apache.zeppelin.notebook.FolderView.countNotes : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.FolderView.countNotes : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.countNotes : i0 = 0
org.apache.zeppelin.notebook.Folder.addNotes : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.addNotes : exitmonitor r2
org.apache.zeppelin.notebook.Folder.addNotes : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Folder.addNotes : $r6 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNotes : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : $r12 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r5.<org.apache.zeppelin.notebook.Note: void setName(java.lang.String)>(r7)
org.apache.zeppelin.notebook.Folder.rename : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.rename : $r16 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Folder.rename : r6 = virtualinvoke r5.<org.apache.zeppelin.notebook.Note: java.lang.String getNameWithoutPath()>()
org.apache.zeppelin.notebook.Folder.rename : $r10 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.rename : virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: void notifyRenamed(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Folder.rename : $r9 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Folder.rename : $r13 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.rename : exitmonitor r3
org.apache.zeppelin.notebook.Folder.rename : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.rename : $r21 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.rename : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.rename : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.getParent : $r1 = r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent>
org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1
org.apache.zeppelin.notebook.Note.getName : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/"
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.FolderView.countFolders : $r1 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.Folder.notifyRenamed : $r4 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.Folder.notifyRenamed : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Folder.notifyRenamed : interfaceinvoke r3.<org.apache.zeppelin.notebook.FolderListener: void onFolderRenamed(org.apache.zeppelin.notebook.Folder,java.lang.String)>(r0, r1)
org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id>
org.apache.zeppelin.notebook.Folder.addChild : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0 goto $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
