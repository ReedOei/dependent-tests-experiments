org.apache.zeppelin.notebook.NotebookTest.delete : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if $z0 == 0
org.apache.zeppelin.notebook.NotebookTest.delete : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>()
org.apache.zeppelin.notebook.NotebookTest.delete : $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if $z2 == 0
org.apache.zeppelin.notebook.NotebookTest.delete : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>()
org.apache.zeppelin.notebook.NotebookTest.delete : r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if r2 == null
org.apache.zeppelin.notebook.NotebookTest.delete : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : $i2 = lengthof r2
org.apache.zeppelin.notebook.NotebookTest.delete : $i2 = lengthof r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if $i2 <= 0
org.apache.zeppelin.notebook.NotebookTest.delete : if $i2 <= 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : r3 = r2
org.apache.zeppelin.notebook.NotebookTest.delete : r3 = r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : i0 = lengthof r3
org.apache.zeppelin.notebook.NotebookTest.delete : i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : i1 = 0
org.apache.zeppelin.notebook.NotebookTest.delete : i1 = 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if i1 >= i0
org.apache.zeppelin.notebook.NotebookTest.delete : if i1 >= i0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : r4 = r3[i1]
org.apache.zeppelin.notebook.NotebookTest.delete : r4 = r3[i1] >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookTest: void delete(java.io.File)>(r4)
org.apache.zeppelin.notebook.NotebookTest.delete : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookTest: void delete(java.io.File)>(r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : virtualinvoke r1.<java.io.File: boolean delete()>()
org.apache.zeppelin.notebook.NotebookTest.delete : virtualinvoke r1.<java.io.File: boolean delete()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= return]
org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : i1 = i1 + 1
org.apache.zeppelin.notebook.NotebookTest.delete : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= (branch)]
org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r8 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r8 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $r8 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $r8 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r9 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r9 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z2 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z2 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if r1 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if r1 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z0 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[A-Za-z]:\\\\.*")
org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[A-Za-z]:\\\\.*") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r7
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r7 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r3
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1 = newarray (java.lang.Object)[1]
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CONF_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CONF_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1[0] = $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1[0] = $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/interpreter.json", $r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/interpreter.json", $r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return r1
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_JSON>
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_JSON> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r15 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r15 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r44 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r44 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r45 = interfaceinvoke $r44.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r45 = interfaceinvoke $r44.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r46 = interfaceinvoke $r45.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r46 = interfaceinvoke $r45.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z6 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r54 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r54 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r55 = interfaceinvoke $r54.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r55 = interfaceinvoke $r54.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r56 = interfaceinvoke $r55.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r56 = interfaceinvoke $r55.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z7 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z7 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z7 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r70 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r70 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r71 = interfaceinvoke $r70.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r71 = interfaceinvoke $r70.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r72 = interfaceinvoke $r71.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r72 = interfaceinvoke $r71.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z9 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z9 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z9 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z9 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r18 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r18 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r17, $r18)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r80 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r80 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $i2 = interfaceinvoke $r80.<java.util.Map: int size()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $i2 = interfaceinvoke $r80.<java.util.Map: int size()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if 0 != $i2
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if 0 != $i2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r81 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r81 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r81.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r81.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r82 = $r81
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r82 = $r81 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r83 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r83 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r84 = interfaceinvoke $r83.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r84 = interfaceinvoke $r83.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r85 = interfaceinvoke $r84.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r85 = interfaceinvoke $r84.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z10 = interfaceinvoke r85.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z10 = interfaceinvoke r85.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z10 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z10 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r91 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r91 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i3 = lengthof r91
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i3 = lengthof r91 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if i4 >= i3
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if i4 >= i3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r92 = r91[i4]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r92 = r91[i4] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r93 = interfaceinvoke r82.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r92)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r93 = interfaceinvoke r82.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r92) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r94 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r93
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r94 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r93 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r95 = $r94
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r95 = $r94 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if null == $r94
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if null == $r94 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = i4 + 1
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = i4 + 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= (branch)]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r99 = interfaceinvoke r82.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r99 = interfaceinvoke r82.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r100 = interfaceinvoke $r99.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r100 = interfaceinvoke $r99.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z11 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z11 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z11 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z11 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r1 = $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r1 = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : entermonitor $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : entermonitor $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r6 = new org.apache.zeppelin.interpreter.InterpreterInfoSaving
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r6 = new org.apache.zeppelin.interpreter.InterpreterInfoSaving >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2 = $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterBindings> = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterBindings> = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterSettings> = $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterSettings> = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List interpreterRepositories>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List interpreterRepositories> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.List interpreterRepositories> = $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.List interpreterRepositories> = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: com.google.gson.Gson gson>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r3 = virtualinvoke $r10.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r3 = virtualinvoke $r10.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : goto [?= $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : goto [?= $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r13 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r13 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r12, $r13)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r12, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r15 = newarray (java.nio.file.attribute.FileAttribute)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r15 = newarray (java.nio.file.attribute.FileAttribute)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r14, $r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r14, $r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r17 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r17 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r18 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r18 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r19 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r17, $r18)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r19 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>($r20, r19)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>($r20, r19) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r22 = new java.io.FileOutputStream
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r22 = new java.io.FileOutputStream >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r24 = interfaceinvoke $r23.<java.nio.file.Path: java.io.File toFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r24 = interfaceinvoke $r23.<java.nio.file.Path: java.io.File toFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r24, 0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r24, 0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r25 = $r22
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r25 = $r22 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r26 = new java.io.OutputStreamWriter
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r26 = new java.io.OutputStreamWriter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r26.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r25)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r26.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r25) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r27 = $r26
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r27 = $r26 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>(r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: void close()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r25.<java.io.FileOutputStream: void close()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r25.<java.io.FileOutputStream: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r106 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r106 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r107 = interfaceinvoke $r106.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r107 = interfaceinvoke $r106.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r108 = interfaceinvoke $r107.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r108 = interfaceinvoke $r107.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z12 = interfaceinvoke r108.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z12 = interfaceinvoke r108.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z12 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z12 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "name should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "name should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "interpreterInfos should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "interpreterInfos should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "dependencies should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "dependencies should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "option should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "option should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "properties should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "properties should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r8 = $r21
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r8 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : entermonitor $r21
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : entermonitor $r21 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $z1 = interfaceinvoke $r22.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $z1 = interfaceinvoke $r22.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r36 = new org.apache.zeppelin.interpreter.InterpreterSetting
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r36 = new org.apache.zeppelin.interpreter.InterpreterSetting >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : specialinvoke $r36.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>(r1, null, r2, r5, r3, r4, r6, r7)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : specialinvoke $r36.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>(r1, null, r2, r5, r3, r4, r6, r7) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.util.Random
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.util.Random >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.util.Random: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r2 = $r1
org.apache.zeppelin.notebook.utility.IdHashes.encode : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = lengthof $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = lengthof $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>($r14)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = $r10
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = $r10 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r15.<java.math.BigInteger: void <init>(java.lang.String)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r15.<java.math.BigInteger: void <init>(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = $r15
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = $r15 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>($i2)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i3 = virtualinvoke r9.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i3 = virtualinvoke r9.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c4 = $r17[$i3]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c4 = $r17[$i3] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r20.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r20
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r20 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r24
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r24 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r9 = $r36
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r9 = $r36 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r37 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r37 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : exitmonitor r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : exitmonitor r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : goto [?= $i0 = interfaceinvoke r3.<java.util.List: int size()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : goto [?= $i0 = interfaceinvoke r3.<java.util.List: int size()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $i0 <= 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $i0 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r40 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r40 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : virtualinvoke r9.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r40)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : virtualinvoke r9.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r40) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : return r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : return r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(".")
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(".") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : if $i0 < 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : if $i0 < 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "reference name should be not null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "reference name should be not null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(org.apache.zeppelin.interpreter.InterpreterSetting)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(org.apache.zeppelin.interpreter.InterpreterSetting)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r8 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r8 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r10 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r10 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies>
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : if $r1 != null
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : if $r1 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies>
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : return $r3
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : return $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r10
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r11 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r11 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r3 = $r11
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r3 = $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r13 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r13 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties>
org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r14 = (java.util.Map) $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r14 = (java.util.Map) $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Properties convertInterpreterProperties(java.util.Map)>($r14)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Properties convertInterpreterProperties(java.util.Map)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r2 = new java.util.Properties
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r2 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : specialinvoke $r2.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : specialinvoke $r2.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r3 = $r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r3 = $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : return r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r15 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r15 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : if $r2 != null
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : if $r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r3
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterOption: org.apache.zeppelin.interpreter.InterpreterOption fromInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>($r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterOption: org.apache.zeppelin.interpreter.InterpreterOption fromInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r16 = new org.apache.zeppelin.interpreter.InterpreterSetting
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r16 = new org.apache.zeppelin.interpreter.InterpreterSetting >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r17 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r17 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r18 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r18 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getPath : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String path>
org.apache.zeppelin.interpreter.InterpreterSetting.getPath : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String path> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getPath : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getPath : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner getInterpreterRunner()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner getInterpreterRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r16.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>($r17, $r18, r2, r4, r3, r5, $r19, $r20)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r16.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>($r17, $r18, r2, r4, r3, r5, $r19, $r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r6 = $r16
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r6 = $r16 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r21)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r21) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setName(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setName(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setName : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setName : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setGroup(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setGroup(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setGroup : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setGroup : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void appendDependencies(java.util.List)>(r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void appendDependencies(java.util.List)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>(r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterOption : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterOption : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setProperties(java.util.Properties)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setProperties(java.util.Properties)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setProperties : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setProperties : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getId : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getId : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getId : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getId : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadInterpreterDependencies(org.apache.zeppelin.interpreter.InterpreterSetting)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadInterpreterDependencies(org.apache.zeppelin.interpreter.InterpreterSetting)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r2 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status DOWNLOADING_DEPENDENCIES>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r2 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status DOWNLOADING_DEPENDENCIES> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setStatus : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setStatus : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setErrorReason : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String errorReason> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setErrorReason : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String errorReason> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r3 = $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r3 = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : entermonitor $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : entermonitor $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r10 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$3
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r10 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.interpreter.InterpreterSetting)>(r0, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.interpreter.InterpreterSetting)>(r0, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r4 = $r10
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r4 = $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r4.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r4.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : exitmonitor r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : exitmonitor r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r1 = new java.io.File
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r1 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r10 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration access$000(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r10 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration access$000(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration>
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : return $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r11 = virtualinvoke $r10.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r11 = virtualinvoke $r10.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LOCALREPO>
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LOCALREPO> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r15 = virtualinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r15 = virtualinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r17)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r3 = $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r3 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r21 = virtualinvoke $r20.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r21 = virtualinvoke $r20.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if r21 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if r21 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r5 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r5 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r44 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r44 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r45 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r45 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r44.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r45)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r44.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r45) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r46 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r46 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r46.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r46.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r47 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r47 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r48 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map access$300(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r47)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r48 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map access$300(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r47) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : return $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r49 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r49 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r50 = virtualinvoke $r49.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r50 = virtualinvoke $r49.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r51 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r51 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : return r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : return r6 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : return $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = new java.net.URI
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = new java.net.URI >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r6
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r6 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>] >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r10 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r10 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r11 = new java.io.File
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r11 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r14)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r16 = $r11
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r16 = $r11 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke r16.<java.io.File: java.net.URI toURI()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke r16.<java.io.File: java.net.URI toURI()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r18 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r18 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r18
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r18 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r20 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r20 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r21 = virtualinvoke $r20.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r21 = virtualinvoke $r20.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r22 = interfaceinvoke $r19.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r21)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r22 = interfaceinvoke $r19.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r21) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r22.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r22.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.init : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : if $r1 != null
org.apache.zeppelin.notebook.NotebookAuthorization.init : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : $r12 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.init : $r12 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : return $r12
org.apache.zeppelin.notebook.NotebookAuthorization.init : return $r12 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CREDENTIALS_PERSIST>
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CREDENTIALS_PERSIST> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z2 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z2 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $r7 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $r7 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z3 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z3 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1 = newarray (java.lang.Object)[1]
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1[0] = $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1[0] = $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/credentials.json", $r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/credentials.json", $r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo>
org.apache.zeppelin.notebook.Notebook.loadAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo> >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : r2 = interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.Notebook.loadAllNotes : r2 = interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r2.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r2.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r5 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r6 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r6 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r10
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r10 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r3 != $r2
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r3 != $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject[] getChildren()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject[] getChildren()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r9 = new java.util.LinkedList
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r9 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : specialinvoke $r9.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : specialinvoke $r9.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r4 = $r9
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r4 = $r9 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r5 = r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r5 = r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i0 = lengthof r5
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i0 = lengthof r5 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if i1 >= i0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if i1 >= i0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : return r4
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : return r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.loadAllNotes : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.loadAllNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.loadAllNotes : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Notebook.createNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.Notebook.createNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r5 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING>
org.apache.zeppelin.notebook.Notebook.createNote : $r5 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $z0 = virtualinvoke $r4.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r5)
org.apache.zeppelin.notebook.Notebook.createNote : $z0 = virtualinvoke $r4.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.createNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.createNote : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r7 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getDefaultInterpreterSettingList()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r7 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getDefaultInterpreterSettingList()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r1 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r1.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r1.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r2 = $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r7 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r7 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r3 = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r3 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r1 = $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r1 = $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r14 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r14 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r14.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r14.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r14
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r14 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r15 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r15 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r15.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r3 = $r15
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r3 = $r15 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r18
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r18 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getGroup()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group>
org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r7)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r20 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r20 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r21 = (java.util.List) $r20
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r21 = (java.util.List) $r20 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i0 = lengthof r22
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i0 = lengthof r22 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if i1 >= i0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r8 = r22[i1]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r8 = r22[i1] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r23 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r23 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r9 = (java.util.List) $r23
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r9 = (java.util.List) $r23 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if null == r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if null == r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = i1 + 1
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= (branch)]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r25 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r25 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r25.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r25.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r26 = $r25
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r26 = $r25 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r27 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r27 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z5 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r30 = (java.util.List) $r29
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r30 = (java.util.List) $r29 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r31 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r31 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z6 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r32 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r32 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r33 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r32
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r33 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r32 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r33)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r33) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r34 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$5
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r34 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r34.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r34.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r26, $r34)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r26, $r34) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = (org.apache.zeppelin.interpreter.InterpreterSetting) r1
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = (org.apache.zeppelin.interpreter.InterpreterSetting) r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) r2
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: int compare(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterSetting)>($r3, $r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: int compare(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterSetting)>($r3, $r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : return $i0
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r26)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r26) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r6 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r6 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r9 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r9 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r10)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z2 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r12 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r12 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : return r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : return r2 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note createNote(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>($r7, r1)
org.apache.zeppelin.notebook.Notebook.createNote : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note createNote(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>($r7, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r3 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Notebook.createNote : $r3 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo>
org.apache.zeppelin.notebook.Notebook.createNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterFactory replFactory>
org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterFactory replFactory> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.createNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Notebook.createNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.user.Credentials credentials>
org.apache.zeppelin.notebook.Notebook.createNote : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.user.Credentials credentials> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r8, $r9, $r10, $r11, $r12, r0)
org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r8, $r9, $r10, $r11, $r12, r0) >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r4 = $r3
org.apache.zeppelin.notebook.Notebook.createNote : r4 = $r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders>
org.apache.zeppelin.notebook.Notebook.createNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r13)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r13) >>>>>>>> org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1
org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.createNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r5 = $r14
org.apache.zeppelin.notebook.Notebook.createNote : r5 = $r14 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : entermonitor $r14
org.apache.zeppelin.notebook.Notebook.createNote : entermonitor $r14 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.createNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r16 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r16 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r4)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : exitmonitor r5
org.apache.zeppelin.notebook.Notebook.createNote : exitmonitor r5 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : goto [?= (branch)]
org.apache.zeppelin.notebook.Notebook.createNote : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : if r1 == null
org.apache.zeppelin.notebook.Notebook.createNote : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r19 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r19 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r20 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r20 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: void bindInterpretersToNote(java.lang.String,java.lang.String,java.util.List)>($r19, $r20, r1)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: void bindInterpretersToNote(java.lang.String,java.lang.String,java.util.List)>($r19, $r20, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : r2 = $r4
org.apache.zeppelin.notebook.Notebook.getNote : r2 = $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : entermonitor $r4
org.apache.zeppelin.notebook.Notebook.getNote : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Notebook.getNote : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r7 = (org.apache.zeppelin.notebook.Note) $r6
org.apache.zeppelin.notebook.Notebook.getNote : $r7 = (org.apache.zeppelin.notebook.Note) $r6 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : exitmonitor r2
org.apache.zeppelin.notebook.Notebook.getNote : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : return $r7
org.apache.zeppelin.notebook.Notebook.getNote : return $r7 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if r4 == null
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if r4 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r5 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r5 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getNoteInterpreterSettingBinding(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getNoteInterpreterSettingBinding(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r2 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r2 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : specialinvoke $r2.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : specialinvoke $r2.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r3 = $r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r3 = $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r4 = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r4 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : entermonitor $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : entermonitor $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r5 = (java.util.List) $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r5 = (java.util.List) $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : if r5 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : if r5 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : exitmonitor r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : exitmonitor r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : goto [?= return r3]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : goto [?= return r3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : return r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r7 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r3 = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r3 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : return r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : return r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r12 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r12 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreters(java.lang.String,java.lang.String,java.util.List)>(r1, $r12, r3)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreters(java.lang.String,java.lang.String,java.util.List)>(r1, $r12, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreters : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void putNoteInterpreterSettingBinding(java.lang.String,java.lang.String,java.util.List)>(r1, r2, r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreters : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void putNoteInterpreterSettingBinding(java.lang.String,java.lang.String,java.util.List)>(r1, r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r4 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : specialinvoke $r4.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : specialinvoke $r4.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r5 = $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r5 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r6 = $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r6 = $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : entermonitor $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : entermonitor $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r7 = (java.util.List) $r14
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r7 = (java.util.List) $r14 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if r7 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if r7 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r18 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r18 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z3 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : exitmonitor r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : exitmonitor r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r21 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.createNote : $r21 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r22 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r22 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r21.<org.apache.zeppelin.notebook.NotebookAuthorization: void setNewNotePermissions(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r22, r2)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r21.<org.apache.zeppelin.notebook.NotebookAuthorization: void setNewNotePermissions(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r22, r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z0 = staticinvoke <org.apache.zeppelin.user.AuthenticationInfo: boolean isAnonymous(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z0 = staticinvoke <org.apache.zeppelin.user.AuthenticationInfo: boolean isAnonymous(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r23 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r23 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r23.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r23.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void stopDelayedPersistTimer()>()
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void stopDelayedPersistTimer()>() >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : r2 = r0
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : r2 = r0 >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : entermonitor r0
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : entermonitor r0 >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist>
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist> >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : if $r4 != null
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : if $r4 != null >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : exitmonitor r2
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r3 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Note.persist : $r3 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void snapshotAngularObjectRegistry(java.lang.String)>($r3)
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void snapshotAngularObjectRegistry(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r2 = new java.util.HashMap
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r2 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r2
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r3 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r9)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r3 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : virtualinvoke r3.<java.util.LinkedList: boolean addAll(java.util.Collection)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : virtualinvoke r3.<java.util.LinkedList: boolean addAll(java.util.Collection)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r5 = (java.lang.String) $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r5 = (java.lang.String) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting get(java.lang.String)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting get(java.lang.String)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if r6 != null
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if r6 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if r3 == null
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if r3 == null >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $i0 != 0
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $z0 == 0
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r10
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r10 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r11 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r11 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r1, $r11)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r1, $r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterProcessKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterProcessKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z0 = $r5.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z0 = $r5.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z1 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z1 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r4 = "shared_process"
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r4 = "shared_process" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : return r4
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : return r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r5 = interfaceinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterGroupFactory: org.apache.zeppelin.interpreter.InterpreterGroup createInterpreterGroup(java.lang.String,org.apache.zeppelin.interpreter.InterpreterOption)>(r4, $r14)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r5 = interfaceinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterGroupFactory: org.apache.zeppelin.interpreter.InterpreterGroup createInterpreterGroup(java.lang.String,org.apache.zeppelin.interpreter.InterpreterOption)>(r4, $r14) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if r2 != null
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r6 = new org.apache.zeppelin.interpreter.InterpreterGroup
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r6 = new org.apache.zeppelin.interpreter.InterpreterGroup >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterGroup: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterGroup: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r3 = $r6
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r3 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isRemote()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isRemote()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r9 = new org.apache.zeppelin.display.AngularObjectRegistry
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r9 = new org.apache.zeppelin.display.AngularObjectRegistry >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener>
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r9.<org.apache.zeppelin.display.AngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener)>(r1, $r10)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r9.<org.apache.zeppelin.display.AngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener)>(r1, $r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r4 = $r9
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r4 = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>(r4)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : return r3
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r15.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r15.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r16 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r16 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r17 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create interpreter group with groupId:")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create interpreter group with groupId:") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r23.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r23.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r24.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r24.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r25 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r25 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r27 = (org.apache.zeppelin.interpreter.InterpreterGroup) $r26
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r27 = (org.apache.zeppelin.interpreter.InterpreterGroup) $r26 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r28 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r28 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r28.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r28.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : return r27
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : return r27 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r7 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r7 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r12 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r12 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r13 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r13 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r14 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r14 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r15 = virtualinvoke r7.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.List getAllWithGlobal(java.lang.String)>($r14)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r15 = virtualinvoke r7.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.List getAllWithGlobal(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index>
org.apache.zeppelin.notebook.Note.persist : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> >>>>>>>> org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r4.<org.apache.zeppelin.search.SearchService: void updateIndexDoc(org.apache.zeppelin.notebook.Note)>(r0)
org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r4.<org.apache.zeppelin.search.SearchService: void updateIndexDoc(org.apache.zeppelin.notebook.Note)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.Note.persist : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1)
org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r3 = new com.google.gson.GsonBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r3 = new com.google.gson.GsonBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r3.<com.google.gson.GsonBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r3.<com.google.gson.GsonBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r9 = interfaceinvoke r7.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r13, $r8)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r9 = interfaceinvoke r7.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r13, $r8) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z0 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z0 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: void createFolder()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: void createFolder()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r9)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r9) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r21 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r21 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r10 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(".note.json", $r21)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r10 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(".note.json", $r21) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r22 = interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r22 = interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r11 = interfaceinvoke $r22.<org.apache.commons.vfs2.FileContent: java.io.OutputStream getOutputStream(boolean)>(0)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r11 = interfaceinvoke $r22.<org.apache.commons.vfs2.FileContent: java.io.OutputStream getOutputStream(boolean)>(0) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r23 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r23 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r24 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r24 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r25 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r24)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r25 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r24) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r26 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>($r25)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r26 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void write(byte[])>($r26)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void write(byte[])>($r26) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void close()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r27 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r27 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r28 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r27)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r28 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r27) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: void moveTo(org.apache.commons.vfs2.FileObject)>($r28)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: void moveTo(org.apache.commons.vfs2.FileObject)>($r28) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteCreateEvent(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteCreateEvent(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : return r4
org.apache.zeppelin.notebook.Notebook.createNote : return r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : goto [?= $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>]
org.apache.zeppelin.notebook.Notebook.createNote : goto [?= $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r8.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r2)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r8.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : return r2
org.apache.zeppelin.notebook.Notebook.createNote : return r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r15 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r15 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r9 = (java.lang.String) $r15
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r9 = (java.lang.String) $r15 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : goto [?= $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.addNewParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.addNewParagraph : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph insertNewParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>($i0, r1)
org.apache.zeppelin.notebook.Note.addNewParagraph : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph insertNewParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>($i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph createParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertNewParagraph : r2 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph createParagraph(int,org.apache.zeppelin.user.AuthenticationInfo)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r2 = new org.apache.zeppelin.notebook.Paragraph
org.apache.zeppelin.notebook.Note.createParagraph : $r2 = new org.apache.zeppelin.notebook.Paragraph >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory>
org.apache.zeppelin.notebook.Note.createParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory> >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Note.createParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke $r2.<org.apache.zeppelin.notebook.Paragraph: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.scheduler.JobListener,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0, r0, $r4, $r5)
org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke $r2.<org.apache.zeppelin.notebook.Paragraph: void <init>(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.scheduler.JobListener,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0, r0, $r4, $r5) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("paragraph_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1)
org.apache.zeppelin.notebook.Paragraph.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.notebook.Paragraph.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.util.Random
org.apache.zeppelin.notebook.Paragraph.generateId : $r4 = new java.util.Random >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.util.Random: void <init>(long)>($l0)
org.apache.zeppelin.notebook.Paragraph.generateId : specialinvoke $r4.<java.util.Random: void <init>(long)>($l0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $i2 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $i2 = virtualinvoke $r4.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)
org.apache.zeppelin.notebook.Paragraph.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.generateId : return $r6
org.apache.zeppelin.notebook.Paragraph.generateId : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.beforeStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.beforeStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.beforeStatusChange : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : r4 = interfaceinvoke $r6.<org.apache.zeppelin.notebook.JobListenerFactory: org.apache.zeppelin.notebook.ParagraphJobListener getParagraphJobListener(org.apache.zeppelin.notebook.Note)>(r0)
org.apache.zeppelin.notebook.Note.beforeStatusChange : r4 = interfaceinvoke $r6.<org.apache.zeppelin.notebook.JobListenerFactory: org.apache.zeppelin.notebook.ParagraphJobListener getParagraphJobListener(org.apache.zeppelin.notebook.Note)>(r0) >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.getParagraphJobListener : $r2 = new org.apache.zeppelin.notebook.NotebookTest$3
org.apache.zeppelin.notebook.NotebookTest.getParagraphJobListener : $r2 = new org.apache.zeppelin.notebook.NotebookTest$3 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.getParagraphJobListener : specialinvoke $r2.<org.apache.zeppelin.notebook.NotebookTest$3: void <init>(org.apache.zeppelin.notebook.NotebookTest)>(r0)
org.apache.zeppelin.notebook.NotebookTest.getParagraphJobListener : specialinvoke $r2.<org.apache.zeppelin.notebook.NotebookTest$3: void <init>(org.apache.zeppelin.notebook.NotebookTest)>(r0) >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.getParagraphJobListener : return $r2
org.apache.zeppelin.notebook.NotebookTest.getParagraphJobListener : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : if r4 == null
org.apache.zeppelin.notebook.Note.beforeStatusChange : if r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.beforeStatusChange : interfaceinvoke r4.<org.apache.zeppelin.notebook.ParagraphJobListener: void beforeStatusChange(org.apache.zeppelin.scheduler.Job,org.apache.zeppelin.scheduler.Job$Status,org.apache.zeppelin.scheduler.Job$Status)>(r1, r2, r3)
org.apache.zeppelin.notebook.Note.beforeStatusChange : interfaceinvoke r4.<org.apache.zeppelin.notebook.ParagraphJobListener: void beforeStatusChange(org.apache.zeppelin.scheduler.Job,org.apache.zeppelin.scheduler.Job$Status,org.apache.zeppelin.scheduler.Job$Status)>(r1, r2, r3) >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r6 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : r4 = interfaceinvoke $r6.<org.apache.zeppelin.notebook.JobListenerFactory: org.apache.zeppelin.notebook.ParagraphJobListener getParagraphJobListener(org.apache.zeppelin.notebook.Note)>(r0)
org.apache.zeppelin.notebook.Note.afterStatusChange : r4 = interfaceinvoke $r6.<org.apache.zeppelin.notebook.JobListenerFactory: org.apache.zeppelin.notebook.ParagraphJobListener getParagraphJobListener(org.apache.zeppelin.notebook.Note)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if r4 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if r4 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : interfaceinvoke r4.<org.apache.zeppelin.notebook.ParagraphJobListener: void afterStatusChange(org.apache.zeppelin.scheduler.Job,org.apache.zeppelin.scheduler.Job$Status,org.apache.zeppelin.scheduler.Job$Status)>(r1, r2, r3)
org.apache.zeppelin.notebook.Note.afterStatusChange : interfaceinvoke r4.<org.apache.zeppelin.notebook.ParagraphJobListener: void afterStatusChange(org.apache.zeppelin.scheduler.Job,org.apache.zeppelin.scheduler.Job$Status,org.apache.zeppelin.scheduler.Job$Status)>(r1, r2, r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookTest$3.afterStatusChange : $r4 = r0.<org.apache.zeppelin.notebook.NotebookTest$3: org.apache.zeppelin.notebook.NotebookTest this$0>
org.apache.zeppelin.notebook.NotebookTest$3.afterStatusChange : $r4 = r0.<org.apache.zeppelin.notebook.NotebookTest$3: org.apache.zeppelin.notebook.NotebookTest this$0> >>>>>>>> org.apache.zeppelin.notebook.NotebookTest$3.afterStatusChange : $r5 = staticinvoke <org.apache.zeppelin.notebook.NotebookTest: org.apache.zeppelin.notebook.NotebookTest$StatusChangedListener access$000(org.apache.zeppelin.notebook.NotebookTest)>($r4)
org.apache.zeppelin.notebook.NotebookTest$3.afterStatusChange : $r5 = staticinvoke <org.apache.zeppelin.notebook.NotebookTest: org.apache.zeppelin.notebook.NotebookTest$StatusChangedListener access$000(org.apache.zeppelin.notebook.NotebookTest)>($r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.access$000 : $r1 = r0.<org.apache.zeppelin.notebook.NotebookTest: org.apache.zeppelin.notebook.NotebookTest$StatusChangedListener afterStatusChangedListener>
org.apache.zeppelin.notebook.NotebookTest.access$000 : $r1 = r0.<org.apache.zeppelin.notebook.NotebookTest: org.apache.zeppelin.notebook.NotebookTest$StatusChangedListener afterStatusChangedListener> >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.access$000 : return $r1
org.apache.zeppelin.notebook.NotebookTest.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest$3.afterStatusChange : if $r5 == null
org.apache.zeppelin.notebook.NotebookTest$3.afterStatusChange : if $r5 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : if $r7 == null
org.apache.zeppelin.notebook.Note.afterStatusChange : if $r7 == null >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.afterStatusChange : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = (org.apache.zeppelin.notebook.Paragraph) r1
org.apache.zeppelin.notebook.Note.afterStatusChange : $r9 = (org.apache.zeppelin.notebook.Paragraph) r1 >>>>>>>> org.apache.zeppelin.notebook.Note.afterStatusChange : interfaceinvoke $r8.<org.apache.zeppelin.notebook.NoteEventListener: void onParagraphStatusChange(org.apache.zeppelin.notebook.Paragraph,org.apache.zeppelin.scheduler.Job$Status)>($r9, r3)
org.apache.zeppelin.notebook.Note.afterStatusChange : interfaceinvoke $r8.<org.apache.zeppelin.notebook.NoteEventListener: void onParagraphStatusChange(org.apache.zeppelin.notebook.Paragraph,org.apache.zeppelin.scheduler.Job$Status)>($r9, r3) >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.onParagraphStatusChange : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : r3 = $r2
org.apache.zeppelin.notebook.Note.createParagraph : r3 = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> = r1
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : $r2 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : $r2 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> = $r2
org.apache.zeppelin.notebook.Paragraph.setAuthenticationInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : $r6 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Note.createParagraph : $r6 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUser : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user>
org.apache.zeppelin.notebook.Paragraph.getUser : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUser : return $r1
org.apache.zeppelin.notebook.Paragraph.getUser : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void addUser(org.apache.zeppelin.notebook.Paragraph,java.lang.String)>(r3, $r6)
org.apache.zeppelin.notebook.Note.createParagraph : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void addUser(org.apache.zeppelin.notebook.Paragraph,java.lang.String)>(r3, $r6) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.addUser : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.addUser : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.addUser : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
org.apache.zeppelin.notebook.Paragraph.addUser : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void setParagraphMagic(org.apache.zeppelin.notebook.Paragraph,int)>(r3, i0)
org.apache.zeppelin.notebook.Note.createParagraph : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void setParagraphMagic(org.apache.zeppelin.notebook.Paragraph,int)>(r3, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.setParagraphMagic : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : $i1 = interfaceinvoke $r3.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.setParagraphMagic : $i1 = interfaceinvoke $r3.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.setParagraphMagic : if $i1 <= 0
org.apache.zeppelin.notebook.Note.setParagraphMagic : if $i1 <= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.createParagraph : return r3
org.apache.zeppelin.notebook.Note.createParagraph : return r3 >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r2, i0)
org.apache.zeppelin.notebook.Note.insertNewParagraph : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void insertParagraph(org.apache.zeppelin.notebook.Paragraph,int)>(r2, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : r2 = $r4
org.apache.zeppelin.notebook.Note.insertParagraph : r2 = $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4
org.apache.zeppelin.notebook.Note.insertParagraph : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.insertParagraph : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1)
org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r1) >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor r2
org.apache.zeppelin.notebook.Note.insertParagraph : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>]
org.apache.zeppelin.notebook.Note.insertParagraph : goto [?= $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>] >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.insertParagraph : $r7 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : if $r7 == null
org.apache.zeppelin.notebook.Note.insertParagraph : if $r7 == null >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.Note.insertParagraph : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r8.<org.apache.zeppelin.notebook.NoteEventListener: void onParagraphCreate(org.apache.zeppelin.notebook.Paragraph)>(r1)
org.apache.zeppelin.notebook.Note.insertParagraph : interfaceinvoke $r8.<org.apache.zeppelin.notebook.NoteEventListener: void onParagraphCreate(org.apache.zeppelin.notebook.Paragraph)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphCreate : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.onParagraphCreate : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphCreate : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.onParagraphCreate : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphCreate : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.onParagraphCreate : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.onParagraphCreate : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.onParagraphCreate : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.insertNewParagraph : return r2
org.apache.zeppelin.notebook.Note.insertNewParagraph : return r2 >>>>>>>> org.apache.zeppelin.notebook.Note.addNewParagraph : return $r3
org.apache.zeppelin.notebook.Note.addNewParagraph : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setConfig : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> = r1
org.apache.zeppelin.notebook.Paragraph.setConfig : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : $r2 = new java.util.Date
org.apache.zeppelin.notebook.Paragraph.setText : $r2 = new java.util.Date >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r2.<java.util.Date: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.setText : specialinvoke $r2.<java.util.Date: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r2
org.apache.zeppelin.notebook.Paragraph.setText : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Date dateUpdated> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : if $r2 != null
org.apache.zeppelin.notebook.Note.getConfig : if $r2 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config>
org.apache.zeppelin.notebook.Note.getConfig : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Note.getConfig : return $r3
org.apache.zeppelin.notebook.Note.getConfig : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.setConfig : r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> = r1
org.apache.zeppelin.notebook.Note.setConfig : r0.<org.apache.zeppelin.notebook.Note: java.util.Map config> = r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void removeCron(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Notebook.refreshCron : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void removeCron(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeCron : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.quartz.Scheduler quartzSched>
org.apache.zeppelin.notebook.Notebook.removeCron : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.quartz.Scheduler quartzSched> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeCron : $r2 = new org.quartz.JobKey
org.apache.zeppelin.notebook.Notebook.removeCron : $r2 = new org.quartz.JobKey >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeCron : specialinvoke $r2.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>(r1, "note")
org.apache.zeppelin.notebook.Notebook.removeCron : specialinvoke $r2.<org.quartz.JobKey: void <init>(java.lang.String,java.lang.String)>(r1, "note") >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeCron : interfaceinvoke $r4.<org.quartz.Scheduler: boolean deleteJob(org.quartz.JobKey)>($r2)
org.apache.zeppelin.notebook.Notebook.removeCron : interfaceinvoke $r4.<org.quartz.Scheduler: boolean deleteJob(org.quartz.JobKey)>($r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeCron : goto [?= return]
org.apache.zeppelin.notebook.Notebook.removeCron : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.refreshCron : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r2 = $r11
org.apache.zeppelin.notebook.Notebook.refreshCron : r2 = $r11 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : entermonitor $r11
org.apache.zeppelin.notebook.Notebook.refreshCron : entermonitor $r11 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.refreshCron : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Notebook.refreshCron : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r3 = (org.apache.zeppelin.notebook.Note) $r13
org.apache.zeppelin.notebook.Notebook.refreshCron : r3 = (org.apache.zeppelin.notebook.Note) $r13 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : if r3 != null
org.apache.zeppelin.notebook.Notebook.refreshCron : if r3 != null >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r4 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : r4 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : if r4 != null
org.apache.zeppelin.notebook.Notebook.refreshCron : if r4 != null >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r14 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : $r14 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>("cron")
org.apache.zeppelin.notebook.Notebook.refreshCron : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>("cron") >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r5 = (java.lang.String) $r15
org.apache.zeppelin.notebook.Notebook.refreshCron : r5 = (java.lang.String) $r15 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : if r5 == null
org.apache.zeppelin.notebook.Notebook.refreshCron : if r5 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r16 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : $r16 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $i0 = virtualinvoke $r16.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : $i0 = virtualinvoke $r16.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : if $i0 != 0
org.apache.zeppelin.notebook.Notebook.refreshCron : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r17 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "org/apache/zeppelin/notebook/Notebook$CronJob")
org.apache.zeppelin.notebook.Notebook.refreshCron : $r17 = staticinvoke <org.quartz.JobBuilder: org.quartz.JobBuilder newJob(java.lang.Class)>(class "org/apache/zeppelin/notebook/Notebook$CronJob") >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r18 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>(r1, "note")
org.apache.zeppelin.notebook.Notebook.refreshCron : $r18 = virtualinvoke $r17.<org.quartz.JobBuilder: org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)>(r1, "note") >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r19 = virtualinvoke $r18.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("noteId", r1)
org.apache.zeppelin.notebook.Notebook.refreshCron : $r19 = virtualinvoke $r18.<org.quartz.JobBuilder: org.quartz.JobBuilder usingJobData(java.lang.String,java.lang.String)>("noteId", r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r6 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobDetail build()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : r6 = virtualinvoke $r19.<org.quartz.JobBuilder: org.quartz.JobDetail build()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r7 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getInfo()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : r7 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getInfo()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.getInfo : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : if $r2 != null
org.apache.zeppelin.notebook.Note.getInfo : if $r2 != null >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info>
org.apache.zeppelin.notebook.Note.getInfo : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map info> >>>>>>>> org.apache.zeppelin.notebook.Note.getInfo : return $r3
org.apache.zeppelin.notebook.Note.getInfo : return $r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cron", null)
org.apache.zeppelin.notebook.Notebook.refreshCron : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cron", null) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r8 = null
org.apache.zeppelin.notebook.Notebook.refreshCron : r8 = null >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r21 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : $r21 = staticinvoke <org.quartz.TriggerBuilder: org.quartz.TriggerBuilder newTrigger()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r22 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Notebook.refreshCron : $r22 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trigger_")
org.apache.zeppelin.notebook.Notebook.refreshCron : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trigger_") >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Notebook.refreshCron : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r26 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>($r25, "note")
org.apache.zeppelin.notebook.Notebook.refreshCron : $r26 = virtualinvoke $r21.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)>($r25, "note") >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r27 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>(r5)
org.apache.zeppelin.notebook.Notebook.refreshCron : $r27 = staticinvoke <org.quartz.CronScheduleBuilder: org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)>(r5) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r28 = virtualinvoke $r26.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r27)
org.apache.zeppelin.notebook.Notebook.refreshCron : $r28 = virtualinvoke $r26.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)>($r27) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r29 = virtualinvoke $r28.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(java.lang.String,java.lang.String)>(r1, "note")
org.apache.zeppelin.notebook.Notebook.refreshCron : $r29 = virtualinvoke $r28.<org.quartz.TriggerBuilder: org.quartz.TriggerBuilder forJob(java.lang.String,java.lang.String)>(r1, "note") >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r30 = virtualinvoke $r29.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>()
org.apache.zeppelin.notebook.Notebook.refreshCron : $r30 = virtualinvoke $r29.<org.quartz.TriggerBuilder: org.quartz.Trigger build()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : r8 = (org.quartz.CronTrigger) $r30
org.apache.zeppelin.notebook.Notebook.refreshCron : r8 = (org.quartz.CronTrigger) $r30 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : goto [?= (branch)]
org.apache.zeppelin.notebook.Notebook.refreshCron : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : if r8 == null
org.apache.zeppelin.notebook.Notebook.refreshCron : if r8 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : $r35 = r0.<org.apache.zeppelin.notebook.Notebook: org.quartz.Scheduler quartzSched>
org.apache.zeppelin.notebook.Notebook.refreshCron : $r35 = r0.<org.apache.zeppelin.notebook.Notebook: org.quartz.Scheduler quartzSched> >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : interfaceinvoke $r35.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r6, r8)
org.apache.zeppelin.notebook.Notebook.refreshCron : interfaceinvoke $r35.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>(r6, r8) >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : goto [?= exitmonitor r2]
org.apache.zeppelin.notebook.Notebook.refreshCron : goto [?= exitmonitor r2] >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : exitmonitor r2
org.apache.zeppelin.notebook.Notebook.refreshCron : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Notebook.refreshCron : goto [?= return]
org.apache.zeppelin.notebook.Notebook.refreshCron : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : $r7 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>()
org.apache.zeppelin.notebook.Notebook$CronJob.execute : $r7 = interfaceinvoke r1.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : $r8 = interfaceinvoke $r7.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>()
org.apache.zeppelin.notebook.Notebook$CronJob.execute : $r8 = interfaceinvoke $r7.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : r2 = virtualinvoke $r8.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("noteId")
org.apache.zeppelin.notebook.Notebook$CronJob.execute : r2 = virtualinvoke $r8.<org.quartz.JobDataMap: java.lang.String getString(java.lang.String)>("noteId") >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : $r9 = <org.apache.zeppelin.notebook.Notebook$CronJob: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.notebook.Notebook$CronJob.execute : $r9 = <org.apache.zeppelin.notebook.Notebook$CronJob: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : r3 = virtualinvoke $r9.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook$CronJob.execute : r3 = virtualinvoke $r9.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : virtualinvoke r3.<org.apache.zeppelin.notebook.Note: void runAll()>()
org.apache.zeppelin.notebook.Notebook$CronJob.execute : virtualinvoke r3.<org.apache.zeppelin.notebook.Note: void runAll()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.runAll : $r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("cronExecutingUser")
org.apache.zeppelin.notebook.Note.runAll : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("cronExecutingUser") >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r1 = (java.lang.String) $r6
org.apache.zeppelin.notebook.Note.runAll : r1 = (java.lang.String) $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : if null != r1
org.apache.zeppelin.notebook.Note.runAll : if null != r1 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r1 = "anonymous"
org.apache.zeppelin.notebook.Note.runAll : r1 = "anonymous" >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.notebook.Note.runAll : $r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r3 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : r1 = $r3
org.apache.zeppelin.notebook.Note.getParagraphs : r1 = $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3
org.apache.zeppelin.notebook.Note.getParagraphs : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Note.getParagraphs : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraphs : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Note.getParagraphs : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor r1
org.apache.zeppelin.notebook.Note.getParagraphs : exitmonitor r1 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraphs : return $r4
org.apache.zeppelin.notebook.Note.getParagraphs : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.runAll : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.runAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : if $z0 == 0
org.apache.zeppelin.notebook.Note.runAll : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Note.runAll : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r3 = (org.apache.zeppelin.notebook.Paragraph) $r8
org.apache.zeppelin.notebook.Note.runAll : r3 = (org.apache.zeppelin.notebook.Paragraph) $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $z1 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: boolean isEnabled()>()
org.apache.zeppelin.notebook.Note.runAll : $z1 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: boolean isEnabled()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config>
org.apache.zeppelin.notebook.Paragraph.isEnabled : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("enabled")
org.apache.zeppelin.notebook.Paragraph.isEnabled : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("enabled") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : r1 = (java.lang.Boolean) $r3
org.apache.zeppelin.notebook.Paragraph.isEnabled : r1 = (java.lang.Boolean) $r3 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : if r1 == null
org.apache.zeppelin.notebook.Paragraph.isEnabled : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : $z1 = 1
org.apache.zeppelin.notebook.Paragraph.isEnabled : $z1 = 1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : goto [?= return $z1]
org.apache.zeppelin.notebook.Paragraph.isEnabled : goto [?= return $z1] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isEnabled : return $z1
org.apache.zeppelin.notebook.Paragraph.isEnabled : return $z1 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : if $z1 != 0
org.apache.zeppelin.notebook.Note.runAll : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r9 = new org.apache.zeppelin.user.AuthenticationInfo
org.apache.zeppelin.notebook.Note.runAll : $r9 = new org.apache.zeppelin.user.AuthenticationInfo >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : specialinvoke $r9.<org.apache.zeppelin.user.AuthenticationInfo: void <init>()>()
org.apache.zeppelin.notebook.Note.runAll : specialinvoke $r9.<org.apache.zeppelin.user.AuthenticationInfo: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : r4 = $r9
org.apache.zeppelin.notebook.Note.runAll : r4 = $r9 >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : virtualinvoke r4.<org.apache.zeppelin.user.AuthenticationInfo: void setUser(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Note.runAll : virtualinvoke r4.<org.apache.zeppelin.user.AuthenticationInfo: void setUser(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r4)
org.apache.zeppelin.notebook.Note.runAll : virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : $r10 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.runAll : $r10 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void run(java.lang.String)>($r10)
org.apache.zeppelin.notebook.Note.runAll : virtualinvoke r0.<org.apache.zeppelin.notebook.Note: void run(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.notebook.Note.run : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph getParagraph(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Note.run : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.Paragraph getParagraph(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraph : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : r2 = $r6
org.apache.zeppelin.notebook.Note.getParagraph : r2 = $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : entermonitor $r6
org.apache.zeppelin.notebook.Note.getParagraph : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.getParagraph : $r7 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.getParagraph : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.getParagraph : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : if $z0 == 0
org.apache.zeppelin.notebook.Note.getParagraph : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Note.getParagraph : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : r4 = (org.apache.zeppelin.notebook.Paragraph) $r8
org.apache.zeppelin.notebook.Note.getParagraph : r4 = (org.apache.zeppelin.notebook.Paragraph) $r8 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : $r9 = virtualinvoke r4.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.getParagraph : $r9 = virtualinvoke r4.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Note.getParagraph : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : if $z1 == 0
org.apache.zeppelin.notebook.Note.getParagraph : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : exitmonitor r2
org.apache.zeppelin.notebook.Note.getParagraph : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Note.getParagraph : return r4
org.apache.zeppelin.notebook.Note.getParagraph : return r4 >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Note.run : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r9 = interfaceinvoke $r8.<org.apache.zeppelin.notebook.JobListenerFactory: org.apache.zeppelin.notebook.ParagraphJobListener getParagraphJobListener(org.apache.zeppelin.notebook.Note)>(r0)
org.apache.zeppelin.notebook.Note.run : $r9 = interfaceinvoke $r8.<org.apache.zeppelin.notebook.JobListenerFactory: org.apache.zeppelin.notebook.ParagraphJobListener getParagraphJobListener(org.apache.zeppelin.notebook.Note)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Note.run : virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: void setListener(org.apache.zeppelin.scheduler.JobListener)>($r9)
org.apache.zeppelin.notebook.Note.run : virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: void setListener(org.apache.zeppelin.scheduler.JobListener)>($r9) >>>>>>>> org.apache.zeppelin.notebook.Note.run : $z0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: boolean isBlankParagraph()>()
org.apache.zeppelin.notebook.Note.run : $z0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: boolean isBlankParagraph()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.getText : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getText : return $r1
org.apache.zeppelin.notebook.Paragraph.getText : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1)
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : if $z0 != 0
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getMagic()>()
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getMagic()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getMagic : r1 = ""
org.apache.zeppelin.notebook.Paragraph.getMagic : r1 = "" >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getMagic : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.notebook.Paragraph.getMagic : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getMagic : if r2 == null
org.apache.zeppelin.notebook.Paragraph.getMagic : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getMagic : $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("%")
org.apache.zeppelin.notebook.Paragraph.getMagic : $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("%") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getMagic : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.getMagic : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getMagic : return r1
org.apache.zeppelin.notebook.Paragraph.getMagic : return r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : if $z1 == 0
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $z2 = 0
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : $z2 = 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : return $z2
org.apache.zeppelin.notebook.Paragraph.isBlankParagraph : return $z2 >>>>>>>> org.apache.zeppelin.notebook.Note.run : if $z0 == 0
org.apache.zeppelin.notebook.Note.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.run : virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: void clearRuntimeInfo(java.lang.String)>(null)
org.apache.zeppelin.notebook.Note.run : virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: void clearRuntimeInfo(java.lang.String)>(null) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.clearRuntimeInfo : if r1 == null
org.apache.zeppelin.notebook.Paragraph.clearRuntimeInfo : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.clearRuntimeInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map runtimeInfos> = null
org.apache.zeppelin.notebook.Paragraph.clearRuntimeInfo : r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map runtimeInfos> = null >>>>>>>> org.apache.zeppelin.notebook.Note.run : r3 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName()>()
org.apache.zeppelin.notebook.Note.run : r3 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : $r2 = staticinvoke <org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName(java.lang.String)>($r1)
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : $r2 = staticinvoke <org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName(java.lang.String)>($r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : if r0 != null
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : if r0 != null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("%")
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("%") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : if $z0 != 0
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : return null
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : return null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : return $r2
org.apache.zeppelin.notebook.Paragraph.getRequiredReplName : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r13 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory>
org.apache.zeppelin.notebook.Note.run : $r13 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterFactory factory> >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r14 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Note.run : $r14 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r15 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.run : $r15 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.run : r4 = virtualinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r14, $r15, r3)
org.apache.zeppelin.notebook.Note.run : r4 = virtualinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r14, $r15, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : r4 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : r4 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : if r4 == null
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $i0 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $i0 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : if $i0 != 0
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : if $i0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : if r3 == null
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : if r3 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : r5 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting getDefaultInterpreterSetting(java.util.List)>(r4)
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : r5 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting getDefaultInterpreterSetting(java.util.List)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : if r1 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : if r1 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : $r3 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : $r3 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : return $r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSetting : return $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r12 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterFactory: java.util.List createOrGetInterpreterList(java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r2, r5)
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r12 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterFactory: java.util.List createOrGetInterpreterList(java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r2, r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : r5 = r4
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : r5 = r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : entermonitor r4
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : entermonitor r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : r6 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String getInterpreterSessionKey(java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r2, r3)
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : r6 = virtualinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String getInterpreterSessionKey(java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.InterpreterSetting)>(r1, r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z0 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z0 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z1 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z1 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z3 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perUserScoped()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z3 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perUserScoped()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z3 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z4 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $z4 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteScoped()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z4 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : r5 = "shared_session"
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : r5 = "shared_session" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r10 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r10 = <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11 = newarray (java.lang.Object)[4]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[0] = r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[0] = r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[1] = r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[1] = r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[2] = r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[2] = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r12 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r12 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[3] = $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : $r11[3] = $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Interpreter session key: {}, for note: {}, user: {}, InterpreterSetting Name: {}", $r11)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Interpreter session key: {}, for note: {}, user: {}, InterpreterSetting Name: {}", $r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : return r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSessionKey : return r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $z0 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: boolean containsKey(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $z0 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterFactory: void createInterpretersForNote(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String,java.lang.String,java.lang.String)>(r3, r1, r2, r6)
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterFactory: void createInterpretersForNote(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String,java.lang.String,java.lang.String)>(r3, r1, r2, r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r5 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r5 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r16 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r16 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r7 = (java.util.Properties) $r16
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r7 = (java.util.Properties) $r16 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r8 = r5
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r8 = r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : entermonitor r5
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : entermonitor r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : l1 = 10000000000L
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : l1 = 10000000000L >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r9 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT>
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r9 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $i3 = virtualinvoke $r18.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r9)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $i3 = virtualinvoke $r18.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r9) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $i0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $i0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int getIntValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : $i0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int intValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : $i0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: int intValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : return $i0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getIntValue : return $i0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $i1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(java.lang.String,java.lang.String,int)>($r2, $r3, $i0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $i1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getInt(java.lang.String,java.lang.String,int)>($r2, $r3, $i0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : if $r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : if $r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : if $r5 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : if $r5 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $i3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getIntValue(java.lang.String,int)>(r2, i0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : $i3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: int getIntValue(java.lang.String,int)>(r2, i0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if r2 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if r2 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $z0 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $z0 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $r7 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $r7 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $z2 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : $z2 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $z2 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : if $z2 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : return i0
org.apache.zeppelin.conf.ZeppelinConfiguration.getIntValue : return i0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : return $i3
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : return $i3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : return $i1
org.apache.zeppelin.conf.ZeppelinConfiguration.getInt : return $i1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $l4 = (long) $i3
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $l4 = (long) $i3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $l5 = $l4 * 1000000L
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $l5 = $l4 * 1000000L >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $l6 = $l5 * 2L
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $l6 = $l5 * 2L >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : l2 = staticinvoke <java.lang.Math: long max(long,long)>(l1, $l6)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : l2 = staticinvoke <java.lang.Math: long max(long,long)>(l1, $l6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z0 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterGroup: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z0 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterGroup: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : exitmonitor r8
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : exitmonitor r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= $r24 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>]
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= $r24 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r24 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r24 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r25 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r25 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Create interpreter instance {} for note {}", $r25, r3)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Create interpreter instance {} for note {}", $r25, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r26 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r26 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r27 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r27 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner getInterpreterRunner()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner getInterpreterRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r13 = interfaceinvoke r26.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r13 = interfaceinvoke r26.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r28 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r28 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r29 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r28
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r29 = (org.apache.zeppelin.interpreter.InterpreterInfo) $r28 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z2 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isRemote()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z2 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isRemote()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z2 == 0
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r38 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r38 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r39 = virtualinvoke r29.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r39 = virtualinvoke r29.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className>
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: java.lang.String className> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1
org.apache.zeppelin.interpreter.InterpreterInfo.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r34 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter createRepl(java.lang.String,java.lang.String,java.util.Properties)>($r38, $r39, r7)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r34 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter createRepl(java.lang.String,java.lang.String,java.util.Properties)>($r38, $r39, r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r4 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r4 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Create repl {} from {}", r2, r1)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Create repl {} from {}", r2, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r5 = virtualinvoke $r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r5 = virtualinvoke $r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: java.util.Map cleanCl>
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: java.util.Map cleanCl> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r6 = (java.net.URLClassLoader) $r16
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r6 = (java.net.URLClassLoader) $r16 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : if r6 != null
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : if r6 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r17 = newarray (java.net.URL)[0]
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r17 = newarray (java.net.URL)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r6 = staticinvoke <java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[],java.lang.ClassLoader)>($r17, r5)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r6 = staticinvoke <java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[],java.lang.ClassLoader)>($r17, r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : z0 = 1
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : if r7 == null
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : if r7 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : z0 = 0
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : goto [?= (branch)]
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : if z0 != 1
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : if z0 != 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r23 = r6
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r23 = r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r24 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r24 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke $r24.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r23)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke $r24.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r23) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r8 = virtualinvoke r23.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r8 = virtualinvoke r23.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r25 = newarray (java.lang.Class)[1]
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r25 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r25[0] = class "java/util/Properties"
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r25[0] = class "java/util/Properties" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r25)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r25) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r26 = newarray (java.lang.Object)[1]
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r26 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r26[0] = r3
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r26[0] = r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r27 = virtualinvoke r9.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r26)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r27 = virtualinvoke r9.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r26) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r10 = (org.apache.zeppelin.interpreter.Interpreter) $r27
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r10 = (org.apache.zeppelin.interpreter.Interpreter) $r27 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r28 = virtualinvoke r6.<java.net.URLClassLoader: java.net.URL[] getURLs()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r28 = virtualinvoke r6.<java.net.URLClassLoader: java.net.URL[] getURLs()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke r10.<org.apache.zeppelin.interpreter.Interpreter: void setClassloaderUrls(java.net.URL[])>($r28)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke r10.<org.apache.zeppelin.interpreter.Interpreter: void setClassloaderUrls(java.net.URL[])>($r28) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r29 = new org.apache.zeppelin.interpreter.LazyOpenInterpreter
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r29 = new org.apache.zeppelin.interpreter.LazyOpenInterpreter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r30 = new org.apache.zeppelin.interpreter.ClassloaderInterpreter
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r30 = new org.apache.zeppelin.interpreter.ClassloaderInterpreter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : specialinvoke $r30.<org.apache.zeppelin.interpreter.ClassloaderInterpreter: void <init>(org.apache.zeppelin.interpreter.Interpreter,java.lang.ClassLoader)>(r10, r23)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : specialinvoke $r30.<org.apache.zeppelin.interpreter.ClassloaderInterpreter: void <init>(org.apache.zeppelin.interpreter.Interpreter,java.lang.ClassLoader)>(r10, r23) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : specialinvoke $r29.<org.apache.zeppelin.interpreter.LazyOpenInterpreter: void <init>(org.apache.zeppelin.interpreter.Interpreter)>($r30)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : specialinvoke $r29.<org.apache.zeppelin.interpreter.LazyOpenInterpreter: void <init>(org.apache.zeppelin.interpreter.Interpreter)>($r30) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r11 = $r29
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r11 = $r29 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r12 = r11
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : r12 = r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r31 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : $r31 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke $r31.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r5)
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : virtualinvoke $r31.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : return r12
org.apache.zeppelin.interpreter.InterpreterFactory.createRepl : return r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r14 = r5
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r14 = r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r41 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r41 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r42 = (java.util.List) $r41
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r42 = (java.util.List) $r41 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if null != r42
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if null != r42 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r43 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r43 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : specialinvoke $r43.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : specialinvoke $r43.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r42 = $r43
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : r42 = $r43 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r42)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r42) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z6 = virtualinvoke r29.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $z6 = virtualinvoke r29.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean isDefaultInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean defaultInterpreter>
org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterInfo: boolean defaultInterpreter> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : return $z0
org.apache.zeppelin.interpreter.InterpreterInfo.isDefaultInterpreter : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z6 == 0
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : interfaceinvoke r42.<java.util.List: void add(int,java.lang.Object)>(0, r34)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : interfaceinvoke r42.<java.util.List: void add(int,java.lang.Object)>(0, r34) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= exitmonitor r14]
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= exitmonitor r14] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : exitmonitor r14
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : exitmonitor r14 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= $r46 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>]
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= $r46 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r46 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r46 = <org.apache.zeppelin.interpreter.InterpreterFactory: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r47 = virtualinvoke r34.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r47 = virtualinvoke r34.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $i11 = virtualinvoke r34.<java.lang.Object: int hashCode()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $i11 = virtualinvoke r34.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : interfaceinvoke $r46.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Interpreter {} {} created", $r47, $r48)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : interfaceinvoke $r46.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Interpreter {} {} created", $r47, $r48) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : virtualinvoke r34.<org.apache.zeppelin.interpreter.Interpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>(r5)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : virtualinvoke r34.<org.apache.zeppelin.interpreter.Interpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpretersForNote : goto [?= $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $r10 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $r10 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $r11 = (java.util.List) $r10
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : $r11 = (java.util.List) $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : exitmonitor r5
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : exitmonitor r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : return $r11
org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList : return $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r14 = (org.apache.zeppelin.interpreter.Interpreter) $r13
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : $r14 = (org.apache.zeppelin.interpreter.Interpreter) $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : return $r14
org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter : return $r14 >>>>>>>> org.apache.zeppelin.notebook.Note.run : if r4 != null
org.apache.zeppelin.notebook.Note.run : if r4 != null >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r27 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Note.run : $r27 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config>
org.apache.zeppelin.notebook.Paragraph.getConfig : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map config> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getConfig : return $r1
org.apache.zeppelin.notebook.Paragraph.getConfig : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>("enabled")
org.apache.zeppelin.notebook.Note.run : $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>("enabled") >>>>>>>> org.apache.zeppelin.notebook.Note.run : if $r28 == null
org.apache.zeppelin.notebook.Note.run : if $r28 == null >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r32 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo getAuthenticationInfo()>()
org.apache.zeppelin.notebook.Note.run : $r32 = virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo getAuthenticationInfo()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo>
org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : return $r1
org.apache.zeppelin.notebook.Paragraph.getAuthenticationInfo : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Note.run : virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>($r32)
org.apache.zeppelin.notebook.Note.run : virtualinvoke r2.<org.apache.zeppelin.notebook.Paragraph: void setAuthenticationInfo(org.apache.zeppelin.user.AuthenticationInfo)>($r32) >>>>>>>> org.apache.zeppelin.notebook.Note.run : $r33 = virtualinvoke r4.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.notebook.Note.run : $r33 = virtualinvoke r4.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r1 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r1 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test_")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test_") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r6 = virtualinvoke $r1.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetFIFOScheduler(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : $r6 = virtualinvoke $r1.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetFIFOScheduler(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : return $r6
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getScheduler : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Note.run : interfaceinvoke $r33.<org.apache.zeppelin.scheduler.Scheduler: void submit(org.apache.zeppelin.scheduler.Job)>(r2)
org.apache.zeppelin.notebook.Note.run : interfaceinvoke $r33.<org.apache.zeppelin.scheduler.Scheduler: void submit(org.apache.zeppelin.scheduler.Job)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.runAll : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Note.runAll : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : $z0 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: boolean isTerminated()>()
org.apache.zeppelin.notebook.Notebook$CronJob.execute : $z0 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: boolean isTerminated()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.isTerminated : $r5 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : r1 = $r5
org.apache.zeppelin.notebook.Note.isTerminated : r1 = $r5 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : entermonitor $r5
org.apache.zeppelin.notebook.Note.isTerminated : entermonitor $r5 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs>
org.apache.zeppelin.notebook.Note.isTerminated : $r6 = r0.<org.apache.zeppelin.notebook.Note: java.util.List paragraphs> >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.isTerminated : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.isTerminated : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : if $z0 == 0
org.apache.zeppelin.notebook.Note.isTerminated : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Note.isTerminated : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : r3 = (org.apache.zeppelin.notebook.Paragraph) $r7
org.apache.zeppelin.notebook.Note.isTerminated : r3 = (org.apache.zeppelin.notebook.Paragraph) $r7 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : $z1 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: boolean isTerminated()>()
org.apache.zeppelin.notebook.Note.isTerminated : $z1 = virtualinvoke r3.<org.apache.zeppelin.notebook.Paragraph: boolean isTerminated()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : if $z1 != 0
org.apache.zeppelin.notebook.Note.isTerminated : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : $z2 = 0
org.apache.zeppelin.notebook.Note.isTerminated : $z2 = 0 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : exitmonitor r1
org.apache.zeppelin.notebook.Note.isTerminated : exitmonitor r1 >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : return $z2
org.apache.zeppelin.notebook.Note.isTerminated : return $z2 >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : if $z0 != 0
org.apache.zeppelin.notebook.Notebook$CronJob.execute : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : staticinvoke <java.lang.Thread: void sleep(long)>(1000L)
org.apache.zeppelin.notebook.Notebook$CronJob.execute : staticinvoke <java.lang.Thread: void sleep(long)>(1000L) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.Interpreter getRepl(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Paragraph.jobRun : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.Interpreter getRepl(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRepl : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory factory>
org.apache.zeppelin.notebook.Paragraph.getRepl : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterFactory factory> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRepl : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user>
org.apache.zeppelin.notebook.Paragraph.getRepl : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRepl : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getRepl : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRepl : $r5 = virtualinvoke $r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getRepl : $r5 = virtualinvoke $r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRepl : $r6 = virtualinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r3, $r5, r1)
org.apache.zeppelin.notebook.Paragraph.getRepl : $r6 = virtualinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.interpreter.Interpreter getInterpreter(java.lang.String,java.lang.String,java.lang.String)>($r3, $r5, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getRepl : return $r6
org.apache.zeppelin.notebook.Paragraph.getRepl : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r12 = <org.apache.zeppelin.notebook.Paragraph: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r12 = <org.apache.zeppelin.notebook.Paragraph: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r13 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.jobRun : $r13 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run paragraph {} using {} ")
org.apache.zeppelin.notebook.Paragraph.jobRun : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run paragraph {} using {} ") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.zeppelin.notebook.Paragraph.jobRun : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r17 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r17 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>($r16, $r17, r1)
org.apache.zeppelin.notebook.Paragraph.jobRun : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>($r16, $r17, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if r2 != null
org.apache.zeppelin.notebook.Paragraph.jobRun : if r2 != null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r29 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r29 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r30 = virtualinvoke $r29.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r30 = virtualinvoke $r29.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSetting getInterpreterSettingById(java.lang.String)>($r30)
org.apache.zeppelin.notebook.Paragraph.jobRun : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSetting getInterpreterSettingById(java.lang.String)>($r30) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r2 = null
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r2 = null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r7 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r7 = virtualinvoke $r6.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r8 = virtualinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r7)
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r8 = virtualinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r9
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r9 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r10 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $r10 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r10)
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : if $z1 == 0
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r2 = r4
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : r2 = r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : goto [?= return r2]
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : goto [?= return r2] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : return r2
org.apache.zeppelin.notebook.Paragraph.getInterpreterSettingById : return r2 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r31 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status getStatus()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r31 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status getStatus()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status>
org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getStatus : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r32 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status DOWNLOADING_DEPENDENCIES>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r32 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status DOWNLOADING_DEPENDENCIES> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $z0 = virtualinvoke $r31.<org.apache.zeppelin.interpreter.InterpreterSetting$Status: boolean equals(java.lang.Object)>($r32)
org.apache.zeppelin.notebook.Paragraph.jobRun : $z0 = virtualinvoke $r31.<org.apache.zeppelin.interpreter.InterpreterSetting$Status: boolean equals(java.lang.Object)>($r32) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.jobRun : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: boolean noteHasUser()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: boolean noteHasUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasUser : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user>
org.apache.zeppelin.notebook.Paragraph.noteHasUser : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String user> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasUser : if $r1 == null
org.apache.zeppelin.notebook.Paragraph.noteHasUser : if $r1 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasUser : $z0 = 1
org.apache.zeppelin.notebook.Paragraph.noteHasUser : $z0 = 1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasUser : goto [?= return $z0]
org.apache.zeppelin.notebook.Paragraph.noteHasUser : goto [?= return $z0] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasUser : return $z0
org.apache.zeppelin.notebook.Paragraph.noteHasUser : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $z1 == 0
org.apache.zeppelin.notebook.Paragraph.jobRun : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $z2 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: boolean noteHasInterpreters()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $z2 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: boolean noteHasInterpreters()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r3 = virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r3 = virtualinvoke $r2.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r4 = virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r3)
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $r4 = virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : if $z0 != 0
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $z1 = 1
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : $z1 = 1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : goto [?= return $z1]
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : goto [?= return $z1] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : return $z1
org.apache.zeppelin.notebook.Paragraph.noteHasInterpreters : return $z1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $z2 == 0
org.apache.zeppelin.notebook.Paragraph.jobRun : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if r3 == null
org.apache.zeppelin.notebook.Paragraph.jobRun : if r3 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $z3 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: boolean interpreterHasUser(org.apache.zeppelin.interpreter.InterpreterSetting)>(r3)
org.apache.zeppelin.notebook.Paragraph.jobRun : $z3 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: boolean interpreterHasUser(org.apache.zeppelin.interpreter.InterpreterSetting)>(r3) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : $r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : $r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : $z0 = virtualinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean permissionIsSet()>()
org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : $z0 = virtualinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean permissionIsSet()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : $z1 = 0
org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : $z1 = 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : return $z1
org.apache.zeppelin.notebook.Paragraph.interpreterHasUser : return $z1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $z3 == 0
org.apache.zeppelin.notebook.Paragraph.jobRun : if $z3 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r47 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r47 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r48 = interfaceinvoke $r47.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r48 = interfaceinvoke $r47.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r4 = interfaceinvoke $r48.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r4 = interfaceinvoke $r48.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $z5 == 0
org.apache.zeppelin.notebook.Paragraph.jobRun : if $z5 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r49 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r49 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r5 = (org.apache.zeppelin.notebook.Paragraph) $r49
org.apache.zeppelin.notebook.Paragraph.jobRun : r5 = (org.apache.zeppelin.notebook.Paragraph) $r49 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r50 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r50 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke r5.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>($r50)
org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke r5.<org.apache.zeppelin.notebook.Paragraph: void setText(java.lang.String)>($r50) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Paragraph.jobRun : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r51 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getScriptBody()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r51 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getScriptBody()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text>
org.apache.zeppelin.notebook.Paragraph.getScriptBody : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String text> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : $r2 = staticinvoke <org.apache.zeppelin.notebook.Paragraph: java.lang.String getScriptBody(java.lang.String)>($r1)
org.apache.zeppelin.notebook.Paragraph.getScriptBody : $r2 = staticinvoke <org.apache.zeppelin.notebook.Paragraph: java.lang.String getScriptBody(java.lang.String)>($r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : if r0 != null
org.apache.zeppelin.notebook.Paragraph.getScriptBody : if r0 != null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : r1 = staticinvoke <org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName(java.lang.String)>(r0)
org.apache.zeppelin.notebook.Paragraph.getScriptBody : r1 = staticinvoke <org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName(java.lang.String)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : if r1 != null
org.apache.zeppelin.notebook.Paragraph.getScriptBody : if r1 != null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : return r0
org.apache.zeppelin.notebook.Paragraph.getScriptBody : return r0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getScriptBody : return $r2
org.apache.zeppelin.notebook.Paragraph.getScriptBody : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r52 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.Interpreter$FormType getFormType()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r52 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.Interpreter$FormType getFormType()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getFormType : $r1 = <org.apache.zeppelin.interpreter.Interpreter$FormType: org.apache.zeppelin.interpreter.Interpreter$FormType SIMPLE>
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getFormType : $r1 = <org.apache.zeppelin.interpreter.Interpreter$FormType: org.apache.zeppelin.interpreter.Interpreter$FormType SIMPLE> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.getFormType : return $r1
org.apache.zeppelin.interpreter.mock.MockInterpreter1.getFormType : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r53 = <org.apache.zeppelin.interpreter.Interpreter$FormType: org.apache.zeppelin.interpreter.Interpreter$FormType NATIVE>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r53 = <org.apache.zeppelin.interpreter.Interpreter$FormType: org.apache.zeppelin.interpreter.Interpreter$FormType NATIVE> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $r52 != $r53
org.apache.zeppelin.notebook.Paragraph.jobRun : if $r52 != $r53 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r55 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.Interpreter$FormType getFormType()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r55 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.Interpreter$FormType getFormType()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r56 = <org.apache.zeppelin.interpreter.Interpreter$FormType: org.apache.zeppelin.interpreter.Interpreter$FormType SIMPLE>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r56 = <org.apache.zeppelin.interpreter.Interpreter$FormType: org.apache.zeppelin.interpreter.Interpreter$FormType SIMPLE> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $r55 != $r56
org.apache.zeppelin.notebook.Paragraph.jobRun : if $r55 != $r56 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r57 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getScriptBody()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r57 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getScriptBody()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r6 = staticinvoke <org.apache.zeppelin.display.Input: java.util.LinkedHashMap extractSimpleQueryForm(java.lang.String)>(r57)
org.apache.zeppelin.notebook.Paragraph.jobRun : r6 = staticinvoke <org.apache.zeppelin.display.Input: java.util.LinkedHashMap extractSimpleQueryForm(java.lang.String)>(r57) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r58 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r58 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r7 = virtualinvoke $r58.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r7 = virtualinvoke $r58.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r59 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String extractVariablesFromAngularRegistry(java.lang.String,java.util.Map,org.apache.zeppelin.display.AngularObjectRegistry)>(r57, r6, r7)
org.apache.zeppelin.notebook.Paragraph.jobRun : r59 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String extractVariablesFromAngularRegistry(java.lang.String,java.util.Map,org.apache.zeppelin.display.AngularObjectRegistry)>(r57, r6, r7) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $r13 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note getNote()>()
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $r13 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note getNote()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getNote : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getNote : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getNote : return $r1
org.apache.zeppelin.notebook.Paragraph.getNote : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r4 = virtualinvoke $r13.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r4 = virtualinvoke $r13.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r5 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $r14 = new java.util.HashSet
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $r14 = new java.util.HashSet >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $r15 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $r15 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : specialinvoke $r14.<java.util.HashSet: void <init>(java.util.Collection)>($r15)
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : specialinvoke $r14.<java.util.HashSet: void <init>(java.util.Collection)>($r15) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r6 = $r14
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r6 = $r14 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : if $z0 == 0
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : return r1
org.apache.zeppelin.notebook.Paragraph.extractVariablesFromAngularRegistry : return r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r60 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r60 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke $r60.<org.apache.zeppelin.display.GUI: void setForms(java.util.LinkedHashMap)>(r6)
org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke $r60.<org.apache.zeppelin.display.GUI: void setForms(java.util.LinkedHashMap)>(r6) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r61 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r61 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r62 = virtualinvoke $r61.<org.apache.zeppelin.display.GUI: java.util.Map getParams()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r62 = virtualinvoke $r61.<org.apache.zeppelin.display.GUI: java.util.Map getParams()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r51 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String getSimpleQuery(java.util.Map,java.lang.String)>($r62, r59)
org.apache.zeppelin.notebook.Paragraph.jobRun : r51 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String getSimpleQuery(java.util.Map,java.lang.String)>($r62, r59) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r63 = <org.apache.zeppelin.notebook.Paragraph: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r63 = <org.apache.zeppelin.notebook.Paragraph: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r64 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.Paragraph.jobRun : $r64 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : specialinvoke $r64.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RUN : ")
org.apache.zeppelin.notebook.Paragraph.jobRun : $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RUN : ") >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51)
org.apache.zeppelin.notebook.Paragraph.jobRun : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : interfaceinvoke $r63.<org.slf4j.Logger: void debug(java.lang.String)>($r67)
org.apache.zeppelin.notebook.Paragraph.jobRun : interfaceinvoke $r63.<org.slf4j.Logger: void debug(java.lang.String)>($r67) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r68 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterContext getInterpreterContext()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r68 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterContext getInterpreterContext()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r1 = r0
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r1 = r0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r2 = new org.apache.zeppelin.interpreter.InterpreterOutput
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r2 = new org.apache.zeppelin.interpreter.InterpreterOutput >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r3 = new org.apache.zeppelin.notebook.Paragraph$1
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r3 = new org.apache.zeppelin.notebook.Paragraph$1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph$1: void <init>(org.apache.zeppelin.notebook.Paragraph,org.apache.zeppelin.notebook.Paragraph)>(r0, r1)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r3.<org.apache.zeppelin.notebook.Paragraph$1: void <init>(org.apache.zeppelin.notebook.Paragraph,org.apache.zeppelin.notebook.Paragraph)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterOutput: void <init>(org.apache.zeppelin.interpreter.InterpreterOutputListener)>($r3)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterOutput: void <init>(org.apache.zeppelin.interpreter.InterpreterOutputListener)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List toInterpreterResultMessage()>()
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : r2 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List toInterpreterResultMessage()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph$1: org.apache.zeppelin.notebook.Paragraph this$0>
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph$1: org.apache.zeppelin.notebook.Paragraph this$0> >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r4 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.scheduler.JobListener getListener()>()
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r4 = virtualinvoke $r3.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.scheduler.JobListener getListener()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r5 = (org.apache.zeppelin.notebook.ParagraphJobListener) $r4
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r5 = (org.apache.zeppelin.notebook.ParagraphJobListener) $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph$1: org.apache.zeppelin.notebook.Paragraph val$self>
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : $r6 = r0.<org.apache.zeppelin.notebook.Paragraph$1: org.apache.zeppelin.notebook.Paragraph val$self> >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : interfaceinvoke $r5.<org.apache.zeppelin.notebook.ParagraphJobListener: void onOutputUpdateAll(org.apache.zeppelin.notebook.Paragraph,java.util.List)>($r6, r2)
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : interfaceinvoke $r5.<org.apache.zeppelin.notebook.ParagraphJobListener: void onOutputUpdateAll(org.apache.zeppelin.notebook.Paragraph,java.util.List)>($r6, r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph$1: void updateParagraphResult(java.util.List)>(r2)
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph$1: void updateParagraphResult(java.util.List)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : $r2 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : $r2 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : $r3 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : $r3 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.util.List)>($r3, r1)
org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.util.List)>($r3, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : r4 = $r2
org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : r4 = $r2 >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph$1: org.apache.zeppelin.notebook.Paragraph this$0>
org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph$1: org.apache.zeppelin.notebook.Paragraph this$0> >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : virtualinvoke $r5.<org.apache.zeppelin.notebook.Paragraph: void setReturn(org.apache.zeppelin.interpreter.InterpreterResult,java.lang.Throwable)>(r4, null)
org.apache.zeppelin.notebook.Paragraph$1.updateParagraphResult : virtualinvoke $r5.<org.apache.zeppelin.notebook.Paragraph: void setReturn(org.apache.zeppelin.interpreter.InterpreterResult,java.lang.Throwable)>(r4, null) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setReturn : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: void setResult(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Paragraph.setReturn : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: void setResult(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setResult : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object results> = r1
org.apache.zeppelin.notebook.Paragraph.setResult : r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.Object results> = r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.setReturn : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: void setException(java.lang.Throwable)>(r2)
org.apache.zeppelin.notebook.Paragraph.setReturn : virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: void setException(java.lang.Throwable)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : goto [?= return]
org.apache.zeppelin.notebook.Paragraph$1.onUpdateAll : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r4 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterContext getInterpreterContext(org.apache.zeppelin.interpreter.InterpreterOutput)>($r2)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r4 = specialinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterContext getInterpreterContext(org.apache.zeppelin.interpreter.InterpreterOutput)>($r2) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r2 = null
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r2 = null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r3 = null
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r3 = null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r8 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r8 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r9 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r9 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r10 = virtualinvoke $r9.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r10 = virtualinvoke $r9.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r11 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r10)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r11 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $z0 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $z0 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : if $z0 != 0
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r12 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r12 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r13 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r13 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r14 = virtualinvoke $r13.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r14 = virtualinvoke $r13.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r15 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r14)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r15 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r16
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r16 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r17 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r17 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r18 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r18 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r19 = virtualinvoke $r18.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r19 = virtualinvoke $r18.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r20 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>($r17, $r19)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r20 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>($r17, $r19) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r2 = virtualinvoke $r20.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r2 = virtualinvoke $r20.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r21 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r21 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r22 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r22 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r23 = virtualinvoke $r22.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r23 = virtualinvoke $r22.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r24 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>($r21, $r23)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r24 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>($r21, $r23) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r3 = virtualinvoke $r24.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r3 = virtualinvoke $r24.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r25 = new java.util.LinkedList
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r25 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r25.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r25.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r26 = $r25
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r26 = $r25 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r27 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r27 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r28 = virtualinvoke $r27.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r28 = virtualinvoke $r27.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r5 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r5 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : if $z1 == 0
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r29 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r29 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r6 = (org.apache.zeppelin.notebook.Paragraph) $r29
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r6 = (org.apache.zeppelin.notebook.Paragraph) $r29 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r30 = new org.apache.zeppelin.notebook.Paragraph$ParagraphRunner
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r30 = new org.apache.zeppelin.notebook.Paragraph$ParagraphRunner >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r31 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r31 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r32 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r32 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r33 = virtualinvoke $r32.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r33 = virtualinvoke $r32.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r34 = virtualinvoke r6.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r34 = virtualinvoke r6.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r30.<org.apache.zeppelin.notebook.Paragraph$ParagraphRunner: void <init>(org.apache.zeppelin.notebook.Note,java.lang.String,java.lang.String)>($r31, $r33, $r34)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r30.<org.apache.zeppelin.notebook.Paragraph$ParagraphRunner: void <init>(org.apache.zeppelin.notebook.Note,java.lang.String,java.lang.String)>($r31, $r33, $r34) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r30)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r30) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r35 = r0
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r35 = r0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r36 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r36 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r37 = virtualinvoke $r36.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.user.Credentials getCredentials()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r37 = virtualinvoke $r36.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.user.Credentials getCredentials()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getCredentials : $r1 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.user.Credentials credentials>
org.apache.zeppelin.notebook.Note.getCredentials : $r1 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.user.Credentials credentials> >>>>>>>> org.apache.zeppelin.notebook.Note.getCredentials : return $r1
org.apache.zeppelin.notebook.Note.getCredentials : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r38 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r38 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : if $r38 == null
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : if $r38 == null >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r39 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r39 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r40 = virtualinvoke $r39.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r40 = virtualinvoke $r39.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r7 = virtualinvoke r37.<org.apache.zeppelin.user.Credentials: org.apache.zeppelin.user.UserCredentials getUserCredentials(java.lang.String)>($r40)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r7 = virtualinvoke r37.<org.apache.zeppelin.user.Credentials: org.apache.zeppelin.user.UserCredentials getUserCredentials(java.lang.String)>($r40) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r41 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r41 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo authenticationInfo> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : virtualinvoke $r41.<org.apache.zeppelin.user.AuthenticationInfo: void setUserCredentials(org.apache.zeppelin.user.UserCredentials)>(r7)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : virtualinvoke $r41.<org.apache.zeppelin.user.AuthenticationInfo: void setUserCredentials(org.apache.zeppelin.user.UserCredentials)>(r7) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r42 = new org.apache.zeppelin.interpreter.InterpreterContext
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r42 = new org.apache.zeppelin.interpreter.InterpreterContext >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r43 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r43 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Note note> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r44 = virtualinvoke $r43.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r44 = virtualinvoke $r43.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r45 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r45 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r46 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r46 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getRequiredReplName()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r47 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r47 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getTitle()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title>
org.apache.zeppelin.notebook.Paragraph.getTitle : $r1 = r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String title> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1
org.apache.zeppelin.notebook.Paragraph.getTitle : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r48 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r48 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getText()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r49 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo getAuthenticationInfo()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r49 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.user.AuthenticationInfo getAuthenticationInfo()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r50 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r50 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r51 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : $r51 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r42.<org.apache.zeppelin.interpreter.InterpreterContext: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.user.AuthenticationInfo,java.util.Map,org.apache.zeppelin.display.GUI,org.apache.zeppelin.display.AngularObjectRegistry,org.apache.zeppelin.resource.ResourcePool,java.util.List,org.apache.zeppelin.interpreter.InterpreterOutput)>($r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, r2, r3, r26, r1)
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : specialinvoke $r42.<org.apache.zeppelin.interpreter.InterpreterContext: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.user.AuthenticationInfo,java.util.Map,org.apache.zeppelin.display.GUI,org.apache.zeppelin.display.AngularObjectRegistry,org.apache.zeppelin.resource.ResourcePool,java.util.List,org.apache.zeppelin.interpreter.InterpreterOutput)>($r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, r2, r3, r26, r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r52 = $r42
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : r52 = $r42 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : return r52
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : return r52 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : return $r4
org.apache.zeppelin.notebook.Paragraph.getInterpreterContext : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : staticinvoke <org.apache.zeppelin.interpreter.InterpreterContext: void set(org.apache.zeppelin.interpreter.InterpreterContext)>(r68)
org.apache.zeppelin.notebook.Paragraph.jobRun : staticinvoke <org.apache.zeppelin.interpreter.InterpreterContext: void set(org.apache.zeppelin.interpreter.InterpreterContext)>(r68) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r69 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>(r51, r68)
org.apache.zeppelin.notebook.Paragraph.jobRun : r69 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterResult interpret(java.lang.String,org.apache.zeppelin.interpreter.InterpreterContext)>(r51, r68) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.open : r0.<org.apache.zeppelin.interpreter.mock.MockInterpreter1: boolean open> = 1
org.apache.zeppelin.interpreter.mock.MockInterpreter1.open : r0.<org.apache.zeppelin.interpreter.mock.MockInterpreter1: boolean open> = 1 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r3 = "getId"
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r3 = "getId" >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sleep")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sleep") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z1 == 0
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r21 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r21 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r22 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r22 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r23 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl1: ")
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repl1: ") >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r21.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r22, $r26)
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : specialinvoke $r21.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r22, $r26) >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r6 = $r21
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : r6 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : $r27 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $r27 == null
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : if $r27 == null >>>>>>>> org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : return r6
org.apache.zeppelin.interpreter.mock.MockInterpreter1.interpret : return r6 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r70 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code KEEP_PREVIOUS_RESULT>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r70 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code KEEP_PREVIOUS_RESULT> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r71 = virtualinvoke r69.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r71 = virtualinvoke r69.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if $r70 != $r71
org.apache.zeppelin.notebook.Paragraph.jobRun : if $r70 != $r71 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r73 = r68.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.interpreter.InterpreterOutput out>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r73 = r68.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.interpreter.InterpreterOutput out> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke $r73.<org.apache.zeppelin.interpreter.InterpreterOutput: void flush()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke $r73.<org.apache.zeppelin.interpreter.InterpreterOutput: void flush()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r74 = r68.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.interpreter.InterpreterOutput out>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r74 = r68.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.interpreter.InterpreterOutput out> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r75 = virtualinvoke $r74.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List toInterpreterResultMessage()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : r75 = virtualinvoke $r74.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List toInterpreterResultMessage()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r76 = virtualinvoke r69.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r76 = virtualinvoke r69.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : interfaceinvoke r75.<java.util.List: boolean addAll(java.util.Collection)>($r76)
org.apache.zeppelin.notebook.Paragraph.jobRun : interfaceinvoke r75.<java.util.List: boolean addAll(java.util.Collection)>($r76) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r77 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.notebook.Paragraph.jobRun : $r77 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r78 = virtualinvoke r69.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r78 = virtualinvoke r69.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : specialinvoke $r77.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.util.List)>($r78, r75)
org.apache.zeppelin.notebook.Paragraph.jobRun : specialinvoke $r77.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.util.List)>($r78, r75) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r8 = $r77
org.apache.zeppelin.notebook.Paragraph.jobRun : r8 = $r77 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r79 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r79 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Paragraph getUserParagraph(java.lang.String)>($r79)
org.apache.zeppelin.notebook.Paragraph.jobRun : r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.notebook.Paragraph getUserParagraph(java.lang.String)>($r79) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r2 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : if $z0 != 0
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap>
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r4 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.Map userParagraphMap> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r6 = (org.apache.zeppelin.notebook.Paragraph) $r5
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : $r6 = (org.apache.zeppelin.notebook.Paragraph) $r5 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getUserParagraph : return $r6
org.apache.zeppelin.notebook.Paragraph.getUserParagraph : return $r6 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : if null == r9
org.apache.zeppelin.notebook.Paragraph.jobRun : if null == r9 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke r9.<org.apache.zeppelin.notebook.Paragraph: void setResult(java.lang.Object)>(r8)
org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke r9.<org.apache.zeppelin.notebook.Paragraph: void setResult(java.lang.Object)>(r8) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r80 = r9.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r80 = r9.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r81 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings>
org.apache.zeppelin.notebook.Paragraph.jobRun : $r81 = r0.<org.apache.zeppelin.notebook.Paragraph: org.apache.zeppelin.display.GUI settings> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : $r82 = virtualinvoke $r81.<org.apache.zeppelin.display.GUI: java.util.Map getParams()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : $r82 = virtualinvoke $r81.<org.apache.zeppelin.display.GUI: java.util.Map getParams()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke $r80.<org.apache.zeppelin.display.GUI: void setParams(java.util.Map)>($r82)
org.apache.zeppelin.notebook.Paragraph.jobRun : virtualinvoke $r80.<org.apache.zeppelin.display.GUI: void setParams(java.util.Map)>($r82) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : r10 = r8
org.apache.zeppelin.notebook.Paragraph.jobRun : r10 = r8 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : staticinvoke <org.apache.zeppelin.interpreter.InterpreterContext: void remove()>()
org.apache.zeppelin.notebook.Paragraph.jobRun : staticinvoke <org.apache.zeppelin.interpreter.InterpreterContext: void remove()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.jobRun : return r10
org.apache.zeppelin.notebook.Paragraph.jobRun : return r10 >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : goto [?= $z0 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: boolean isTerminated()>()]
org.apache.zeppelin.notebook.Notebook$CronJob.execute : goto [?= $z0 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: boolean isTerminated()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Note.isTerminated : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : goto [?= return 1]
org.apache.zeppelin.notebook.Note.isTerminated : goto [?= return 1] >>>>>>>> org.apache.zeppelin.notebook.Note.isTerminated : return 1
org.apache.zeppelin.notebook.Note.isTerminated : return 1 >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : z1 = 0
org.apache.zeppelin.notebook.Notebook$CronJob.execute : z1 = 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : r5 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>()
org.apache.zeppelin.notebook.Notebook$CronJob.execute : r5 = virtualinvoke r3.<org.apache.zeppelin.notebook.Note: java.util.Map getConfig()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : if r5 == null
org.apache.zeppelin.notebook.Notebook$CronJob.execute : if r5 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("releaseresource")
org.apache.zeppelin.notebook.Notebook$CronJob.execute : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("releaseresource") >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : if $z2 == 0
org.apache.zeppelin.notebook.Notebook$CronJob.execute : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : goto [?= (branch)]
org.apache.zeppelin.notebook.Notebook$CronJob.execute : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.Notebook$CronJob.execute : if z1 == 0
org.apache.zeppelin.notebook.Notebook$CronJob.execute : if z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Notebook.removeNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.removeNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r3 = $r13
org.apache.zeppelin.notebook.Notebook.removeNote : r3 = $r13 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : entermonitor $r13
org.apache.zeppelin.notebook.Notebook.removeNote : entermonitor $r13 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.removeNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Notebook.removeNote : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r4 = (org.apache.zeppelin.notebook.Note) $r15
org.apache.zeppelin.notebook.Notebook.removeNote : r4 = (org.apache.zeppelin.notebook.Note) $r15 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r16 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders>
org.apache.zeppelin.notebook.Notebook.removeNote : $r16 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r16.<org.apache.zeppelin.notebook.FolderView: void removeNote(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r16.<org.apache.zeppelin.notebook.FolderView: void removeNote(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.removeNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.removeNote : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : if $z0 != 0
org.apache.zeppelin.notebook.FolderView.removeNote : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : exitmonitor r3
org.apache.zeppelin.notebook.Notebook.removeNote : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $r18 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>]
org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $r18 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r18 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.removeNote : $r18 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r19 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r19 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r18.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeNoteInterpreterSettingBinding(java.lang.String,java.lang.String)>($r19, r1)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r18.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeNoteInterpreterSettingBinding(java.lang.String,java.lang.String)>($r19, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r3 = $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r3 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : entermonitor $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : entermonitor $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r12 = (java.util.List) $r11
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r12 = (java.util.List) $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : goto [?= r4 = $r12]
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : goto [?= r4 = $r12] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r4 = $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r4 = $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r6 = (java.lang.String) $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : r6 = (java.lang.String) $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting get(java.lang.String)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting get(java.lang.String)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeInterpretersForNote(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String,java.lang.String)>($r14, r1, r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeInterpretersForNote(org.apache.zeppelin.interpreter.InterpreterSetting,java.lang.String,java.lang.String)>($r14, r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : r4 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r5 = "shared"
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r5 = "shared" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r6 = r4.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote>
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r6 = r4.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r7 = "shared"
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r7 = "shared" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r8 = r4.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser>
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $r8 = r4.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeInterpretersForNote : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : exitmonitor r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : exitmonitor r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.removeNoteInterpreterSettingBinding : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r20 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.removeNote : $r20 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : interfaceinvoke $r20.<org.apache.zeppelin.search.SearchService: void deleteIndexDocs(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.removeNote : interfaceinvoke $r20.<org.apache.zeppelin.search.SearchService: void deleteIndexDocs(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r21 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.removeNote : $r21 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r21.<org.apache.zeppelin.notebook.NotebookAuthorization: void removeNote(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke $r21.<org.apache.zeppelin.notebook.NotebookAuthorization: void removeNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r2 = $r1
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : entermonitor $r1
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : entermonitor $r1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r7 = new org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r7 = new org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r7.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r7.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3 = $r7
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3 = $r7 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r8 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r8 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: java.util.Map authInfo> = $r8
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: java.util.Map authInfo> = $r8 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r9 = <org.apache.zeppelin.notebook.NotebookAuthorization: com.google.gson.Gson gson>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r9 = <org.apache.zeppelin.notebook.NotebookAuthorization: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r4 = virtualinvoke $r9.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r3)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r4 = virtualinvoke $r9.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : exitmonitor r2
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : goto [?= $r11 = new java.io.File]
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : goto [?= $r11 = new java.io.File] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r11 = new java.io.File
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r11 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r6 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.lang.String filePath>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r6 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.lang.String filePath> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r12 = $r11
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r12 = $r11 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $z0 = virtualinvoke r12.<java.io.File: boolean exists()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $z0 = virtualinvoke r12.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : virtualinvoke r12.<java.io.File: boolean createNewFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : virtualinvoke r12.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r19 = $r18
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r19 = $r18 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r20 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r20 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error saving notebook authorization file: ")
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error saving notebook authorization file: ") >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r23 = virtualinvoke r19.<java.io.IOException: java.lang.String getMessage()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r23 = virtualinvoke r19.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r25)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r22 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.removeNote : $r22 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r23 = virtualinvoke $r22.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r23 = virtualinvoke $r22.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.removeNote : r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.removeNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r26 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r25
org.apache.zeppelin.notebook.Notebook.removeNote : r26 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r25 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r27 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r27 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r28 = virtualinvoke r26.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>($r27, r1)
org.apache.zeppelin.notebook.Notebook.removeNote : $r28 = virtualinvoke r26.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>($r27, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r6 = virtualinvoke $r28.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.notebook.Notebook.removeNote : r6 = virtualinvoke $r28.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $z1 = r6 instanceof org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry
org.apache.zeppelin.notebook.Notebook.removeNote : $z1 = r6 instanceof org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : if $z1 == 0
org.apache.zeppelin.notebook.Notebook.removeNote : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r37 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r37 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.util.List getParagraphs()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r38 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.removeNote : r38 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : if $z4 == 0
org.apache.zeppelin.notebook.Notebook.removeNote : if $z4 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r39 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r39 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r40 = (org.apache.zeppelin.notebook.Paragraph) $r39
org.apache.zeppelin.notebook.Notebook.removeNote : r40 = (org.apache.zeppelin.notebook.Paragraph) $r39 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $r41 = virtualinvoke r40.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $r41 = virtualinvoke r40.<org.apache.zeppelin.notebook.Paragraph: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r6.<org.apache.zeppelin.display.AngularObjectRegistry: void removeAll(java.lang.String,java.lang.String)>(r1, $r41)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r6.<org.apache.zeppelin.display.AngularObjectRegistry: void removeAll(java.lang.String,java.lang.String)>(r1, $r41) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r42 = virtualinvoke r40.<org.apache.zeppelin.notebook.Paragraph: java.util.List getAllApplicationStates()>()
org.apache.zeppelin.notebook.Notebook.removeNote : r42 = virtualinvoke r40.<org.apache.zeppelin.notebook.Paragraph: java.util.List getAllApplicationStates()>() >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.List apps>
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : $r3 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.List apps> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : r1 = $r3
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : r1 = $r3 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : entermonitor $r3
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : entermonitor $r3 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : $r4 = new java.util.LinkedList
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.List apps>
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : $r5 = r0.<org.apache.zeppelin.notebook.Paragraph: java.util.List apps> >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5)
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : exitmonitor r1
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : exitmonitor r1 >>>>>>>> org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : return $r4
org.apache.zeppelin.notebook.Paragraph.getAllApplicationStates : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : if r42 == null
org.apache.zeppelin.notebook.Notebook.removeNote : if r42 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : r43 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.removeNote : r43 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : $z5 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.removeNote : $z5 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : if $z5 == 0
org.apache.zeppelin.notebook.Notebook.removeNote : if $z5 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r6.<org.apache.zeppelin.display.AngularObjectRegistry: void removeAll(java.lang.String,java.lang.String)>(r1, null)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r6.<org.apache.zeppelin.display.AngularObjectRegistry: void removeAll(java.lang.String,java.lang.String)>(r1, null) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : staticinvoke <org.apache.zeppelin.resource.ResourcePoolUtils: void removeResourcesBelongsToNote(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Notebook.removeNote : staticinvoke <org.apache.zeppelin.resource.ResourcePoolUtils: void removeResourcesBelongsToNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteRemoveEvent(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteRemoveEvent(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.fireNoteRemoveEvent : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void unpersist(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.Notebook.removeNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void unpersist(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.unpersist : $r2 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.Note.unpersist : $r2 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.Note.unpersist : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.unpersist : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.unpersist : interfaceinvoke $r2.<org.apache.zeppelin.notebook.repo.NotebookRepo: void remove(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r3, r1)
org.apache.zeppelin.notebook.Note.unpersist : interfaceinvoke $r2.<org.apache.zeppelin.notebook.repo.NotebookRepo: void remove(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r3, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r5 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r5 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r3 = interfaceinvoke $r5.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r6)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r3 = interfaceinvoke $r5.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r7 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r7 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r4 = interfaceinvoke r3.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(r1, $r7)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : r4 = interfaceinvoke r3.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(r1, $r7) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z0 = interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z0 = interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r4)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r4) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r15 = <org.apache.commons.vfs2.Selectors: org.apache.commons.vfs2.FileSelector SELECT_SELF_AND_CHILDREN>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : $r15 = <org.apache.commons.vfs2.Selectors: org.apache.commons.vfs2.FileSelector SELECT_SELF_AND_CHILDREN> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: int delete(org.apache.commons.vfs2.FileSelector)>($r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.remove : interfaceinvoke r4.<org.apache.commons.vfs2.FileObject: int delete(org.apache.commons.vfs2.FileSelector)>($r15) >>>>>>>> org.apache.zeppelin.notebook.Notebook.removeNote : goto [?= return]
