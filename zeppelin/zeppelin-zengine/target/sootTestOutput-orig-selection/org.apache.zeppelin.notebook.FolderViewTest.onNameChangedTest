org.apache.zeppelin.notebook.FolderViewTest.createNote : $r1 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r3 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r3 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r4 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r4 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterFactory interpreterFactory> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.search.SearchService index>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.search.SearchService index> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r8 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.user.Credentials credentials>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r8 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.user.Credentials credentials> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r9 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.NoteEventListener noteEventListener>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r9 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.NoteEventListener noteEventListener> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : specialinvoke $r1.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r3, $r4, $r5, $r6, $r7, $r8, $r9)
org.apache.zeppelin.notebook.FolderViewTest.createNote : specialinvoke $r1.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r3, $r4, $r5, $r6, $r7, $r8, $r9) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.util.Random
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.util.Random >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.util.Random: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r2 = $r1
org.apache.zeppelin.notebook.utility.IdHashes.encode : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = lengthof $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = lengthof $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>($r14)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = $r10
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = $r10 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r15.<java.math.BigInteger: void <init>(java.lang.String)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r15.<java.math.BigInteger: void <init>(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = $r15
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = $r15 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>($i2)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i3 = virtualinvoke r9.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i3 = virtualinvoke r9.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c4 = $r17[$i3]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c4 = $r17[$i3] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r20.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r20
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r20 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r24
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r24 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : r2 = $r1
org.apache.zeppelin.notebook.FolderViewTest.createNote : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.FolderView folderView>
org.apache.zeppelin.notebook.FolderViewTest.createNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderViewTest: org.apache.zeppelin.notebook.FolderView folderView> >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : virtualinvoke r2.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r10)
org.apache.zeppelin.notebook.FolderViewTest.createNote : virtualinvoke r2.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r10) >>>>>>>> org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1
org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1 >>>>>>>> org.apache.zeppelin.notebook.FolderViewTest.createNote : return r2
org.apache.zeppelin.notebook.FolderViewTest.createNote : return r2 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.setName : r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47)
org.apache.zeppelin.notebook.Note.setName : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0
org.apache.zeppelin.notebook.Note.setName : if $i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(92)
org.apache.zeppelin.notebook.Note.setName : $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(92) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $i1 < 0
org.apache.zeppelin.notebook.Note.setName : if $i1 < 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r1
org.apache.zeppelin.notebook.Note.setName : r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> = r1 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $r3 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $r3 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $r3 == null
org.apache.zeppelin.notebook.Note.setName : if $r3 == null >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Note.setName : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.setName : if $z0 != 0
org.apache.zeppelin.notebook.Note.setName : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener>
org.apache.zeppelin.notebook.Note.setName : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> >>>>>>>> org.apache.zeppelin.notebook.Note.setName : interfaceinvoke $r4.<org.apache.zeppelin.notebook.NoteNameListener: void onNoteNameChanged(org.apache.zeppelin.notebook.Note,java.lang.String)>(r0, r2)
org.apache.zeppelin.notebook.Note.setName : interfaceinvoke $r4.<org.apache.zeppelin.notebook.NoteNameListener: void onNoteNameChanged(org.apache.zeppelin.notebook.Note,java.lang.String)>(r0, r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.isNameEmpty : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.Note.isNameEmpty : $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0
org.apache.zeppelin.notebook.Note.isNameEmpty : return $z0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r4 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.Note.getName : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getName : if $z0 == 0
org.apache.zeppelin.notebook.Note.getName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getName : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name>
org.apache.zeppelin.notebook.Note.getName : $r2 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String name> >>>>>>>> org.apache.zeppelin.notebook.Note.getName : return $r2
org.apache.zeppelin.notebook.Note.getName : return $r2 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Note name changed: {} -> {}", r2, $r5)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Note name changed: {} -> {}", r2, $r5) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z1 != 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void putNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>()
org.apache.zeppelin.notebook.FolderView.putNote : $z0 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: boolean isNameEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.putNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>()
org.apache.zeppelin.notebook.FolderView.putNote : r2 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>()
org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Note.getFolderId : $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : if $c1 != 47
org.apache.zeppelin.notebook.Note.getFolderId : if $c1 != 47 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Note.getFolderId : i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0
org.apache.zeppelin.notebook.Note.getFolderId : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : return "/"
org.apache.zeppelin.notebook.Note.getFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2)
org.apache.zeppelin.notebook.FolderView.putNote : r3 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : if $z0 == 0
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r6 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder createFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r5 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.createFolder : r5 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("///") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/"
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = new org.apache.zeppelin.notebook.Folder
org.apache.zeppelin.notebook.FolderView.createFolder : $r6 = new org.apache.zeppelin.notebook.Folder >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : specialinvoke $r6.<org.apache.zeppelin.notebook.Folder: void <init>(java.lang.String)>(r5)
org.apache.zeppelin.notebook.FolderView.createFolder : specialinvoke $r6.<org.apache.zeppelin.notebook.Folder: void <init>(java.lang.String)>(r5) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r2 = $r6
org.apache.zeppelin.notebook.FolderView.createFolder : r2 = $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void addFolderListener(org.apache.zeppelin.notebook.FolderListener)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners>
org.apache.zeppelin.notebook.Folder.addFolderListener : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.List listeners> >>>>>>>> org.apache.zeppelin.notebook.Folder.addFolderListener : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Folder.addFolderListener : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r7 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.FolderView.createFolder : $r7 = <org.apache.zeppelin.notebook.FolderView: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Create folder {}", r5)
org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Create folder {}", r5) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : $r8 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r3 = $r8
org.apache.zeppelin.notebook.FolderView.createFolder : r3 = $r8 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : entermonitor $r8
org.apache.zeppelin.notebook.FolderView.createFolder : entermonitor $r8 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r9 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.createFolder : $r9 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r2)
org.apache.zeppelin.notebook.FolderView.createFolder : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor r3
org.apache.zeppelin.notebook.FolderView.createFolder : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : goto [?= $r12 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()]
org.apache.zeppelin.notebook.FolderView.createFolder : goto [?= $r12 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()] >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : $r12 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>()
org.apache.zeppelin.notebook.FolderView.createFolder : $r12 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getParentFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: boolean isRoot()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.isRoot : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id>
org.apache.zeppelin.notebook.Folder.getId : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Folder.getId : return $r1
org.apache.zeppelin.notebook.Folder.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/")
org.apache.zeppelin.notebook.Folder.isRoot : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.isRoot : return $z0
org.apache.zeppelin.notebook.Folder.isRoot : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : if $z0 == 0
org.apache.zeppelin.notebook.Folder.getParentFolderId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/"
org.apache.zeppelin.notebook.Folder.getParentFolderId : return "/" >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : r13 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r12)
org.apache.zeppelin.notebook.FolderView.createFolder : r13 = specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getOrCreateFolder(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r5 = (org.apache.zeppelin.notebook.Folder) $r4
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : $r5 = (org.apache.zeppelin.notebook.Folder) $r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r5
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r5 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void setParent(org.apache.zeppelin.notebook.Folder)>(r13) >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.setParent : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.setParent : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.setParent : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Set parent of {} to {}", $r3, $r4)
org.apache.zeppelin.notebook.Folder.setParent : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Set parent of {} to {}", $r3, $r4) >>>>>>>> org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1
org.apache.zeppelin.notebook.Folder.setParent : r0.<org.apache.zeppelin.notebook.Folder: org.apache.zeppelin.notebook.Folder parent> = r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>(r2)
org.apache.zeppelin.notebook.FolderView.createFolder : virtualinvoke r13.<org.apache.zeppelin.notebook.Folder: void addChild(org.apache.zeppelin.notebook.Folder)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0
org.apache.zeppelin.notebook.Folder.addChild : if r1 != r0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.createFolder : return r2
org.apache.zeppelin.notebook.FolderView.createFolder : return r2 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r6
org.apache.zeppelin.notebook.FolderView.getOrCreateFolder : return $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.putNote : virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: void addNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.addNote : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Add note {} to folder {}", $r5, $r6)
org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Add note {} to folder {}", $r5, $r6) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : r3 = $r7
org.apache.zeppelin.notebook.Folder.addNote : r3 = $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : entermonitor $r7
org.apache.zeppelin.notebook.Folder.addNote : entermonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.addNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1)
org.apache.zeppelin.notebook.Folder.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : exitmonitor r3
org.apache.zeppelin.notebook.Folder.addNote : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Folder.addNote : goto [?= return]
org.apache.zeppelin.notebook.Folder.addNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : r4 = $r6
org.apache.zeppelin.notebook.FolderView.putNote : r4 = $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : entermonitor $r6
org.apache.zeppelin.notebook.FolderView.putNote : entermonitor $r6 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.putNote : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.apache.zeppelin.notebook.FolderView.putNote : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor r4
org.apache.zeppelin.notebook.FolderView.putNote : exitmonitor r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.putNote : goto [?= return]
org.apache.zeppelin.notebook.FolderView.putNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : goto [?= return]
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Note.setName : r1 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String normalizeNoteName(java.lang.String)>(r1)
org.apache.zeppelin.notebook.Note.setName : r1 = specialinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String normalizeNoteName(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/")
org.apache.zeppelin.notebook.Note.normalizeNoteName : r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/") >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("///")
org.apache.zeppelin.notebook.Note.normalizeNoteName : $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("///") >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : if $z0 == 0
org.apache.zeppelin.notebook.Note.normalizeNoteName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/")
org.apache.zeppelin.notebook.Note.normalizeNoteName : r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/") >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : $i0 = virtualinvoke r4.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Note.normalizeNoteName : $i0 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : if $i0 != 0
org.apache.zeppelin.notebook.Note.normalizeNoteName : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.normalizeNoteName : return r4
org.apache.zeppelin.notebook.Note.normalizeNoteName : return r4 >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1)
org.apache.zeppelin.notebook.Note.getFolderId : r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.zeppelin.notebook.Note.getFolderId : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.zeppelin.notebook.Note.getFolderId : return r2
org.apache.zeppelin.notebook.Note.getFolderId : return r2 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c0 != 47
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c0 != 47 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i1 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i2 = $i1 - 1
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $i2 = $i1 - 1 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2)
org.apache.zeppelin.notebook.Folder.normalizeFolderId : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c3 != 47
org.apache.zeppelin.notebook.Folder.normalizeFolderId : if $c3 != 47 >>>>>>>> org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3
org.apache.zeppelin.notebook.Folder.normalizeFolderId : return r3 >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r1 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/")
org.apache.zeppelin.notebook.Folder.getParentFolderId : i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : if i0 >= 0
org.apache.zeppelin.notebook.Folder.getParentFolderId : if i0 >= 0 >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children>
org.apache.zeppelin.notebook.Folder.addChild : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map children> >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : $r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.addChild : $r3 = virtualinvoke r1.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.addChild : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.zeppelin.notebook.Folder.addChild : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.zeppelin.notebook.Folder.getParentFolderId : $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.zeppelin.notebook.Folder.getParentFolderId : return $r3
org.apache.zeppelin.notebook.Folder.getParentFolderId : return $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : r2 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.getFolder : r2 = staticinvoke <org.apache.zeppelin.notebook.Folder: java.lang.String normalizeFolderId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders>
org.apache.zeppelin.notebook.FolderView.getFolder : $r3 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map folders> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.notebook.FolderView.getFolder : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : $r5 = (org.apache.zeppelin.notebook.Folder) $r4
org.apache.zeppelin.notebook.FolderView.getFolder : $r5 = (org.apache.zeppelin.notebook.Folder) $r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolder : return $r5
org.apache.zeppelin.notebook.FolderView.getFolder : return $r5 >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList
org.apache.zeppelin.notebook.Folder.getNotes : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.getNotes : $r2 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Folder.getNotes : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r3)
org.apache.zeppelin.notebook.Folder.getNotes : specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Folder.getNotes : return $r1
org.apache.zeppelin.notebook.Folder.getNotes : return $r1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolderOf : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.getFolderOf : $r2 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolderOf : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.getFolderOf : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolderOf : $r4 = (org.apache.zeppelin.notebook.Folder) $r3
org.apache.zeppelin.notebook.FolderView.getFolderOf : $r4 = (org.apache.zeppelin.notebook.Folder) $r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.getFolderOf : return $r4
org.apache.zeppelin.notebook.FolderView.getFolderOf : return $r4 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r7 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : r3 = (org.apache.zeppelin.notebook.Folder) $r8
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : r3 = (org.apache.zeppelin.notebook.Folder) $r8 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r9 = virtualinvoke r3.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r10 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>()
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $r10 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getFolderId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z2 == 0
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.onNoteNameChanged : virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.removeNote : $r5 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.removeNote : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : if $z0 != 0
org.apache.zeppelin.notebook.FolderView.removeNote : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.removeNote : $r6 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.removeNote : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : r2 = (org.apache.zeppelin.notebook.Folder) $r7
org.apache.zeppelin.notebook.FolderView.removeNote : r2 = (org.apache.zeppelin.notebook.Folder) $r7 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void removeNote(org.apache.zeppelin.notebook.Note)>(r1)
org.apache.zeppelin.notebook.FolderView.removeNote : virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: void removeNote(org.apache.zeppelin.notebook.Note)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger>
org.apache.zeppelin.notebook.Folder.removeNote : $r2 = <org.apache.zeppelin.notebook.Folder: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.removeNote : $r5 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.removeNote : $r6 = virtualinvoke r0.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Remove note {} from folder {}", $r5, $r6)
org.apache.zeppelin.notebook.Folder.removeNote : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Remove note {} from folder {}", $r5, $r6) >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.removeNote : $r7 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : r3 = $r7
org.apache.zeppelin.notebook.Folder.removeNote : r3 = $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : entermonitor $r7
org.apache.zeppelin.notebook.Folder.removeNote : entermonitor $r7 >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.removeNote : $r8 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Folder.removeNote : $r9 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9)
org.apache.zeppelin.notebook.Folder.removeNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9) >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : exitmonitor r3
org.apache.zeppelin.notebook.Folder.removeNote : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Folder.removeNote : goto [?= return]
org.apache.zeppelin.notebook.Folder.removeNote : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r8 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>()
org.apache.zeppelin.notebook.FolderView.removeNote : $r8 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolderIfEmpty(java.lang.String)>($r8)
org.apache.zeppelin.notebook.FolderView.removeNote : specialinvoke r0.<org.apache.zeppelin.notebook.FolderView: void removeFolderIfEmpty(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: boolean hasFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.hasFolder : $r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : if $r2 == null
org.apache.zeppelin.notebook.FolderView.hasFolder : if $r2 == null >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : $z0 = 1
org.apache.zeppelin.notebook.FolderView.hasFolder : $z0 = 1 >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : goto [?= return $z0]
org.apache.zeppelin.notebook.FolderView.hasFolder : goto [?= return $z0] >>>>>>>> org.apache.zeppelin.notebook.FolderView.hasFolder : return $z0
org.apache.zeppelin.notebook.FolderView.hasFolder : return $z0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $z0 != 0
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1)
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.FolderView: org.apache.zeppelin.notebook.Folder getFolder(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $i0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: int countNotes()>()
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : $i0 = virtualinvoke r2.<org.apache.zeppelin.notebook.Folder: int countNotes()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.countNotes : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes>
org.apache.zeppelin.notebook.Folder.countNotes : $r1 = r0.<org.apache.zeppelin.notebook.Folder: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Folder.countNotes : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>()
org.apache.zeppelin.notebook.Folder.countNotes : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Folder.countNotes : return $i0
org.apache.zeppelin.notebook.Folder.countNotes : return $i0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $i0 != 0
org.apache.zeppelin.notebook.FolderView.removeFolderIfEmpty : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r9 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.removeNote : $r9 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : r3 = $r9
org.apache.zeppelin.notebook.FolderView.removeNote : r3 = $r9 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : entermonitor $r9
org.apache.zeppelin.notebook.FolderView.removeNote : entermonitor $r9 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index>
org.apache.zeppelin.notebook.FolderView.removeNote : $r10 = r0.<org.apache.zeppelin.notebook.FolderView: java.util.Map index> >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.FolderView.removeNote : interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : exitmonitor r3
org.apache.zeppelin.notebook.FolderView.removeNote : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.FolderView.removeNote : goto [?= return]
