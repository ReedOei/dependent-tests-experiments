org.apache.zeppelin.notebook.NotebookTest.delete : $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if $z0 == 0
org.apache.zeppelin.notebook.NotebookTest.delete : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>()
org.apache.zeppelin.notebook.NotebookTest.delete : $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if $z2 == 0
org.apache.zeppelin.notebook.NotebookTest.delete : if $z2 == 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>()
org.apache.zeppelin.notebook.NotebookTest.delete : r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if r2 == null
org.apache.zeppelin.notebook.NotebookTest.delete : if r2 == null >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : $i2 = lengthof r2
org.apache.zeppelin.notebook.NotebookTest.delete : $i2 = lengthof r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if $i2 <= 0
org.apache.zeppelin.notebook.NotebookTest.delete : if $i2 <= 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : r3 = r2
org.apache.zeppelin.notebook.NotebookTest.delete : r3 = r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : i0 = lengthof r3
org.apache.zeppelin.notebook.NotebookTest.delete : i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : i1 = 0
org.apache.zeppelin.notebook.NotebookTest.delete : i1 = 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : if i1 >= i0
org.apache.zeppelin.notebook.NotebookTest.delete : if i1 >= i0 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : r4 = r3[i1]
org.apache.zeppelin.notebook.NotebookTest.delete : r4 = r3[i1] >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookTest: void delete(java.io.File)>(r4)
org.apache.zeppelin.notebook.NotebookTest.delete : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookTest: void delete(java.io.File)>(r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : virtualinvoke r1.<java.io.File: boolean delete()>()
org.apache.zeppelin.notebook.NotebookTest.delete : virtualinvoke r1.<java.io.File: boolean delete()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= return]
org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : i1 = i1 + 1
org.apache.zeppelin.notebook.NotebookTest.delete : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= (branch)]
org.apache.zeppelin.notebook.NotebookTest.delete : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String varName> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getVarName : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r0 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.create : if $r0 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.conf.ZeppelinConfiguration.create : $r4 = <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.create : return $r4 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getStringValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : $r1 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String stringValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getStringValue : return $r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r4 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : if $r6 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r8 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getStringValue(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r6 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r3 = interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z0 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : r5 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r8 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r8 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $r8 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $r8 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r9 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $r9 = interfaceinvoke r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z2 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : if $z2 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getStringValue : return r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r5 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if r1 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if r1 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z0 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[A-Za-z]:\\\\.*")
org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[A-Za-z]:\\\\.*") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration.isWindowsPath : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r2 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r7
org.apache.zeppelin.conf.ZeppelinConfiguration.getString : return $r7 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r8
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r8 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r3
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return $r3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterDir : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1 = newarray (java.lang.Object)[1]
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CONF_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CONF_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getConfDir : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1[0] = $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r1[0] = $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/interpreter.json", $r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/interpreter.json", $r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return r1
org.apache.zeppelin.conf.ZeppelinConfiguration.getRelativeDir : return r1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterSettingPath : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r1 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterJson()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_JSON>
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_JSON> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterJson : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r2 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterDirPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r15 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r15 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r44 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r44 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r45 = interfaceinvoke $r44.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r45 = interfaceinvoke $r44.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r46 = interfaceinvoke $r45.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r46 = interfaceinvoke $r45.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z6 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r54 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r54 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r55 = interfaceinvoke $r54.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r55 = interfaceinvoke $r54.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r56 = interfaceinvoke $r55.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r56 = interfaceinvoke $r55.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z7 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z7 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z7 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z7 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r70 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r70 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r71 = interfaceinvoke $r70.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r71 = interfaceinvoke $r70.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r72 = interfaceinvoke $r71.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r72 = interfaceinvoke $r71.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z9 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z9 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z9 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z9 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadFromFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r18 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $r18 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r17, $r18)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadFromFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r80 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r80 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $i2 = interfaceinvoke $r80.<java.util.Map: int size()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $i2 = interfaceinvoke $r80.<java.util.Map: int size()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if 0 != $i2
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if 0 != $i2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r81 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r81 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r81.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : specialinvoke $r81.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r82 = $r81
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r82 = $r81 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r83 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r83 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r84 = interfaceinvoke $r83.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r84 = interfaceinvoke $r83.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r85 = interfaceinvoke $r84.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r85 = interfaceinvoke $r84.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z10 = interfaceinvoke r85.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z10 = interfaceinvoke r85.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z10 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z10 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r91 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r91 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i3 = lengthof r91
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i3 = lengthof r91 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if i4 >= i3
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if i4 >= i3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r92 = r91[i4]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r92 = r91[i4] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r93 = interfaceinvoke r82.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r92)
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r93 = interfaceinvoke r82.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r92) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r94 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r93
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r94 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r93 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r95 = $r94
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r95 = $r94 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if null == $r94
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if null == $r94 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = i4 + 1
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : i4 = i4 + 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= (branch)]
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r99 = interfaceinvoke r82.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r99 = interfaceinvoke r82.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r100 = interfaceinvoke $r99.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r100 = interfaceinvoke $r99.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z11 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z11 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z11 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z11 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r1 = $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r1 = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : entermonitor $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : entermonitor $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r6 = new org.apache.zeppelin.interpreter.InterpreterInfoSaving
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r6 = new org.apache.zeppelin.interpreter.InterpreterInfoSaving >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2 = $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterBindings> = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterBindings> = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterSettings> = $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.Map interpreterSettings> = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List interpreterRepositories>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List interpreterRepositories> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.List interpreterRepositories> = $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r2.<org.apache.zeppelin.interpreter.InterpreterInfoSaving: java.util.List interpreterRepositories> = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: com.google.gson.Gson gson>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r3 = virtualinvoke $r10.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r3 = virtualinvoke $r10.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : goto [?= $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : goto [?= $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r13 = newarray (java.nio.file.LinkOption)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r13 = newarray (java.nio.file.LinkOption)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r12, $r13)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r12, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r15 = newarray (java.nio.file.attribute.FileAttribute)[0]
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r15 = newarray (java.nio.file.attribute.FileAttribute)[0] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r14, $r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r14, $r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r17 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r17 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r18 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r18 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r19 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r17, $r18)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r19 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>($r20, r19)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>($r20, r19) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r22 = new java.io.FileOutputStream
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r22 = new java.io.FileOutputStream >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath>
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.nio.file.Path interpreterBindingPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r24 = interfaceinvoke $r23.<java.nio.file.Path: java.io.File toFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r24 = interfaceinvoke $r23.<java.nio.file.Path: java.io.File toFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r24, 0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r24, 0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r25 = $r22
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r25 = $r22 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r26 = new java.io.OutputStreamWriter
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : $r26 = new java.io.OutputStreamWriter >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r26.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r25)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : specialinvoke $r26.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r25) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r27 = $r26
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : r27 = $r26 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>(r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: void close()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r27.<java.io.OutputStreamWriter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r25.<java.io.FileOutputStream: void close()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.saveToFile : virtualinvoke r25.<java.io.FileOutputStream: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r106 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r106 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r107 = interfaceinvoke $r106.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $r107 = interfaceinvoke $r106.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r108 = interfaceinvoke $r107.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : r108 = interfaceinvoke $r107.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z12 = interfaceinvoke r108.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : $z12 = interfaceinvoke r108.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z12 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.init : if $z12 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "name should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "name should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "interpreterInfos should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "interpreterInfos should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "dependencies should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "dependencies should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "option should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "option should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "properties should not be null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "properties should not be null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r8 = $r21
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r8 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : entermonitor $r21
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : entermonitor $r21 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $z1 = interfaceinvoke $r22.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $z1 = interfaceinvoke $r22.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r36 = new org.apache.zeppelin.interpreter.InterpreterSetting
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r36 = new org.apache.zeppelin.interpreter.InterpreterSetting >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : specialinvoke $r36.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>(r1, null, r2, r5, r3, r4, r6, r7)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : specialinvoke $r36.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>(r1, null, r2, r5, r3, r4, r6, r7) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.util.Random
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r0 = new java.util.Random >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.util.Random: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : specialinvoke $r0.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>()
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $i1 = virtualinvoke $r0.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l2 = (long) $i1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $l3 = $l0 + $l2 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1)
org.apache.zeppelin.notebook.utility.IdHashes.generateId : $r2 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String encode(java.lang.Long)>($r1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r1 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r2 = $r1
org.apache.zeppelin.notebook.utility.IdHashes.encode : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r10 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r12 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = lengthof $r12
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i1 = lengthof $r12 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>($r14)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = $r10
org.apache.zeppelin.notebook.utility.IdHashes.encode : r4 = $r10 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r15 = new java.math.BigInteger >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r16 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r15.<java.math.BigInteger: void <init>(java.lang.String)>($r16)
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r15.<java.math.BigInteger: void <init>(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = $r15
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = $r15 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i2 = i0 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>($i2)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>($i2) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r8) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r17 = <org.apache.zeppelin.notebook.utility.IdHashes: char[] DICTIONARY> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i3 = virtualinvoke r9.<java.math.BigInteger: int intValue()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i3 = virtualinvoke r9.<java.math.BigInteger: int intValue()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $c4 = $r17[$i3]
org.apache.zeppelin.notebook.utility.IdHashes.encode : $c4 = $r17[$i3] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18)
org.apache.zeppelin.notebook.utility.IdHashes.encode : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7)
org.apache.zeppelin.notebook.utility.IdHashes.encode : r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO>
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r19 = <java.math.BigInteger: java.math.BigInteger ZERO> >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $z1 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i0 = i0 + 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= $r20 = new java.lang.StringBuffer] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r20 = new java.lang.StringBuffer >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r20.<java.lang.StringBuffer: void <init>()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r20
org.apache.zeppelin.notebook.utility.IdHashes.encode : r21 = $r20 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $i5 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i5 - 1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = $i5 - 1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0
org.apache.zeppelin.notebook.utility.IdHashes.encode : if i6 < 0 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6)
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22)
org.apache.zeppelin.notebook.utility.IdHashes.encode : virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22) >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1
org.apache.zeppelin.notebook.utility.IdHashes.encode : i6 = i6 + -1 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)]
org.apache.zeppelin.notebook.utility.IdHashes.encode : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.zeppelin.notebook.utility.IdHashes.encode : $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r24
org.apache.zeppelin.notebook.utility.IdHashes.encode : return $r24 >>>>>>>> org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2
org.apache.zeppelin.notebook.utility.IdHashes.generateId : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r9 = $r36
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : r9 = $r36 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r37 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r37 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : exitmonitor r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : exitmonitor r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : goto [?= $i0 = interfaceinvoke r3.<java.util.List: int size()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : goto [?= $i0 = interfaceinvoke r3.<java.util.List: int size()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $i0 <= 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : if $i0 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r40 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : $r40 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : virtualinvoke r9.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r40)
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : virtualinvoke r9.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r40) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterGroupFactory : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.add : return r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.add : return r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(".")
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(".") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : if $i0 < 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : if $i0 < 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "reference name should be not null")
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "reference name should be not null") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettingsRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r5
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(org.apache.zeppelin.interpreter.InterpreterSetting)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r6 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting createFromInterpreterSettingRef(org.apache.zeppelin.interpreter.InterpreterSetting)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List interpreterInfos> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterInfos : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r8 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r8 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r9 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getInterpreterInfos()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r2 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r10 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r10 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies>
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : if $r1 != null
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : if $r1 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies>
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List dependencies> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : return $r3
org.apache.zeppelin.interpreter.InterpreterSetting.getDependencies : return $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r10
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : if null != $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r11 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r11 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r12 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r3 = $r11
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r3 = $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r13 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r13 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties>
org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getProperties : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r14 = (java.util.Map) $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r14 = (java.util.Map) $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Properties convertInterpreterProperties(java.util.Map)>($r14)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Properties convertInterpreterProperties(java.util.Map)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r2 = new java.util.Properties
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r2 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : specialinvoke $r2.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : specialinvoke $r2.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r3 = $r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r3 = $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : return r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.convertInterpreterProperties : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r15 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r15 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : if $r2 != null
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : if $r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option>
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r3
org.apache.zeppelin.interpreter.InterpreterSetting.getOption : return $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterOption: org.apache.zeppelin.interpreter.InterpreterOption fromInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>($r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterOption: org.apache.zeppelin.interpreter.InterpreterOption fromInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r16 = new org.apache.zeppelin.interpreter.InterpreterSetting
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r16 = new org.apache.zeppelin.interpreter.InterpreterSetting >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r17 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r17 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterSetting.getName : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r18 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r18 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getPath : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String path>
org.apache.zeppelin.interpreter.InterpreterSetting.getPath : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String path> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getPath : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getPath : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner getInterpreterRunner()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r20 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner getInterpreterRunner()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterRunner interpreterRunner> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterRunner : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r16.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>($r17, $r18, r2, r4, r3, r5, $r19, $r20)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : specialinvoke $r16.<org.apache.zeppelin.interpreter.InterpreterSetting: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.Object,java.util.List,org.apache.zeppelin.interpreter.InterpreterOption,java.lang.String,org.apache.zeppelin.interpreter.InterpreterRunner)>($r17, $r18, r2, r4, r3, r5, $r19, $r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r6 = $r16
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : r6 = $r16 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r21)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r21) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.createFromInterpreterSettingRef : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setName(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setName(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setName : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setName : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String name> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setGroup(java.lang.String)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setGroup(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setGroup : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setGroup : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void appendDependencies(java.util.List)>(r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void appendDependencies(java.util.List)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.appendDependencies : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>(r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterOption(org.apache.zeppelin.interpreter.InterpreterOption)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterOption : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setInterpreterOption : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption option> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setProperties(java.util.Properties)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setProperties(java.util.Properties)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setProperties : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setProperties : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object properties> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: void setInterpreterGroupFactory(org.apache.zeppelin.interpreter.InterpreterGroupFactory)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getId : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterSetting.getId : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getId : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getId : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadInterpreterDependencies(org.apache.zeppelin.interpreter.InterpreterSetting)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void loadInterpreterDependencies(org.apache.zeppelin.interpreter.InterpreterSetting)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r2 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status DOWNLOADING_DEPENDENCIES>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r2 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status DOWNLOADING_DEPENDENCIES> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setStatus : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setStatus : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterSetting$Status status> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.setErrorReason : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String errorReason> = r1
org.apache.zeppelin.interpreter.InterpreterSetting.setErrorReason : r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String errorReason> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r7 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r3 = $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r3 = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : entermonitor $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : entermonitor $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r10 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$3
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : $r10 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.interpreter.InterpreterSetting)>(r0, r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.interpreter.InterpreterSetting)>(r0, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r4 = $r10
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : r4 = $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r4.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : virtualinvoke r4.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : exitmonitor r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : exitmonitor r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.loadInterpreterDependencies : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : return r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.createNewSetting : return r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r1 = new java.io.File
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r1 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r10 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration access$000(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r10 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration access$000(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration>
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.conf.ZeppelinConfiguration zeppelinConfiguration> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : return $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r11 = virtualinvoke $r10.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r11 = virtualinvoke $r10.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getInterpreterLocalRepoPath()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LOCALREPO>
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETER_LOCALREPO> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getInterpreterLocalRepoPath : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r15 = virtualinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r15 = virtualinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r17)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r3 = $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r3 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r20 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r21 = virtualinvoke $r20.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r21 = virtualinvoke $r20.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.List getDependencies()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if r21 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if r21 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r5 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : r5 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r44 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r44 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r45 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r45 = <org.apache.zeppelin.interpreter.InterpreterSetting$Status: org.apache.zeppelin.interpreter.InterpreterSetting$Status READY> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r44.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r45)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r44.<org.apache.zeppelin.interpreter.InterpreterSetting: void setStatus(org.apache.zeppelin.interpreter.InterpreterSetting$Status)>($r45) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r46 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r46 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r46.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : virtualinvoke $r46.<org.apache.zeppelin.interpreter.InterpreterSetting: void setErrorReason(java.lang.String)>(null) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r47 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r47 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSettingManager this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r48 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map access$300(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r47)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r48 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map access$300(org.apache.zeppelin.interpreter.InterpreterSettingManager)>($r47) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : return $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.access$300 : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r49 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r49 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r50 = virtualinvoke $r49.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r50 = virtualinvoke $r49.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r51 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting>
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : $r51 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$3: org.apache.zeppelin.interpreter.InterpreterSetting val$setting> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51)
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager$3.run : goto [?= return] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR>
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_DIR> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getNotebookDir : return $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r3 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z0 = virtualinvoke $r3.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isWindowsPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = new java.net.URI
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r6 = new java.net.URI >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r6
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r6 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>]
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : goto [?= $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>] >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r9 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r10 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $r10 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r11 = new java.io.File
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r11 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r12 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r13 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r14)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r15 = virtualinvoke $r12.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r15)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r15) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r16 = $r11
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r16 = $r11 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke r16.<java.io.File: java.net.URI toURI()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r17 = virtualinvoke r16.<java.io.File: java.net.URI toURI()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> = $r17 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r18 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r18 = staticinvoke <org.apache.commons.vfs2.VFS: org.apache.commons.vfs2.FileSystemManager getManager()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r18
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> = $r18 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r19 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r20 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r20 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r21 = virtualinvoke $r20.<java.net.URI: java.lang.String getPath()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $r21 = virtualinvoke $r20.<java.net.URI: java.lang.String getPath()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r22 = interfaceinvoke $r19.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r21)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : r22 = interfaceinvoke $r19.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r21) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r22.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : $z1 = interfaceinvoke r22.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.setNotebookDirectory : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.init : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : if $r1 != null
org.apache.zeppelin.notebook.NotebookAuthorization.init : if $r1 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : $r12 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance>
org.apache.zeppelin.notebook.NotebookAuthorization.init : $r12 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.notebook.NotebookAuthorization instance> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.init : return $r12
org.apache.zeppelin.notebook.NotebookAuthorization.init : return $r12 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CREDENTIALS_PERSIST>
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_CREDENTIALS_PERSIST> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r2 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z0 = virtualinvoke r1.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean getBooleanValue()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue>
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : $z0 = r0.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: boolean booleanValue> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars.getBooleanValue : return $z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(java.lang.String,java.lang.String,boolean)>($r2, $r3, $z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r3 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : if $r5 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z3 = specialinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBooleanValue(java.lang.String,boolean)>(r2, z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r5 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r2 = interfaceinvoke $r5.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if r2 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z1 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z2 == 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z2 == 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r6 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r7 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $r7 == null
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $r7 == null >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name")
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $r8 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren(java.lang.String)>("name") >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z3 != 0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : if $z3 != 0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0
org.apache.zeppelin.conf.ZeppelinConfiguration.getBooleanValue : return z0 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z3 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z1 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : return $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.credentialsPersist : return $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1 = newarray (java.lang.Object)[1]
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>()
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r2 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getConfDir()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1[0] = $r2
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r1[0] = $r2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/credentials.json", $r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/credentials.json", $r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3)
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : $r4 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getRelativeDir(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : return $r4
org.apache.zeppelin.conf.ZeppelinConfiguration.getCredentialsPath : return $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo>
org.apache.zeppelin.notebook.Notebook.loadAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo> >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : r2 = interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1)
org.apache.zeppelin.notebook.Notebook.loadAllNotes : r2 = interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: java.util.List list(org.apache.zeppelin.user.AuthenticationInfo)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r2 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileSystemManager fsManager> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $r3 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.lang.String getPath(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r2.<java.lang.String: int length()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $i0 = virtualinvoke $r2.<java.lang.String: int length()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/")
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r5 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r6 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r6 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: java.net.URI filesystemRoot> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r10
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getPath : return $r10 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : r1 = interfaceinvoke $r2.<org.apache.commons.vfs2.FileSystemManager: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z0 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if r1 != null >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r3 = interfaceinvoke r1.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileType getType()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : $r2 = <org.apache.commons.vfs2.FileType: org.apache.commons.vfs2.FileType FOLDER> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r3 != $r2
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : if $r3 != $r2 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.isDirectory : return 1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.getRootDir : return r1 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject[] getChildren()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r3 = interfaceinvoke r2.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject[] getChildren()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r9 = new java.util.LinkedList
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : $r9 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : specialinvoke $r9.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : specialinvoke $r9.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r4 = $r9
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r4 = $r9 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r5 = r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : r5 = r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i0 = lengthof r5
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i0 = lengthof r5 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : i1 = 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if i1 >= i0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : if i1 >= i0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : return r4
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.list : return r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.loadAllNotes : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.loadAllNotes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.loadAllNotes : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.loadAllNotes : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>()
org.apache.zeppelin.notebook.Notebook.getAllNotes : r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : if r1 == null
org.apache.zeppelin.notebook.Notebook.getAllNotes : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
org.apache.zeppelin.notebook.Notebook.getAllNotes : interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : r3 = $r5
org.apache.zeppelin.notebook.Notebook.getAllNotes : r3 = $r5 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : entermonitor $r5
org.apache.zeppelin.notebook.Notebook.getAllNotes : entermonitor $r5 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r8 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r7)
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r8 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r7) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r9 = new org.apache.zeppelin.notebook.Notebook$3
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r9 = new org.apache.zeppelin.notebook.Notebook$3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : specialinvoke $r9.<org.apache.zeppelin.notebook.Notebook$3: void <init>(org.apache.zeppelin.notebook.Notebook,java.util.Set)>(r0, r2)
org.apache.zeppelin.notebook.Notebook.getAllNotes : specialinvoke $r9.<org.apache.zeppelin.notebook.Notebook$3: void <init>(org.apache.zeppelin.notebook.Notebook,java.util.Set)>(r0, r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r10 = virtualinvoke $r8.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r9)
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r10 = virtualinvoke $r8.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r9) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r11 = new org.apache.zeppelin.notebook.Notebook$2
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r11 = new org.apache.zeppelin.notebook.Notebook$2 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : specialinvoke $r11.<org.apache.zeppelin.notebook.Notebook$2: void <init>(org.apache.zeppelin.notebook.Notebook)>(r0)
org.apache.zeppelin.notebook.Notebook.getAllNotes : specialinvoke $r11.<org.apache.zeppelin.notebook.Notebook$2: void <init>(org.apache.zeppelin.notebook.Notebook)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : $r12 = virtualinvoke $r10.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableList toSortedList(java.util.Comparator)>($r11)
org.apache.zeppelin.notebook.Notebook.getAllNotes : $r12 = virtualinvoke $r10.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableList toSortedList(java.util.Comparator)>($r11) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : exitmonitor r3
org.apache.zeppelin.notebook.Notebook.getAllNotes : exitmonitor r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getAllNotes : return $r12
org.apache.zeppelin.notebook.Notebook.getAllNotes : return $r12 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Notebook.createNote : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.Notebook.createNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r5 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING>
org.apache.zeppelin.notebook.Notebook.createNote : $r5 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $z0 = virtualinvoke $r4.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r5)
org.apache.zeppelin.notebook.Notebook.createNote : $z0 = virtualinvoke $r4.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r5) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.createNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.createNote : $r6 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r7 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getDefaultInterpreterSettingList()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r7 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getDefaultInterpreterSettingList()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r1 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r1 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r1.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r1.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r2 = $r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r7 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r7 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r3 = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r3 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r1 = $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r1 = $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r13
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r13 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r14 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r14 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r14.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r14.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r14
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r14 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r15 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r15 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r15.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r3 = $r15
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r3 = $r15 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r18
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r18 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getGroup()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group>
org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String group> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : return $r1
org.apache.zeppelin.interpreter.InterpreterSetting.getGroup : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z1 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r7)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r20 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r20 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r21 = (java.util.List) $r20
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r21 = (java.util.List) $r20 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r22 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.lang.String[] interpreterGroupOrderList> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i0 = lengthof r22
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i0 = lengthof r22 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if i1 >= i0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if i1 >= i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r8 = r22[i1]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r8 = r22[i1] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r23 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r23 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r9 = (java.util.List) $r23
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r9 = (java.util.List) $r23 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if null == r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if null == r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = i1 + 1
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= (branch)]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r25 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r25 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r25.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r25.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r26 = $r25
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r26 = $r25 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r27 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r27 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z5 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r30 = (java.util.List) $r29
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r30 = (java.util.List) $r29 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r31 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r31 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z6 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : if $z6 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r32 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r32 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r33 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r32
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r33 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r32 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r33)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r33) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z6 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : goto [?= $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r34 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$5
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r34 = new org.apache.zeppelin.interpreter.InterpreterSettingManager$5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r34.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : specialinvoke $r34.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: void <init>(org.apache.zeppelin.interpreter.InterpreterSettingManager)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r26, $r34)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r26, $r34) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = (org.apache.zeppelin.interpreter.InterpreterSetting) r1
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = (org.apache.zeppelin.interpreter.InterpreterSetting) r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) r2
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = (org.apache.zeppelin.interpreter.InterpreterSetting) r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: int compare(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterSetting)>($r3, $r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager$5: int compare(org.apache.zeppelin.interpreter.InterpreterSetting,org.apache.zeppelin.interpreter.InterpreterSetting)>($r3, $r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r3 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $r4 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4)
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : return $i0
org.apache.zeppelin.interpreter.InterpreterSettingManager$5.compare : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r26)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r26) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r6 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : r6 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r9 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r9 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r9)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r10 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r10)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z2 != 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : if $z2 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r11 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r12 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r12 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : return r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.getDefaultInterpreterSettingList : return r2 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note createNote(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>($r7, r1)
org.apache.zeppelin.notebook.Notebook.createNote : r2 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note createNote(java.util.List,org.apache.zeppelin.user.AuthenticationInfo)>($r7, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r3 = new org.apache.zeppelin.notebook.Note
org.apache.zeppelin.notebook.Notebook.createNote : $r3 = new org.apache.zeppelin.notebook.Note >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo>
org.apache.zeppelin.notebook.Notebook.createNote : $r7 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.repo.NotebookRepo notebookRepo> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterFactory replFactory>
org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterFactory replFactory> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.createNote : $r9 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory>
org.apache.zeppelin.notebook.Notebook.createNote : $r10 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.JobListenerFactory jobListenerFactory> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.user.Credentials credentials>
org.apache.zeppelin.notebook.Notebook.createNote : $r12 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.user.Credentials credentials> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r8, $r9, $r10, $r11, $r12, r0)
org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke $r3.<org.apache.zeppelin.notebook.Note: void <init>(org.apache.zeppelin.notebook.repo.NotebookRepo,org.apache.zeppelin.interpreter.InterpreterFactory,org.apache.zeppelin.interpreter.InterpreterSettingManager,org.apache.zeppelin.notebook.JobListenerFactory,org.apache.zeppelin.search.SearchService,org.apache.zeppelin.user.Credentials,org.apache.zeppelin.notebook.NoteEventListener)>($r7, $r8, $r9, $r10, $r11, $r12, r0) >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>()
org.apache.zeppelin.notebook.Note.generateId : $r1 = staticinvoke <org.apache.zeppelin.notebook.utility.IdHashes: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1
org.apache.zeppelin.notebook.Note.generateId : r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> = $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r4 = $r3
org.apache.zeppelin.notebook.Notebook.createNote : r4 = $r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders>
org.apache.zeppelin.notebook.Notebook.createNote : $r13 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.FolderView folders> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r13)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void setNoteNameListener(org.apache.zeppelin.notebook.NoteNameListener)>($r13) >>>>>>>> org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1
org.apache.zeppelin.notebook.Note.setNoteNameListener : r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.NoteNameListener noteNameListener> = r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.createNote : $r14 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : r5 = $r14
org.apache.zeppelin.notebook.Notebook.createNote : r5 = $r14 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : entermonitor $r14
org.apache.zeppelin.notebook.Notebook.createNote : entermonitor $r14 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.createNote : $r15 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r16 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r16 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.getId : $r1 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.getId : return $r1
org.apache.zeppelin.notebook.Note.getId : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r4)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : exitmonitor r5
org.apache.zeppelin.notebook.Notebook.createNote : exitmonitor r5 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : goto [?= (branch)]
org.apache.zeppelin.notebook.Notebook.createNote : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : if r1 == null
org.apache.zeppelin.notebook.Notebook.createNote : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r19 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r19 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r20 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r20 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: void bindInterpretersToNote(java.lang.String,java.lang.String,java.util.List)>($r19, $r20, r1)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: void bindInterpretersToNote(java.lang.String,java.lang.String,java.util.List)>($r19, $r20, r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r4 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.Note getNote(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getNote : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : r2 = $r4
org.apache.zeppelin.notebook.Notebook.getNote : r2 = $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : entermonitor $r4
org.apache.zeppelin.notebook.Notebook.getNote : entermonitor $r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes>
org.apache.zeppelin.notebook.Notebook.getNote : $r5 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.Map notes> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.Notebook.getNote : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : $r7 = (org.apache.zeppelin.notebook.Note) $r6
org.apache.zeppelin.notebook.Notebook.getNote : $r7 = (org.apache.zeppelin.notebook.Note) $r6 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : exitmonitor r2
org.apache.zeppelin.notebook.Notebook.getNote : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNote : return $r7
org.apache.zeppelin.notebook.Notebook.getNote : return $r7 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if r4 == null
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if r4 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r5 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r5 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getNoteInterpreterSettingBinding(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getNoteInterpreterSettingBinding(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r2 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r2 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : specialinvoke $r2.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : specialinvoke $r2.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r3 = $r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r3 = $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r4 = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r4 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : entermonitor $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : entermonitor $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r5 = (java.util.List) $r9
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : r5 = (java.util.List) $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : if r5 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : if r5 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : exitmonitor r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : exitmonitor r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : goto [?= return r3]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : goto [?= return r3] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : return r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r7 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r3 = $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r3 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : return r3
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : return r3 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r11 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r12 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : $r12 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreters(java.lang.String,java.lang.String,java.util.List)>(r1, $r12, r3)
org.apache.zeppelin.notebook.Notebook.bindInterpretersToNote : virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void setInterpreters(java.lang.String,java.lang.String,java.util.List)>(r1, $r12, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreters : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void putNoteInterpreterSettingBinding(java.lang.String,java.lang.String,java.util.List)>(r1, r2, r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.setInterpreters : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void putNoteInterpreterSettingBinding(java.lang.String,java.lang.String,java.util.List)>(r1, r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r4 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : specialinvoke $r4.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : specialinvoke $r4.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r5 = $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r5 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r6 = $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r6 = $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : entermonitor $r12
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : entermonitor $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r7 = (java.util.List) $r14
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r7 = (java.util.List) $r14 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if r7 == null
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if r7 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $r16 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterBindings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void saveToFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r18 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : r18 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z3 == 0
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : exitmonitor r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : exitmonitor r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterSettingManager.putNoteInterpreterSettingBinding : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r21 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.createNote : $r21 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r22 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook.createNote : $r22 = virtualinvoke r4.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r21.<org.apache.zeppelin.notebook.NotebookAuthorization: void setNewNotePermissions(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r22, r2)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke $r21.<org.apache.zeppelin.notebook.NotebookAuthorization: void setNewNotePermissions(java.lang.String,org.apache.zeppelin.user.AuthenticationInfo)>($r22, r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z0 = staticinvoke <org.apache.zeppelin.user.AuthenticationInfo: boolean isAnonymous(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z0 = staticinvoke <org.apache.zeppelin.user.AuthenticationInfo: boolean isAnonymous(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z1 = virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: boolean isPublic()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $z1 = virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: boolean isPublic()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isPublic : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.NotebookAuthorization.isPublic : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isPublic : $z0 = virtualinvoke $r1.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isNotebokPublic()>()
org.apache.zeppelin.notebook.NotebookAuthorization.isPublic : $z0 = virtualinvoke $r1.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean isNotebokPublic()>() >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isNotebokPublic : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_PUBLIC>
org.apache.zeppelin.conf.ZeppelinConfiguration.isNotebokPublic : $r1 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_NOTEBOOK_PUBLIC> >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isNotebokPublic : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1)
org.apache.zeppelin.conf.ZeppelinConfiguration.isNotebokPublic : $z0 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: boolean getBoolean(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r1) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z2 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6)
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : $z2 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z2
org.apache.zeppelin.conf.ZeppelinConfiguration.getBoolean : return $z2 >>>>>>>> org.apache.zeppelin.conf.ZeppelinConfiguration.isNotebokPublic : return $z0
org.apache.zeppelin.conf.ZeppelinConfiguration.isNotebokPublic : return $z0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isPublic : return $z0
org.apache.zeppelin.notebook.NotebookAuthorization.isPublic : return $z0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z1 == 0
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : if $z1 == 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set getOwners(java.lang.String)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set getOwners(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : r3 = (java.util.Map) $r4
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : r3 = (java.util.Map) $r4 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : n0 = null
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : n0 = null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : if r3 != null
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : if r3 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : $r5 = new java.util.HashSet
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : $r5 = new java.util.HashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : specialinvoke $r5.<java.util.HashSet: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : r6 = $r5
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : r6 = $r5 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : goto [?= return r6]
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : goto [?= return r6] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : return r6
org.apache.zeppelin.notebook.NotebookAuthorization.getOwners : return r6 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $r4 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : $r4 = virtualinvoke r2.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void setOwners(java.lang.String,java.util.Set)>(r1, r3)
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void setOwners(java.lang.String,java.util.Set)>(r1, r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : r4 = (java.util.Map) $r6
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : r4 = (java.util.Map) $r6 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : r7 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set validateUser(java.util.Set)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : r7 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set validateUser(java.util.Set)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r2 = new java.util.HashSet
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r2 = new java.util.HashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : specialinvoke $r2.<java.util.HashSet: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : r3 = $r2
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : r3 = $r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : if $z0 == 0
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : r5 = (java.lang.String) $r6
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : r5 = (java.lang.String) $r6 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r7 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r7 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $z1 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $z1 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : if $z1 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r8 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : $r8 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r8)
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r8) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : return r3
org.apache.zeppelin.notebook.NotebookAuthorization.validateUser : return r3 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : if r4 != null
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : if r4 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r8 = new java.util.LinkedHashMap
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r8 = new java.util.LinkedHashMap >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : r4 = $r8
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : r4 = $r8 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r5 = new java.util.LinkedHashSet
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r5 = new java.util.LinkedHashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r5.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r7)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r5.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r7) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("owners", $r5)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("owners", $r5) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r10 = new java.util.LinkedHashSet
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r10 = new java.util.LinkedHashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r10.<java.util.LinkedHashSet: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r10.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("readers", $r10)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("readers", $r10) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r12 = new java.util.LinkedHashSet
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r12 = new java.util.LinkedHashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r12.<java.util.LinkedHashSet: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke $r12.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("writers", $r12)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("writers", $r12) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : goto [?= $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>]
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : goto [?= $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setOwners : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r1 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r2 = $r1
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r2 = $r1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : entermonitor $r1
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : entermonitor $r1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r7 = new org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r7 = new org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r7.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r7.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3 = $r7
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3 = $r7 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r8 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r8 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: java.util.Map authInfo> = $r8
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r3.<org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving: java.util.Map authInfo> = $r8 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r9 = <org.apache.zeppelin.notebook.NotebookAuthorization: com.google.gson.Gson gson>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r9 = <org.apache.zeppelin.notebook.NotebookAuthorization: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r4 = virtualinvoke $r9.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r3)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r4 = virtualinvoke $r9.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : exitmonitor r2
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : goto [?= $r11 = new java.io.File]
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : goto [?= $r11 = new java.io.File] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r11 = new java.io.File
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r11 = new java.io.File >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r6 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.lang.String filePath>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r6 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.lang.String filePath> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r12 = $r11
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r12 = $r11 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $z0 = virtualinvoke r12.<java.io.File: boolean exists()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $z0 = virtualinvoke r12.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : virtualinvoke r12.<java.io.File: boolean createNewFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : virtualinvoke r12.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r19 = $r18
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : r19 = $r18 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r20 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.slf4j.Logger LOG>
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r20 = <org.apache.zeppelin.notebook.NotebookAuthorization: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error saving notebook authorization file: ")
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error saving notebook authorization file: ") >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r23 = virtualinvoke r19.<java.io.IOException: java.lang.String getMessage()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r23 = virtualinvoke r19.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r25)
org.apache.zeppelin.notebook.NotebookAuthorization.saveToFile : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : goto [?= return]
org.apache.zeppelin.notebook.NotebookAuthorization.setNewNotePermissions : goto [?= return] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r23 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r23 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r23.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r23.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>(r2)
org.apache.zeppelin.notebook.Notebook.createNote : virtualinvoke r4.<org.apache.zeppelin.notebook.Note: void persist(org.apache.zeppelin.user.AuthenticationInfo)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null")
org.apache.zeppelin.notebook.Note.persist : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AuthenticationInfo should not be null") >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void stopDelayedPersistTimer()>()
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void stopDelayedPersistTimer()>() >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : r2 = r0
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : r2 = r0 >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : entermonitor r0
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : entermonitor r0 >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist>
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : $r4 = r0.<org.apache.zeppelin.notebook.Note: java.util.concurrent.ScheduledFuture delayedPersist> >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : if $r4 != null
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : if $r4 != null >>>>>>>> org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : exitmonitor r2
org.apache.zeppelin.notebook.Note.stopDelayedPersistTimer : exitmonitor r2 >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r3 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>()
org.apache.zeppelin.notebook.Note.persist : $r3 = virtualinvoke r1.<org.apache.zeppelin.user.AuthenticationInfo: java.lang.String getUser()>() >>>>>>>> org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void snapshotAngularObjectRegistry(java.lang.String)>($r3)
org.apache.zeppelin.notebook.Note.persist : specialinvoke r0.<org.apache.zeppelin.notebook.Note: void snapshotAngularObjectRegistry(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r2 = new java.util.HashMap
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r2 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r2
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> = $r2 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r8 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r9 = virtualinvoke r0.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r3 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r9)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r3 = virtualinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List getInterpreterSettings(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : virtualinvoke r3.<java.util.LinkedList: boolean addAll(java.util.Collection)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getNoteInterpreterSettingBinding : virtualinvoke r3.<java.util.LinkedList: boolean addAll(java.util.Collection)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r5 = (java.lang.String) $r8
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r5 = (java.lang.String) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting get(java.lang.String)>(r5)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: org.apache.zeppelin.interpreter.InterpreterSetting get(java.lang.String)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : r2 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r4
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings>
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.Map interpreterSettings> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r6
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : $r7 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return $r7
org.apache.zeppelin.interpreter.InterpreterSettingManager.get : return $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if r6 != null
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : if r6 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterSettingManager.getInterpreterSettings : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if r3 == null
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if r3 == null >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $i0 != 0
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $i0 != 0 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $z0 == 0
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r10
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r5 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r10 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r11 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r11 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r1, $r11)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r6 = virtualinvoke r5.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup(java.lang.String,java.lang.String)>(r1, $r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterProcessKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r3 = specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getInterpreterProcessKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z0 = $r5.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z0 = $r5.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z1 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : $z1 = virtualinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r4 = "shared_process"
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : r4 = "shared_process" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : return r4
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterProcessKey : return r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterGroupFactory interpreterGroupFactory> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r14 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterSetting: org.apache.zeppelin.interpreter.InterpreterOption getOption()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r5 = interfaceinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterGroupFactory: org.apache.zeppelin.interpreter.InterpreterGroup createInterpreterGroup(java.lang.String,org.apache.zeppelin.interpreter.InterpreterOption)>(r4, $r14)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r5 = interfaceinvoke $r13.<org.apache.zeppelin.interpreter.InterpreterGroupFactory: org.apache.zeppelin.interpreter.InterpreterGroup createInterpreterGroup(java.lang.String,org.apache.zeppelin.interpreter.InterpreterOption)>(r4, $r14) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if r2 != null
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if r2 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r6 = new org.apache.zeppelin.interpreter.InterpreterGroup
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r6 = new org.apache.zeppelin.interpreter.InterpreterGroup >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterGroup: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterGroup: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r3 = $r6
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r3 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isRemote()>()
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $z0 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isRemote()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r9 = new org.apache.zeppelin.display.AngularObjectRegistry
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r9 = new org.apache.zeppelin.display.AngularObjectRegistry >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener>
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterFactory: org.apache.zeppelin.display.AngularObjectRegistryListener angularObjectRegistryListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r9.<org.apache.zeppelin.display.AngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener)>(r1, $r10)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : specialinvoke $r9.<org.apache.zeppelin.display.AngularObjectRegistry: void <init>(java.lang.String,org.apache.zeppelin.display.AngularObjectRegistryListener)>(r1, $r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r4 = $r9
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : r4 = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>(r4)
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterGroup: void setAngularObjectRegistry(org.apache.zeppelin.display.AngularObjectRegistry)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : return r3
org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup : return r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r15.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r15.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r16 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r16 = <org.apache.zeppelin.interpreter.InterpreterSetting: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r17 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create interpreter group with groupId:")
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create interpreter group with groupId:") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r21 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r23 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock interpreterGroupWriteLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r23.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r23.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r24 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r24.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r24.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r25 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r25 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.Map interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r27 = (org.apache.zeppelin.interpreter.InterpreterGroup) $r26
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : r27 = (org.apache.zeppelin.interpreter.InterpreterGroup) $r26 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r28 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock>
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : $r28 = r0.<org.apache.zeppelin.interpreter.InterpreterSetting: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock interpreterGroupReadLock> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r28.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>()
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : virtualinvoke $r28.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : return r27
org.apache.zeppelin.interpreter.InterpreterSetting.getInterpreterGroup : return r27 >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r7 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : r7 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.display.AngularObjectRegistry getAngularObjectRegistry()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r12 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r12 = r0.<org.apache.zeppelin.notebook.Note: java.util.Map angularObjects> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r13 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r13 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r14 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id>
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r14 = r0.<org.apache.zeppelin.notebook.Note: java.lang.String id> >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r15 = virtualinvoke r7.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.List getAllWithGlobal(java.lang.String)>($r14)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : $r15 = virtualinvoke r7.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.List getAllWithGlobal(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15)
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15) >>>>>>>> org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.notebook.Note.snapshotAngularObjectRegistry : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index>
org.apache.zeppelin.notebook.Note.persist : $r4 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.search.SearchService index> >>>>>>>> org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r4.<org.apache.zeppelin.search.SearchService: void updateIndexDoc(org.apache.zeppelin.notebook.Note)>(r0)
org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r4.<org.apache.zeppelin.search.SearchService: void updateIndexDoc(org.apache.zeppelin.notebook.Note)>(r0) >>>>>>>> org.apache.zeppelin.notebook.Note.persist : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo>
org.apache.zeppelin.notebook.Note.persist : $r5 = r0.<org.apache.zeppelin.notebook.Note: org.apache.zeppelin.notebook.repo.NotebookRepo repo> >>>>>>>> org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1)
org.apache.zeppelin.notebook.Note.persist : interfaceinvoke $r5.<org.apache.zeppelin.notebook.repo.NotebookRepo: void save(org.apache.zeppelin.notebook.Note,org.apache.zeppelin.user.AuthenticationInfo)>(r0, r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r3 = new com.google.gson.GsonBuilder
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r3 = new com.google.gson.GsonBuilder >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r3.<com.google.gson.GsonBuilder: void <init>()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : specialinvoke $r3.<com.google.gson.GsonBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = $r3
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r4 = $r3 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r5 = virtualinvoke r4.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r6 = virtualinvoke r5.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r7 = virtualinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.commons.vfs2.FileObject getRootDir()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r13 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r8 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r9 = interfaceinvoke r7.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r13, $r8)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r9 = interfaceinvoke r7.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>($r13, $r8) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z0 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: boolean exists()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z0 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: boolean exists()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z0 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: void createFolder()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: void createFolder()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r9)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $z1 = specialinvoke r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: boolean isDirectory(org.apache.commons.vfs2.FileObject)>(r9) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z1 != 0
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r21 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r21 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r10 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(".note.json", $r21)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r10 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>(".note.json", $r21) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r22 = interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r22 = interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileContent getContent()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r11 = interfaceinvoke $r22.<org.apache.commons.vfs2.FileContent: java.io.OutputStream getOutputStream(boolean)>(0)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : r11 = interfaceinvoke $r22.<org.apache.commons.vfs2.FileContent: java.io.OutputStream getOutputStream(boolean)>(0) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r23 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r23 = r0.<org.apache.zeppelin.notebook.repo.VFSNotebookRepo: org.apache.zeppelin.conf.ZeppelinConfiguration conf> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r24 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r24 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ENCODING> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r25 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r24)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r25 = virtualinvoke $r23.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r24) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r26 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>($r25)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r26 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>($r25) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void write(byte[])>($r26)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void write(byte[])>($r26) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void close()>()
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : virtualinvoke r11.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r27 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD>
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r27 = <org.apache.commons.vfs2.NameScope: org.apache.commons.vfs2.NameScope CHILD> >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r28 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r27)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : $r28 = interfaceinvoke r9.<org.apache.commons.vfs2.FileObject: org.apache.commons.vfs2.FileObject resolveFile(java.lang.String,org.apache.commons.vfs2.NameScope)>("note.json", $r27) >>>>>>>> org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: void moveTo(org.apache.commons.vfs2.FileObject)>($r28)
org.apache.zeppelin.notebook.repo.VFSNotebookRepo.save : interfaceinvoke r10.<org.apache.commons.vfs2.FileObject: void moveTo(org.apache.commons.vfs2.FileObject)>($r28) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteCreateEvent(org.apache.zeppelin.notebook.Note)>(r4)
org.apache.zeppelin.notebook.Notebook.createNote : specialinvoke r0.<org.apache.zeppelin.notebook.Notebook: void fireNoteCreateEvent(org.apache.zeppelin.notebook.Note)>(r4) >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners>
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $r4 = r0.<org.apache.zeppelin.notebook.Notebook: java.util.List notebookEventListeners> >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : if $z0 == 0
org.apache.zeppelin.notebook.Notebook.fireNoteCreateEvent : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : return r4
org.apache.zeppelin.notebook.Notebook.createNote : return r4 >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : goto [?= $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>]
org.apache.zeppelin.notebook.Notebook.createNote : goto [?= $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>] >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService>
org.apache.zeppelin.notebook.Notebook.createNote : $r8 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.search.SearchService noteSearchService> >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r8.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r2)
org.apache.zeppelin.notebook.Notebook.createNote : interfaceinvoke $r8.<org.apache.zeppelin.search.SearchService: void addIndexDoc(org.apache.zeppelin.notebook.Note)>(r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.createNote : return r2
org.apache.zeppelin.notebook.Notebook.createNote : return r2 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $r2 = (org.apache.zeppelin.notebook.Note) r1
org.apache.zeppelin.notebook.Notebook$3.apply : $r2 = (org.apache.zeppelin.notebook.Note) r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook$3: boolean apply(org.apache.zeppelin.notebook.Note)>($r2)
org.apache.zeppelin.notebook.Notebook$3.apply : $z0 = virtualinvoke r0.<org.apache.zeppelin.notebook.Notebook$3: boolean apply(org.apache.zeppelin.notebook.Note)>($r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : if r1 == null
org.apache.zeppelin.notebook.Notebook$3.apply : if r1 == null >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $r2 = r0.<org.apache.zeppelin.notebook.Notebook$3: org.apache.zeppelin.notebook.Notebook this$0>
org.apache.zeppelin.notebook.Notebook$3.apply : $r2 = r0.<org.apache.zeppelin.notebook.Notebook$3: org.apache.zeppelin.notebook.Notebook this$0> >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $r3 = staticinvoke <org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization access$000(org.apache.zeppelin.notebook.Notebook)>($r2)
org.apache.zeppelin.notebook.Notebook$3.apply : $r3 = staticinvoke <org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization access$000(org.apache.zeppelin.notebook.Notebook)>($r2) >>>>>>>> org.apache.zeppelin.notebook.Notebook.access$000 : $r1 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.access$000 : $r1 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.access$000 : return $r1
org.apache.zeppelin.notebook.Notebook.access$000 : return $r1 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>()
org.apache.zeppelin.notebook.Notebook$3.apply : $r4 = virtualinvoke r1.<org.apache.zeppelin.notebook.Note: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $r5 = r0.<org.apache.zeppelin.notebook.Notebook$3: java.util.Set val$entities>
org.apache.zeppelin.notebook.Notebook$3.apply : $r5 = r0.<org.apache.zeppelin.notebook.Notebook$3: java.util.Set val$entities> >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $z0 = virtualinvoke $r3.<org.apache.zeppelin.notebook.NotebookAuthorization: boolean isReader(java.lang.String,java.util.Set)>($r4, $r5)
org.apache.zeppelin.notebook.Notebook$3.apply : $z0 = virtualinvoke $r3.<org.apache.zeppelin.notebook.NotebookAuthorization: boolean isReader(java.lang.String,java.util.Set)>($r4, $r5) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isReader : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set getReaders(java.lang.String)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.isReader : $r3 = virtualinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set getReaders(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : $r2 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : r3 = (java.util.Map) $r4
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : r3 = (java.util.Map) $r4 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : n0 = null
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : n0 = null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : if r3 != null
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : if r3 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("readers")
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("readers") >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : r6 = (java.util.Set) $r7
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : r6 = (java.util.Set) $r7 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : if r6 != null
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : if r6 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : return r6
org.apache.zeppelin.notebook.NotebookAuthorization.getReaders : return r6 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isReader : $z0 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: boolean isMember(java.util.Set,java.util.Set)>(r2, $r3)
org.apache.zeppelin.notebook.NotebookAuthorization.isReader : $z0 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: boolean isMember(java.util.Set,java.util.Set)>(r2, $r3) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $r3 = new java.util.HashSet
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $r3 = new java.util.HashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : r4 = $r3
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : r4 = $r3 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : interfaceinvoke r4.<java.util.Set: boolean retainAll(java.util.Collection)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : interfaceinvoke r4.<java.util.Set: boolean retainAll(java.util.Collection)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $z1 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $z1 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : if $z1 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : if $z1 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $z2 = 1
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $z2 = 1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : goto [?= return $z2]
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : goto [?= return $z2] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : return $z2
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : return $z2 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isReader : if $z0 != 0
org.apache.zeppelin.notebook.NotebookAuthorization.isReader : if $z0 != 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isReader : $z3 = 1
org.apache.zeppelin.notebook.NotebookAuthorization.isReader : $z3 = 1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isReader : goto [?= return $z3]
org.apache.zeppelin.notebook.NotebookAuthorization.isReader : goto [?= return $z3] >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isReader : return $z3
org.apache.zeppelin.notebook.NotebookAuthorization.isReader : return $z3 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : if $z0 == 0
org.apache.zeppelin.notebook.Notebook$3.apply : if $z0 == 0 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : $z1 = 1
org.apache.zeppelin.notebook.Notebook$3.apply : $z1 = 1 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : goto [?= return $z1]
org.apache.zeppelin.notebook.Notebook$3.apply : goto [?= return $z1] >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : return $z1
org.apache.zeppelin.notebook.Notebook$3.apply : return $z1 >>>>>>>> org.apache.zeppelin.notebook.Notebook$3.apply : return $z0
org.apache.zeppelin.notebook.Notebook$3.apply : return $z0 >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNotebookAuthorization : $r1 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization>
org.apache.zeppelin.notebook.Notebook.getNotebookAuthorization : $r1 = r0.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.notebook.NotebookAuthorization notebookAuthorization> >>>>>>>> org.apache.zeppelin.notebook.Notebook.getNotebookAuthorization : return $r1
org.apache.zeppelin.notebook.Notebook.getNotebookAuthorization : return $r1 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : r4 = (java.util.Map) $r6
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : r4 = (java.util.Map) $r6 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : r7 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set validateUser(java.util.Set)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : r7 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set validateUser(java.util.Set)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : if r4 != null
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : if r4 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r14 = new java.util.LinkedHashSet
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r14 = new java.util.LinkedHashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : specialinvoke $r14.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r7)
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : specialinvoke $r14.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r7) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("readers", $r14)
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("readers", $r14) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>()
org.apache.zeppelin.notebook.NotebookAuthorization.setReaders : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $i0 = interfaceinvoke r4.<java.util.Set: int size()>()
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : $i0 = interfaceinvoke r4.<java.util.Set: int size()>() >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.isMember : if $i0 <= 0
org.apache.zeppelin.notebook.NotebookAuthorization.isMember : if $i0 <= 0 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r3 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : r4 = (java.util.Map) $r6
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : r4 = (java.util.Map) $r6 >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : r7 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set validateUser(java.util.Set)>(r2)
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : r7 = specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Set validateUser(java.util.Set)>(r2) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : if r4 != null
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : if r4 != null >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r14 = new java.util.LinkedHashSet
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r14 = new java.util.LinkedHashSet >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : specialinvoke $r14.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r7)
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : specialinvoke $r14.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r7) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("writers", $r14)
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("writers", $r14) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo>
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : $r16 = <org.apache.zeppelin.notebook.NotebookAuthorization: java.util.Map authInfo> >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.apache.zeppelin.notebook.NotebookAuthorization.setWriters : specialinvoke r0.<org.apache.zeppelin.notebook.NotebookAuthorization: void saveToFile()>()
