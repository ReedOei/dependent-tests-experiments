org.apache.zeppelin.socket.NotebookServer.onAdd : virtualinvoke r0.<org.apache.zeppelin.socket.NotebookServer: void onUpdate(java.lang.String,org.apache.zeppelin.display.AngularObject)>(r1, r2) >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onUpdate : r3 = specialinvoke r0.<org.apache.zeppelin.socket.NotebookServer: org.apache.zeppelin.notebook.Notebook notebook()>()
org.apache.zeppelin.socket.NotebookServer.onUpdate : r3 = specialinvoke r0.<org.apache.zeppelin.socket.NotebookServer: org.apache.zeppelin.notebook.Notebook notebook()>() >>>>>>>> org.apache.zeppelin.socket.NotebookServer.notebook : $r1 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.socket.NotebookServer.notebook : $r1 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.notebook : return $r1
org.apache.zeppelin.socket.NotebookServer.notebook : return $r1 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onUpdate : if r3 != null
org.apache.zeppelin.socket.NotebookServer.onUpdate : if r3 != null >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onMessage : r3 = specialinvoke r0.<org.apache.zeppelin.socket.NotebookServer: org.apache.zeppelin.notebook.Notebook notebook()>()
org.apache.zeppelin.socket.NotebookServer.onMessage : r3 = specialinvoke r0.<org.apache.zeppelin.socket.NotebookServer: org.apache.zeppelin.notebook.Notebook notebook()>() >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onMessage : r4 = virtualinvoke r0.<org.apache.zeppelin.socket.NotebookServer: org.apache.zeppelin.notebook.socket.Message deserializeMessage(java.lang.String)>(r2)
org.apache.zeppelin.socket.NotebookServer.onMessage : r4 = virtualinvoke r0.<org.apache.zeppelin.socket.NotebookServer: org.apache.zeppelin.notebook.socket.Message deserializeMessage(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.socket.NotebookServer.deserializeMessage : $r2 = r0.<org.apache.zeppelin.socket.NotebookServer: com.google.gson.Gson gson>
org.apache.zeppelin.socket.NotebookServer.deserializeMessage : $r2 = r0.<org.apache.zeppelin.socket.NotebookServer: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.deserializeMessage : $r3 = virtualinvoke $r2.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r1, class "org/apache/zeppelin/notebook/socket/Message")
org.apache.zeppelin.socket.NotebookServer.deserializeMessage : $r3 = virtualinvoke $r2.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r1, class "org/apache/zeppelin/notebook/socket/Message") >>>>>>>> org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : $r3 = virtualinvoke r2.<com.google.gson.reflect.TypeToken: java.lang.Class getRawType()>()
org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : $r3 = virtualinvoke r2.<com.google.gson.reflect.TypeToken: java.lang.Class getRawType()>() >>>>>>>> org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : $r4 = r0.<org.apache.zeppelin.json.NotebookTypeAdapterFactory: java.lang.Class customizedClass>
org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : $r4 = r0.<org.apache.zeppelin.json.NotebookTypeAdapterFactory: java.lang.Class customizedClass> >>>>>>>> org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : if $r3 != $r4
org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : if $r3 != $r4 >>>>>>>> org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : $r5 = null
org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : $r5 = null >>>>>>>> org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : return $r5
org.apache.zeppelin.json.NotebookTypeAdapterFactory.create : return $r5 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onMessage : r69 = $r68
org.apache.zeppelin.socket.NotebookServer.onMessage : r69 = $r68 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onMessage : $r70 = <org.apache.zeppelin.socket.NotebookServer: org.slf4j.Logger LOG>
org.apache.zeppelin.socket.NotebookServer.onMessage : $r70 = <org.apache.zeppelin.socket.NotebookServer: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onMessage : interfaceinvoke $r70.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Can\'t handle message", r69)
org.apache.zeppelin.socket.NotebookServer.onMessage : interfaceinvoke $r70.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Can\'t handle message", r69) >>>>>>>> org.apache.zeppelin.rest.exception.ForbiddenException.forbiddenJson : $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status FORBIDDEN>
org.apache.zeppelin.rest.exception.ForbiddenException.forbiddenJson : $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status FORBIDDEN> >>>>>>>> org.apache.zeppelin.rest.exception.ForbiddenException.forbiddenJson : $r2 = staticinvoke <org.apache.zeppelin.utils.ExceptionUtils: javax.ws.rs.core.Response jsonResponseContent(javax.ws.rs.core.Response$Status,java.lang.String)>($r1, r0)
org.apache.zeppelin.rest.exception.ForbiddenException.forbiddenJson : $r2 = staticinvoke <org.apache.zeppelin.utils.ExceptionUtils: javax.ws.rs.core.Response jsonResponseContent(javax.ws.rs.core.Response$Status,java.lang.String)>($r1, r0) >>>>>>>> org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : $r2 = new org.apache.zeppelin.server.JsonResponse
org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : $r2 = new org.apache.zeppelin.server.JsonResponse >>>>>>>> org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : specialinvoke $r2.<org.apache.zeppelin.server.JsonResponse: void <init>(javax.ws.rs.core.Response$Status,java.lang.String)>(r0, r1)
org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : specialinvoke $r2.<org.apache.zeppelin.server.JsonResponse: void <init>(javax.ws.rs.core.Response$Status,java.lang.String)>(r0, r1) >>>>>>>> org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : $r3 = virtualinvoke $r2.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response build()>()
org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : $r3 = virtualinvoke $r2.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response build()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r4 = r0.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response$Status status>
org.apache.zeppelin.server.JsonResponse.build : $r4 = r0.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response$Status status> >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r5 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r4)
org.apache.zeppelin.server.JsonResponse.build : $r5 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r4) >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r6 = virtualinvoke r0.<org.apache.zeppelin.server.JsonResponse: java.lang.String toString()>()
org.apache.zeppelin.server.JsonResponse.build : $r6 = virtualinvoke r0.<org.apache.zeppelin.server.JsonResponse: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r1 = new com.google.gson.GsonBuilder
org.apache.zeppelin.server.JsonResponse.toString : $r1 = new com.google.gson.GsonBuilder >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r1.<com.google.gson.GsonBuilder: void <init>()>()
org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r1.<com.google.gson.GsonBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : r2 = $r1
org.apache.zeppelin.server.JsonResponse.toString : r2 = $r1 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $z0 = r0.<org.apache.zeppelin.server.JsonResponse: boolean pretty>
org.apache.zeppelin.server.JsonResponse.toString : $z0 = r0.<org.apache.zeppelin.server.JsonResponse: boolean pretty> >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : if $z0 == 0
org.apache.zeppelin.server.JsonResponse.toString : if $z0 == 0 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r6 = newarray (com.google.gson.ExclusionStrategy)[1]
org.apache.zeppelin.server.JsonResponse.toString : $r6 = newarray (com.google.gson.ExclusionStrategy)[1] >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r3 = new org.apache.zeppelin.server.JsonExclusionStrategy
org.apache.zeppelin.server.JsonResponse.toString : $r3 = new org.apache.zeppelin.server.JsonExclusionStrategy >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r3.<org.apache.zeppelin.server.JsonExclusionStrategy: void <init>()>()
org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r3.<org.apache.zeppelin.server.JsonExclusionStrategy: void <init>()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r6[0] = $r3
org.apache.zeppelin.server.JsonResponse.toString : $r6[0] = $r3 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[])>($r6)
org.apache.zeppelin.server.JsonResponse.toString : virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[])>($r6) >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : r4 = virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>()
org.apache.zeppelin.server.JsonResponse.toString : r4 = virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r8 = virtualinvoke r4.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0)
org.apache.zeppelin.server.JsonResponse.toString : $r8 = virtualinvoke r4.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0) >>>>>>>> org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipClass : return 0
org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipClass : return 0 >>>>>>>> org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipField : return 0
org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipField : return 0 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : return $r8
org.apache.zeppelin.server.JsonResponse.toString : return $r8 >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : r1 = virtualinvoke $r5.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r6)
org.apache.zeppelin.server.JsonResponse.build : r1 = virtualinvoke $r5.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r7 = r0.<org.apache.zeppelin.server.JsonResponse: java.util.ArrayList cookies>
org.apache.zeppelin.server.JsonResponse.build : $r7 = r0.<org.apache.zeppelin.server.JsonResponse: java.util.ArrayList cookies> >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : if $r7 == null
org.apache.zeppelin.server.JsonResponse.build : if $r7 == null >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r12 = virtualinvoke r1.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>()
org.apache.zeppelin.server.JsonResponse.build : $r12 = virtualinvoke r1.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : return $r12
org.apache.zeppelin.server.JsonResponse.build : return $r12 >>>>>>>> org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : return $r3
org.apache.zeppelin.utils.ExceptionUtils.jsonResponseContent : return $r3 >>>>>>>> org.apache.zeppelin.rest.exception.ForbiddenException.forbiddenJson : return $r2
org.apache.zeppelin.rest.exception.ForbiddenException.forbiddenJson : return $r2 >>>>>>>> org.apache.zeppelin.rest.exception.NotFoundException.notFoundJson : $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status NOT_FOUND>
org.apache.zeppelin.rest.exception.NotFoundException.notFoundJson : $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status NOT_FOUND> >>>>>>>> org.apache.zeppelin.rest.exception.NotFoundException.notFoundJson : $r2 = staticinvoke <org.apache.zeppelin.utils.ExceptionUtils: javax.ws.rs.core.Response jsonResponseContent(javax.ws.rs.core.Response$Status,java.lang.String)>($r1, r0)
org.apache.zeppelin.rest.exception.NotFoundException.notFoundJson : $r2 = staticinvoke <org.apache.zeppelin.utils.ExceptionUtils: javax.ws.rs.core.Response jsonResponseContent(javax.ws.rs.core.Response$Status,java.lang.String)>($r1, r0) >>>>>>>> org.apache.zeppelin.rest.exception.NotFoundException.notFoundJson : return $r2
org.apache.zeppelin.rest.exception.NotFoundException.notFoundJson : return $r2 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onClose : $r3 = <org.apache.zeppelin.socket.NotebookServer: org.slf4j.Logger LOG>
org.apache.zeppelin.socket.NotebookServer.onClose : $r3 = <org.apache.zeppelin.socket.NotebookServer: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onClose : $r4 = newarray (java.lang.Object)[4]
org.apache.zeppelin.socket.NotebookServer.onClose : $r4 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onClose : $r5 = virtualinvoke r1.<org.apache.zeppelin.socket.NotebookSocket: javax.servlet.http.HttpServletRequest getRequest()>()
org.apache.zeppelin.socket.NotebookServer.onClose : $r5 = virtualinvoke r1.<org.apache.zeppelin.socket.NotebookSocket: javax.servlet.http.HttpServletRequest getRequest()>() >>>>>>>> org.apache.zeppelin.socket.NotebookSocket.getRequest : $r1 = r0.<org.apache.zeppelin.socket.NotebookSocket: javax.servlet.http.HttpServletRequest request>
org.apache.zeppelin.socket.NotebookSocket.getRequest : $r1 = r0.<org.apache.zeppelin.socket.NotebookSocket: javax.servlet.http.HttpServletRequest request> >>>>>>>> org.apache.zeppelin.socket.NotebookSocket.getRequest : return $r1
org.apache.zeppelin.socket.NotebookSocket.getRequest : return $r1 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.onClose : $r6 = interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>()
