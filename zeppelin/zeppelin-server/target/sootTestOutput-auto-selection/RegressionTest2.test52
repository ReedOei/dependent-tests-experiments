org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r2 = <org.apache.zeppelin.rest.InterpreterRestApi: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove repository {}", r1)
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Remove repository {}", r1) >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r4 = r0.<org.apache.zeppelin.rest.InterpreterRestApi: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager>
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r4 = r0.<org.apache.zeppelin.rest.InterpreterRestApi: org.apache.zeppelin.interpreter.InterpreterSettingManager interpreterSettingManager> >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeRepository(java.lang.String)>(r1)
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void removeRepository(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : r3 = $r5
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : r3 = $r5 >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r6 = <org.apache.zeppelin.rest.InterpreterRestApi: org.slf4j.Logger logger>
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r6 = <org.apache.zeppelin.rest.InterpreterRestApi: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception in InterpreterRestApi while removing repository ", r3)
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception in InterpreterRestApi while removing repository ", r3) >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r7 = new org.apache.zeppelin.server.JsonResponse
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r7 = new org.apache.zeppelin.server.JsonResponse >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r8 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status INTERNAL_SERVER_ERROR>
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r8 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status INTERNAL_SERVER_ERROR> >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r9 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r9 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r10 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String getStackTrace(java.lang.Throwable)>(r3)
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r10 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String getStackTrace(java.lang.Throwable)>(r3) >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : specialinvoke $r7.<org.apache.zeppelin.server.JsonResponse: void <init>(javax.ws.rs.core.Response$Status,java.lang.String,java.lang.Object)>($r8, $r9, $r10)
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : specialinvoke $r7.<org.apache.zeppelin.server.JsonResponse: void <init>(javax.ws.rs.core.Response$Status,java.lang.String,java.lang.Object)>($r8, $r9, $r10) >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r11 = virtualinvoke $r7.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response build()>()
org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : $r11 = virtualinvoke $r7.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response build()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r4 = r0.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response$Status status>
org.apache.zeppelin.server.JsonResponse.build : $r4 = r0.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response$Status status> >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r5 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r4)
org.apache.zeppelin.server.JsonResponse.build : $r5 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r4) >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r6 = virtualinvoke r0.<org.apache.zeppelin.server.JsonResponse: java.lang.String toString()>()
org.apache.zeppelin.server.JsonResponse.build : $r6 = virtualinvoke r0.<org.apache.zeppelin.server.JsonResponse: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r1 = new com.google.gson.GsonBuilder
org.apache.zeppelin.server.JsonResponse.toString : $r1 = new com.google.gson.GsonBuilder >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r1.<com.google.gson.GsonBuilder: void <init>()>()
org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r1.<com.google.gson.GsonBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : r2 = $r1
org.apache.zeppelin.server.JsonResponse.toString : r2 = $r1 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $z0 = r0.<org.apache.zeppelin.server.JsonResponse: boolean pretty>
org.apache.zeppelin.server.JsonResponse.toString : $z0 = r0.<org.apache.zeppelin.server.JsonResponse: boolean pretty> >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : if $z0 == 0
org.apache.zeppelin.server.JsonResponse.toString : if $z0 == 0 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r6 = newarray (com.google.gson.ExclusionStrategy)[1]
org.apache.zeppelin.server.JsonResponse.toString : $r6 = newarray (com.google.gson.ExclusionStrategy)[1] >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r3 = new org.apache.zeppelin.server.JsonExclusionStrategy
org.apache.zeppelin.server.JsonResponse.toString : $r3 = new org.apache.zeppelin.server.JsonExclusionStrategy >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r3.<org.apache.zeppelin.server.JsonExclusionStrategy: void <init>()>()
org.apache.zeppelin.server.JsonResponse.toString : specialinvoke $r3.<org.apache.zeppelin.server.JsonExclusionStrategy: void <init>()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r6[0] = $r3
org.apache.zeppelin.server.JsonResponse.toString : $r6[0] = $r3 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[])>($r6)
org.apache.zeppelin.server.JsonResponse.toString : virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[])>($r6) >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : r4 = virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>()
org.apache.zeppelin.server.JsonResponse.toString : r4 = virtualinvoke r2.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : $r8 = virtualinvoke r4.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0)
org.apache.zeppelin.server.JsonResponse.toString : $r8 = virtualinvoke r4.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r0) >>>>>>>> org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipClass : return 0
org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipClass : return 0 >>>>>>>> org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipField : return 0
org.apache.zeppelin.server.JsonExclusionStrategy.shouldSkipField : return 0 >>>>>>>> org.apache.zeppelin.server.JsonResponse.toString : return $r8
org.apache.zeppelin.server.JsonResponse.toString : return $r8 >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : r1 = virtualinvoke $r5.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r6)
org.apache.zeppelin.server.JsonResponse.build : r1 = virtualinvoke $r5.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r7 = r0.<org.apache.zeppelin.server.JsonResponse: java.util.ArrayList cookies>
org.apache.zeppelin.server.JsonResponse.build : $r7 = r0.<org.apache.zeppelin.server.JsonResponse: java.util.ArrayList cookies> >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : if $r7 == null
org.apache.zeppelin.server.JsonResponse.build : if $r7 == null >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : $r12 = virtualinvoke r1.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>()
org.apache.zeppelin.server.JsonResponse.build : $r12 = virtualinvoke r1.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>() >>>>>>>> org.apache.zeppelin.server.JsonResponse.build : return $r12
org.apache.zeppelin.server.JsonResponse.build : return $r12 >>>>>>>> org.apache.zeppelin.rest.InterpreterRestApi.removeRepository : return $r11
