org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r1 = <scala.sys.process.package$: scala.sys.process.package$ MODULE$> >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r4 = virtualinvoke $r1.<scala.sys.process.package$: scala.sys.process.ProcessBuilder stringToProcess(java.lang.String)>("../bin/zeppelin-daemon.sh start")
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r4 = virtualinvoke $r1.<scala.sys.process.package$: scala.sys.process.ProcessBuilder stringToProcess(java.lang.String)>("../bin/zeppelin-daemon.sh start") >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : interfaceinvoke $r4.<scala.sys.process.ProcessBuilder: int $bang()>()
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : interfaceinvoke $r4.<scala.sys.process.ProcessBuilder: int $bang()>() >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r5 = <org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.Eventually$ MODULE$>
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r5 = <org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.Eventually$ MODULE$> >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r6 = <org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.Eventually$ MODULE$>
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r6 = <org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.Eventually$ MODULE$> >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r2 = <org.scalatest.time.Span$: org.scalatest.time.Span$ MODULE$>
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r2 = <org.scalatest.time.Span$: org.scalatest.time.Span$ MODULE$> >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r3 = <org.scalatest.time.Seconds$: org.scalatest.time.Seconds$ MODULE$>
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r3 = <org.scalatest.time.Seconds$: org.scalatest.time.Seconds$ MODULE$> >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r7 = virtualinvoke $r2.<org.scalatest.time.Span$: org.scalatest.time.Span apply(long,org.scalatest.time.Units)>(180L, $r3)
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r7 = virtualinvoke $r2.<org.scalatest.time.Span$: org.scalatest.time.Span apply(long,org.scalatest.time.Units)>(180L, $r3) >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r8 = virtualinvoke $r6.<org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.PatienceConfiguration$Timeout timeout(org.scalatest.time.Span)>($r7)
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r8 = virtualinvoke $r6.<org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.PatienceConfiguration$Timeout timeout(org.scalatest.time.Span)>($r7) >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r9 = new org.apache.zeppelin.AbstractFunctionalSuite$$anonfun$beforeAll$1
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r9 = new org.apache.zeppelin.AbstractFunctionalSuite$$anonfun$beforeAll$1 >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : specialinvoke $r9.<org.apache.zeppelin.AbstractFunctionalSuite$$anonfun$beforeAll$1: void <init>(org.apache.zeppelin.AbstractFunctionalSuite)>(r0)
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : specialinvoke $r9.<org.apache.zeppelin.AbstractFunctionalSuite$$anonfun$beforeAll$1: void <init>(org.apache.zeppelin.AbstractFunctionalSuite)>(r0) >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r10 = <org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.Eventually$ MODULE$>
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r10 = <org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.Eventually$ MODULE$> >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r11 = virtualinvoke $r10.<org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.AbstractPatienceConfiguration$PatienceConfig patienceConfig()>()
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : $r11 = virtualinvoke $r10.<org.scalatest.concurrent.Eventually$: org.scalatest.concurrent.AbstractPatienceConfiguration$PatienceConfig patienceConfig()>() >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : virtualinvoke $r5.<org.scalatest.concurrent.Eventually$: java.lang.Object eventually(org.scalatest.concurrent.PatienceConfiguration$Timeout,scala.Function0,org.scalatest.concurrent.AbstractPatienceConfiguration$PatienceConfig)>($r8, $r9, $r11)
org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : virtualinvoke $r5.<org.scalatest.concurrent.Eventually$: java.lang.Object eventually(org.scalatest.concurrent.PatienceConfiguration$Timeout,scala.Function0,org.scalatest.concurrent.AbstractPatienceConfiguration$PatienceConfig)>($r8, $r9, $r11) >>>>>>>> org.apache.zeppelin.AbstractFunctionalSuite.beforeAll : return
