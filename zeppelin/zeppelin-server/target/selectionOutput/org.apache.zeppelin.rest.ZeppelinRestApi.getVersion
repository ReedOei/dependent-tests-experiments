org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r1 = new org.apache.zeppelin.server.JsonResponse >>>>>>>> org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status OK>
org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status OK> >>>>>>>> org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r3 = staticinvoke <org.apache.zeppelin.util.Util: java.lang.String getVersion()>()
org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r3 = staticinvoke <org.apache.zeppelin.util.Util: java.lang.String getVersion()>() >>>>>>>> org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : specialinvoke $r1.<org.apache.zeppelin.server.JsonResponse: void <init>(javax.ws.rs.core.Response$Status,java.lang.String,java.lang.Object)>($r2, "Zeppelin version", $r3)
org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : specialinvoke $r1.<org.apache.zeppelin.server.JsonResponse: void <init>(javax.ws.rs.core.Response$Status,java.lang.String,java.lang.Object)>($r2, "Zeppelin version", $r3) >>>>>>>> org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r4 = virtualinvoke $r1.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response build()>()
org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : $r4 = virtualinvoke $r1.<org.apache.zeppelin.server.JsonResponse: javax.ws.rs.core.Response build()>() >>>>>>>> org.apache.zeppelin.rest.ZeppelinRestApi.getVersion : return $r4
