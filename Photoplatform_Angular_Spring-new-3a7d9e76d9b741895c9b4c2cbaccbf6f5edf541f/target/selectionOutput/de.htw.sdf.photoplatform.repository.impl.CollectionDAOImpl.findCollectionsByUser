de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r2 = specialinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: java.lang.StringBuilder initFullDataCollectionSelect()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE owner.id = :userId")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE owner.id = :userId") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND collection.isPublic = :isPublic")
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r3 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: javax.persistence.Query createQuery(java.lang.String)>($r5)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : r3 = virtualinvoke r0.<de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl: javax.persistence.Query createQuery(java.lang.String)>($r5) >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setParameter(java.lang.String,java.lang.Object)>("userId", $r6)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setParameter(java.lang.String,java.lang.Object)>("userId", $r6) >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setParameter(java.lang.String,java.lang.Object)>("isPublic", r1)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if r1 == null >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i1 <= 0
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i1 <= 0 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setFirstResult(int)>(i1)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i1 <= 0 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i2 <= 0
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i2 <= 0 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setMaxResults(int)>(i2)
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i2 <= 0 >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r8 = interfaceinvoke r3.<javax.persistence.Query: java.util.List getResultList()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r8 = interfaceinvoke r3.<javax.persistence.Query: java.util.List getResultList()>() >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : return $r8
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setMaxResults(int)>(i2) >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r8 = interfaceinvoke r3.<javax.persistence.Query: java.util.List getResultList()>()
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setFirstResult(int)>(i1) >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i2 <= 0
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : interfaceinvoke r3.<javax.persistence.Query: javax.persistence.Query setParameter(java.lang.String,java.lang.Object)>("isPublic", r1) >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : if i1 <= 0
de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND collection.isPublic = :isPublic") >>>>>>>> de.htw.sdf.photoplatform.repository.impl.CollectionDAOImpl.findCollectionsByUser : $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
