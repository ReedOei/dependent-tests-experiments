org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1 >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.MutableDateTime.year : $r1 = new org.joda.time.MutableDateTime$Property
org.joda.time.MutableDateTime.year : $r1 = new org.joda.time.MutableDateTime$Property >>>>>>>> org.joda.time.MutableDateTime.year : $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.MutableDateTime.year : $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.MutableDateTime.year : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.MutableDateTime.year : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.MutableDateTime.year : specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.MutableDateTime.year : specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.MutableDateTime.year : return $r1
org.joda.time.MutableDateTime.year : return $r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0
org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateMidnight.now : if r0 != null
org.joda.time.DateMidnight.now : if r0 != null >>>>>>>> org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.now : return $r2
org.joda.time.DateMidnight.now : return $r2 >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8]
org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : return r1 >>>>>>>> org.joda.time.Period.plusSeconds : if i0 != 0
org.joda.time.Period.plusSeconds : if i0 != 0 >>>>>>>> org.joda.time.Period.plusSeconds : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusSeconds : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.getValues : return r1 >>>>>>>> org.joda.time.Period.plusSeconds : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusSeconds : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusSeconds : $i1 = <org.joda.time.PeriodType: int SECOND_INDEX>
org.joda.time.Period.plusSeconds : $i1 = <org.joda.time.PeriodType: int SECOND_INDEX> >>>>>>>> org.joda.time.Period.plusSeconds : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusSeconds : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i1 != 0
org.joda.time.PeriodType.addIndexedField : if i1 != 0 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0]
org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i2 != -1
org.joda.time.PeriodType.addIndexedField : if i2 != -1 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2]
org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2] >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1)
org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4
org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4 >>>>>>>> org.joda.time.PeriodType.addIndexedField : return 1
org.joda.time.PeriodType.addIndexedField : return 1 >>>>>>>> org.joda.time.Period.plusSeconds : $r3 = new org.joda.time.Period
org.joda.time.Period.plusSeconds : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusSeconds : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusSeconds : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusSeconds : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusSeconds : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusSeconds : return $r3
org.joda.time.Period.plusSeconds : return $r3 >>>>>>>> org.joda.time.Period.minusMillis : $i1 = neg i0
org.joda.time.Period.minusMillis : $i1 = neg i0 >>>>>>>> org.joda.time.Period.minusMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMillis(int)>($i1)
org.joda.time.Period.minusMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMillis(int)>($i1) >>>>>>>> org.joda.time.Period.plusMillis : if i0 != 0
org.joda.time.Period.plusMillis : if i0 != 0 >>>>>>>> org.joda.time.Period.plusMillis : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusMillis : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.Period.plusMillis : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMillis : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusMillis : $i1 = <org.joda.time.PeriodType: int MILLI_INDEX>
org.joda.time.Period.plusMillis : $i1 = <org.joda.time.PeriodType: int MILLI_INDEX> >>>>>>>> org.joda.time.Period.plusMillis : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusMillis : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.Period.plusMillis : $r3 = new org.joda.time.Period
org.joda.time.Period.plusMillis : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusMillis : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMillis : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusMillis : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusMillis : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusMillis : return $r3
org.joda.time.Period.plusMillis : return $r3 >>>>>>>> org.joda.time.Period.minusMillis : return $r1
org.joda.time.Period.minusMillis : return $r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : if r0 != r1
org.joda.time.base.AbstractInstant.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $z0 != 0
org.joda.time.base.AbstractInstant.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : return 0
org.joda.time.base.AbstractInstant.equals : return 0 >>>>>>>> org.joda.time.DateMidnight.dayOfYear : $r1 = new org.joda.time.DateMidnight$Property
org.joda.time.DateMidnight.dayOfYear : $r1 = new org.joda.time.DateMidnight$Property >>>>>>>> org.joda.time.DateMidnight.dayOfYear : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.dayOfYear : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.dayOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.DateMidnight.dayOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.DateMidnight.dayOfYear : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.DateMidnight.dayOfYear : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.DateMidnight.dayOfYear : return $r1
org.joda.time.DateMidnight.dayOfYear : return $r1 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.DateMidnight.toLocalDate : $r1 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.DateMidnight.toLocalDate : $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.toLocalDate : $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2)
org.joda.time.DateMidnight.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2) >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : return $r1
org.joda.time.chrono.JulianChronology.getZone : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : return $r1
org.joda.time.chrono.JulianChronology.withUTC : return $r1 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : return $r1
org.joda.time.DateMidnight.toLocalDate : return $r1 >>>>>>>> org.joda.time.LocalDate.minusMonths : if i0 != 0
org.joda.time.LocalDate.minusMonths : if i0 != 0 >>>>>>>> org.joda.time.LocalDate.minusMonths : return r0
org.joda.time.LocalDate.minusMonths : return r0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null)
org.joda.time.LocalDate.toDateTimeAtMidnight : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null) >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toDateTimeAtMidnight : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getZone : if r0 != null
org.joda.time.DateTimeUtils.getZone : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeUtils.getZone : return $r1
org.joda.time.DateTimeUtils.getZone : return $r1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.getChronology : return $r1
org.joda.time.LocalDate.getChronology : return $r1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3)
org.joda.time.LocalDate.toDateTimeAtMidnight : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3) >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : if r1 != null
org.joda.time.chrono.JulianChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : if r1 != $r2
org.joda.time.chrono.JulianChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.JulianChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r0 != null
org.joda.time.chrono.JulianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6
org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8
org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r2 != null
org.joda.time.chrono.JulianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r3 != null
org.joda.time.chrono.JulianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return r3
org.joda.time.chrono.JulianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return $r1
org.joda.time.chrono.JulianChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : return $r3
org.joda.time.chrono.JulianChronology.withZone : return $r3 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $r5 = new org.joda.time.DateTime
org.joda.time.LocalDate.toDateTimeAtMidnight : $r5 = new org.joda.time.DateTime >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>() >>>>>>>> org.joda.time.LocalDate.getYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.LocalDate.getYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.LocalDate.getYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.getLocalMillis : return $l0
org.joda.time.LocalDate.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDate.getYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0)
org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L
org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : return $i1
org.joda.time.field.DelegatedDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipDateTimeField.get : if i1 > $i2
org.joda.time.field.SkipDateTimeField.get : if i1 > $i2 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : return i1
org.joda.time.field.SkipDateTimeField.get : return i1 >>>>>>>> org.joda.time.LocalDate.getYear : return $i1
org.joda.time.LocalDate.getYear : return $i1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.LocalDate.getMonthOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getMonthOfYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getMonthOfYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.JulianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.JulianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : return $z0
org.joda.time.chrono.JulianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 7
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : return $i1
org.joda.time.LocalDate.getMonthOfYear : return $i1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getDayOfMonth : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.getDayOfMonth : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getDayOfMonth : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getDayOfMonth : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : return $i1
org.joda.time.LocalDate.getDayOfMonth : return $i1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : specialinvoke $r5.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, 0, 0, 0, r2)
org.joda.time.LocalDate.toDateTimeAtMidnight : specialinvoke $r5.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, 0, 0, 0, r2) >>>>>>>> org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $i3 = staticinvoke <org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>(i0)
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $i3 = staticinvoke <org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>(i0) >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0
org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateMidnightMillis(int,int,int)>($i3, i1, i2)
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateMidnightMillis(int,int,int)>($i3, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMinYear : return -292269054
org.joda.time.chrono.JulianChronology.getMinYear : return -292269054 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992
org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12 >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateMidnightMillis : return $l4
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : return $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.JulianChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l7)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l7) >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.localToUTC : r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology.localToUTC : i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology.localToUTC : $l2 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : l3 = l0 - $l2
org.joda.time.chrono.ZonedChronology.localToUTC : l3 = l0 - $l2 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.chrono.ZonedChronology.localToUTC : $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l3) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : if i1 == $i4
org.joda.time.chrono.ZonedChronology.localToUTC : if i1 == $i4 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : return l3
org.joda.time.chrono.ZonedChronology.localToUTC : return l3 >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : return $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : return $r5
org.joda.time.LocalDate.toDateTimeAtMidnight : return $r5 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : return $r1
org.joda.time.LocalDate.toDateTimeAtMidnight : return $r1 >>>>>>>> org.joda.time.DateTime.withCenturyOfEra : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withCenturyOfEra : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withCenturyOfEra : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.DateTime.withCenturyOfEra : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.DateTime.withCenturyOfEra : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withCenturyOfEra : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withCenturyOfEra : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0)
org.joda.time.DateTime.withCenturyOfEra : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3
org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L
org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0
org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : return l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l2, i1)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l2, i1) >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>
org.joda.time.field.DividedDateTimeField.set : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin> >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i4 = r0.<org.joda.time.field.DividedDateTimeField: int iMax>
org.joda.time.field.DividedDateTimeField.set : $i4 = r0.<org.joda.time.field.DividedDateTimeField: int iMax> >>>>>>>> org.joda.time.field.DividedDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4)
org.joda.time.field.DividedDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4) >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1
org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i5 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DividedDateTimeField.set : $i5 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.OffsetDateTimeField.get : $i1 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: int get(long)>(l0)
org.joda.time.field.OffsetDateTimeField.get : $i1 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.get : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.get : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DecoratedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJYearOfEraDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.get : if i1 > 0
org.joda.time.chrono.GJYearOfEraDateTimeField.get : if i1 > 0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.get : return i1
org.joda.time.chrono.GJYearOfEraDateTimeField.get : return i1 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.get : return $i1
org.joda.time.field.DecoratedDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.OffsetDateTimeField.get : $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>
org.joda.time.field.OffsetDateTimeField.get : $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset> >>>>>>>> org.joda.time.field.OffsetDateTimeField.get : $i3 = $i1 + $i2
org.joda.time.field.OffsetDateTimeField.get : $i3 = $i1 + $i2 >>>>>>>> org.joda.time.field.OffsetDateTimeField.get : return $i3
org.joda.time.field.OffsetDateTimeField.get : return $i3 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : i2 = specialinvoke r0.<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>($i5)
org.joda.time.field.DividedDateTimeField.set : i2 = specialinvoke r0.<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>($i5) >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : if i0 < 0
org.joda.time.field.DividedDateTimeField.getRemainder : if i0 < 0 >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.getRemainder : $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : $i2 = i0 % $i1
org.joda.time.field.DividedDateTimeField.getRemainder : $i2 = i0 % $i1 >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : return $i2
org.joda.time.field.DividedDateTimeField.getRemainder : return $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $r2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.set : $r2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i6 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.set : $i6 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i7 = i1 * $i6
org.joda.time.field.DividedDateTimeField.set : $i7 = i1 * $i6 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i8 = $i7 + i2
org.joda.time.field.DividedDateTimeField.set : $i8 = $i7 + i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i8)
org.joda.time.field.DividedDateTimeField.set : $l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i8) >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>
org.joda.time.field.OffsetDateTimeField.set : $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin> >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>
org.joda.time.field.OffsetDateTimeField.set : $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax> >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.OffsetDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : $i4 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>
org.joda.time.field.OffsetDateTimeField.set : $i4 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset> >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.OffsetDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : $l6 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, $i5)
org.joda.time.field.OffsetDateTimeField.set : $l6 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, $i5) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.set : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.set : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.set : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.DecoratedDateTimeField.set : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i2)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i2) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $r1 = r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $r1 = r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : if $i3 > 0
org.joda.time.chrono.GJYearOfEraDateTimeField.set : if $i3 > 0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z1 != 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z1 != 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.set : return $l2
org.joda.time.field.DecoratedDateTimeField.set : return $l2 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : return $l4
org.joda.time.chrono.GJYearOfEraDateTimeField.set : return $l4 >>>>>>>> org.joda.time.field.OffsetDateTimeField.set : return $l6
org.joda.time.field.OffsetDateTimeField.set : return $l6 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : return $l9
org.joda.time.field.DividedDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : l3 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l4, 0, l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : l3 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l4, 0, l0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : return l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>(l3)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>(l3) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1) >>>>>>>> org.joda.time.field.DividedDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DividedDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DividedDateTimeField.get : if i1 < 0
org.joda.time.field.DividedDateTimeField.get : if i1 < 0 >>>>>>>> org.joda.time.field.DividedDateTimeField.get : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.get : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.get : $i3 = i1 / $i2
org.joda.time.field.DividedDateTimeField.get : $i3 = i1 / $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.get : return $i3
org.joda.time.field.DividedDateTimeField.get : return $i3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : if $i5 == i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : if $i5 == i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : return l3
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : return l3 >>>>>>>> org.joda.time.DateTime.withCenturyOfEra : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l2)
org.joda.time.DateTime.withCenturyOfEra : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l2) >>>>>>>> org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withMillis : $b2 = l0 cmp $l1
org.joda.time.DateTime.withMillis : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.DateTime.withMillis : if $b2 != 0
org.joda.time.DateTime.withMillis : if $b2 != 0 >>>>>>>> org.joda.time.DateTime.withMillis : $r1 = new org.joda.time.DateTime
org.joda.time.DateTime.withMillis : $r1 = new org.joda.time.DateTime >>>>>>>> org.joda.time.DateTime.withMillis : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withMillis : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withMillis : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2)
org.joda.time.DateTime.withMillis : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2) >>>>>>>> org.joda.time.DateTime.withMillis : return $r1
org.joda.time.DateTime.withMillis : return $r1 >>>>>>>> org.joda.time.DateTime.withCenturyOfEra : return $r3
org.joda.time.DateTime.withCenturyOfEra : return $r3 >>>>>>>> org.joda.time.Days.daysBetween : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.Days.daysBetween : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.Days.daysBetween : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>(r0, r1, $r2)
org.joda.time.Days.daysBetween : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>(r0, r1, $r2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null
org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3)
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $l1 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $l1 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $l2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $l2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : i0 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l2)
org.joda.time.base.BaseSingleFieldPeriod.between : i0 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l2) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : return i0
org.joda.time.base.BaseSingleFieldPeriod.between : return i0 >>>>>>>> org.joda.time.Days.daysBetween : $r3 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>(i0)
org.joda.time.Days.daysBetween : $r3 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>(i0) >>>>>>>> org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648:
org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Days.days : $r10 = new org.joda.time.Days
org.joda.time.Days.days : $r10 = new org.joda.time.Days >>>>>>>> org.joda.time.Days.days : specialinvoke $r10.<org.joda.time.Days: void <init>(int)>(i0)
org.joda.time.Days.days : specialinvoke $r10.<org.joda.time.Days: void <init>(int)>(i0) >>>>>>>> org.joda.time.Days.days : return $r10
org.joda.time.Days.days : return $r10 >>>>>>>> org.joda.time.Days.daysBetween : return $r3
org.joda.time.Days.daysBetween : return $r3 >>>>>>>> org.joda.time.DateTime.plusSeconds : if i0 != 0
org.joda.time.DateTime.plusSeconds : if i0 != 0 >>>>>>>> org.joda.time.DateTime.plusSeconds : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.plusSeconds : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.plusSeconds : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DateTime.plusSeconds : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DateTime.plusSeconds : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.plusSeconds : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.plusSeconds : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0)
org.joda.time.DateTime.plusSeconds : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : l2 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : l2 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l3 = (long) i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l3 = (long) i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l4 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l4 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : l5 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l4, i1)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : l5 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l4, i1) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $i7 = i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $i7 = i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : goto [?= $l8 = (long) $i7]
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : goto [?= $l8 = (long) $i7] >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l8 = (long) $i7
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l9 = l5 - $l8
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l9 = l5 - $l8 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : return $l9
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : return $l9 >>>>>>>> org.joda.time.DateTime.plusSeconds : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.plusSeconds : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1) >>>>>>>> org.joda.time.DateTime.plusSeconds : return $r3
org.joda.time.DateTime.plusSeconds : return $r3 >>>>>>>> org.joda.time.DateTime.minusMinutes : if i0 != 0
org.joda.time.DateTime.minusMinutes : if i0 != 0 >>>>>>>> org.joda.time.DateTime.minusMinutes : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.minusMinutes : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.minusMinutes : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DateTime.minusMinutes : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DateTime.minusMinutes : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.minusMinutes : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.minusMinutes : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0)
org.joda.time.DateTime.minusMinutes : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0) >>>>>>>> org.joda.time.DurationField.subtract : if i1 != -2147483648
org.joda.time.DurationField.subtract : if i1 != -2147483648 >>>>>>>> org.joda.time.DurationField.subtract : $i4 = neg i1
org.joda.time.DurationField.subtract : $i4 = neg i1 >>>>>>>> org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4)
org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4) >>>>>>>> org.joda.time.DurationField.subtract : return $l5
org.joda.time.DurationField.subtract : return $l5 >>>>>>>> org.joda.time.DateTime.minusMinutes : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.minusMinutes : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1) >>>>>>>> org.joda.time.DateTime.minusMinutes : return $r3
org.joda.time.DateTime.minusMinutes : return $r3 >>>>>>>> org.joda.time.DateTime.withWeekyear : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withWeekyear : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withWeekyear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.DateTime.withWeekyear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.DateTime.withWeekyear : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withWeekyear : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withWeekyear : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0)
org.joda.time.DateTime.withWeekyear : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0) >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: int getMaximumValue()>()
org.joda.time.field.SkipDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.SkipDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipDateTimeField.set : if i1 > $i4
org.joda.time.field.SkipDateTimeField.set : if i1 > $i4 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $l6 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.SkipDateTimeField.set : $l6 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.set : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.set : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.set : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.DelegatedDateTimeField.set : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i13 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i13 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i11, $i12, $i13)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i11, $i12, $i13) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i4 = 8 - $i3
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i4 = 8 - $i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : if i2 <= $i4
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : if i2 <= $i4 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l6 = (long) $i5
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l6 = (long) $i5 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l7 = $l6 * 86400000L
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l7 = $l6 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l8 = l1 + $l7
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l8 = l1 + $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l8
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i7)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i7) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i9 = i2 - 1
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i9 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l10 = (long) $i9
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l10 = (long) $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l11 = $l10 * 86400000L
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l11 = $l10 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l12 = l1 - $l11
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l12 = l1 - $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l12
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l12 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b8 < 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b8 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l10 = $l9 / 604800000L
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l10 = $l9 / 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i12 = $i11 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i12 = $i11 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i12
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : if i2 <= 51
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 <= 51 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : return i1
org.joda.time.chrono.BasicChronology.getWeekyear : return i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : return $i1
org.joda.time.chrono.BasicWeekyearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i3)
org.joda.time.chrono.BasicChronology.getWeeksInYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $l5 = $l4 / 604800000L
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l5 = $l4 / 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : return $i6
org.joda.time.chrono.BasicChronology.getWeeksInYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i1 = i0 - 1968
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i1 = i0 - 1968 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : if i1 > 0
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : if i1 > 0 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $i4 = i1 + 3
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $i4 = i1 + 3 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i2 = $i4 >> 2
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i2 = $i4 >> 2 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : goto [?= $l5 = (long) i1]
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : goto [?= $l5 = (long) i1] >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l5 = (long) i1
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l5 = (long) i1 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l6 = $l5 * 365L
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l6 = $l5 * 365L >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l7 = (long) i2
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l7 = (long) i2 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l8 = $l6 + $l7
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l8 = $l6 + $l7 >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : l3 = $l8 * 86400000L
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : l3 = $l8 * 86400000L >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l9 = l3 - 62035200000L
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l9 = l3 - 62035200000L >>>>>>>> org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : return $l9
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3)
org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1
org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i14 = i4
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i14 = i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i6 = $i14
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i6 = $i14 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i2 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l8, i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l8, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i10 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i10 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l17 = (long) $i16
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l18 = $l17 * 604800000L
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l18 = $l17 * 604800000L >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l19 = l15 + $l18
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l19 = l15 + $l18 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : return $l9
org.joda.time.field.PreciseDurationDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20
org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.set : return $l2
org.joda.time.field.DelegatedDateTimeField.set : return $l2 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : return $l6
org.joda.time.field.SkipDateTimeField.set : return $l6 >>>>>>>> org.joda.time.DateTime.withWeekyear : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l2)
org.joda.time.DateTime.withWeekyear : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l2) >>>>>>>> org.joda.time.DateTime.withWeekyear : return $r3
org.joda.time.DateTime.withWeekyear : return $r3 >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : r2 = null
org.joda.time.DateTimeUtils.getIntervalChronology : r2 = null >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : if r0 == null
org.joda.time.DateTimeUtils.getIntervalChronology : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : r2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getIntervalChronology : r2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : goto [?= (branch)]
org.joda.time.DateTimeUtils.getIntervalChronology : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : if r2 != null
org.joda.time.DateTimeUtils.getIntervalChronology : if r2 != null >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : return r2
org.joda.time.DateTimeUtils.getIntervalChronology : return r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hms>
org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hms> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : if $r0 != null
org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : $r9 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hms>
org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : $r9 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hms> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : return $r9
org.joda.time.format.ISODateTimeFormat.hourMinuteSecond : return $r9 >>>>>>>> org.joda.time.format.DateTimeFormatter.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.isParser : if $r1 == null
org.joda.time.format.DateTimeFormatter.isParser : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.isParser : $z0 = 1
org.joda.time.format.DateTimeFormatter.isParser : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatter.isParser : goto [?= return $z0]
org.joda.time.format.DateTimeFormatter.isParser : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatter.isParser : return $z0
org.joda.time.format.DateTimeFormatter.isParser : return $z0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetMillis : r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0)
org.joda.time.DateTimeZone.forOffsetMillis : r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer >>>>>>>> org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()
org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : r1 = $r0
org.joda.time.DateTimeZone.printOffset : r1 = $r0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i0 < 0
org.joda.time.DateTimeZone.printOffset : if i0 < 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43) >>>>>>>> org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000]
org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000] >>>>>>>> org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4
org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58) >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6
org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i7 != 0
org.joda.time.DateTimeZone.printOffset : if i7 != 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i3 = i7 / 1000
org.joda.time.DateTimeZone.printOffset : i3 = i7 / 1000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i8 = i3 * 1000
org.joda.time.DateTimeZone.printOffset : $i8 = i3 * 1000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i9 = i7 - $i8
org.joda.time.DateTimeZone.printOffset : i9 = i7 - $i8 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i9 != 0
org.joda.time.DateTimeZone.printOffset : if i9 != 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46) >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i9, 3)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i9, 3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : return $r9
org.joda.time.DateTimeZone.printOffset : return $r9 >>>>>>>> org.joda.time.DateTimeZone.forOffsetMillis : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r0, i0)
org.joda.time.DateTimeZone.forOffsetMillis : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r0, i0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0
org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null
org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7
org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>()
org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>() >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r2 = (org.joda.time.DateTimeZone) $r8
org.joda.time.DateTimeZone.fixedOffsetZone : r2 = (org.joda.time.DateTimeZone) $r8 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : return r2
org.joda.time.DateTimeZone.fixedOffsetZone : return r2 >>>>>>>> org.joda.time.DateTimeZone.forOffsetMillis : return $r1
org.joda.time.DateTimeZone.forOffsetMillis : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.DateTimeZone.getMillisKeepLocal : l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l1, 0, l0)
org.joda.time.DateTimeZone.getMillisKeepLocal : $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l1, 0, l0) >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return $l2
org.joda.time.DateTimeZone.getMillisKeepLocal : return $l2 >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.withZone : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : if $r2 != r1
org.joda.time.format.DateTimeFormatter.withZone : if $r2 != r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r3 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withZone : $r3 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.withZone : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.withZone : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.withZone : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.withZone : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.withZone : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.withZone : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, 0, $r7, r1, $r8, $i0)
org.joda.time.format.DateTimeFormatter.withZone : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, 0, $r7, r1, $r8, $i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.withZone : return $r3
org.joda.time.format.DateTimeFormatter.withZone : return $r3 >>>>>>>> org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.DateTimeZone)>(r0)
org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l7 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l7 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundFloor(long)>(l7)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundFloor(long)>(l7) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l9 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l8, 0, l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l9 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l8, 0, l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : return $l9
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : return $l9 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null
org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>
org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.BuddhistChronology.getInstance : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : r1 = (org.joda.time.chrono.BuddhistChronology) $r4
org.joda.time.chrono.BuddhistChronology.getInstance : r1 = (org.joda.time.chrono.BuddhistChronology) $r4 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null
org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r5 = new org.joda.time.chrono.BuddhistChronology
org.joda.time.chrono.BuddhistChronology.getInstance : $r5 = new org.joda.time.chrono.BuddhistChronology >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r6 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>(r0, null)
org.joda.time.chrono.BuddhistChronology.getInstance : $r6 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>(r0, null) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r0, r1, 4)
org.joda.time.chrono.GJChronology.getInstance : $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r0, r1, 4) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r0)
org.joda.time.chrono.GJChronology.getInstance : r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.getZone : return r0
org.joda.time.DateTimeUtils.getZone : return r0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if r1 != null
org.joda.time.chrono.GJChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r2 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>
org.joda.time.chrono.GJChronology.getInstance : r2 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : goto [?= $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>]
org.joda.time.chrono.GJChronology.getInstance : goto [?= $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>] >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>
org.joda.time.chrono.GJChronology.getInstance : $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.joda.time.chrono.GJChronology.getInstance : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r3 = (java.util.ArrayList) $r7
org.joda.time.chrono.GJChronology.getInstance : r3 = (java.util.ArrayList) $r7 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if r3 != null
org.joda.time.chrono.GJChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r8 = new java.util.ArrayList
org.joda.time.chrono.GJChronology.getInstance : $r8 = new java.util.ArrayList >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2)
org.joda.time.chrono.GJChronology.getInstance : specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r3 = $r8
org.joda.time.chrono.GJChronology.getInstance : r3 = $r8 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r9 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>
org.joda.time.chrono.GJChronology.getInstance : $r9 = <org.joda.time.chrono.GJChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3)
org.joda.time.chrono.GJChronology.getInstance : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : goto [?= $r13 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>]
org.joda.time.chrono.GJChronology.getInstance : goto [?= $r13 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>] >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r13 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GJChronology.getInstance : $r13 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if r5 != $r13
org.joda.time.chrono.GJChronology.getInstance : if r5 != $r13 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r18 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GJChronology.getInstance : $r18 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r19 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r18, r2, i0)
org.joda.time.chrono.GJChronology.getInstance : r19 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r18, r2, i0) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>()
org.joda.time.chrono.GJChronology.getInstance : r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>() >>>>>>>> org.joda.time.Instant.toInstant : return r0
org.joda.time.Instant.toInstant : return r0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : i1 = virtualinvoke r3.<java.util.ArrayList: int size()>()
org.joda.time.chrono.GJChronology.getInstance : i1 = virtualinvoke r3.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : i1 = i1 + -1
org.joda.time.chrono.GJChronology.getInstance : i1 = i1 + -1 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if i1 < 0
org.joda.time.chrono.GJChronology.getInstance : if i1 < 0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r11 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1)
org.joda.time.chrono.GJChronology.getInstance : $r11 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r4 = (org.joda.time.chrono.GJChronology) $r11
org.joda.time.chrono.GJChronology.getInstance : r4 = (org.joda.time.chrono.GJChronology) $r11 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $i2 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.getInstance : $i2 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $i0 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $i0 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if i0 != $i2
org.joda.time.chrono.GJChronology.getInstance : if i0 != $i2 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r12 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: org.joda.time.Instant getGregorianCutover()>()
org.joda.time.chrono.GJChronology.getInstance : $r12 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: org.joda.time.Instant getGregorianCutover()>() >>>>>>>> org.joda.time.chrono.GJChronology.getGregorianCutover : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>
org.joda.time.chrono.GJChronology.getGregorianCutover : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> >>>>>>>> org.joda.time.chrono.GJChronology.getGregorianCutover : return $r1
org.joda.time.chrono.GJChronology.getGregorianCutover : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $z0 = virtualinvoke r2.<org.joda.time.Instant: boolean equals(java.lang.Object)>($r12)
org.joda.time.chrono.GJChronology.getInstance : $z0 = virtualinvoke r2.<org.joda.time.Instant: boolean equals(java.lang.Object)>($r12) >>>>>>>> org.joda.time.base.AbstractInstant.equals : return 1
org.joda.time.base.AbstractInstant.equals : return 1 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if $z0 == 0
org.joda.time.chrono.GJChronology.getInstance : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : return r4
org.joda.time.chrono.GJChronology.getInstance : return r4 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r20 = new org.joda.time.chrono.GJChronology
org.joda.time.chrono.GJChronology.getInstance : $r20 = new org.joda.time.chrono.GJChronology >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r21 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r19, r5)
org.joda.time.chrono.GJChronology.getInstance : $r21 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r19, r5) >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : if r0 != null
org.joda.time.chrono.ZonedChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.chrono.ZonedChronology.getInstance : r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.GJChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GJChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.GJChronology.withUTC : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1)
org.joda.time.chrono.GJChronology.withUTC : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1) >>>>>>>> org.joda.time.chrono.GJChronology.withZone : if r1 != null
org.joda.time.chrono.GJChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.GJChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GJChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GJChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.GJChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.GJChronology.getZone : r1 = $r2
org.joda.time.chrono.GJChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.GJChronology.getZone : if $r2 == null
org.joda.time.chrono.GJChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.GJChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GJChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.GJChronology.getZone : return $r4
org.joda.time.chrono.GJChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GJChronology.withZone : if r1 != $r2
org.joda.time.chrono.GJChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.GJChronology.withZone : return r0
org.joda.time.chrono.GJChronology.withZone : return r0 >>>>>>>> org.joda.time.chrono.GJChronology.withUTC : return $r2
org.joda.time.chrono.GJChronology.withUTC : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : if r3 != null
org.joda.time.chrono.ZonedChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : if r1 != null
org.joda.time.chrono.ZonedChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : $r6 = new org.joda.time.chrono.ZonedChronology
org.joda.time.chrono.ZonedChronology.getInstance : $r6 = new org.joda.time.chrono.ZonedChronology >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r3, r1)
org.joda.time.chrono.ZonedChronology.getInstance : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r3, r1) >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields
org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>()
org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1
org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.field.MillisDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0
org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4) >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays>
org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : return $r1
org.joda.time.chrono.AssembledChronology.halfdays : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : return $r1
org.joda.time.chrono.AssembledChronology.weekyears : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies>
org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : return $r1
org.joda.time.chrono.AssembledChronology.centuries : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : return $r1
org.joda.time.chrono.AssembledChronology.eras : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24) >>>>>>>> org.joda.time.field.UnsupportedDurationField.isSupported : return 0
org.joda.time.field.UnsupportedDurationField.isSupported : return 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay>
org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday>
org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay>
org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1
org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury>
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1
org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.era : return $r1
org.joda.time.chrono.AssembledChronology.era : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r2 = new java.util.HashMap
org.joda.time.chrono.ZonedChronology.assemble : $r2 = new java.util.HashMap >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.joda.time.chrono.ZonedChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r3 = $r2
org.joda.time.chrono.ZonedChronology.assemble : r3 = $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.ZonedChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : if r1 == null
org.joda.time.chrono.ZonedChronology.convertField : if r1 == null >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : return r1
org.joda.time.chrono.ZonedChronology.convertField : return r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.ZonedChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : if $z0 != 0
org.joda.time.chrono.ZonedChronology.convertField : if $z0 != 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1)
org.joda.time.chrono.ZonedChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : if $z1 == 0
org.joda.time.chrono.ZonedChronology.convertField : if $z1 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField
org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r7 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.convertField : $r7 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>(r1, $r7)
org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>(r1, $r7) >>>>>>>> org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.BaseDurationField.getType : return $r1
org.joda.time.field.BaseDurationField.getType : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if r0 == null
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if r0 == null >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $l0 = virtualinvoke r0.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $l0 = virtualinvoke r0.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.DecoratedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.getUnitMillis : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1
org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.ScaledDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $i1 = r0.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.getUnitMillis : $i1 = r0.<org.joda.time.field.ScaledDurationField: int iScalar> >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $l2 = (long) $i1
org.joda.time.field.ScaledDurationField.getUnitMillis : $l2 = (long) $i1 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $l3 = $l0 * $l2
org.joda.time.field.ScaledDurationField.getUnitMillis : $l3 = $l0 * $l2 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : return $l3
org.joda.time.field.ScaledDurationField.getUnitMillis : return $l3 >>>>>>>> org.joda.time.field.DecoratedDurationField.getUnitMillis : return $l0
org.joda.time.field.DecoratedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $b1 = $l0 cmp 43200000L
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $b1 = $l0 cmp 43200000L >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if $b1 >= 0
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if $b1 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 0
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : return $z0
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : return $z0 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : r3 = $r6
org.joda.time.chrono.ZonedChronology.convertField : r3 = $r6 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.chrono.ZonedChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : return r3
org.joda.time.chrono.ZonedChronology.convertField : return r3 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.ZonedChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.ZonedChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.ZonedChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.ZonedChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3) >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.hashCode : l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $l2 = l0 >>> 32
org.joda.time.field.PreciseDurationField.hashCode : $l2 = l0 >>> 32 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $l3 = l0 ^ $l2
org.joda.time.field.PreciseDurationField.hashCode : $l3 = l0 ^ $l2 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : i1 = (int) $l3
org.joda.time.field.PreciseDurationField.hashCode : i1 = (int) $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.PreciseDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.PreciseDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.PreciseDurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.joda.time.field.PreciseDurationField.hashCode : $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : i5 = i1 + $i4
org.joda.time.field.PreciseDurationField.hashCode : i5 = i1 + $i4 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : return i5
org.joda.time.field.PreciseDurationField.hashCode : return i5 >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.ZonedChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.ZonedChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.ZonedChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 1
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 1 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : goto [?= return $z0]
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.ZonedChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.ZonedChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.ZonedChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3) >>>>>>>> org.joda.time.field.MillisDurationField.hashCode : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>()
org.joda.time.field.MillisDurationField.hashCode : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.MillisDurationField.getUnitMillis : return 1L
org.joda.time.field.MillisDurationField.getUnitMillis : return 1L >>>>>>>> org.joda.time.field.MillisDurationField.hashCode : $i1 = (int) $l0
org.joda.time.field.MillisDurationField.hashCode : $i1 = (int) $l0 >>>>>>>> org.joda.time.field.MillisDurationField.hashCode : return $i1
org.joda.time.field.MillisDurationField.hashCode : return $i1 >>>>>>>> org.joda.time.field.MillisDurationField.getType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.field.MillisDurationField.getType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.field.MillisDurationField.getType : return $r1
org.joda.time.field.MillisDurationField.getType : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.ZonedChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField
org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r8 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r8 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.GJChronology$CutoverField.getDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getDurationField : return $r1
org.joda.time.chrono.GJChronology$CutoverField.getDurationField : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r2)
org.joda.time.chrono.ZonedChronology.convertField : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.ZonedChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r5 = (org.joda.time.DurationField) $r4
org.joda.time.chrono.ZonedChronology.convertField : $r5 = (org.joda.time.DurationField) $r4 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : return $r5
org.joda.time.chrono.ZonedChronology.convertField : return $r5 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r10 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r10 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField>
org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : return $r1
org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r2)
org.joda.time.chrono.ZonedChronology.convertField : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r12 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r12 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : return $r2
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : return $r2
org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r2)
org.joda.time.chrono.ZonedChronology.convertField : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r1, $r7, $r9, $r11, $r13)
org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r1, $r7, $r9, $r11, $r13) >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : return $l0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.ZonedChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3) >>>>>>>> org.joda.time.field.BaseDateTimeField.getLeapDurationField : return null
org.joda.time.field.BaseDateTimeField.getLeapDurationField : return null >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.ZonedChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3) >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $i2 = r0.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.hashCode : $i2 = r0.<org.joda.time.field.ScaledDurationField: int iScalar> >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : l0 = (long) $i2
org.joda.time.field.ScaledDurationField.hashCode : l0 = (long) $i2 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $l3 = l0 >>> 32
org.joda.time.field.ScaledDurationField.hashCode : $l3 = l0 >>> 32 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $l4 = l0 ^ $l3
org.joda.time.field.ScaledDurationField.hashCode : $l4 = l0 ^ $l3 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : i1 = (int) $l4
org.joda.time.field.ScaledDurationField.hashCode : i1 = (int) $l4 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.ScaledDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.joda.time.field.ScaledDurationField.hashCode : $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : i6 = i1 + $i5
org.joda.time.field.ScaledDurationField.hashCode : i6 = i1 + $i5 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $i7 = virtualinvoke $r2.<java.lang.Object: int hashCode()>()
org.joda.time.field.ScaledDurationField.hashCode : $i7 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : i8 = i6 + $i7
org.joda.time.field.ScaledDurationField.hashCode : i8 = i6 + $i7 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : return i8
org.joda.time.field.ScaledDurationField.hashCode : return i8 >>>>>>>> org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.field.OffsetDateTimeField.getLeapDurationField : return $r2
org.joda.time.field.OffsetDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.ZonedChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.ZonedChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getUnitMillis : return 0L
org.joda.time.field.UnsupportedDurationField.getUnitMillis : return 0L >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.ZonedChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.ZonedChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.ZonedChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.ZonedChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.ZonedChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.ZonedChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : return $r2
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.ZonedChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.ZonedChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.ZonedChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.ZonedChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.ZonedChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3) >>>>>>>> org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : return $r2
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.ZonedChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7
org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3
org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10
org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11
org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14
org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15
org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18
org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19
org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22
org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23
org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26
org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27
org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30
org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31
org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34
org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35
org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38
org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39
org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42
org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43
org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46
org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47
org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50
org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE>
org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.eras : return $r0
org.joda.time.DurationFieldType.eras : return $r0 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : return r2 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : return $r2
org.joda.time.chrono.BaseChronology.eras : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54
org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55
org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58
org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59
org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62
org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63
org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66
org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67
org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70
org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71
org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74
org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75
org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78
org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79
org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82
org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83
org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86
org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87
org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90
org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91
org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94
org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95
org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98
org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99
org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102
org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103
org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106
org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107
org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110
org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111
org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114
org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115
org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118
org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119
org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122
org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123
org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126
org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127
org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130
org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131
org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134
org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135
org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138
org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139
org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142
org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143
org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null
org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148
org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160
org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2
org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163
org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4
org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0 >>>>>>>> org.joda.time.chrono.ZonedChronology.getInstance : return $r6
org.joda.time.chrono.ZonedChronology.getInstance : return $r6 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r22 = r19.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>
org.joda.time.chrono.GJChronology.getInstance : $r22 = r19.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r23 = r19.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.chrono.GJChronology.getInstance : $r23 = r19.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r24 = r19.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>
org.joda.time.chrono.GJChronology.getInstance : $r24 = r19.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : specialinvoke $r20.<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>($r21, $r22, $r23, $r24)
org.joda.time.chrono.GJChronology.getInstance : specialinvoke $r20.<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>($r21, $r22, $r23, $r24) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: java.lang.Object getParam()>()
org.joda.time.chrono.GJChronology.assemble : $r6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r7 = (java.lang.Object[]) $r6
org.joda.time.chrono.GJChronology.assemble : $r7 = (java.lang.Object[]) $r6 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r2 = (java.lang.Object[]) $r7
org.joda.time.chrono.GJChronology.assemble : r2 = (java.lang.Object[]) $r7 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r8 = r2[0]
org.joda.time.chrono.GJChronology.assemble : $r8 = r2[0] >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r3 = (org.joda.time.chrono.JulianChronology) $r8
org.joda.time.chrono.GJChronology.assemble : r3 = (org.joda.time.chrono.JulianChronology) $r8 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r9 = r2[1]
org.joda.time.chrono.GJChronology.assemble : $r9 = r2[1] >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r4 = (org.joda.time.chrono.GregorianChronology) $r9
org.joda.time.chrono.GJChronology.assemble : r4 = (org.joda.time.chrono.GregorianChronology) $r9 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r10 = r2[2]
org.joda.time.chrono.GJChronology.assemble : $r10 = r2[2] >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r5 = (org.joda.time.Instant) $r10
org.joda.time.chrono.GJChronology.assemble : r5 = (org.joda.time.Instant) $r10 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l1 = virtualinvoke r5.<org.joda.time.Instant: long getMillis()>()
org.joda.time.chrono.GJChronology.assemble : $l1 = virtualinvoke r5.<org.joda.time.Instant: long getMillis()>() >>>>>>>> org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis>
org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis> >>>>>>>> org.joda.time.Instant.getMillis : return $l0
org.joda.time.Instant.getMillis : return $l0 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> = $l1
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> = $l1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> = r3
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> = r3 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> = r4
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> = r4 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> = r5
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> = r5 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.GJChronology.assemble : $r11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : if $r11 == null
org.joda.time.chrono.GJChronology.assemble : if $r11 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r149 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r149 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r150 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r150 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r149 != $r151
org.joda.time.chrono.AssembledChronology.setFields : if $r149 != $r151 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r152 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r152 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r153 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r153 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r152 != $r154
org.joda.time.chrono.AssembledChronology.setFields : if $r152 != $r154 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r155 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r155 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r156 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r156 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r155 != $r157
org.joda.time.chrono.AssembledChronology.setFields : if $r155 != $r157 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 1
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 2
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= $b3 = $b1 | $b2]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= $b3 = $b1 | $b2] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r164 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r164 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r165 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r165 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r164 != $r166
org.joda.time.chrono.AssembledChronology.setFields : if $r164 != $r166 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r167 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r167 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r168 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r168 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r167 != $r169
org.joda.time.chrono.AssembledChronology.setFields : if $r167 != $r169 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 4
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= b0 = $b3 | $b4]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= b0 = $b3 | $b4] >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r17 = $r20
org.joda.time.chrono.GJChronology.getInstance : r17 = $r20 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r17)
org.joda.time.chrono.GJChronology.getInstance : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r17) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : return r17
org.joda.time.chrono.GJChronology.getInstance : return r17 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : return $r2
org.joda.time.chrono.GJChronology.getInstance : return $r2 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : specialinvoke $r5.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r6, null)
org.joda.time.chrono.BuddhistChronology.getInstance : specialinvoke $r5.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r6, null) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r5 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r5 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : if $r5 != null
org.joda.time.chrono.BuddhistChronology.assemble : if $r5 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BuddhistChronology.assemble : r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r3 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r3 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r4 = new org.joda.time.field.SkipUndoDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r4 = new org.joda.time.field.SkipUndoDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r4.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r2)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r4.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r2) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : return $i0
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r3.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r4, 543)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r3.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r4, 543) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : return $r1
org.joda.time.field.DelegatedDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isSupported : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.isSupported : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isSupported : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.field.DelegatedDateTimeField.isSupported : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isSupported : return $z0
org.joda.time.field.DelegatedDateTimeField.isSupported : return $z0 >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iMinValue>
org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : return $i0
org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.BuddhistChronology.assemble : r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r7 = new org.joda.time.field.DelegatedDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r7 = new org.joda.time.field.DelegatedDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BuddhistChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>() >>>>>>>> org.joda.time.DateTimeFieldType.yearOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE>
org.joda.time.DateTimeFieldType.yearOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.yearOfEra : return $r0
org.joda.time.DateTimeFieldType.yearOfEra : return $r0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r7.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r8, $r9)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r7.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r8, $r9) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r7
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r7 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BuddhistChronology.assemble : r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r11 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r11 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r12 = new org.joda.time.field.SkipUndoDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r12 = new org.joda.time.field.SkipUndoDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r12.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r10)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r12.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r10) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r11.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r12, 543)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r11.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r12, 543) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r11
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r11 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r13 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r13 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.BuddhistChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r13.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r14, 99)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r13.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r14, 99) >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>
org.joda.time.field.OffsetDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin> >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMinimumValue : return $i0
org.joda.time.field.OffsetDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>
org.joda.time.field.OffsetDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax> >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMaximumValue : return $i0
org.joda.time.field.OffsetDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r15 = $r13
org.joda.time.chrono.BuddhistChronology.assemble : r15 = $r13 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r16 = new org.joda.time.field.DividedDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r16 = new org.joda.time.field.DividedDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r17 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r17 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>() >>>>>>>> org.joda.time.DateTimeFieldType.centuryOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE>
org.joda.time.DateTimeFieldType.centuryOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.centuryOfEra : return $r0
org.joda.time.DateTimeFieldType.centuryOfEra : return $r0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r16.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r15, $r17, 100)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r16.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r15, $r17, 100) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.DecoratedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : return $r1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getDurationField : return $r2
org.joda.time.field.DecoratedDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r16
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r16 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r18 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r18 = new org.joda.time.field.RemainderDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.BuddhistChronology.assemble : $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r20 = (org.joda.time.field.DividedDateTimeField) $r19
org.joda.time.chrono.BuddhistChronology.assemble : $r20 = (org.joda.time.field.DividedDateTimeField) $r19 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r18.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r20)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r18.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r20) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r21 = $r18
org.joda.time.chrono.BuddhistChronology.assemble : r21 = $r18 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r22 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r22 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r23 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r23 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>() >>>>>>>> org.joda.time.DateTimeFieldType.yearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE>
org.joda.time.DateTimeFieldType.yearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.yearOfCentury : return $r0
org.joda.time.DateTimeFieldType.yearOfCentury : return $r0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r22.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r21, $r23, 1)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r22.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r21, $r23, 1) >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMinimumValue : return 0
org.joda.time.field.RemainderDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>
org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMaximumValue : return $i1
org.joda.time.field.RemainderDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r22
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r22 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r24 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r24 = new org.joda.time.field.RemainderDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BuddhistChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r26 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r26 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekyearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE>
org.joda.time.DateTimeFieldType.weekyearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyearOfCentury : return $r0
org.joda.time.DateTimeFieldType.weekyearOfCentury : return $r0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r24.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r25, $r26, 100)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r24.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r25, $r26, 100) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r27 = $r24
org.joda.time.chrono.BuddhistChronology.assemble : r27 = $r24 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r28 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r28 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r29 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r29 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r28.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r27, $r29, 1)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r28.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r27, $r29, 1) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r28
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r28 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r30 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD>
org.joda.time.chrono.BuddhistChronology.assemble : $r30 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r30
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r30 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : r7 = $r5
org.joda.time.chrono.BuddhistChronology.getInstance : r7 = $r5 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r8 = new org.joda.time.DateTime
org.joda.time.chrono.BuddhistChronology.getInstance : $r8 = new org.joda.time.DateTime >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : specialinvoke $r8.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, r7)
org.joda.time.chrono.BuddhistChronology.getInstance : specialinvoke $r8.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, r7) >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l10 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l10 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0) >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iMinValue>
org.joda.time.field.SkipUndoDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.SkipUndoDateTimeField: int getMaximumValue()>()
org.joda.time.field.SkipUndoDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.SkipUndoDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.SkipUndoDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iSkip>
org.joda.time.field.SkipUndoDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : if i1 > $i4
org.joda.time.field.SkipUndoDateTimeField.set : if i1 > $i4 >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : i1 = i1 + -1
org.joda.time.field.SkipUndoDateTimeField.set : i1 = i1 + -1 >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : $l5 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.SkipUndoDateTimeField.set : $l5 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.set : $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $b3 = l0 cmp $l2
org.joda.time.chrono.GJChronology$CutoverField.set : $b3 = l0 cmp $l2 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : if $b3 < 0
org.joda.time.chrono.GJChronology$CutoverField.set : if $b3 < 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.set : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.set : $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $b6 = l4 cmp $l5
org.joda.time.chrono.GJChronology$CutoverField.set : $b6 = l4 cmp $l5 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : if $b6 >= 0
org.joda.time.chrono.GJChronology$CutoverField.set : if $b6 >= 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.set : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $l7 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2)
org.joda.time.chrono.GJChronology$CutoverField.set : $l7 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2) >>>>>>>> org.joda.time.chrono.GJChronology.access$000 : $l0 = r0.<org.joda.time.chrono.GJChronology: long iGapDuration>
org.joda.time.chrono.GJChronology.access$000 : $l0 = r0.<org.joda.time.chrono.GJChronology: long iGapDuration> >>>>>>>> org.joda.time.chrono.GJChronology.access$000 : return $l0
org.joda.time.chrono.GJChronology.access$000 : return $l0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $l8 = l4 + $l7
org.joda.time.chrono.GJChronology$CutoverField.set : $l8 = l4 + $l7 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $l9 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.set : $l9 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $b10 = $l8 cmp $l9
org.joda.time.chrono.GJChronology$CutoverField.set : $b10 = $l8 cmp $l9 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : if $b10 >= 0
org.joda.time.chrono.GJChronology$CutoverField.set : if $b10 >= 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>(l4)
org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>(l4) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : if $z0 == 0
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $l2 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>(l0)
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $l2 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>(l0) >>>>>>>> org.joda.time.chrono.GJChronology.gregorianToJulianByYear : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.chrono.GJChronology.gregorianToJulianByYear : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.gregorianToJulianByYear : $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>
org.joda.time.chrono.GJChronology.gregorianToJulianByYear : $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.gregorianToJulianByYear : $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r1, $r2)
org.joda.time.chrono.GJChronology.gregorianToJulianByYear : $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r1, $r2) >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r2 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.GJChronology.convertByYear : $r2 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1
org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l10 + 1L
org.joda.time.chrono.BasicChronology.getYear : l2 = $l10 + 1L >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.GJChronology.convertByYear : $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.GJChronology.convertByYear : $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r5 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.GJChronology.convertByYear : $r5 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1
org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L
org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11
org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13
org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14
org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15
org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16
org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i17
org.joda.time.field.PreciseDateTimeField.get : return $i17 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $l5 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i1, $i2, $i3, $i4)
org.joda.time.chrono.GJChronology.convertByYear : $l5 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i1, $i2, $i3, $i4) >>>>>>>> org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : return $r0
org.joda.time.DateTimeFieldType.millisOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 != 0
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : i0 = i0 + 1
org.joda.time.chrono.JulianChronology.adjustYearForSet : i0 = i0 + 1 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateTimeMillis : return $l4
org.joda.time.chrono.JulianChronology.getDateTimeMillis : return $l4 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : return $l5
org.joda.time.chrono.GJChronology.convertByYear : return $l5 >>>>>>>> org.joda.time.chrono.GJChronology.gregorianToJulianByYear : return $l1
org.joda.time.chrono.GJChronology.gregorianToJulianByYear : return $l1 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : return $l2
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : return $l2 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $i11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>(l4)
org.joda.time.chrono.GJChronology$CutoverField.set : $i11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>(l4) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.get : $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.get : $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.get : $b2 = l0 cmp $l1
org.joda.time.chrono.GJChronology$CutoverField.get : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.get : if $b2 < 0
org.joda.time.chrono.GJChronology$CutoverField.get : if $b2 < 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.get : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.get : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.get : $i4 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology$CutoverField.get : $i4 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0
org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0
org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : i1 = i1 + -1
org.joda.time.field.SkipDateTimeField.get : i1 = i1 + -1 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.get : return $i4
org.joda.time.chrono.GJChronology$CutoverField.get : return $i4 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : if $i11 == i1
org.joda.time.chrono.GJChronology$CutoverField.set : if $i11 == i1 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : return l4
org.joda.time.chrono.GJChronology$CutoverField.set : return l4 >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.set : return $l5
org.joda.time.field.SkipUndoDateTimeField.set : return $l5 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l8 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l7, i1)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l8 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l7, i1) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $r7 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.set : $r7 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $l12 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.set : $l12 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : $b13 = l4 cmp $l12
org.joda.time.chrono.GJChronology$CutoverField.set : $b13 = l4 cmp $l12 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.set : if $b13 < 0
org.joda.time.chrono.GJChronology$CutoverField.set : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l8, i2)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l8, i2) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l9, i3)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l9, i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r5 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r5 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l11 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l10, i4)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l11 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l10, i4) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r6 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r6 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l12 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(l11, i5)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l12 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(l11, i5) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r7 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r7 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l13 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l12, i6)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l13 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l12, i6) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l13
org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l13 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l10
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l10 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : r2 = $r8
org.joda.time.chrono.BuddhistChronology.getInstance : r2 = $r8 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r9 = new org.joda.time.chrono.BuddhistChronology
org.joda.time.chrono.BuddhistChronology.getInstance : $r9 = new org.joda.time.chrono.BuddhistChronology >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r10 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>(r7, r2, null)
org.joda.time.chrono.BuddhistChronology.getInstance : $r10 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>(r7, r2, null) >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : if r0 != null
org.joda.time.chrono.LimitChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : if r1 != null
org.joda.time.chrono.LimitChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : $r4 = interfaceinvoke r1.<org.joda.time.ReadableDateTime: org.joda.time.DateTime toDateTime()>()
org.joda.time.chrono.LimitChronology.getInstance : $r4 = interfaceinvoke r1.<org.joda.time.ReadableDateTime: org.joda.time.DateTime toDateTime()>() >>>>>>>> org.joda.time.DateTime.toDateTime : return r0
org.joda.time.DateTime.toDateTime : return r0 >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : r5 = $r4
org.joda.time.chrono.LimitChronology.getInstance : r5 = $r4 >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : if r2 != null
org.joda.time.chrono.LimitChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : $r6 = null
org.joda.time.chrono.LimitChronology.getInstance : $r6 = null >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : goto [?= r7 = $r6]
org.joda.time.chrono.LimitChronology.getInstance : goto [?= r7 = $r6] >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : r7 = $r6
org.joda.time.chrono.LimitChronology.getInstance : r7 = $r6 >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : if r5 == null
org.joda.time.chrono.LimitChronology.getInstance : if r5 == null >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : if r7 == null
org.joda.time.chrono.LimitChronology.getInstance : if r7 == null >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : $r9 = new org.joda.time.chrono.LimitChronology
org.joda.time.chrono.LimitChronology.getInstance : $r9 = new org.joda.time.chrono.LimitChronology >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : $r10 = (org.joda.time.DateTime) r5
org.joda.time.chrono.LimitChronology.getInstance : $r10 = (org.joda.time.DateTime) r5 >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : $r11 = (org.joda.time.DateTime) r7
org.joda.time.chrono.LimitChronology.getInstance : $r11 = (org.joda.time.DateTime) r7 >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : specialinvoke $r9.<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>(r0, $r10, $r11)
org.joda.time.chrono.LimitChronology.getInstance : specialinvoke $r9.<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>(r0, $r10, $r11) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r2 = new java.util.HashMap
org.joda.time.chrono.LimitChronology.assemble : $r2 = new java.util.HashMap >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.joda.time.chrono.LimitChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r3 = $r2
org.joda.time.chrono.LimitChronology.assemble : r3 = $r2 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.LimitChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3)
org.joda.time.chrono.LimitChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if r1 == null
org.joda.time.chrono.LimitChronology.convertField : if r1 == null >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r1
org.joda.time.chrono.LimitChronology.convertField : return r1 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.LimitChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3)
org.joda.time.chrono.LimitChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0
org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1)
org.joda.time.chrono.LimitChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0
org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDurationField
org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDurationField >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>(r0, r1)
org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>(r0, r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : r3 = $r6
org.joda.time.chrono.LimitChronology.convertField : r3 = $r6 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.chrono.LimitChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r3
org.joda.time.chrono.LimitChronology.convertField : return r3 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.LimitChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3)
org.joda.time.chrono.LimitChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.LimitChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3)
org.joda.time.chrono.LimitChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.LimitChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3)
org.joda.time.chrono.LimitChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.LimitChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3)
org.joda.time.chrono.LimitChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.LimitChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3)
org.joda.time.chrono.LimitChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.LimitChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3)
org.joda.time.chrono.LimitChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.LimitChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3)
org.joda.time.chrono.LimitChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.LimitChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3)
org.joda.time.chrono.LimitChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.LimitChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3)
org.joda.time.chrono.LimitChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.LimitChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3)
org.joda.time.chrono.LimitChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.LimitChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3)
org.joda.time.chrono.LimitChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField
org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r7 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r7 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r8 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, r2)
org.joda.time.chrono.LimitChronology.convertField : $r8 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.LimitChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r5 = (org.joda.time.DurationField) $r4
org.joda.time.chrono.LimitChronology.convertField : $r5 = (org.joda.time.DurationField) $r4 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return $r5
org.joda.time.chrono.LimitChronology.convertField : return $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r9 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r9 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getRangeDurationField : return $r1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : return $r2
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r10 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, r2)
org.joda.time.chrono.LimitChronology.convertField : $r10 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r11 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r11 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iLeapDurationField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iLeapDurationField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getLeapDurationField : return $r1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getLeapDurationField : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getLeapDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r12 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, r2)
org.joda.time.chrono.LimitChronology.convertField : $r12 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r0, r1, $r8, $r10, $r12)
org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r0, r1, $r8, $r10, $r12) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.LimitChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3)
org.joda.time.chrono.LimitChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.LimitChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3)
org.joda.time.chrono.LimitChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3) >>>>>>>> org.joda.time.field.RemainderDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.field.RemainderDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField> >>>>>>>> org.joda.time.field.RemainderDateTimeField.getRangeDurationField : return $r1
org.joda.time.field.RemainderDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.LimitChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3)
org.joda.time.chrono.LimitChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3) >>>>>>>> org.joda.time.field.DividedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.DividedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.DividedDateTimeField.getDurationField : return $r1
org.joda.time.field.DividedDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.LimitChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3)
org.joda.time.chrono.LimitChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3) >>>>>>>> org.joda.time.chrono.BasicSingleEraDateTimeField.getDurationField : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.BasicSingleEraDateTimeField.getDurationField : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.chrono.BasicSingleEraDateTimeField.getDurationField : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.BasicSingleEraDateTimeField.getDurationField : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.chrono.BasicSingleEraDateTimeField.getDurationField : return $r2
org.joda.time.chrono.BasicSingleEraDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.chrono.BasicSingleEraDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.BasicSingleEraDateTimeField.getRangeDurationField : return null >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.LimitChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3)
org.joda.time.chrono.LimitChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.LimitChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3)
org.joda.time.chrono.LimitChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.LimitChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3)
org.joda.time.chrono.LimitChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.LimitChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3)
org.joda.time.chrono.LimitChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.LimitChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3)
org.joda.time.chrono.LimitChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.LimitChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3)
org.joda.time.chrono.LimitChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.LimitChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3)
org.joda.time.chrono.LimitChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.LimitChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3)
org.joda.time.chrono.LimitChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3)
org.joda.time.chrono.LimitChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.LimitChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3)
org.joda.time.chrono.LimitChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3)
org.joda.time.chrono.LimitChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.LimitChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3)
org.joda.time.chrono.LimitChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3)
org.joda.time.chrono.LimitChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3)
org.joda.time.chrono.LimitChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.LimitChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3)
org.joda.time.chrono.LimitChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3)
org.joda.time.chrono.LimitChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.LimitChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3)
org.joda.time.chrono.LimitChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3)
org.joda.time.chrono.LimitChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73 >>>>>>>> org.joda.time.chrono.LimitChronology.getInstance : return $r9
org.joda.time.chrono.LimitChronology.getInstance : return $r9 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : specialinvoke $r9.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r10, "")
org.joda.time.chrono.BuddhistChronology.getInstance : specialinvoke $r9.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r10, "") >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : r1 = $r9
org.joda.time.chrono.BuddhistChronology.getInstance : r1 = $r9 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r11 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>
org.joda.time.chrono.BuddhistChronology.getInstance : $r11 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1)
org.joda.time.chrono.BuddhistChronology.getInstance : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1) >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : return r1
org.joda.time.chrono.BuddhistChronology.getInstance : return r1 >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.MutableDateTime.setZoneRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : $r4 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeZone getZone()>()
org.joda.time.MutableDateTime.setZoneRetainFields : $r4 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.base.AbstractInstant.getZone : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.getZone : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInstant.getZone : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.base.AbstractInstant.getZone : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.base.AbstractInstant.getZone : return $r2
org.joda.time.base.AbstractInstant.getZone : return $r2 >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r4)
org.joda.time.MutableDateTime.setZoneRetainFields : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r4) >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : if r3 != r2
org.joda.time.MutableDateTime.setZoneRetainFields : if r3 != r2 >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>()
org.joda.time.MutableDateTime.setZoneRetainFields : $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>() >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : l0 = virtualinvoke r2.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>(r3, $l1)
org.joda.time.MutableDateTime.setZoneRetainFields : l0 = virtualinvoke r2.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>(r3, $l1) >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : $r5 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.MutableDateTime.setZoneRetainFields : $r5 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3)
org.joda.time.MutableDateTime.setZoneRetainFields : $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3) >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != null
org.joda.time.chrono.ISOChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2
org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.ISOChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : return $r3
org.joda.time.chrono.ISOChronology.withZone : return $r3 >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : virtualinvoke r0.<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>($r6)
org.joda.time.MutableDateTime.setZoneRetainFields : virtualinvoke r0.<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>($r6) >>>>>>>> org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1)
org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.setChronology : r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2
org.joda.time.base.BaseDateTime.setChronology : r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2 >>>>>>>> org.joda.time.MutableDateTime.setZoneRetainFields : virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>(l0)
org.joda.time.MutableDateTime.setZoneRetainFields : virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>(l0) >>>>>>>> org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode>
org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode> >>>>>>>> org.joda.time.MutableDateTime.setMillis : tableswitch($i1) {     case 0:
org.joda.time.MutableDateTime.setMillis : tableswitch($i1) {     case 0: >>>>>>>> org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)]
org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)] >>>>>>>> org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)
org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0) >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1)
org.joda.time.base.BaseDateTime.setMillis : $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1) >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1
