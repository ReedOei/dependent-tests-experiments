org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1 >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.MutableDateTime.year : $r1 = new org.joda.time.MutableDateTime$Property
org.joda.time.MutableDateTime.year : $r1 = new org.joda.time.MutableDateTime$Property >>>>>>>> org.joda.time.MutableDateTime.year : $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.MutableDateTime.year : $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.MutableDateTime.year : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.MutableDateTime.year : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.MutableDateTime.year : specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.MutableDateTime.year : specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.MutableDateTime.year : return $r1
org.joda.time.MutableDateTime.year : return $r1 >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp>
org.joda.time.format.ISODateTimeFormat.localDateParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : if $r0 != null
org.joda.time.format.ISODateTimeFormat.localDateParser : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : $r3 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp>
org.joda.time.format.ISODateTimeFormat.localDateParser : $r3 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : return $r3
org.joda.time.format.ISODateTimeFormat.localDateParser : return $r3 >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : if $r0 != null
org.joda.time.convert.ConverterManager.getInstance : if $r0 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : return $r2
org.joda.time.convert.ConverterManager.getInstance : return $r2 >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPartialConverters>
org.joda.time.convert.ConverterManager.getPartialConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPartialConverters> >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : if r1 != null
org.joda.time.convert.ConverterManager.getPartialConverter : if r1 != null >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getPartialConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)
org.joda.time.convert.ConverterManager.getPartialConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5) >>>>>>>> org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> >>>>>>>> org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.select : if r1 != null
org.joda.time.convert.ConverterSet.select : if r1 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1
org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6
org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6 >>>>>>>> org.joda.time.convert.ConverterSet.select : i1 = $i4
org.joda.time.convert.ConverterSet.select : i1 = $i4 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.select : r3 = $r6
org.joda.time.convert.ConverterSet.select : r3 = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r6 == null
org.joda.time.convert.ConverterSet.select : if $r6 == null >>>>>>>> org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType> >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r7 != r1
org.joda.time.convert.ConverterSet.select : if $r7 != r1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter> >>>>>>>> org.joda.time.convert.ConverterSet.select : return $r8
org.joda.time.convert.ConverterSet.select : return $r8 >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : r2 = (org.joda.time.convert.PartialConverter) $r6
org.joda.time.convert.ConverterManager.getPartialConverter : r2 = (org.joda.time.convert.PartialConverter) $r6 >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : if r2 == null
org.joda.time.convert.ConverterManager.getPartialConverter : if r2 == null >>>>>>>> org.joda.time.convert.ConverterManager.getPartialConverter : return r2
org.joda.time.convert.ConverterManager.getPartialConverter : return r2 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : if r2 != null
org.joda.time.convert.ReadableInstantConverter.getChronology : if r2 != null >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : $r3 = (org.joda.time.ReadableInstant) r1
org.joda.time.convert.ReadableInstantConverter.getChronology : $r3 = (org.joda.time.ReadableInstant) r1 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : r4 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.convert.ReadableInstantConverter.getChronology : r4 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4)
org.joda.time.convert.ReadableInstantConverter.getChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4) >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : return r2
org.joda.time.convert.ReadableInstantConverter.getChronology : return r2 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.convert.AbstractConverter.getPartialValues : $r5 = virtualinvoke r0.<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>(r1, r2, r3)
org.joda.time.convert.AbstractConverter.getPartialValues : $r5 = virtualinvoke r0.<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>(r1, r2, r3) >>>>>>>> org.joda.time.convert.AbstractConverter.getPartialValues : l0 = virtualinvoke r0.<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r2, r3)
org.joda.time.convert.AbstractConverter.getPartialValues : l0 = virtualinvoke r0.<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r2, r3) >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $r3 = (org.joda.time.ReadableInstant) r1
org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $r3 = (org.joda.time.ReadableInstant) r1 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $l0 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $l0 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getInstantMillis : return $l0
org.joda.time.convert.ReadableInstantConverter.getInstantMillis : return $l0 >>>>>>>> org.joda.time.convert.AbstractConverter.getPartialValues : $r4 = virtualinvoke r3.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l0)
org.joda.time.convert.AbstractConverter.getPartialValues : $r4 = virtualinvoke r3.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l0) >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.YearMonth.size : return 2
org.joda.time.YearMonth.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = 0
org.joda.time.chrono.BaseChronology.get : i2 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i2 >= i1
org.joda.time.chrono.BaseChronology.get : if i2 >= i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2)
org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2) >>>>>>>> org.joda.time.YearMonth.getFieldType : $r1 = <org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.YearMonth.getFieldType : $r1 = <org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] FIELD_TYPES> >>>>>>>> org.joda.time.YearMonth.getFieldType : $r2 = $r1[i0]
org.joda.time.YearMonth.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.YearMonth.getFieldType : return $r2
org.joda.time.YearMonth.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.BaseChronology.get : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3
org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L
org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0
org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : return l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i2] = $i3
org.joda.time.chrono.BaseChronology.get : r2[i2] = $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = i2 + 1
org.joda.time.chrono.BaseChronology.get : i2 = i2 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100
org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25734375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25734375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28265625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28265625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 11
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 11 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.convert.AbstractConverter.getPartialValues : return $r4
org.joda.time.convert.AbstractConverter.getPartialValues : return $r4 >>>>>>>> org.joda.time.convert.AbstractConverter.getPartialValues : return $r5
org.joda.time.convert.AbstractConverter.getPartialValues : return $r5 >>>>>>>> org.joda.time.YearMonth.plusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.YearMonth.plusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.YearMonth.plusMonths : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.YearMonth.plusMonths : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.YearMonth.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.YearMonth: int indexOfSupported(org.joda.time.DurationFieldType)>(r1)
org.joda.time.YearMonth.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.YearMonth: int indexOfSupported(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1
org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)]
org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : return i0 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : if i0 != 0
org.joda.time.YearMonth.withFieldAdded : if i0 != 0 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>()
org.joda.time.YearMonth.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>() >>>>>>>> org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.base.BasePartial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.base.BasePartial.getValues : $r3 = (int[]) $r2
org.joda.time.base.BasePartial.getValues : $r3 = (int[]) $r2 >>>>>>>> org.joda.time.base.BasePartial.getValues : $r4 = (int[]) $r3
org.joda.time.base.BasePartial.getValues : $r4 = (int[]) $r3 >>>>>>>> org.joda.time.base.BasePartial.getValues : return $r4
org.joda.time.base.BasePartial.getValues : return $r4 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.YearMonth.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0:
org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.YearMonth.getField : return $r4
org.joda.time.YearMonth.getField : return $r4 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0)
org.joda.time.YearMonth.withFieldAdded : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : if r0 != null
org.joda.time.DateTimeUtils.isContiguous : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : r1 = null
org.joda.time.DateTimeUtils.isContiguous : r1 = null >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : i0 = 0
org.joda.time.DateTimeUtils.isContiguous : i0 = 0 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.DateTimeUtils.isContiguous : $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : if i0 >= $i1
org.joda.time.DateTimeUtils.isContiguous : if i0 >= $i1 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : r2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i0)
org.joda.time.DateTimeUtils.isContiguous : r2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i0) >>>>>>>> org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.YearMonth.getField : return $r3
org.joda.time.YearMonth.getField : return $r3 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : if i0 <= 0
org.joda.time.DateTimeUtils.isContiguous : if i0 <= 0 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : $r6 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.DateTimeUtils.isContiguous : $r6 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1
org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : r1 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.DateTimeUtils.isContiguous : r1 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.BaseDurationField.getType : return $r1
org.joda.time.field.BaseDurationField.getType : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : i0 = i0 + 1
org.joda.time.DateTimeUtils.isContiguous : i0 = i0 + 1 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : goto [?= $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()]
org.joda.time.DateTimeUtils.isContiguous : goto [?= $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()] >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : $r4 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.DateTimeUtils.isContiguous : $r4 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : $r5 = virtualinvoke $r4.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.DateTimeUtils.isContiguous : $r5 = virtualinvoke $r4.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : if $r5 == r1
org.joda.time.DateTimeUtils.isContiguous : if $r5 == r1 >>>>>>>> org.joda.time.DateTimeUtils.isContiguous : return 1
org.joda.time.DateTimeUtils.isContiguous : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if $z0 == 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = 0L
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = 0L >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i3 >= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i3 >= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i5 = r2[i3]
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i5 = r2[i3] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l2, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l2, $i5) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = i3 + 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= (branch)]
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0
org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0
org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l6 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l6 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l2, i1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>]
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3)
org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1
org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l6)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l6) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 4978125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 4978125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $r7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $r7 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : $r5 = new org.joda.time.YearMonth
org.joda.time.YearMonth.withFieldAdded : $r5 = new org.joda.time.YearMonth >>>>>>>> org.joda.time.YearMonth.withFieldAdded : specialinvoke $r5.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>(r0, r4)
org.joda.time.YearMonth.withFieldAdded : specialinvoke $r5.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>(r0, r4) >>>>>>>> org.joda.time.YearMonth.withFieldAdded : return $r5
org.joda.time.YearMonth.withFieldAdded : return $r5 >>>>>>>> org.joda.time.YearMonth.plusMonths : return $r2
org.joda.time.YearMonth.plusMonths : return $r2 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0
org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateMidnight.now : if r0 != null
org.joda.time.DateMidnight.now : if r0 != null >>>>>>>> org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.now : return $r2
org.joda.time.DateMidnight.now : return $r2 >>>>>>>> org.joda.time.LocalDate.now : if r0 != null
org.joda.time.LocalDate.now : if r0 != null >>>>>>>> org.joda.time.LocalDate.now : $r2 = new org.joda.time.LocalDate
org.joda.time.LocalDate.now : $r2 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.LocalDate.now : specialinvoke $r2.<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.LocalDate.now : specialinvoke $r2.<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : return $r1
org.joda.time.chrono.JulianChronology.getZone : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : return $r1
org.joda.time.chrono.JulianChronology.withUTC : return $r1 >>>>>>>> org.joda.time.LocalDate.now : return $r2
org.joda.time.LocalDate.now : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.YearMonth.withChronologyRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : r4 = virtualinvoke r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.YearMonth.withChronologyRetainFields : r4 = virtualinvoke r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : $r5 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>()
org.joda.time.YearMonth.withChronologyRetainFields : $r5 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : if r4 != $r5
org.joda.time.YearMonth.withChronologyRetainFields : if r4 != $r5 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : $r6 = new org.joda.time.YearMonth
org.joda.time.YearMonth.withChronologyRetainFields : $r6 = new org.joda.time.YearMonth >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : specialinvoke $r6.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>(r0, r4)
org.joda.time.YearMonth.withChronologyRetainFields : specialinvoke $r6.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>(r0, r4) >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : r2 = $r6
org.joda.time.YearMonth.withChronologyRetainFields : r2 = $r6 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : $r7 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>()
org.joda.time.YearMonth.withChronologyRetainFields : $r7 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>() >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : virtualinvoke r4.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r2, $r7)
org.joda.time.YearMonth.withChronologyRetainFields : virtualinvoke r4.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r2, $r7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992
org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r3 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r3 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMinYear : return -292269054
org.joda.time.chrono.JulianChronology.getMinYear : return -292269054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r3 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r3 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : return r2
org.joda.time.YearMonth.withChronologyRetainFields : return r2 >>>>>>>> org.joda.time.DateTimeZone.forOffsetMillis : r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0)
org.joda.time.DateTimeZone.forOffsetMillis : r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer >>>>>>>> org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()
org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : r1 = $r0
org.joda.time.DateTimeZone.printOffset : r1 = $r0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i0 < 0
org.joda.time.DateTimeZone.printOffset : if i0 < 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43) >>>>>>>> org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000]
org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000] >>>>>>>> org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4
org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58) >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6
org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i7 != 0
org.joda.time.DateTimeZone.printOffset : if i7 != 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i3 = i7 / 1000
org.joda.time.DateTimeZone.printOffset : i3 = i7 / 1000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i8 = i3 * 1000
org.joda.time.DateTimeZone.printOffset : $i8 = i3 * 1000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i9 = i7 - $i8
org.joda.time.DateTimeZone.printOffset : i9 = i7 - $i8 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i9 != 0
org.joda.time.DateTimeZone.printOffset : if i9 != 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46) >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i9, 3)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i9, 3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : return $r9
org.joda.time.DateTimeZone.printOffset : return $r9 >>>>>>>> org.joda.time.DateTimeZone.forOffsetMillis : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r0, i0)
org.joda.time.DateTimeZone.forOffsetMillis : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r0, i0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0
org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null
org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7
org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>()
org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>() >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r2 = (org.joda.time.DateTimeZone) $r8
org.joda.time.DateTimeZone.fixedOffsetZone : r2 = (org.joda.time.DateTimeZone) $r8 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : return r2
org.joda.time.DateTimeZone.fixedOffsetZone : return r2 >>>>>>>> org.joda.time.DateTimeZone.forOffsetMillis : return $r1
org.joda.time.DateTimeZone.forOffsetMillis : return $r1 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED>
org.joda.time.chrono.IslamicChronology.getInstance : $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED> >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : $r2 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>(r0, $r1)
org.joda.time.chrono.IslamicChronology.getInstance : $r2 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>(r0, $r1) >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : if r0 != null
org.joda.time.chrono.IslamicChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : $r7 = <org.joda.time.chrono.IslamicChronology: java.util.Map cCache>
org.joda.time.chrono.IslamicChronology.getInstance : $r7 = <org.joda.time.chrono.IslamicChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : r2 = $r7
org.joda.time.chrono.IslamicChronology.getInstance : r2 = $r7 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : entermonitor $r7
org.joda.time.chrono.IslamicChronology.getInstance : entermonitor $r7 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : $r8 = <org.joda.time.chrono.IslamicChronology: java.util.Map cCache>
org.joda.time.chrono.IslamicChronology.getInstance : $r8 = <org.joda.time.chrono.IslamicChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.IslamicChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : r3 = (org.joda.time.chrono.IslamicChronology[]) $r9
org.joda.time.chrono.IslamicChronology.getInstance : r3 = (org.joda.time.chrono.IslamicChronology[]) $r9 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : if r3 != null
org.joda.time.chrono.IslamicChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : $b0 = r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>
org.joda.time.chrono.IslamicChronology.getInstance : $b0 = r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index> >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : r4 = r3[$b0]
org.joda.time.chrono.IslamicChronology.getInstance : r4 = r3[$b0] >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : if r4 != null
org.joda.time.chrono.IslamicChronology.getInstance : if r4 != null >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : exitmonitor r2
org.joda.time.chrono.IslamicChronology.getInstance : exitmonitor r2 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : goto [?= return r4]
org.joda.time.chrono.IslamicChronology.getInstance : goto [?= return r4] >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : return r4
org.joda.time.chrono.IslamicChronology.getInstance : return r4 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstance : return $r2
org.joda.time.chrono.IslamicChronology.getInstance : return $r2 >>>>>>>> org.joda.time.chrono.IslamicChronology.withUTC : $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC>
org.joda.time.chrono.IslamicChronology.withUTC : $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.IslamicChronology.withUTC : return $r1
org.joda.time.chrono.IslamicChronology.withUTC : return $r1 >>>>>>>> org.joda.time.DateTime.toDateTime : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTime.toDateTime : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTime.toDateTime : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.toDateTime : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.toDateTime : if $r3 != r2
org.joda.time.DateTime.toDateTime : if $r3 != r2 >>>>>>>> org.joda.time.DateTime.toDateTime : $r4 = specialinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>(r2)
org.joda.time.DateTime.toDateTime : $r4 = specialinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.base.AbstractInstant.toDateTime : $r2 = new org.joda.time.DateTime
org.joda.time.base.AbstractInstant.toDateTime : $r2 = new org.joda.time.DateTime >>>>>>>> org.joda.time.base.AbstractInstant.toDateTime : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.toDateTime : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractInstant.toDateTime : specialinvoke $r2.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, r1)
org.joda.time.base.AbstractInstant.toDateTime : specialinvoke $r2.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, r1) >>>>>>>> org.joda.time.base.AbstractInstant.toDateTime : return $r2
org.joda.time.base.AbstractInstant.toDateTime : return $r2 >>>>>>>> org.joda.time.DateTime.toDateTime : return $r4
