org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfHalfday : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>() >>>>>>>> org.joda.time.DateTimeFieldType.clockhourOfHalfday : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE>
org.joda.time.DateTimeFieldType.clockhourOfHalfday : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.clockhourOfHalfday : return $r0
org.joda.time.DateTimeFieldType.clockhourOfHalfday : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfHalfday : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfHalfday : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : i1 = i0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : i1 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 0, i0)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 0, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r7
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfHalfday : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendClockhourOfHalfday : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : i1 = i0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : i1 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 1, i0)
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 1, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6)
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : return $r7
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendYear : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>()
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.secondOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfDay : return $r0
org.joda.time.DateTimeFieldType.secondOfDay : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$Fraction
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$Fraction >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>(r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>(r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4)
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : return $r5
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : return $r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r1 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>(i0, 0)
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r1 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>(i0, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>()
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : return $r0
org.joda.time.DateTimeFieldType.weekyear : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r2, i0, z0)
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r2, i0, z0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : return $r3
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : return $r1
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitWeekyear : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>()
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0
org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimatePrintedLength : return 2
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimatePrintedLength : return 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : $b0 = 2
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : $b0 = 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : return $b0
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength : return $b0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>()
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z0 != 0
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z2 = 1
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z2 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : goto [?= return $z2]
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : goto [?= return $z2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : return $z0
