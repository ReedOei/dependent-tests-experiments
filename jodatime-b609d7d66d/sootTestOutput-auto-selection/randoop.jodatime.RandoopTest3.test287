org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod$1.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType time()>()
org.joda.time.base.BasePeriod$1.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType time()>() >>>>>>>> org.joda.time.PeriodType.time : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cTime>
org.joda.time.PeriodType.time : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cTime> >>>>>>>> org.joda.time.PeriodType.time : if r0 != null
org.joda.time.PeriodType.time : if r0 != null >>>>>>>> org.joda.time.PeriodType.time : return r0
org.joda.time.PeriodType.time : return r0 >>>>>>>> org.joda.time.base.BasePeriod$1.getPeriodType : return $r1
org.joda.time.base.BasePeriod$1.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l2 = 0L
org.joda.time.chrono.BaseChronology.get : l2 = 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i3 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i1
org.joda.time.chrono.BaseChronology.get : if i3 >= i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.field.PreciseDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $z0 == 0
org.joda.time.chrono.BaseChronology.get : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4)
org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1
org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14 >>>>>>>> org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.field.MillisDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : return $i3
org.joda.time.field.MillisDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.Period.minusDays : $i1 = neg i0
org.joda.time.Period.minusDays : $i1 = neg i0 >>>>>>>> org.joda.time.Period.minusDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusDays(int)>($i1)
org.joda.time.Period.minusDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusDays(int)>($i1) >>>>>>>> org.joda.time.Period.plusDays : if i0 != 0
org.joda.time.Period.plusDays : if i0 != 0 >>>>>>>> org.joda.time.Period.plusDays : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusDays : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.getValues : return r1 >>>>>>>> org.joda.time.Period.plusDays : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusDays : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusDays : $i1 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.plusDays : $i1 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.plusDays : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusDays : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i1 != 0
org.joda.time.PeriodType.addIndexedField : if i1 != 0 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0]
org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i2 != -1
org.joda.time.PeriodType.addIndexedField : if i2 != -1 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2]
org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2] >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1)
org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4
org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4 >>>>>>>> org.joda.time.PeriodType.addIndexedField : return 1
org.joda.time.PeriodType.addIndexedField : return 1 >>>>>>>> org.joda.time.Period.plusDays : $r3 = new org.joda.time.Period
org.joda.time.Period.plusDays : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusDays : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusDays : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusDays : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusDays : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusDays : return $r3
org.joda.time.Period.plusDays : return $r3 >>>>>>>> org.joda.time.Period.minusDays : return $r1
org.joda.time.Period.minusDays : return $r1 >>>>>>>> org.joda.time.Period.minusMinutes : $i1 = neg i0
org.joda.time.Period.minusMinutes : $i1 = neg i0 >>>>>>>> org.joda.time.Period.minusMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>($i1)
org.joda.time.Period.minusMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>($i1) >>>>>>>> org.joda.time.Period.plusMinutes : if i0 != 0
org.joda.time.Period.plusMinutes : if i0 != 0 >>>>>>>> org.joda.time.Period.plusMinutes : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusMinutes : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.Period.plusMinutes : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMinutes : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusMinutes : $i1 = <org.joda.time.PeriodType: int MINUTE_INDEX>
org.joda.time.Period.plusMinutes : $i1 = <org.joda.time.PeriodType: int MINUTE_INDEX> >>>>>>>> org.joda.time.Period.plusMinutes : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusMinutes : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.Period.plusMinutes : $r3 = new org.joda.time.Period
org.joda.time.Period.plusMinutes : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusMinutes : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMinutes : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusMinutes : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusMinutes : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusMinutes : return $r3
org.joda.time.Period.plusMinutes : return $r3 >>>>>>>> org.joda.time.Period.minusMinutes : return $r1
