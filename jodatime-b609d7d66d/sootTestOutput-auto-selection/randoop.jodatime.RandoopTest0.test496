org.joda.time.chrono.EthiopicChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4)
org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4) >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : if r0 != null
org.joda.time.chrono.EthiopicChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : r1 = $r6
org.joda.time.chrono.EthiopicChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : entermonitor $r6
org.joda.time.chrono.EthiopicChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r7 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : $r7 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.EthiopicChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>()
org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0
org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0 >>>>>>>> org.joda.time.DateTimeZone.hashCode : return $i1
org.joda.time.DateTimeZone.hashCode : return $i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0
org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : r2 = (org.joda.time.chrono.EthiopicChronology[]) $r8
org.joda.time.chrono.EthiopicChronology.getInstance : r2 = (org.joda.time.chrono.EthiopicChronology[]) $r8 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : if r2 != null
org.joda.time.chrono.EthiopicChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.EthiopicChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.EthiopicChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : if r3 != null
org.joda.time.chrono.EthiopicChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : exitmonitor r1
org.joda.time.chrono.EthiopicChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : return r3
org.joda.time.chrono.EthiopicChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : return $r1
org.joda.time.chrono.EthiopicChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.LocalTime.fromMillisOfDay : $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r0)
org.joda.time.LocalTime.fromMillisOfDay : $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.LocalTime.fromMillisOfDay : r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.LocalTime.fromMillisOfDay : r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.withUTC : $r1 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC>
org.joda.time.chrono.EthiopicChronology.withUTC : $r1 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.EthiopicChronology.withUTC : return $r1
org.joda.time.chrono.EthiopicChronology.withUTC : return $r1 >>>>>>>> org.joda.time.LocalTime.fromMillisOfDay : $r3 = new org.joda.time.LocalTime
org.joda.time.LocalTime.fromMillisOfDay : $r3 = new org.joda.time.LocalTime >>>>>>>> org.joda.time.LocalTime.fromMillisOfDay : specialinvoke $r3.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>(l0, r2)
org.joda.time.LocalTime.fromMillisOfDay : specialinvoke $r3.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>(l0, r2) >>>>>>>> org.joda.time.chrono.EthiopicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.EthiopicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getZone : return $r1
org.joda.time.chrono.EthiopicChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r3
org.joda.time.chrono.BasicChronology.getZone : return $r3 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null) >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3
org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1
org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0
org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5
org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1
org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : return $i1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : return $i1 >>>>>>>> org.joda.time.LocalTime.fromMillisOfDay : return $r3
org.joda.time.LocalTime.fromMillisOfDay : return $r3 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return $r1
org.joda.time.DateTimeUtils.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i3 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i2
org.joda.time.chrono.BaseChronology.get : if i3 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l1)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l1) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4
org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2
org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3] >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6
org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1
org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1
org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : l2 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : l2 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l6 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l6 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l7 = l0 ^ $l6
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b8 = $l7 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b8 < 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b8 < 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l5 = (long) $i4
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l5 = (long) $i4 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l6 = l0 + $l5
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l6 = l0 + $l5 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l7 = (long) i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l7 = (long) i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l8 = l1 + $l7
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l8 = l1 + $l7 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i9 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l6, $l8)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i9 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l6, $l8) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, "minuend")
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, "minuend") >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r2 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r2 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r2.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l1, "subtrahend")
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r2.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l1, "subtrahend") >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1
org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l1)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l1, l0)
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.BasicFixedMonthChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.getApproxMillisAtEpochDividedByTwo : return 30962844000000L
org.joda.time.chrono.EthiopicChronology.getApproxMillisAtEpochDividedByTwo : return 30962844000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : l4 = l0 - $l7
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : l4 = l0 - $l7 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : l5 = l1 - $l8
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : l5 = l1 - $l8 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : i6 = i2 - i3 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $b9 = l4 cmp l5
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $b9 = l4 cmp l5 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : if $b9 >= 0
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $l10 = (long) i6
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : $l10 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : return $l10
org.joda.time.chrono.BasicFixedMonthChronology.getYearDifference : return $l10 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l4 = neg $l3
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l4 = neg $l3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l4
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3
org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : return $i2
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : return $i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : return $i9
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : return $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l3 = (long) i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l3 = (long) i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l4 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l4 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : l5 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l4, i1)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : l5 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l4, i1) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null)
org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>(l0, i1)
org.joda.time.chrono.LimitChronology$LimitDurationField.add : l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.chrono.BasicYearDateTimeField.add : return l0 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r3.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l2, "resulting")
org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r3.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l2, "resulting") >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : return l2
org.joda.time.chrono.LimitChronology$LimitDurationField.add : return l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $i7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>(l5)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $i7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>(l5) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.getOffsetFromLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : $l7 = (long) i1
org.joda.time.DateTimeZone.getOffsetFromLocal : $l7 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : l2 = l0 - $l7
org.joda.time.DateTimeZone.getOffsetFromLocal : l2 = l0 - $l7 >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l2)
org.joda.time.DateTimeZone.getOffsetFromLocal : i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l2) >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : if i1 == i3
org.joda.time.DateTimeZone.getOffsetFromLocal : if i1 == i3 >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : if i1 < 0
org.joda.time.DateTimeZone.getOffsetFromLocal : if i1 < 0 >>>>>>>> org.joda.time.DateTimeZone.getOffsetFromLocal : return i3
org.joda.time.DateTimeZone.getOffsetFromLocal : return i3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : l2 = l0 - $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : l2 = l0 - $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l6 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l6 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l7 = l0 ^ $l6
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b8 = $l7 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b8 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b8 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l8 = (long) $i7
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l9 = l5 - $l8
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $l9 = l5 - $l8 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : return $l9
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : return $l9 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1
org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i11 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i11 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : l2 = $l4 / 2592000000L
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : l2 = $l4 / 2592000000L >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $i5 = (int) l2
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $i5 = (int) l2 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : return $i6
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l3 = (long) $i2
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l3 = (long) $i2 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l4 = $l3 * 2592000000L
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l4 = $l3 * 2592000000L >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : return $l4
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : return $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : $b2 = 30
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : $b2 = 30 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : goto [?= return $b2]
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : goto [?= return $b2] >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : return $b2
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : return $b2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i12 = neg $i11
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i12 = neg $i11 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l13 = (long) $i12
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l13 = (long) $i12 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return $l13
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return $l13 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return l0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return l0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : goto [?= $l5 = (long) $i4]
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : goto [?= $l5 = (long) $i4] >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $i7 = i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $i7 = i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : goto [?= $l8 = (long) $i7]
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : goto [?= $l8 = (long) $i7] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14 >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : return $i3
org.joda.time.field.MillisDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.YearMonth.size : return 2
org.joda.time.YearMonth.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0:
org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.YearMonth.getField : return $r3
org.joda.time.YearMonth.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.getMaxYear : return 292272984
org.joda.time.chrono.EthiopicChronology.getMaxYear : return 292272984 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.YearMonth.getField : return $r4
org.joda.time.YearMonth.getField : return $r4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $r8 = new org.joda.time.IllegalFieldValueException
org.joda.time.chrono.BaseChronology.validate : $r8 = new org.joda.time.IllegalFieldValueException >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $r9 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.chrono.BaseChronology.validate : $r9 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)
org.joda.time.chrono.BaseChronology.validate : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i6 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i6 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.joda.time.chrono.BaseChronology.validate : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : specialinvoke $r8.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r9, $r10, null, $r11)
org.joda.time.chrono.BaseChronology.validate : specialinvoke $r8.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r9, $r10, null, $r11) >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r5 = new java.lang.StringBuffer
org.joda.time.IllegalFieldValueException.createMessage : $r5 = new java.lang.StringBuffer >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r5.<java.lang.StringBuffer: void <init>()>()
org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ")
org.joda.time.IllegalFieldValueException.createMessage : $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1)
org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ")
org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0)
org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32)
org.joda.time.IllegalFieldValueException.createMessage : r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r2 != null
org.joda.time.IllegalFieldValueException.createMessage : if r2 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r3 != null
org.joda.time.IllegalFieldValueException.createMessage : if r3 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r12 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("must not be larger than ")
org.joda.time.IllegalFieldValueException.createMessage : $r12 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("must not be larger than ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3)
org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : goto [?= (branch)]
org.joda.time.IllegalFieldValueException.createMessage : goto [?= (branch)] >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r4 == null
org.joda.time.IllegalFieldValueException.createMessage : if r4 == null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r23 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.IllegalFieldValueException.createMessage : $r23 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : return $r23
org.joda.time.IllegalFieldValueException.createMessage : return $r23 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : throw $r8
