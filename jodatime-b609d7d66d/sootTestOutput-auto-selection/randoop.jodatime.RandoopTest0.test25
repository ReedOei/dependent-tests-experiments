org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 < 0
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 < 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r2 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r0 = new java.lang.StringBuilder
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r0 = new java.lang.StringBuilder >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minutes out of range: ")
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minutes out of range: ") >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : throw $r2
