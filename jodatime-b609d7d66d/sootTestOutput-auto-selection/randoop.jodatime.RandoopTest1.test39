org.joda.time.DateTimeZone.getProvider : $r0 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> >>>>>>>> org.joda.time.DateTimeZone.getProvider : return $r0
org.joda.time.DateTimeZone.getProvider : return $r0 >>>>>>>> org.joda.time.DateTimeZone.setProvider : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setProvider : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setProvider : if r1 == null
org.joda.time.DateTimeZone.setProvider : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setProvider : staticinvoke <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)>(r0)
org.joda.time.DateTimeZone.setProvider : staticinvoke <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)>(r0) >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : if r0 != null
org.joda.time.DateTimeZone.setProvider0 : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : r1 = interfaceinvoke r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>()
org.joda.time.DateTimeZone.setProvider0 : r1 = interfaceinvoke r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r1 = new java.util.TreeSet
org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r1 = new java.util.TreeSet >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>()
org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.Collection)>($r3)
org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.Collection)>($r3) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : return $r1
org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : return $r1 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : if r1 == null
org.joda.time.DateTimeZone.setProvider0 : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : $i0 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.DateTimeZone.setProvider0 : $i0 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : if $i0 != 0
org.joda.time.DateTimeZone.setProvider0 : if $i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.setProvider0 : $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>("UTC") >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : if $z0 != 0
org.joda.time.DateTimeZone.setProvider0 : if $z0 != 0 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.DateTimeZone.setProvider0 : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : $r5 = interfaceinvoke r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC")
org.joda.time.DateTimeZone.setProvider0 : $r5 = interfaceinvoke r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC") >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2
org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7
org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null
org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return r4
org.joda.time.tz.ZoneInfoProvider.getZone : return r4 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : $z1 = virtualinvoke $r4.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5)
org.joda.time.DateTimeZone.setProvider0 : $z1 = virtualinvoke $r4.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : return 1
org.joda.time.tz.FixedDateTimeZone.equals : return 1 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : if $z1 != 0
org.joda.time.DateTimeZone.setProvider0 : if $z1 != 0 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> = r0
org.joda.time.DateTimeZone.setProvider0 : <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> = r0 >>>>>>>> org.joda.time.DateTimeZone.setProvider0 : <org.joda.time.DateTimeZone: java.util.Set cAvailableIDs> = r1
