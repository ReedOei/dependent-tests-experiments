org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.YearMonth.size : return 2
org.joda.time.YearMonth.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = 0
org.joda.time.chrono.BaseChronology.get : i2 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i2 >= i1
org.joda.time.chrono.BaseChronology.get : if i2 >= i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2)
org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2) >>>>>>>> org.joda.time.YearMonth.getFieldType : $r1 = <org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.YearMonth.getFieldType : $r1 = <org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] FIELD_TYPES> >>>>>>>> org.joda.time.YearMonth.getFieldType : $r2 = $r1[i0]
org.joda.time.YearMonth.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.YearMonth.getFieldType : return $r2
org.joda.time.YearMonth.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.BaseChronology.get : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3
org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L
org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0
org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : return l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i2] = $i3
org.joda.time.chrono.BaseChronology.get : r2[i2] = $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = i2 + 1
org.joda.time.chrono.BaseChronology.get : i2 = i2 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.EthiopicChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4)
org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4) >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : if r0 != null
org.joda.time.chrono.EthiopicChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : r1 = $r6
org.joda.time.chrono.EthiopicChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : entermonitor $r6
org.joda.time.chrono.EthiopicChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r7 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : $r7 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.EthiopicChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : r2 = (org.joda.time.chrono.EthiopicChronology[]) $r8
org.joda.time.chrono.EthiopicChronology.getInstance : r2 = (org.joda.time.chrono.EthiopicChronology[]) $r8 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : if r2 != null
org.joda.time.chrono.EthiopicChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.EthiopicChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.EthiopicChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : if r3 != null
org.joda.time.chrono.EthiopicChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : exitmonitor r1
org.joda.time.chrono.EthiopicChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : return r3
org.joda.time.chrono.EthiopicChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : return $r1
org.joda.time.chrono.EthiopicChronology.getInstance : return $r1 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.YearMonth.withChronologyRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : r4 = virtualinvoke r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.YearMonth.withChronologyRetainFields : r4 = virtualinvoke r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.withUTC : $r1 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC>
org.joda.time.chrono.EthiopicChronology.withUTC : $r1 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.EthiopicChronology.withUTC : return $r1
org.joda.time.chrono.EthiopicChronology.withUTC : return $r1 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : $r5 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>()
org.joda.time.YearMonth.withChronologyRetainFields : $r5 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : if r4 != $r5
org.joda.time.YearMonth.withChronologyRetainFields : if r4 != $r5 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : $r6 = new org.joda.time.YearMonth
org.joda.time.YearMonth.withChronologyRetainFields : $r6 = new org.joda.time.YearMonth >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : specialinvoke $r6.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>(r0, r4)
org.joda.time.YearMonth.withChronologyRetainFields : specialinvoke $r6.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>(r0, r4) >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : r2 = $r6
org.joda.time.YearMonth.withChronologyRetainFields : r2 = $r6 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : $r7 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>()
org.joda.time.YearMonth.withChronologyRetainFields : $r7 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>() >>>>>>>> org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.base.BasePartial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.base.BasePartial.getValues : $r3 = (int[]) $r2
org.joda.time.base.BasePartial.getValues : $r3 = (int[]) $r2 >>>>>>>> org.joda.time.base.BasePartial.getValues : $r4 = (int[]) $r3
org.joda.time.base.BasePartial.getValues : $r4 = (int[]) $r3 >>>>>>>> org.joda.time.base.BasePartial.getValues : return $r4
org.joda.time.base.BasePartial.getValues : return $r4 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : virtualinvoke r4.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r2, $r7)
org.joda.time.YearMonth.withChronologyRetainFields : virtualinvoke r4.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r2, $r7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0:
org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.YearMonth.getField : return $r3
org.joda.time.YearMonth.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.getMaxYear : return 292272984
org.joda.time.chrono.EthiopicChronology.getMaxYear : return 292272984 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.YearMonth.getField : return $r4
org.joda.time.YearMonth.getField : return $r4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.YearMonth.withChronologyRetainFields : return r2
org.joda.time.YearMonth.withChronologyRetainFields : return r2 >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : r1 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>()
org.joda.time.YearMonth.withMonthOfYear : r1 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>() >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>()
org.joda.time.YearMonth.withMonthOfYear : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.withMonthOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 1, r1, i0)
org.joda.time.YearMonth.withMonthOfYear : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 1, r1, i0) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4)
org.joda.time.field.BaseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : r2[i0] = i1
org.joda.time.field.BaseDateTimeField.set : r2[i0] = i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : i2 = i0 + 1
org.joda.time.field.BaseDateTimeField.set : i2 = i0 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.field.BaseDateTimeField.set : $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.set : if i2 >= $i5
org.joda.time.field.BaseDateTimeField.set : if i2 >= $i5 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : return r2
org.joda.time.field.BaseDateTimeField.set : return r2 >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : $r5 = new org.joda.time.YearMonth
org.joda.time.YearMonth.withMonthOfYear : $r5 = new org.joda.time.YearMonth >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : specialinvoke $r5.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>(r0, r4)
org.joda.time.YearMonth.withMonthOfYear : specialinvoke $r5.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>(r0, r4) >>>>>>>> org.joda.time.YearMonth.withMonthOfYear : return $r5
org.joda.time.YearMonth.withMonthOfYear : return $r5 >>>>>>>> org.joda.time.YearMonth.toInterval : $r1 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>(null)
org.joda.time.YearMonth.toInterval : $r1 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>(null) >>>>>>>> org.joda.time.YearMonth.toInterval : r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.YearMonth.toInterval : r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getZone : if r0 != null
org.joda.time.DateTimeUtils.getZone : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeUtils.getZone : return $r1
org.joda.time.DateTimeUtils.getZone : return $r1 >>>>>>>> org.joda.time.YearMonth.toInterval : $r5 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>(1)
org.joda.time.YearMonth.toInterval : $r5 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>(1) >>>>>>>> org.joda.time.YearMonth.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.YearMonth.toLocalDate : $r1 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.YearMonth.toLocalDate : $i1 = virtualinvoke r0.<org.joda.time.YearMonth: int getYear()>()
org.joda.time.YearMonth.toLocalDate : $i1 = virtualinvoke r0.<org.joda.time.YearMonth: int getYear()>() >>>>>>>> org.joda.time.YearMonth.getYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(0)
org.joda.time.YearMonth.getYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(0) >>>>>>>> org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePartial.getValue : return $i1
org.joda.time.base.BasePartial.getValue : return $i1 >>>>>>>> org.joda.time.YearMonth.getYear : return $i0
org.joda.time.YearMonth.getYear : return $i0 >>>>>>>> org.joda.time.YearMonth.toLocalDate : $i2 = virtualinvoke r0.<org.joda.time.YearMonth: int getMonthOfYear()>()
org.joda.time.YearMonth.toLocalDate : $i2 = virtualinvoke r0.<org.joda.time.YearMonth: int getMonthOfYear()>() >>>>>>>> org.joda.time.YearMonth.getMonthOfYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(1)
org.joda.time.YearMonth.getMonthOfYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(1) >>>>>>>> org.joda.time.YearMonth.getMonthOfYear : return $i0
org.joda.time.YearMonth.getMonthOfYear : return $i0 >>>>>>>> org.joda.time.YearMonth.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>()
org.joda.time.YearMonth.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.YearMonth.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>($i1, $i2, i0, $r2)
org.joda.time.YearMonth.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>($i1, $i2, i0, $r2) >>>>>>>> org.joda.time.chrono.EthiopicChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.EthiopicChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l4 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l4 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LimitChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.LimitChronology.getDateTimeMillis : l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : return $r0
org.joda.time.DateTimeFieldType.millisOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.getMinYear : return -292269337
org.joda.time.chrono.EthiopicChronology.getMinYear : return -292269337 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMaxMonth : return 13
org.joda.time.chrono.BasicFixedMonthChronology.getMaxMonth : return 13 >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : $b2 = 30
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : $b2 = 30 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : goto [?= return $b2]
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : goto [?= return $b2] >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : return $b2
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : return $b2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l3 = (long) $i2
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l3 = (long) $i2 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l4 = $l3 * 2592000000L
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l4 = $l3 * 2592000000L >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : return $l4
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : return $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getDateTimeMillis : return $l4
org.joda.time.chrono.EthiopicChronology.getDateTimeMillis : return $l4 >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l4, "resulting")
org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l4, "resulting") >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3
org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1
org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0
org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5
org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : return l4
org.joda.time.chrono.LimitChronology.getDateTimeMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l4
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l4 >>>>>>>> org.joda.time.YearMonth.toLocalDate : return $r1
org.joda.time.YearMonth.toLocalDate : return $r1 >>>>>>>> org.joda.time.YearMonth.toInterval : r2 = virtualinvoke $r5.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4)
org.joda.time.YearMonth.toInterval : r2 = virtualinvoke $r5.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4) >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getZone : return r0
org.joda.time.DateTimeUtils.getZone : return r0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.getChronology : return $r1
org.joda.time.LocalDate.getChronology : return $r1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3) >>>>>>>> org.joda.time.chrono.EthiopicChronology.withZone : if r1 != null
org.joda.time.chrono.EthiopicChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.EthiopicChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.EthiopicChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.EthiopicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.EthiopicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.EthiopicChronology.getZone : return $r1
org.joda.time.chrono.EthiopicChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r3
org.joda.time.chrono.BasicChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.EthiopicChronology.withZone : if r1 != $r2
org.joda.time.chrono.EthiopicChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.EthiopicChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.EthiopicChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4) >>>>>>>> org.joda.time.chrono.EthiopicChronology.withZone : return $r3
org.joda.time.chrono.EthiopicChronology.withZone : return $r3 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.getLocalMillis : return $l0
org.joda.time.LocalDate.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : l0 = $l2 + 21600000L
org.joda.time.LocalDate.toDateTimeAtStartOfDay : l0 = $l2 + 21600000L >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : l1 = virtualinvoke r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, 0)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : l1 = virtualinvoke r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, 0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertLocalToUTC : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i1
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l6)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l6) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i1 == i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i1 == i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l18 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l18 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l19 = l0 - $l18
org.joda.time.DateTimeZone.convertLocalToUTC : l19 = l0 - $l18 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l20 = l0 ^ l19
org.joda.time.DateTimeZone.convertLocalToUTC : $l20 = l0 ^ l19 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $b21 = $l20 cmp 0L
org.joda.time.DateTimeZone.convertLocalToUTC : $b21 = $l20 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if $b21 >= 0
org.joda.time.DateTimeZone.convertLocalToUTC : if $b21 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l19
org.joda.time.DateTimeZone.convertLocalToUTC : return l19 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long roundFloor(long)>(l1)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long roundFloor(long)>(l1) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l7 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l7 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundFloor(long)>(l7)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundFloor(long)>(l7) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1
org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : virtualinvoke $r3.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l1, "resulting")
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : virtualinvoke $r3.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l1, "resulting") >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : return l1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : return l1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l9 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l8, 0, l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l9 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l8, 0, l0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : return l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : return $l9
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : return $l9 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r6 = new org.joda.time.DateTime
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r6 = new org.joda.time.DateTime >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : specialinvoke $r6.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l3, r2)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : specialinvoke $r6.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l3, r2) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : return $r6
org.joda.time.LocalDate.toDateTimeAtStartOfDay : return $r6 >>>>>>>> org.joda.time.YearMonth.toInterval : $r6 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth plusMonths(int)>(1)
org.joda.time.YearMonth.toInterval : $r6 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth plusMonths(int)>(1) >>>>>>>> org.joda.time.YearMonth.plusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.YearMonth.plusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.YearMonth.plusMonths : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.YearMonth.plusMonths : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.YearMonth.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.YearMonth: int indexOfSupported(org.joda.time.DurationFieldType)>(r1)
org.joda.time.YearMonth.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.YearMonth: int indexOfSupported(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1
org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)]
org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : return i0 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : if i0 != 0
org.joda.time.YearMonth.withFieldAdded : if i0 != 0 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>()
org.joda.time.YearMonth.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.YearMonth: int[] getValues()>() >>>>>>>> org.joda.time.YearMonth.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.YearMonth.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.YearMonth.withFieldAdded : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0)
org.joda.time.YearMonth.withFieldAdded : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 != 0
org.joda.time.field.BaseDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r3 = null
org.joda.time.field.BaseDateTimeField.add : r3 = null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 <= 0
org.joda.time.field.BaseDateTimeField.add : if i1 <= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i4 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i4 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i5 = $i4 + i1
org.joda.time.field.BaseDateTimeField.add : $i5 = $i4 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : l3 = (long) $i5
org.joda.time.field.BaseDateTimeField.add : l3 = (long) $i5 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l6 = (long) i2
org.joda.time.field.BaseDateTimeField.add : $l6 = (long) i2 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $b7 = l3 cmp $l6
org.joda.time.field.BaseDateTimeField.add : $b7 = l3 cmp $l6 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $b7 > 0
org.joda.time.field.BaseDateTimeField.add : if $b7 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i8 = (int) l3
org.joda.time.field.BaseDateTimeField.add : $i8 = (int) l3 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i8
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i8 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 >= 0
org.joda.time.field.BaseDateTimeField.add : if i1 >= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i28 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i28 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r16 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i28)
org.joda.time.field.BaseDateTimeField.add : $r16 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i28) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : return $r16
org.joda.time.field.BaseDateTimeField.add : return $r16 >>>>>>>> org.joda.time.YearMonth.withFieldAdded : $r5 = new org.joda.time.YearMonth
org.joda.time.YearMonth.withFieldAdded : $r5 = new org.joda.time.YearMonth >>>>>>>> org.joda.time.YearMonth.withFieldAdded : specialinvoke $r5.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>(r0, r4)
org.joda.time.YearMonth.withFieldAdded : specialinvoke $r5.<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>(r0, r4) >>>>>>>> org.joda.time.YearMonth.withFieldAdded : return $r5
org.joda.time.YearMonth.withFieldAdded : return $r5 >>>>>>>> org.joda.time.YearMonth.plusMonths : return $r2
org.joda.time.YearMonth.plusMonths : return $r2 >>>>>>>> org.joda.time.YearMonth.toInterval : $r7 = virtualinvoke $r6.<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>(1)
org.joda.time.YearMonth.toInterval : $r7 = virtualinvoke $r6.<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>(1) >>>>>>>> org.joda.time.YearMonth.toInterval : r3 = virtualinvoke $r7.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4)
org.joda.time.YearMonth.toInterval : r3 = virtualinvoke $r7.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4) >>>>>>>> org.joda.time.YearMonth.toInterval : $r8 = new org.joda.time.Interval
org.joda.time.YearMonth.toInterval : $r8 = new org.joda.time.Interval >>>>>>>> org.joda.time.YearMonth.toInterval : specialinvoke $r8.<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r2, r3)
org.joda.time.YearMonth.toInterval : specialinvoke $r8.<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r2, r3) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0
org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0 >>>>>>>> org.joda.time.YearMonth.toInterval : return $r8
org.joda.time.YearMonth.toInterval : return $r8 >>>>>>>> org.joda.time.YearMonth.toInterval : return $r1
org.joda.time.YearMonth.toInterval : return $r1 >>>>>>>> org.joda.time.YearMonth.minusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.YearMonth.minusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.YearMonth.minusMonths : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0)
org.joda.time.YearMonth.minusMonths : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : return $i1
org.joda.time.field.FieldUtils.safeNegate : return $i1 >>>>>>>> org.joda.time.YearMonth.minusMonths : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1)
org.joda.time.YearMonth.minusMonths : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i15 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : i15 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i16 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i16 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i17 = $i16 + i1
org.joda.time.field.BaseDateTimeField.add : $i17 = $i16 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : l18 = (long) $i17
org.joda.time.field.BaseDateTimeField.add : l18 = (long) $i17 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l19 = (long) i15
org.joda.time.field.BaseDateTimeField.add : $l19 = (long) i15 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $b20 = l18 cmp $l19
org.joda.time.field.BaseDateTimeField.add : $b20 = l18 cmp $l19 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $b20 < 0
org.joda.time.field.BaseDateTimeField.add : if $b20 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if r3 != null
org.joda.time.field.BaseDateTimeField.add : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i0 != 0
org.joda.time.field.BaseDateTimeField.add : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i22 = i0 - 1
org.joda.time.field.BaseDateTimeField.add : $i22 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i22)
org.joda.time.field.BaseDateTimeField.add : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i22) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r11 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r11 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iRangeDurationField>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iRangeDurationField> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : return $r1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.add : $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.BaseDurationField.getType : return $r1
org.joda.time.field.BaseDurationField.getType : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r13 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r13 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : return $r1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r14 = virtualinvoke $r13.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.add : $r14 = virtualinvoke $r13.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $r12 == $r14
org.joda.time.field.BaseDateTimeField.add : if $r12 == $r14 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i23 = i15 - 1
org.joda.time.field.BaseDateTimeField.add : $i23 = i15 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i24 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i24 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i25 = $i23 - $i24
org.joda.time.field.BaseDateTimeField.add : $i25 = $i23 - $i24 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i1 = i1 - $i25
org.joda.time.field.BaseDateTimeField.add : i1 = i1 - $i25 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i26 = i0 - 1
org.joda.time.field.BaseDateTimeField.add : $i26 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i26, r2, -1)
org.joda.time.field.BaseDateTimeField.add : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i26, r2, -1) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i21 = (int) l18
org.joda.time.field.BaseDateTimeField.add : $i21 = (int) l18 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i21
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i21 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : goto [?= $i28 = r2[i0]]
org.joda.time.field.BaseDateTimeField.add : goto [?= $i28 = r2[i0]] >>>>>>>> org.joda.time.field.BaseDateTimeField.set : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i2)
org.joda.time.field.BaseDateTimeField.set : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i6 = r2[i2]
org.joda.time.field.BaseDateTimeField.set : $i6 = r2[i2] >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i7 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i7 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : if $i6 <= $i7
org.joda.time.field.BaseDateTimeField.set : if $i6 <= $i7 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i9 = r2[i2]
org.joda.time.field.BaseDateTimeField.set : $i9 = r2[i2] >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i10 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i10 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : if $i9 >= $i10
org.joda.time.field.BaseDateTimeField.set : if $i9 >= $i10 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : i2 = i2 + 1
org.joda.time.field.BaseDateTimeField.set : i2 = i2 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : goto [?= $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()]
org.joda.time.field.BaseDateTimeField.set : goto [?= $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i27 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : $i27 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i27
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i27 >>>>>>>> org.joda.time.YearMonth.minusMonths : return $r2
