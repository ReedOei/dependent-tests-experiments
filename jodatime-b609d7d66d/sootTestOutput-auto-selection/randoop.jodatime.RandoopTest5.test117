org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.Partial.toString : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>
org.joda.time.Partial.toString : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> >>>>>>>> org.joda.time.Partial.toString : if r1 != null
org.joda.time.Partial.toString : if r1 != null >>>>>>>> org.joda.time.Partial.toString : virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>()
org.joda.time.Partial.toString : virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>() >>>>>>>> org.joda.time.Partial.getFormatter : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>
org.joda.time.Partial.getFormatter : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> >>>>>>>> org.joda.time.Partial.getFormatter : if r1 != null
org.joda.time.Partial.getFormatter : if r1 != null >>>>>>>> org.joda.time.Partial.getFormatter : $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>()
org.joda.time.Partial.getFormatter : $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>() >>>>>>>> org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.size : $i0 = lengthof $r1
org.joda.time.Partial.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.Partial.size : return $i0
org.joda.time.Partial.size : return $i0 >>>>>>>> org.joda.time.Partial.getFormatter : if $i0 != 0
org.joda.time.Partial.getFormatter : if $i0 != 0 >>>>>>>> org.joda.time.Partial.getFormatter : return null
org.joda.time.Partial.getFormatter : return null >>>>>>>> org.joda.time.Partial.toString : $r4 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>()
org.joda.time.Partial.toString : $r4 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>() >>>>>>>> org.joda.time.Partial.toStringList : i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>()
org.joda.time.Partial.toStringList : i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>() >>>>>>>> org.joda.time.Partial.toStringList : $r2 = new java.lang.StringBuffer
org.joda.time.Partial.toStringList : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.Partial.toStringList : $i2 = 20 * i0
org.joda.time.Partial.toStringList : $i2 = 20 * i0 >>>>>>>> org.joda.time.Partial.toStringList : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i2)
org.joda.time.Partial.toStringList : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i2) >>>>>>>> org.joda.time.Partial.toStringList : r1 = $r2
org.joda.time.Partial.toStringList : r1 = $r2 >>>>>>>> org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91)
org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91) >>>>>>>> org.joda.time.Partial.toStringList : i1 = 0
org.joda.time.Partial.toStringList : i1 = 0 >>>>>>>> org.joda.time.Partial.toStringList : if i1 >= i0
org.joda.time.Partial.toStringList : if i1 >= i0 >>>>>>>> org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93)
org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93) >>>>>>>> org.joda.time.Partial.toStringList : $r14 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.Partial.toStringList : $r14 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.Partial.toStringList : return $r14
org.joda.time.Partial.toStringList : return $r14 >>>>>>>> org.joda.time.Partial.toString : return $r4
org.joda.time.Partial.toString : return $r4 >>>>>>>> org.joda.time.Partial.getValue : $r1 = r0.<org.joda.time.Partial: int[] iValues>
org.joda.time.Partial.getValue : $r1 = r0.<org.joda.time.Partial: int[] iValues> >>>>>>>> org.joda.time.Partial.getValue : $i1 = $r1[i0]
