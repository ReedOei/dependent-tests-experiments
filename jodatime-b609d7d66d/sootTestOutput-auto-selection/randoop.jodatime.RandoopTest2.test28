org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0
org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0 >>>>>>>> org.joda.time.base.BaseInterval.getEndMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>
org.joda.time.base.BaseInterval.getEndMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis> >>>>>>>> org.joda.time.base.BaseInterval.getEndMillis : return $l0
org.joda.time.base.BaseInterval.getEndMillis : return $l0 >>>>>>>> org.joda.time.MutableInterval.setDurationBeforeEnd : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>()
org.joda.time.MutableInterval.setDurationBeforeEnd : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>() >>>>>>>> org.joda.time.MutableInterval.setDurationBeforeEnd : $l2 = neg l0
org.joda.time.MutableInterval.setDurationBeforeEnd : $l2 = neg l0 >>>>>>>> org.joda.time.MutableInterval.setDurationBeforeEnd : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2)
org.joda.time.MutableInterval.setDurationBeforeEnd : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.MutableInterval.setDurationBeforeEnd : virtualinvoke r0.<org.joda.time.MutableInterval: void setStartMillis(long)>($l3)
org.joda.time.MutableInterval.setDurationBeforeEnd : virtualinvoke r0.<org.joda.time.MutableInterval: void setStartMillis(long)>($l3) >>>>>>>> org.joda.time.MutableInterval.setStartMillis : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>()
org.joda.time.MutableInterval.setStartMillis : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>() >>>>>>>> org.joda.time.MutableInterval.setStartMillis : $r1 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.MutableInterval.setStartMillis : $r1 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseInterval.getChronology : $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseInterval.getChronology : $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseInterval.getChronology : return $r1
org.joda.time.base.BaseInterval.getChronology : return $r1 >>>>>>>> org.joda.time.MutableInterval.setStartMillis : specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, $l1, $r1)
org.joda.time.MutableInterval.setStartMillis : specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, $l1, $r1) >>>>>>>> org.joda.time.base.BaseInterval.setInterval : virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1)
org.joda.time.base.BaseInterval.setInterval : virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1) >>>>>>>> org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0 >>>>>>>> org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1 >>>>>>>> org.joda.time.base.BaseInterval.setInterval : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseInterval.setInterval : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2 >>>>>>>> org.joda.time.base.AbstractInterval.toDurationMillis : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>()
org.joda.time.base.AbstractInterval.toDurationMillis : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.toDurationMillis : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>()
org.joda.time.base.AbstractInterval.toDurationMillis : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>() >>>>>>>> org.joda.time.base.BaseInterval.getStartMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>
org.joda.time.base.BaseInterval.getStartMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis> >>>>>>>> org.joda.time.base.BaseInterval.getStartMillis : return $l0
org.joda.time.base.BaseInterval.getStartMillis : return $l0 >>>>>>>> org.joda.time.base.AbstractInterval.toDurationMillis : $l2 = neg $l1
org.joda.time.base.AbstractInterval.toDurationMillis : $l2 = neg $l1 >>>>>>>> org.joda.time.base.AbstractInterval.toDurationMillis : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l0, $l2)
org.joda.time.base.AbstractInterval.toDurationMillis : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l0, $l2) >>>>>>>> org.joda.time.base.AbstractInterval.toDurationMillis : return $l3
org.joda.time.base.AbstractInterval.toDurationMillis : return $l3 >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : if r1 != null
org.joda.time.base.AbstractInterval.isBefore : if r1 != null >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>()
org.joda.time.base.AbstractInterval.isBefore : $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : $z1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBefore(long)>($l0)
org.joda.time.base.AbstractInterval.isBefore : $z1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBefore(long)>($l0) >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>()
org.joda.time.base.AbstractInterval.isBefore : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : $b2 = $l1 cmp l0
org.joda.time.base.AbstractInterval.isBefore : $b2 = $l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : if $b2 > 0
org.joda.time.base.AbstractInterval.isBefore : if $b2 > 0 >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : $z0 = 1
org.joda.time.base.AbstractInterval.isBefore : $z0 = 1 >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : goto [?= return $z0]
org.joda.time.base.AbstractInterval.isBefore : goto [?= return $z0] >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : return $z0
org.joda.time.base.AbstractInterval.isBefore : return $z0 >>>>>>>> org.joda.time.base.AbstractInterval.isBefore : return $z1
org.joda.time.base.AbstractInterval.isBefore : return $z1 >>>>>>>> org.joda.time.Days.daysIn : if r0 != null
org.joda.time.Days.daysIn : if r0 != null >>>>>>>> org.joda.time.Days.daysIn : $r3 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>()
org.joda.time.Days.daysIn : $r3 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>() >>>>>>>> org.joda.time.base.AbstractInterval.getStart : $r1 = new org.joda.time.DateTime
org.joda.time.base.AbstractInterval.getStart : $r1 = new org.joda.time.DateTime >>>>>>>> org.joda.time.base.AbstractInterval.getStart : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>()
org.joda.time.base.AbstractInterval.getStart : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.getStart : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInterval.getStart : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInterval.getStart : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2)
org.joda.time.base.AbstractInterval.getStart : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.base.AbstractInterval.getStart : return $r1
org.joda.time.base.AbstractInterval.getStart : return $r1 >>>>>>>> org.joda.time.Days.daysIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>()
org.joda.time.Days.daysIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>() >>>>>>>> org.joda.time.base.AbstractInterval.getEnd : $r1 = new org.joda.time.DateTime
org.joda.time.base.AbstractInterval.getEnd : $r1 = new org.joda.time.DateTime >>>>>>>> org.joda.time.base.AbstractInterval.getEnd : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>()
org.joda.time.base.AbstractInterval.getEnd : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.getEnd : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInterval.getEnd : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInterval.getEnd : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2)
org.joda.time.base.AbstractInterval.getEnd : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2) >>>>>>>> org.joda.time.base.AbstractInterval.getEnd : return $r1
org.joda.time.base.AbstractInterval.getEnd : return $r1 >>>>>>>> org.joda.time.Days.daysIn : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.Days.daysIn : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.Days.daysIn : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r3, $r4, $r1)
org.joda.time.Days.daysIn : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r3, $r4, $r1) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null
org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3)
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $l1 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $l1 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $l2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $l2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : i0 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l2)
org.joda.time.base.BaseSingleFieldPeriod.between : i0 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l2) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l1)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l1) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : l2 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : l2 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l6 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l6 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l7 = l0 ^ $l6
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b8 = $l7 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b8 < 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : if $b8 < 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l5 = (long) $i4
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l5 = (long) $i4 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l6 = l0 + $l5
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l6 = l0 + $l5 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l7 = (long) i2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l7 = (long) i2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l8 = l1 + $l7
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $l8 = l1 + $l7 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i9 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l6, $l8)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i9 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l6, $l8) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : return $i9
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : return $i9 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : return i0
org.joda.time.base.BaseSingleFieldPeriod.between : return i0 >>>>>>>> org.joda.time.Days.daysIn : $r5 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>(i0)
org.joda.time.Days.daysIn : $r5 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>(i0) >>>>>>>> org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648:
org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Days.days : $r0 = <org.joda.time.Days: org.joda.time.Days ZERO>
org.joda.time.Days.days : $r0 = <org.joda.time.Days: org.joda.time.Days ZERO> >>>>>>>> org.joda.time.Days.days : return $r0
org.joda.time.Days.days : return $r0 >>>>>>>> org.joda.time.Days.daysIn : return $r5
org.joda.time.Days.daysIn : return $r5 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : $r1 = new java.lang.IllegalArgumentException
org.joda.time.base.AbstractInterval.checkInterval : $r1 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The end instant must be greater or equal to the start")
org.joda.time.base.AbstractInterval.checkInterval : specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The end instant must be greater or equal to the start") >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : throw $r1
