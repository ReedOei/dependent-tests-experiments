org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0
org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateMidnight.now : if r0 != null
org.joda.time.DateMidnight.now : if r0 != null >>>>>>>> org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : return $l0
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.now : return $r2
org.joda.time.DateMidnight.now : return $r2 >>>>>>>> org.joda.time.LocalDate.now : if r0 != null
org.joda.time.LocalDate.now : if r0 != null >>>>>>>> org.joda.time.LocalDate.now : $r2 = new org.joda.time.LocalDate
org.joda.time.LocalDate.now : $r2 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.LocalDate.now : specialinvoke $r2.<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.LocalDate.now : specialinvoke $r2.<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : return $r1
org.joda.time.chrono.JulianChronology.getZone : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : return $r1
org.joda.time.chrono.JulianChronology.withUTC : return $r1 >>>>>>>> org.joda.time.LocalDate.now : return $r2
org.joda.time.LocalDate.now : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : return $r1
org.joda.time.chrono.AssembledChronology.eras : return $r1 >>>>>>>> org.joda.time.DurationField.subtract : $b2 = l1 cmp -9223372036854775808L
org.joda.time.DurationField.subtract : $b2 = l1 cmp -9223372036854775808L >>>>>>>> org.joda.time.DurationField.subtract : if $b2 != 0
org.joda.time.DurationField.subtract : if $b2 != 0 >>>>>>>> org.joda.time.DurationField.subtract : $l3 = neg l1
org.joda.time.DurationField.subtract : $l3 = neg l1 >>>>>>>> org.joda.time.DurationField.subtract : $l4 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,long)>(l0, $l3)
org.joda.time.DurationField.subtract : $l4 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,long)>(l0, $l3) >>>>>>>> org.joda.time.field.UnsupportedDurationField.add : $r1 = specialinvoke r0.<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>()
org.joda.time.field.UnsupportedDurationField.add : $r1 = specialinvoke r0.<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>() >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : $r1 = new java.lang.UnsupportedOperationException
org.joda.time.field.UnsupportedDurationField.unsupported : $r1 = new java.lang.UnsupportedOperationException >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : $r2 = new java.lang.StringBuilder
org.joda.time.field.UnsupportedDurationField.unsupported : $r2 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.UnsupportedDurationField.unsupported : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : $r3 = r0.<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.UnsupportedDurationField.unsupported : $r3 = r0.<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3)
org.joda.time.field.UnsupportedDurationField.unsupported : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) >>>>>>>> org.joda.time.DurationFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DurationFieldType: java.lang.String getName()>()
org.joda.time.DurationFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DurationFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DurationFieldType.getName : $r1 = r0.<org.joda.time.DurationFieldType: java.lang.String iName>
org.joda.time.DurationFieldType.getName : $r1 = r0.<org.joda.time.DurationFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DurationFieldType.getName : return $r1
org.joda.time.DurationFieldType.getName : return $r1 >>>>>>>> org.joda.time.DurationFieldType.toString : return $r1
org.joda.time.DurationFieldType.toString : return $r1 >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field is unsupported")
org.joda.time.field.UnsupportedDurationField.unsupported : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field is unsupported") >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.UnsupportedDurationField.unsupported : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6)
org.joda.time.field.UnsupportedDurationField.unsupported : specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.UnsupportedDurationField.unsupported : return $r1
org.joda.time.field.UnsupportedDurationField.unsupported : return $r1 >>>>>>>> org.joda.time.field.UnsupportedDurationField.add : throw $r1
