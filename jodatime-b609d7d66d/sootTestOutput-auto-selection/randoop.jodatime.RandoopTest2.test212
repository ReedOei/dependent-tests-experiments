org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.Partial.toString : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>
org.joda.time.Partial.toString : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> >>>>>>>> org.joda.time.Partial.toString : if r1 != null
org.joda.time.Partial.toString : if r1 != null >>>>>>>> org.joda.time.Partial.toString : virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>()
org.joda.time.Partial.toString : virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>() >>>>>>>> org.joda.time.Partial.getFormatter : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>
org.joda.time.Partial.getFormatter : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> >>>>>>>> org.joda.time.Partial.getFormatter : if r1 != null
org.joda.time.Partial.getFormatter : if r1 != null >>>>>>>> org.joda.time.Partial.getFormatter : $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>()
org.joda.time.Partial.getFormatter : $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>() >>>>>>>> org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.size : $i0 = lengthof $r1
org.joda.time.Partial.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.Partial.size : return $i0
org.joda.time.Partial.size : return $i0 >>>>>>>> org.joda.time.Partial.getFormatter : if $i0 != 0
org.joda.time.Partial.getFormatter : if $i0 != 0 >>>>>>>> org.joda.time.Partial.getFormatter : return null
org.joda.time.Partial.getFormatter : return null >>>>>>>> org.joda.time.Partial.toString : $r4 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>()
org.joda.time.Partial.toString : $r4 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>() >>>>>>>> org.joda.time.Partial.toStringList : i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>()
org.joda.time.Partial.toStringList : i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>() >>>>>>>> org.joda.time.Partial.toStringList : $r2 = new java.lang.StringBuffer
org.joda.time.Partial.toStringList : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.Partial.toStringList : $i2 = 20 * i0
org.joda.time.Partial.toStringList : $i2 = 20 * i0 >>>>>>>> org.joda.time.Partial.toStringList : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i2)
org.joda.time.Partial.toStringList : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i2) >>>>>>>> org.joda.time.Partial.toStringList : r1 = $r2
org.joda.time.Partial.toStringList : r1 = $r2 >>>>>>>> org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91)
org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91) >>>>>>>> org.joda.time.Partial.toStringList : i1 = 0
org.joda.time.Partial.toStringList : i1 = 0 >>>>>>>> org.joda.time.Partial.toStringList : if i1 >= i0
org.joda.time.Partial.toStringList : if i1 >= i0 >>>>>>>> org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93)
org.joda.time.Partial.toStringList : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93) >>>>>>>> org.joda.time.Partial.toStringList : $r14 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.Partial.toStringList : $r14 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.Partial.toStringList : return $r14
org.joda.time.Partial.toStringList : return $r14 >>>>>>>> org.joda.time.Partial.toString : return $r4
org.joda.time.Partial.toString : return $r4 >>>>>>>> org.joda.time.PeriodType.yearWeekDayTime : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYWDTime>
org.joda.time.PeriodType.yearWeekDayTime : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYWDTime> >>>>>>>> org.joda.time.PeriodType.yearWeekDayTime : if r0 != null
org.joda.time.PeriodType.yearWeekDayTime : if r0 != null >>>>>>>> org.joda.time.PeriodType.yearWeekDayTime : return r0
org.joda.time.PeriodType.yearWeekDayTime : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getFieldTypes : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : r1 = newarray (org.joda.time.DurationFieldType)[$i1]
org.joda.time.base.AbstractPeriod.getFieldTypes : r1 = newarray (org.joda.time.DurationFieldType)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = 0
org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getFieldTypes : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getFieldTypes : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldTypes : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : r1[i0] = $r2
org.joda.time.base.AbstractPeriod.getFieldTypes : r1[i0] = $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getFieldTypes : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : return r1
org.joda.time.base.AbstractPeriod.getFieldTypes : return r1 >>>>>>>> org.joda.time.Partial.plus : $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1)
org.joda.time.Partial.plus : $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1) >>>>>>>> org.joda.time.Partial.withPeriodAdded : if r1 == null
org.joda.time.Partial.withPeriodAdded : if r1 == null >>>>>>>> org.joda.time.Partial.withPeriodAdded : if i0 != 0
org.joda.time.Partial.withPeriodAdded : if i0 != 0 >>>>>>>> org.joda.time.Partial.withPeriodAdded : r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>()
org.joda.time.Partial.withPeriodAdded : r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>() >>>>>>>> org.joda.time.Partial.getValues : $r1 = r0.<org.joda.time.Partial: int[] iValues>
org.joda.time.Partial.getValues : $r1 = r0.<org.joda.time.Partial: int[] iValues> >>>>>>>> org.joda.time.Partial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.Partial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.Partial.getValues : $r3 = (int[]) $r2
org.joda.time.Partial.getValues : $r3 = (int[]) $r2 >>>>>>>> org.joda.time.Partial.getValues : $r4 = (int[]) $r3
org.joda.time.Partial.getValues : $r4 = (int[]) $r3 >>>>>>>> org.joda.time.Partial.getValues : return $r4
org.joda.time.Partial.getValues : return $r4 >>>>>>>> org.joda.time.Partial.withPeriodAdded : i1 = 0
org.joda.time.Partial.withPeriodAdded : i1 = 0 >>>>>>>> org.joda.time.Partial.withPeriodAdded : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.Partial.withPeriodAdded : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.Partial.withPeriodAdded : if i1 >= $i3
org.joda.time.Partial.withPeriodAdded : if i1 >= $i3 >>>>>>>> org.joda.time.Partial.withPeriodAdded : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i1)
org.joda.time.Partial.withPeriodAdded : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i1) >>>>>>>> org.joda.time.Partial.withPeriodAdded : i2 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>(r3)
org.joda.time.Partial.withPeriodAdded : i2 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>(r3) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return -1
org.joda.time.base.AbstractPartial.indexOf : return -1 >>>>>>>> org.joda.time.Partial.withPeriodAdded : if i2 < 0
org.joda.time.Partial.withPeriodAdded : if i2 < 0 >>>>>>>> org.joda.time.Partial.withPeriodAdded : i1 = i1 + 1
org.joda.time.Partial.withPeriodAdded : i1 = i1 + 1 >>>>>>>> org.joda.time.Partial.withPeriodAdded : goto [?= $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()]
org.joda.time.Partial.withPeriodAdded : goto [?= $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()] >>>>>>>> org.joda.time.Partial.withPeriodAdded : $r5 = new org.joda.time.Partial
org.joda.time.Partial.withPeriodAdded : $r5 = new org.joda.time.Partial >>>>>>>> org.joda.time.Partial.withPeriodAdded : specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r2)
org.joda.time.Partial.withPeriodAdded : specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r2) >>>>>>>> org.joda.time.Partial.withPeriodAdded : return $r5
org.joda.time.Partial.withPeriodAdded : return $r5 >>>>>>>> org.joda.time.Partial.plus : return $r2
org.joda.time.Partial.plus : return $r2 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0
org.joda.time.chrono.JulianChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateMidnight.now : if r0 != null
org.joda.time.DateMidnight.now : if r0 != null >>>>>>>> org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.DateMidnight.now : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1 >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.now : return $r2
org.joda.time.DateMidnight.now : return $r2 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.DateMidnight.toLocalDate : $r1 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.DateMidnight.toLocalDate : $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.toLocalDate : $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2)
org.joda.time.DateMidnight.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2) >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : return $r1
org.joda.time.chrono.JulianChronology.getZone : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.withUTC : return $r1
org.joda.time.chrono.JulianChronology.withUTC : return $r1 >>>>>>>> org.joda.time.DateMidnight.toLocalDate : return $r1
org.joda.time.DateMidnight.toLocalDate : return $r1 >>>>>>>> org.joda.time.LocalDate.withMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.withMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.getChronology : return $r1
org.joda.time.LocalDate.getChronology : return $r1 >>>>>>>> org.joda.time.LocalDate.withMonthOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.LocalDate.withMonthOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.LocalDate.withMonthOfYear : $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.withMonthOfYear : $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.getLocalMillis : return $l0
org.joda.time.LocalDate.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDate.withMonthOfYear : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0)
org.joda.time.LocalDate.withMonthOfYear : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L
org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.JulianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.JulianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : return $z0
org.joda.time.chrono.JulianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 7
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9 >>>>>>>> org.joda.time.LocalDate.withMonthOfYear : $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l2)
org.joda.time.LocalDate.withMonthOfYear : $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l2) >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.withLocalMillis : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.withLocalMillis : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.withLocalMillis : l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.LocalDate.withLocalMillis : l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.withLocalMillis : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $b3 = l1 cmp $l2
org.joda.time.LocalDate.withLocalMillis : $b3 = l1 cmp $l2 >>>>>>>> org.joda.time.LocalDate.withLocalMillis : if $b3 != 0
org.joda.time.LocalDate.withLocalMillis : if $b3 != 0 >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r3 = new org.joda.time.LocalDate
org.joda.time.LocalDate.withLocalMillis : $r3 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.withLocalMillis : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.withLocalMillis : specialinvoke $r3.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>(l1, $r4)
org.joda.time.LocalDate.withLocalMillis : specialinvoke $r3.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>(l1, $r4) >>>>>>>> org.joda.time.LocalDate.withLocalMillis : return $r3
org.joda.time.LocalDate.withLocalMillis : return $r3 >>>>>>>> org.joda.time.LocalDate.withMonthOfYear : return $r3
org.joda.time.LocalDate.withMonthOfYear : return $r3 >>>>>>>> org.joda.time.LocalDate.withEra : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.withEra : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.withEra : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.LocalDate.withEra : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.era : return $r1
org.joda.time.chrono.AssembledChronology.era : return $r1 >>>>>>>> org.joda.time.LocalDate.withEra : $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.withEra : $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.withEra : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0)
org.joda.time.LocalDate.withEra : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 0, 1)
org.joda.time.chrono.GJEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 0, 1) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.GJEraDateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJEraDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.GJEraDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJEraDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.GJEraDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.get : if $i1 > 0
org.joda.time.chrono.GJEraDateTimeField.get : if $i1 > 0 >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.get : return 1
org.joda.time.chrono.GJEraDateTimeField.get : return 1 >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.set : if i2 == i1
org.joda.time.chrono.GJEraDateTimeField.set : if i2 == i1 >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.set : return l0
org.joda.time.chrono.GJEraDateTimeField.set : return l0 >>>>>>>> org.joda.time.LocalDate.withEra : $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l2)
org.joda.time.LocalDate.withEra : $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l2) >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r3 = r0
org.joda.time.LocalDate.withLocalMillis : $r3 = r0 >>>>>>>> org.joda.time.LocalDate.withLocalMillis : goto [?= return $r3]
org.joda.time.LocalDate.withLocalMillis : goto [?= return $r3] >>>>>>>> org.joda.time.LocalDate.withEra : return $r3
org.joda.time.LocalDate.withEra : return $r3 >>>>>>>> org.joda.time.LocalDate.getDayOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getDayOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getDayOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.LocalDate.getDayOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.LocalDate.getDayOfYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getDayOfYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getDayOfYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getDayOfYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.BasicDayOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>(l0)
org.joda.time.chrono.BasicDayOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i2
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.LocalDate.getDayOfYear : return $i1
org.joda.time.LocalDate.getDayOfYear : return $i1 >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC>
org.joda.time.chrono.IslamicChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.IslamicChronology.getInstanceUTC : return $r0
org.joda.time.chrono.IslamicChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp>
org.joda.time.format.ISODateTimeFormat.localDateParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : if $r0 != null
org.joda.time.format.ISODateTimeFormat.localDateParser : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : $r3 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp>
org.joda.time.format.ISODateTimeFormat.localDateParser : $r3 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.localDateParser : return $r3
org.joda.time.format.ISODateTimeFormat.localDateParser : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatter.getZone : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.getZone : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.getZone : return $r1
org.joda.time.format.DateTimeFormatter.getZone : return $r1 >>>>>>>> org.joda.time.chrono.IslamicChronology.withZone : if r1 != null
org.joda.time.chrono.IslamicChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.IslamicChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.IslamicChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.IslamicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.IslamicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.IslamicChronology.getZone : return $r1
org.joda.time.chrono.IslamicChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r3
org.joda.time.chrono.BasicChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.IslamicChronology.withZone : if r1 != $r2
org.joda.time.chrono.IslamicChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.IslamicChronology.withZone : return r0
org.joda.time.chrono.IslamicChronology.withZone : return r0 >>>>>>>> org.joda.time.LocalDate.toInterval : r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toInterval : r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getZone : if r0 != null
org.joda.time.DateTimeUtils.getZone : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getZone : return r0
org.joda.time.DateTimeUtils.getZone : return r0 >>>>>>>> org.joda.time.LocalDate.toInterval : r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4)
org.joda.time.LocalDate.toInterval : r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4) >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3) >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : if r1 != null
org.joda.time.chrono.JulianChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : if r1 != $r2
org.joda.time.chrono.JulianChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : return r0
org.joda.time.chrono.JulianChronology.withZone : return r0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : l0 = $l2 + 21600000L
org.joda.time.LocalDate.toDateTimeAtStartOfDay : l0 = $l2 + 21600000L >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : l1 = virtualinvoke r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, 0)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : l1 = virtualinvoke r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, 0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertLocalToUTC : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i1
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l6)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l6) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i1 == i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i1 == i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l18 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l18 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l19 = l0 - $l18
org.joda.time.DateTimeZone.convertLocalToUTC : l19 = l0 - $l18 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l20 = l0 ^ l19
org.joda.time.DateTimeZone.convertLocalToUTC : $l20 = l0 ^ l19 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $b21 = $l20 cmp 0L
org.joda.time.DateTimeZone.convertLocalToUTC : $b21 = $l20 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if $b21 >= 0
org.joda.time.DateTimeZone.convertLocalToUTC : if $b21 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l19
org.joda.time.DateTimeZone.convertLocalToUTC : return l19 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long roundFloor(long)>(l1)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long roundFloor(long)>(l1) >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r6 = new org.joda.time.DateTime
org.joda.time.LocalDate.toDateTimeAtStartOfDay : $r6 = new org.joda.time.DateTime >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : specialinvoke $r6.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l3, r2)
org.joda.time.LocalDate.toDateTimeAtStartOfDay : specialinvoke $r6.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l3, r2) >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtStartOfDay : return $r6
org.joda.time.LocalDate.toDateTimeAtStartOfDay : return $r6 >>>>>>>> org.joda.time.LocalDate.toInterval : $r5 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>(1)
org.joda.time.LocalDate.toInterval : $r5 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>(1) >>>>>>>> org.joda.time.LocalDate.plusDays : if i0 != 0
org.joda.time.LocalDate.plusDays : if i0 != 0 >>>>>>>> org.joda.time.LocalDate.plusDays : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.plusDays : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.plusDays : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.LocalDate.plusDays : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.LocalDate.plusDays : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.plusDays : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.plusDays : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0)
org.joda.time.LocalDate.plusDays : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.LocalDate.plusDays : $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>(l1)
org.joda.time.LocalDate.plusDays : $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>(l1) >>>>>>>> org.joda.time.LocalDate.plusDays : return $r3
org.joda.time.LocalDate.plusDays : return $r3 >>>>>>>> org.joda.time.LocalDate.toInterval : r3 = virtualinvoke $r5.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4)
org.joda.time.LocalDate.toInterval : r3 = virtualinvoke $r5.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(r4) >>>>>>>> org.joda.time.LocalDate.toInterval : $r6 = new org.joda.time.Interval
org.joda.time.LocalDate.toInterval : $r6 = new org.joda.time.Interval >>>>>>>> org.joda.time.LocalDate.toInterval : specialinvoke $r6.<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r2, r3)
org.joda.time.LocalDate.toInterval : specialinvoke $r6.<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r2, r3) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0
org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0 >>>>>>>> org.joda.time.LocalDate.toInterval : return $r6
org.joda.time.LocalDate.toInterval : return $r6 >>>>>>>> org.joda.time.LocalDate.minusMonths : if i0 != 0
org.joda.time.LocalDate.minusMonths : if i0 != 0 >>>>>>>> org.joda.time.LocalDate.minusMonths : return r0
org.joda.time.LocalDate.minusMonths : return r0 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null)
org.joda.time.LocalDate.toDateTimeAtMidnight : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null) >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toDateTimeAtMidnight : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeUtils.getZone : return $r1
org.joda.time.DateTimeUtils.getZone : return $r1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3)
org.joda.time.LocalDate.toDateTimeAtMidnight : r2 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3) >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.JulianChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r0 != null
org.joda.time.chrono.JulianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6
org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8
org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r2 != null
org.joda.time.chrono.JulianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r3 != null
org.joda.time.chrono.JulianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return r3
org.joda.time.chrono.JulianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return $r1
org.joda.time.chrono.JulianChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.JulianChronology.withZone : return $r3
org.joda.time.chrono.JulianChronology.withZone : return $r3 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $r5 = new org.joda.time.DateTime
org.joda.time.LocalDate.toDateTimeAtMidnight : $r5 = new org.joda.time.DateTime >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>() >>>>>>>> org.joda.time.LocalDate.getYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.LocalDate.getYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.LocalDate.getYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0)
org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : return $i1
org.joda.time.field.DelegatedDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipDateTimeField.get : if i1 > $i2
org.joda.time.field.SkipDateTimeField.get : if i1 > $i2 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : return i1
org.joda.time.field.SkipDateTimeField.get : return i1 >>>>>>>> org.joda.time.LocalDate.getYear : return $i1
org.joda.time.LocalDate.getYear : return $i1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.LocalDate.getMonthOfYear : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getMonthOfYear : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getMonthOfYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.LocalDate.getMonthOfYear : return $i1
org.joda.time.LocalDate.getMonthOfYear : return $i1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>()
org.joda.time.LocalDate.toDateTimeAtMidnight : $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getDayOfMonth : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.getDayOfMonth : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.getDayOfMonth : $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDate.getDayOfMonth : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.LocalDate.getDayOfMonth : return $i1
org.joda.time.LocalDate.getDayOfMonth : return $i1 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : specialinvoke $r5.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, 0, 0, 0, r2)
org.joda.time.LocalDate.toDateTimeAtMidnight : specialinvoke $r5.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, 0, 0, 0, r2) >>>>>>>> org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $i3 = staticinvoke <org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>(i0)
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $i3 = staticinvoke <org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>(i0) >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0
org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateMidnightMillis(int,int,int)>($i3, i1, i2)
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateMidnightMillis(int,int,int)>($i3, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMinYear : return -292269054
org.joda.time.chrono.JulianChronology.getMinYear : return -292269054 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992
org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12 >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateMidnightMillis : return $l4
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : return $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19 >>>>>>>> org.joda.time.chrono.JulianChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.JulianChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l7)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l7) >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.localToUTC : r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology.localToUTC : i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology.localToUTC : $l2 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : l3 = l0 - $l2
org.joda.time.chrono.ZonedChronology.localToUTC : l3 = l0 - $l2 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.chrono.ZonedChronology.localToUTC : $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l3) >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : if i1 == $i4
org.joda.time.chrono.ZonedChronology.localToUTC : if i1 == $i4 >>>>>>>> org.joda.time.chrono.ZonedChronology.localToUTC : return l3
org.joda.time.chrono.ZonedChronology.localToUTC : return l3 >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : return $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : return $r5
org.joda.time.LocalDate.toDateTimeAtMidnight : return $r5 >>>>>>>> org.joda.time.LocalDate.toDateTimeAtMidnight : return $r1
org.joda.time.LocalDate.toDateTimeAtMidnight : return $r1 >>>>>>>> org.joda.time.LocalDate.compareTo : if r0 != r1
org.joda.time.LocalDate.compareTo : if r0 != r1 >>>>>>>> org.joda.time.LocalDate.compareTo : $z0 = r1 instanceof org.joda.time.LocalDate
org.joda.time.LocalDate.compareTo : $z0 = r1 instanceof org.joda.time.LocalDate >>>>>>>> org.joda.time.LocalDate.compareTo : if $z0 == 0
org.joda.time.LocalDate.compareTo : if $z0 == 0 >>>>>>>> org.joda.time.LocalDate.compareTo : r2 = (org.joda.time.LocalDate) r1
org.joda.time.LocalDate.compareTo : r2 = (org.joda.time.LocalDate) r1 >>>>>>>> org.joda.time.LocalDate.compareTo : $r3 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.compareTo : $r3 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.compareTo : $r4 = r2.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.compareTo : $r4 = r2.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.compareTo : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.joda.time.LocalDate.compareTo : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.chrono.JulianChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.JulianChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.equals : return $z0
org.joda.time.chrono.BasicChronology.equals : return $z0 >>>>>>>> org.joda.time.chrono.JulianChronology.equals : return $z0
org.joda.time.chrono.JulianChronology.equals : return $z0 >>>>>>>> org.joda.time.LocalDate.compareTo : if $z1 == 0
org.joda.time.LocalDate.compareTo : if $z1 == 0 >>>>>>>> org.joda.time.LocalDate.compareTo : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.compareTo : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.compareTo : $l1 = r2.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.compareTo : $l1 = r2.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.compareTo : $b2 = $l0 cmp $l1
org.joda.time.LocalDate.compareTo : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.LocalDate.compareTo : if $b2 >= 0
org.joda.time.LocalDate.compareTo : if $b2 >= 0 >>>>>>>> org.joda.time.LocalDate.compareTo : $b3 = -1
org.joda.time.LocalDate.compareTo : $b3 = -1 >>>>>>>> org.joda.time.LocalDate.compareTo : goto [?= return $b3]
org.joda.time.LocalDate.compareTo : goto [?= return $b3] >>>>>>>> org.joda.time.LocalDate.compareTo : return $b3
org.joda.time.LocalDate.compareTo : return $b3 >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : if r1 != null
org.joda.time.base.AbstractPartial.isEqual : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1)
org.joda.time.base.AbstractPartial.isEqual : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if r0 != r1
org.joda.time.base.AbstractPartial.compareTo : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.compareTo : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.base.AbstractPartial.compareTo : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.LocalDate.size : return 3
org.joda.time.LocalDate.size : return 3 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if $i2 == $i3
org.joda.time.base.AbstractPartial.compareTo : if $i2 == $i3 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $r2 = new java.lang.ClassCastException
org.joda.time.base.AbstractPartial.compareTo : $r2 = new java.lang.ClassCastException >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>("ReadablePartial objects must have matching field types")
org.joda.time.base.AbstractPartial.compareTo : specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>("ReadablePartial objects must have matching field types") >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : throw $r2
