org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Years.years : $r6 = new org.joda.time.Years
org.joda.time.Years.years : $r6 = new org.joda.time.Years >>>>>>>> org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0)
org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0) >>>>>>>> org.joda.time.Years.years : return $r6
org.joda.time.Years.years : return $r6 >>>>>>>> org.joda.time.Years.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>()
org.joda.time.Years.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>() >>>>>>>> org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears>
org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears> >>>>>>>> org.joda.time.PeriodType.years : if r0 != null
org.joda.time.PeriodType.years : if r0 != null >>>>>>>> org.joda.time.PeriodType.years : return r0
org.joda.time.PeriodType.years : return r0 >>>>>>>> org.joda.time.Years.getPeriodType : return $r1
org.joda.time.Years.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : if $r3 == $r4
org.joda.time.base.BaseSingleFieldPeriod.compareTo : if $r3 == $r4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : i0 = virtualinvoke r1.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : i0 = virtualinvoke r1.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : if i1 <= i0
org.joda.time.base.BaseSingleFieldPeriod.compareTo : if i1 <= i0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : if i1 >= i0
org.joda.time.base.BaseSingleFieldPeriod.compareTo : if i1 >= i0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.compareTo : return 0
org.joda.time.base.BaseSingleFieldPeriod.compareTo : return 0 >>>>>>>> org.joda.time.Years.minus : if r1 != null
org.joda.time.Years.minus : if r1 != null >>>>>>>> org.joda.time.Years.minus : $i0 = virtualinvoke r1.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.minus : $i0 = virtualinvoke r1.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.Years.minus : $r2 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years minus(int)>($i0)
org.joda.time.Years.minus : $r2 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years minus(int)>($i0) >>>>>>>> org.joda.time.Years.minus : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0)
org.joda.time.Years.minus : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : return $i1
org.joda.time.field.FieldUtils.safeNegate : return $i1 >>>>>>>> org.joda.time.Years.minus : $r1 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years plus(int)>($i1)
org.joda.time.Years.minus : $r1 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years plus(int)>($i1) >>>>>>>> org.joda.time.Years.plus : if i0 != 0
org.joda.time.Years.plus : if i0 != 0 >>>>>>>> org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.Years.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0)
org.joda.time.Years.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.Years.plus : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2)
org.joda.time.Years.plus : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2) >>>>>>>> org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO> >>>>>>>> org.joda.time.Years.years : return $r0
org.joda.time.Years.years : return $r0 >>>>>>>> org.joda.time.Years.plus : return $r1
org.joda.time.Years.plus : return $r1 >>>>>>>> org.joda.time.Years.minus : return $r1
org.joda.time.Years.minus : return $r1 >>>>>>>> org.joda.time.Years.minus : return $r2
org.joda.time.Years.minus : return $r2 >>>>>>>> org.joda.time.Years.dividedBy : if i0 != 1
org.joda.time.Years.dividedBy : if i0 != 1 >>>>>>>> org.joda.time.Years.dividedBy : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.dividedBy : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.Years.dividedBy : $i2 = $i1 / i0
org.joda.time.Years.dividedBy : $i2 = $i1 / i0 >>>>>>>> org.joda.time.Years.dividedBy : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2)
org.joda.time.Years.dividedBy : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2) >>>>>>>> org.joda.time.Years.dividedBy : return $r1
org.joda.time.Years.dividedBy : return $r1 >>>>>>>> org.joda.time.Years.negated : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.negated : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.Years.negated : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0)
org.joda.time.Years.negated : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0) >>>>>>>> org.joda.time.Years.negated : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i1)
org.joda.time.Years.negated : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i1) >>>>>>>> org.joda.time.Years.years : $r1 = <org.joda.time.Years: org.joda.time.Years ONE>
org.joda.time.Years.years : $r1 = <org.joda.time.Years: org.joda.time.Years ONE> >>>>>>>> org.joda.time.Years.years : return $r1
org.joda.time.Years.years : return $r1 >>>>>>>> org.joda.time.Years.negated : return $r1
