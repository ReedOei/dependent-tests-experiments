org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8]
org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : return r1 >>>>>>>> org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>
org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX> >>>>>>>> org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0]
org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.getIndexedField : if i1 != -1
org.joda.time.PeriodType.getIndexedField : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1)
org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : return $i2
org.joda.time.PeriodType.getIndexedField : return $i2 >>>>>>>> org.joda.time.Period.getWeeks : return $i1
org.joda.time.Period.getWeeks : return $i1 >>>>>>>> org.joda.time.Period.toPeriod : return r0
org.joda.time.Period.toPeriod : return r0 >>>>>>>> org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getDays : return $i1
org.joda.time.Period.getDays : return $i1 >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternate : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternate>
org.joda.time.format.ISOPeriodFormat.alternate : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternate> >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternate : if $r0 != null
org.joda.time.format.ISOPeriodFormat.alternate : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternate : $r14 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternate>
org.joda.time.format.ISOPeriodFormat.alternate : $r14 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternate> >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternate : return $r14
org.joda.time.format.ISOPeriodFormat.alternate : return $r14 >>>>>>>> org.joda.time.base.AbstractPeriod.toString : if r1 != null
org.joda.time.base.AbstractPeriod.toString : if r1 != null >>>>>>>> org.joda.time.base.AbstractPeriod.toString : $r3 = virtualinvoke r1.<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>(r0)
org.joda.time.base.AbstractPeriod.toString : $r3 = virtualinvoke r1.<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>()
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.checkPrinter : if $r1 != null
org.joda.time.format.PeriodFormatter.checkPrinter : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null
org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>()
org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : return $r1
org.joda.time.format.PeriodFormatter.getPrinter : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer
org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r5 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r5 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.print : $i0 = interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, $r5)
org.joda.time.format.PeriodFormatter.print : $i0 = interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, $r5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i2 = interfaceinvoke r3.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i2 = interfaceinvoke r3.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = i1 + -1
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = i1 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : if i1 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : if i1 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $i2 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $i2 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $i3 != 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $i3 != 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i5) {     case 0:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i5) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6) >>>>>>>> org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.get : if i0 != -1
org.joda.time.base.AbstractPeriod.get : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.get : return $i1
org.joda.time.base.AbstractPeriod.get : return $i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $b17 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $b17 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i18 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i18 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i18) {     case 1:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i18) {     case 1: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b3 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b3 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0) >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L
org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b1 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b1 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L
org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b6 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b6 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 1
org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 1 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : goto [?= return $i7]
org.joda.time.format.FormatUtils.calculateDigitCount : goto [?= return $i7] >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : return $i7
org.joda.time.format.FormatUtils.calculateDigitCount : return $i7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i6 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i6 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r3 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r3 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r5 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r5 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = i0 + $i2
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = i0 + $i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : goto [?= i1 = i1 + -1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i7
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i6 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i6 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $i0 = virtualinvoke $r3.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $i0 = virtualinvoke $r3.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : return $i0
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i3 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i3 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r11)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r11) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r12)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r12) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l14 = (long) i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l14 = (long) i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l15 = $l14 * 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l15 = $l14 * 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l16 = (long) i2
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l16 = (long) i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = $l15 + $l16
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = $l15 + $l16 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b8 = l0 cmp 100L
org.joda.time.format.FormatUtils.calculateDigitCount : $b8 = l0 cmp 100L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b8 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b8 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b9 = l0 cmp 1000L
org.joda.time.format.FormatUtils.calculateDigitCount : $b9 = l0 cmp 1000L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b9 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b9 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b10 = l0 cmp 10000L
org.joda.time.format.FormatUtils.calculateDigitCount : $b10 = l0 cmp 10000L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b10 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b10 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $d0 = (double) l0
org.joda.time.format.FormatUtils.calculateDigitCount : $d0 = (double) l0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $d1 = staticinvoke <java.lang.Math: double log(double)>($d0)
org.joda.time.format.FormatUtils.calculateDigitCount : $d1 = staticinvoke <java.lang.Math: double log(double)>($d0) >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $d2 = <org.joda.time.format.FormatUtils: double LOG_10>
org.joda.time.format.FormatUtils.calculateDigitCount : $d2 = <org.joda.time.format.FormatUtils: double LOG_10> >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $d3 = $d1 / $d2
org.joda.time.format.FormatUtils.calculateDigitCount : $d3 = $d1 / $d2 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i11 = (int) $d3
org.joda.time.format.FormatUtils.calculateDigitCount : $i11 = (int) $d3 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = $i11 + 1
org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = $i11 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i7 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i7 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i7 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i7 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i8 != 9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i8 != 9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l9 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l9 = staticinvoke <java.lang.Math: long abs(long)>(l0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l10 = $l9 % 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l10 = $l9 % 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b11 = $l10 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b11 = $l10 cmp 0L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b11 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b11 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = l0 / 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = l0 / 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i11 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r8)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i11 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r8) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i11
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i11 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 2
org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i10 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r7)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i10 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i10
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = $i2 + $i3
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = $i2 + $i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i8 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i8 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = i2 + -1
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = i2 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i2 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i2 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $i3 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 2147483647, r2)
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $i3 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 2147483647, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $i1 == 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $i1 == 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = i1 + $i3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = i1 + $i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $i8 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $i8 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i9 = virtualinvoke $r7.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i9 = virtualinvoke $r7.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = i0 + $i9
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = i0 + $i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : return i0 >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.PeriodFormatter.print : specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.PeriodFormatter.print : r3 = $r4
org.joda.time.format.PeriodFormatter.print : r3 = $r4 >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.print : interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r3, r1, $r6)
org.joda.time.format.PeriodFormatter.print : interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r3, r1, $r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : interfaceinvoke $r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : interfaceinvoke $r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4)
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = i1 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = i1 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $b4 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $b4 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i5 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i5 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r4 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r4 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, i2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, i2) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i7 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i7 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r7 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r7 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i2 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i2 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r11 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r11 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l6 = l0 / 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l6 = l0 / 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) $l6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) $l6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l8 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l8 = staticinvoke <java.lang.Math: long abs(long)>(l0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l9 = $l8 % 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l9 = $l8 % 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i3 = (int) $l9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i3 = (int) $l9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i10 == 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i10 == 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i3 <= 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i3 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 3) >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.PeriodFormatter.print : return $r7
org.joda.time.format.PeriodFormatter.print : return $r7 >>>>>>>> org.joda.time.base.AbstractPeriod.toString : return $r3
