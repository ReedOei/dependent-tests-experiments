org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1 >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.Instant.toInstant : return r0
org.joda.time.Instant.toInstant : return r0 >>>>>>>> org.joda.time.Instant.plus : $r1 = virtualinvoke r0.<org.joda.time.Instant: org.joda.time.Instant withDurationAdded(long,int)>(l0, 1)
org.joda.time.Instant.plus : $r1 = virtualinvoke r0.<org.joda.time.Instant: org.joda.time.Instant withDurationAdded(long,int)>(l0, 1) >>>>>>>> org.joda.time.Instant.withDurationAdded : $b3 = l0 cmp 0L
org.joda.time.Instant.withDurationAdded : $b3 = l0 cmp 0L >>>>>>>> org.joda.time.Instant.withDurationAdded : if $b3 == 0
org.joda.time.Instant.withDurationAdded : if $b3 == 0 >>>>>>>> org.joda.time.Instant.withDurationAdded : if i1 != 0
org.joda.time.Instant.withDurationAdded : if i1 != 0 >>>>>>>> org.joda.time.Instant.withDurationAdded : $r1 = virtualinvoke r0.<org.joda.time.Instant: org.joda.time.Chronology getChronology()>()
org.joda.time.Instant.withDurationAdded : $r1 = virtualinvoke r0.<org.joda.time.Instant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Instant.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.Instant.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.Instant.getChronology : return $r1
org.joda.time.Instant.getChronology : return $r1 >>>>>>>> org.joda.time.Instant.withDurationAdded : $l4 = virtualinvoke r0.<org.joda.time.Instant: long getMillis()>()
org.joda.time.Instant.withDurationAdded : $l4 = virtualinvoke r0.<org.joda.time.Instant: long getMillis()>() >>>>>>>> org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis>
org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis> >>>>>>>> org.joda.time.Instant.getMillis : return $l0
org.joda.time.Instant.getMillis : return $l0 >>>>>>>> org.joda.time.Instant.withDurationAdded : l2 = virtualinvoke $r1.<org.joda.time.Chronology: long add(long,long,int)>($l4, l0, i1)
org.joda.time.Instant.withDurationAdded : l2 = virtualinvoke $r1.<org.joda.time.Chronology: long add(long,long,int)>($l4, l0, i1) >>>>>>>> org.joda.time.chrono.BaseChronology.add : $b4 = l1 cmp 0L
org.joda.time.chrono.BaseChronology.add : $b4 = l1 cmp 0L >>>>>>>> org.joda.time.chrono.BaseChronology.add : if $b4 == 0
org.joda.time.chrono.BaseChronology.add : if $b4 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.add : if i2 != 0
org.joda.time.chrono.BaseChronology.add : if i2 != 0 >>>>>>>> org.joda.time.chrono.BaseChronology.add : l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l1, i2)
org.joda.time.chrono.BaseChronology.add : l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l1, i2) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : tableswitch(i1) {     case -1:
org.joda.time.field.FieldUtils.safeMultiply : tableswitch(i1) {     case -1: >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return l0
org.joda.time.field.FieldUtils.safeMultiply : return l0 >>>>>>>> org.joda.time.chrono.BaseChronology.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l3)
org.joda.time.chrono.BaseChronology.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l3) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.chrono.BaseChronology.add : return $l5
org.joda.time.chrono.BaseChronology.add : return $l5 >>>>>>>> org.joda.time.Instant.withDurationAdded : $r2 = virtualinvoke r0.<org.joda.time.Instant: org.joda.time.Instant withMillis(long)>(l2)
org.joda.time.Instant.withDurationAdded : $r2 = virtualinvoke r0.<org.joda.time.Instant: org.joda.time.Instant withMillis(long)>(l2) >>>>>>>> org.joda.time.Instant.withMillis : $l1 = r0.<org.joda.time.Instant: long iMillis>
org.joda.time.Instant.withMillis : $l1 = r0.<org.joda.time.Instant: long iMillis> >>>>>>>> org.joda.time.Instant.withMillis : $b2 = l0 cmp $l1
org.joda.time.Instant.withMillis : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.Instant.withMillis : if $b2 != 0
org.joda.time.Instant.withMillis : if $b2 != 0 >>>>>>>> org.joda.time.Instant.withMillis : $r1 = new org.joda.time.Instant
org.joda.time.Instant.withMillis : $r1 = new org.joda.time.Instant >>>>>>>> org.joda.time.Instant.withMillis : specialinvoke $r1.<org.joda.time.Instant: void <init>(long)>(l0)
org.joda.time.Instant.withMillis : specialinvoke $r1.<org.joda.time.Instant: void <init>(long)>(l0) >>>>>>>> org.joda.time.Instant.withMillis : return $r1
org.joda.time.Instant.withMillis : return $r1 >>>>>>>> org.joda.time.Instant.withDurationAdded : return $r2
org.joda.time.Instant.withDurationAdded : return $r2 >>>>>>>> org.joda.time.Instant.plus : return $r1
org.joda.time.Instant.plus : return $r1 >>>>>>>> org.joda.time.base.AbstractInstant.isAfter : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.isAfter : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractInstant.isAfter : $b2 = $l1 cmp l0
org.joda.time.base.AbstractInstant.isAfter : $b2 = $l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInstant.isAfter : if $b2 <= 0
org.joda.time.base.AbstractInstant.isAfter : if $b2 <= 0 >>>>>>>> org.joda.time.base.AbstractInstant.isAfter : $z0 = 1
org.joda.time.base.AbstractInstant.isAfter : $z0 = 1 >>>>>>>> org.joda.time.base.AbstractInstant.isAfter : goto [?= return $z0]
org.joda.time.base.AbstractInstant.isAfter : goto [?= return $z0] >>>>>>>> org.joda.time.base.AbstractInstant.isAfter : return $z0
