package randoop.jodatime;

import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    org.joda.time.LocalDateTime var7 = org.joda.time.LocalDateTime.now();
    int var8 = var7.getDayOfYear();
    org.joda.time.Chronology var9 = var7.getChronology();
    org.joda.time.LocalDate var10 = new org.joda.time.LocalDate(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime(73394, 884, 33, 19, 69, 2005, 13, var9);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateMidnight var23 = var1.plusMonths(10);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    int var45 = var29.getRoundingMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    org.joda.time.DurationFieldType var11 = var10.getFieldType();
    org.joda.time.IllegalFieldValueException var15 = new org.joda.time.IllegalFieldValueException(var11, (java.lang.Number)10.0d, (java.lang.Number)1377746681334L, (java.lang.Number)1377742981948L);
    java.lang.String var16 = var15.getFieldName();
    org.joda.time.IllegalFieldValueException var19 = new org.joda.time.IllegalFieldValueException("DurationField[days]", "P759MT382707H24M41.334S");
    var15.addSuppressed((java.lang.Throwable)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "years"+ "'", var16.equals("years"));

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.now();
    boolean var9 = var7.isAfter((org.joda.time.ReadablePartial)var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DurationField var13 = var10.hours();
    boolean var14 = var8.equals((java.lang.Object)var10);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.Days var27 = var26.toStandardDays();
    org.joda.time.LocalTime var28 = var8.minus((org.joda.time.ReadablePeriod)var26);
    int var29 = var1.compareTo((org.joda.time.ReadablePartial)var28);
    org.joda.time.Years var31 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var32 = var31.getPeriodType();
    org.joda.time.Years var34 = org.joda.time.Years.years((-1));
    int var35 = var31.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var34);
    org.joda.time.LocalTime var36 = var28.minus((org.joda.time.ReadablePeriod)var31);
    org.joda.time.Chronology var37 = var28.getChronology();
    int var38 = var28.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 15795333);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Hours var1 = org.joda.time.Hours.parseHours("Aug 23, 2013 12:00:00 AM");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    java.lang.String var38 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "P0W"+ "'", var38.equals("P0W"));

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    int var7 = var4.getWeeks();
    org.joda.time.DurationFieldType[] var8 = var4.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    org.joda.time.chrono.ISOChronology var2 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    java.lang.String var3 = var2.toString();
    org.joda.time.Chronology var4 = var2.withUTC();
    org.joda.time.Interval var5 = new org.joda.time.Interval((-1L), 1377742981L, (org.joda.time.Chronology)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ISOChronology[UTC]"+ "'", var3.equals("ISOChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.DateMidnight.Property var5 = var1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    int var68 = var67.getDays();
    org.joda.time.Period var70 = var67.withMinutes(15795333);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var2 = var0.years();
    org.joda.time.DateTimeField var3 = var0.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Minutes var5 = var2.toStandardMinutes();
    int var6 = var2.getMonths();
    org.joda.time.Period var8 = var2.withHours(73394);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.Chronology var3 = var2.withUTC();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.now((org.joda.time.Chronology)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateMidnight var5 = var4.toDateMidnight();
    org.joda.time.DateMidnight var7 = var5.minus(1377742981948L);
    int var8 = var5.getMinuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    org.joda.time.Months var2 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    org.joda.time.Months var4 = var2.plus(240);
    int var5 = var4.getMonths();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 240);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    long var63 = var57.add((-7200000L), 23);
    long var65 = var57.getValueAsLong((-60779281008478L));
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.DateMidnight var70 = var67.minusWeeks((-1));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Days var83 = var82.toStandardDays();
    org.joda.time.DurationFieldType var84 = var83.getFieldType();
    org.joda.time.DateMidnight var86 = var70.withFieldAdded(var84, 1);
    org.joda.time.field.PreciseDurationField var88 = new org.joda.time.field.PreciseDurationField(var84, 1L);
    long var91 = var88.getMillis(3, 9L);
    int var92 = var57.compareTo((org.joda.time.DurationField)var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var95 = var57.getMillis(1377746580759L, 104L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1980000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-703463L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.Seconds var28 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var13);
    var13.setWeekOfWeekyear(28);
    org.joda.time.DateTime var31 = org.joda.time.DateTime.now();
    long var32 = var31.getMillis();
    var13.setMillis((org.joda.time.ReadableInstant)var31);
    org.joda.time.DateTimeZone var34 = var13.getZone();
    long var36 = var1.getMillisKeepLocal(var34, 1377742981948L);
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    boolean var48 = var44.isBefore((org.joda.time.ReadableInstant)var46);
    var37.setDate((org.joda.time.ReadableInstant)var44);
    int var50 = var37.getDayOfMonth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var52 = org.joda.time.chrono.GJChronology.getInstance(var34, (org.joda.time.ReadableInstant)var37, 33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1377746595071L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1377742981948L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 29);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var49 = var1.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight.Property var50 = var1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var0);
    org.joda.time.MutableDateTime.Property var3 = var0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var4 = var2.getFieldType(15795333);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.weekyear();
    org.joda.time.MutableDateTime.Property var21 = var5.year();
    boolean var23 = var5.equals((java.lang.Object)(byte)0);
    long var24 = var5.getMillis();
    var5.add(1377746580759L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1377742995215L);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    var0.addMillis(100);
    int var6 = var0.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 12196171);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var56 = var54.roundHalfFloor((-703463L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    boolean var30 = var29.isBeforeNow();
    long var31 = var29.getStartMillis();
    boolean var33 = var29.contains((-3600L));
    long var34 = var29.toDurationMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1377742995355L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 3600001L);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    org.joda.time.LocalDateTime var0 = new org.joda.time.LocalDateTime();

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTime var29 = var5.toDateTime();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours(1377746581334L);
    org.joda.time.DateTime var32 = var29.plus((org.joda.time.ReadableDuration)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var37 = var29.withTime(4, 69, 73392, 80);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    org.joda.time.Period var1 = new org.joda.time.Period(1377746580754L);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    var11.setYears(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var66 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.dateElementParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Seconds var27 = var25.plus(2005);
    org.joda.time.Minutes var28 = var25.toStandardMinutes();
    org.joda.time.Seconds var30 = var25.multipliedBy(3);
    org.joda.time.Period var35 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var37 = var35.plusYears((-1));
    org.joda.time.Minutes var38 = var35.toStandardMinutes();
    org.joda.time.Minutes var40 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var41 = var38.minus(var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusYears((-1));
    org.joda.time.Minutes var49 = var46.toStandardMinutes();
    org.joda.time.Minutes var50 = var38.plus(var49);
    org.joda.time.DurationFieldType var51 = var50.getFieldType();
    org.joda.time.Seconds var52 = var50.toStandardSeconds();
    int var53 = var52.getSeconds();
    boolean var54 = var30.isLessThan(var52);
    int var55 = var30.getSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 8400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 25785);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(var1);
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var10 = var9.minutes();
    org.joda.time.DateTimeField var11 = var9.year();
    org.joda.time.DurationField var12 = var9.hours();
    boolean var13 = var1.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    boolean var42 = var4.isFixed();
    org.joda.time.LocalTime var43 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var44 = new org.joda.time.MutableInterval((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    var14.clear();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var64 = var14.toDurationFrom((org.joda.time.ReadableInstant)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.add(9, 8400, 15, 80, 928, 14400001, 241, 22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var26 = var25.toStandardDuration();
    org.joda.time.Days var27 = var25.toStandardDays();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var32 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var31);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var37 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var36);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var39 = var38.year();
    boolean var40 = var36.isBefore((org.joda.time.ReadableInstant)var38);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    boolean var45 = var42.isShorterThan((org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var51 = var42.plus((org.joda.time.ReadableDuration)var47);
    var38.add((org.joda.time.ReadableDuration)var47);
    org.joda.time.Seconds var53 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var38);
    org.joda.time.Seconds var54 = var53.negated();
    org.joda.time.Seconds var56 = var54.plus(240);
    boolean var57 = var25.isLessThan(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    int var5 = var2.getWeekOfWeekyear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var7 = var2.withDayOfWeek(216);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 33);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    org.joda.time.MutableInterval var7 = new org.joda.time.MutableInterval();
    long var8 = var7.getEndMillis();
    org.joda.time.Months var9 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var7);
    org.joda.time.Chronology var10 = var7.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var11 = new org.joda.time.LocalDateTime(692, 104, 69781948, 692, 10, 57600100, 241, var10);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatterBuilder var58 = var56.appendDayOfMonth((-9));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    org.joda.time.tz.Provider var0 = org.joda.time.DateTimeZone.getProvider();
    org.joda.time.DateTimeZone.setProvider(var0);
    org.joda.time.DateTimeZone.setProvider(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }


    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(25785, 630, (-948), 0, 2013, 241, 22, 8);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forStyle("57680");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.seconds(69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var4 = new org.joda.time.YearMonth(var3);
    org.joda.time.Chronology var5 = var1.withZone(var3);
    org.joda.time.TimeOfDay var6 = new org.joda.time.TimeOfDay(80003L, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(var2);
    org.joda.time.YearMonthDay var5 = var3.plusYears(2013);
    org.joda.time.TimeOfDay var6 = new org.joda.time.TimeOfDay();
    int var7 = var6.size();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var10 = var9.hours();
    org.joda.time.LocalTime var11 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var9);
    org.joda.time.LocalTime var13 = var11.withMillisOfSecond(1);
    org.joda.time.LocalTime var15 = var13.minusHours((-1));
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var6, (org.joda.time.ReadablePartial)var15);
    int var17 = var6.getMillisOfSecond();
    org.joda.time.TimeOfDay var19 = var6.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var20 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var25 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var27 = var25.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var29 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstance(var29);
    long var32 = var25.getMillisKeepLocal(var29, 1377746580759L);
    org.joda.time.Chronology var33 = var20.withZone(var29);
    java.util.TimeZone var34 = var29.toTimeZone();
    org.joda.time.DateTime var35 = var5.toDateTime(var19, var29);
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    int[] var43 = var36.get((org.joda.time.ReadablePartial)var41, 100L);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.Period var50 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var47);
    org.joda.time.DateTimeField var51 = var47.millisOfSecond();
    org.joda.time.DateTimeField var52 = var47.secondOfDay();
    org.joda.time.field.SkipDateTimeField var54 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var36, var52, 100);
    org.joda.time.LocalDateTime var55 = org.joda.time.LocalDateTime.now();
    int var56 = var55.getDayOfYear();
    org.joda.time.Chronology var57 = var55.getChronology();
    int var58 = var55.getYearOfCentury();
    int var59 = var54.getMaximumValue((org.joda.time.ReadablePartial)var55);
    boolean var61 = var54.isLeap(1L);
    org.joda.time.LocalDateTime var62 = org.joda.time.LocalDateTime.now();
    int var63 = var62.getDayOfYear();
    int var64 = var54.getMinimumValue((org.joda.time.ReadablePartial)var62);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    var67.setWeekOfWeekyear(1);
    int var70 = var67.getRoundingMode();
    var67.addMillis(100);
    var67.setSecondOfMinute(10);
    org.joda.time.PeriodType var75 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableDuration)var66, (org.joda.time.ReadableInstant)var67, var75);
    org.joda.time.Days var77 = var76.toStandardDays();
    org.joda.time.DurationFieldType var78 = var77.getFieldType();
    org.joda.time.LocalDateTime var80 = var62.withFieldAdded(var78, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var82 = var19.withFieldAdded(var78, 12182);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 442);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.Seconds var26 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var11);
    org.joda.time.Seconds var28 = var26.plus(2005);
    org.joda.time.Minutes var29 = var26.toStandardMinutes();
    java.lang.String var30 = var0.print((org.joda.time.ReadablePeriod)var26);
    java.lang.String var31 = var26.toString();
    org.joda.time.Seconds var33 = var26.dividedBy(21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "8595 seconds"+ "'", var30.equals("8595 seconds"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PT8595S"+ "'", var31.equals("PT8595S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var56 = var54.getAsText(1377742995355L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var28 = var6.toString("2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.MutableInterval var21 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var22 = var21.copy();
    org.joda.time.DateTime var23 = var22.getStart();
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.months();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var35, var50);
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23, var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var52.setMinutes(34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    org.joda.time.Partial var9 = new org.joda.time.Partial(var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.withMonthOfYear(1);
    org.joda.time.LocalDate var16 = var14.withEra(1);
    int var17 = var16.getDayOfYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var18 = var9.compareTo((org.joda.time.ReadablePartial)var16);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 16);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forID("80");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var7 = new org.joda.time.LocalDateTime(951, 15795333, 15, 12, 7, 12182, 241);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.DateTime var12 = var5.minusSeconds(35);
    org.joda.time.DateTime var14 = var5.withDayOfMonth(14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.withMonthOfYear(1);
    org.joda.time.LocalDate var7 = var5.withEra(1);
    org.joda.time.LocalDate.Property var8 = var5.yearOfCentury();
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusYears((-1));
    org.joda.time.Minutes var16 = var13.toStandardMinutes();
    org.joda.time.Minutes var18 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var19 = var16.minus(var18);
    org.joda.time.PeriodType var20 = var16.getPeriodType();
    boolean var21 = var5.equals((java.lang.Object)var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(9L, var20, (org.joda.time.Chronology)var22);
    org.joda.time.Partial var24 = new org.joda.time.Partial();
    java.lang.String var25 = var24.toString();
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.Period var45 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var47 = var45.plusSeconds(100);
    org.joda.time.Period var49 = var45.minusMillis(10);
    boolean var50 = var40.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var51 = var40.dayOfYear();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.LocalDate var56 = var54.minusMonths(0);
    org.joda.time.DateTime var57 = var54.toDateTimeAtMidnight();
    org.joda.time.DateTime var59 = var57.withCenturyOfEra(4);
    org.joda.time.Days var60 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var59);
    org.joda.time.Days var62 = var60.dividedBy(1);
    boolean var63 = var38.isGreaterThan(var60);
    org.joda.time.DurationFieldType var64 = var38.getFieldType();
    org.joda.time.Seconds var65 = var38.toStandardSeconds();
    org.joda.time.Partial var66 = var24.minus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.TimeOfDay var67 = new org.joda.time.TimeOfDay();
    int var68 = var67.size();
    org.joda.time.TimeOfDay var70 = var67.withMillisOfSecond(1);
    org.joda.time.Years var72 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var73 = var72.getPeriodType();
    org.joda.time.Years var75 = org.joda.time.Years.years((-1));
    int var76 = var72.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var75);
    org.joda.time.Years var78 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var79 = var78.getPeriodType();
    org.joda.time.Years var80 = var75.minus(var78);
    org.joda.time.TimeOfDay var81 = var70.minus((org.joda.time.ReadablePeriod)var75);
    boolean var82 = var24.isMatch((org.joda.time.ReadablePartial)var70);
    org.joda.time.Period var87 = new org.joda.time.Period(1, 10, 10, 1);
    int var88 = var87.getWeeks();
    org.joda.time.Period var89 = var87.toPeriod();
    int var90 = var89.getMonths();
    org.joda.time.Partial var91 = var24.plus((org.joda.time.ReadablePeriod)var89);
    int var92 = var89.getDays();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.add((org.joda.time.ReadablePeriod)var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.Duration var21 = var20.toStandardDuration();
    org.joda.time.MutableInterval var22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadablePeriod)var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setEndMillis(1377746594906L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var1 = org.joda.time.Interval.parse("DateTimeField[secondOfDay]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    java.lang.String var9 = var8.toString();
    org.joda.time.LocalTime var11 = var8.withMinuteOfHour(12);
    org.joda.time.LocalTime var13 = var8.minusHours(73394);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "03:23:16.037"+ "'", var9.equals("03:23:16.037"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var59 = var54.roundHalfEven(1377746593932L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(35L, var2);
    org.joda.time.LocalDate.Property var5 = var4.centuryOfEra();
    int var6 = var4.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    java.lang.String var26 = var10.toString();
    org.joda.time.chrono.EthiopicChronology var27 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    int[] var34 = var27.get((org.joda.time.ReadablePartial)var32, 100L);
    org.joda.time.chrono.EthiopicChronology var38 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var39 = var38.hours();
    org.joda.time.LocalTime var40 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var38);
    org.joda.time.Period var41 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var38);
    org.joda.time.DateTimeField var42 = var38.millisOfSecond();
    org.joda.time.DateTimeField var43 = var38.secondOfDay();
    org.joda.time.field.SkipDateTimeField var45 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var27, var43, 100);
    org.joda.time.DurationField var46 = var45.getRangeDurationField();
    int var48 = var45.getMaximumValue(2762381894421796L);
    long var51 = var45.getDifferenceAsLong((-7200000L), 35L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.setRounding((org.joda.time.DateTimeField)var45, 12196171);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "2013-08-29T02:23:16.901+00:00:00.759"+ "'", var26.equals("2013-08-29T02:23:16.901+00:00:00.759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-7200L));

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.hours();
    org.joda.time.DateTimeField var2 = var0.yearOfEra();
    org.joda.time.PeriodType var3 = org.joda.time.PeriodType.months();
    java.lang.String var4 = var3.toString();
    org.joda.time.PeriodType var5 = var3.withMonthsRemoved();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod((java.lang.Object)var2, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "PeriodType[Months]"+ "'", var4.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getSecondOfDay();
    org.joda.time.MutableDateTime.Property var4 = var0.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 12196);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.DateTime var10 = var0.toDateTime();
    org.joda.time.LocalDateTime var12 = var0.withYear(928);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.LocalTime var14 = new org.joda.time.LocalTime((org.joda.time.Chronology)var13);
    int var15 = var14.getMillisOfSecond();
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var14, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 239);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.minusMillis(21);
    org.joda.time.TimeOfDay.Property var8 = var7.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var6 = new org.joda.time.DateTime(86399, 1883, 86399, (-22), 1, 2);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    boolean var42 = var4.isFixed();
    boolean var43 = var4.isFixed();
    org.joda.time.chrono.EthiopicChronology var44 = org.joda.time.chrono.EthiopicChronology.getInstance((org.joda.time.DateTimeZone)var4);
    org.joda.time.DateTime var45 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone)var4);
    org.joda.time.DateTime var47 = var45.plusHours(14400001);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.MutableDateTime.Property var27 = var12.weekyear();
    org.joda.time.MutableDateTime.Property var28 = var12.year();
    boolean var30 = var12.equals((java.lang.Object)(byte)0);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = var32.toLocalDate();
    org.joda.time.LocalDate var35 = var33.withMonthOfYear(1);
    org.joda.time.DateMidnight var36 = var33.toDateMidnight();
    var12.setTime((org.joda.time.ReadableInstant)var36);
    org.joda.time.Duration var38 = var4.toDurationFrom((org.joda.time.ReadableInstant)var12);
    java.lang.String var39 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "PT4210.001S"+ "'", var39.equals("PT4210.001S"));

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var69 = var67.getValue(4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    java.lang.Object var29 = var7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendMonthOfYear(20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatterBuilder var13 = var10.appendYearOfCentury((-22), 1883);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.Seconds var28 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var13);
    org.joda.time.Weeks var29 = var28.toStandardWeeks();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    boolean var41 = var29.equals((java.lang.Object)var40);
    org.joda.time.LocalDateTime var43 = var0.withDurationAdded((org.joda.time.ReadableDuration)var40, 10);
    org.joda.time.chrono.ISOChronology var44 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var49 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var51 = var49.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var52 = var44.withZone((org.joda.time.DateTimeZone)var49);
    org.joda.time.DateTime var53 = var43.toDateTime((org.joda.time.DateTimeZone)var49);
    org.joda.time.DateTime.Property var54 = var53.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    int var12 = var11.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Seconds var26 = var25.negated();
    org.joda.time.Seconds var28 = var26.plus(240);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var40 = var39.year();
    boolean var41 = var37.isBefore((org.joda.time.ReadableInstant)var39);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var52 = var43.plus((org.joda.time.ReadableDuration)var48);
    var39.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.Seconds var54 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var39);
    org.joda.time.Seconds var56 = var54.plus(2005);
    boolean var57 = var26.isGreaterThan(var54);
    org.joda.time.Days var58 = var54.toStandardDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var32 = var31.toStandardDuration();
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var34.toDuration();
    boolean var39 = var32.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var40 = var38.toStandardHours();
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    var43.setWeekOfWeekyear(1);
    int var46 = var43.getRoundingMode();
    var43.addMillis(100);
    var43.setSecondOfMinute(10);
    org.joda.time.PeriodType var51 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var52 = new org.joda.time.Period((org.joda.time.ReadableDuration)var42, (org.joda.time.ReadableInstant)var43, var51);
    org.joda.time.Days var53 = var52.toStandardDays();
    org.joda.time.Hours var54 = var53.toStandardHours();
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    var57.setWeekOfWeekyear(1);
    int var60 = var57.getRoundingMode();
    var57.addMillis(100);
    var57.setSecondOfMinute(10);
    org.joda.time.PeriodType var65 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var66 = new org.joda.time.Period((org.joda.time.ReadableDuration)var56, (org.joda.time.ReadableInstant)var57, var65);
    org.joda.time.Days var67 = var66.toStandardDays();
    org.joda.time.Hours var68 = var67.toStandardHours();
    java.lang.String var69 = var68.toString();
    org.joda.time.Hours var70 = var54.plus(var68);
    org.joda.time.Hours var71 = var40.plus(var70);
    org.joda.time.YearMonthDay var72 = var4.plus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.LocalDate var73 = var72.toLocalDate();
    org.joda.time.LocalDateTime var75 = org.joda.time.LocalDateTime.now();
    int var76 = var75.getDayOfYear();
    org.joda.time.Chronology var77 = var75.getChronology();
    org.joda.time.chrono.StrictChronology var78 = org.joda.time.chrono.StrictChronology.getInstance(var77);
    org.joda.time.chrono.JulianChronology var79 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var80 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var79);
    org.joda.time.LocalDate var81 = var80.toLocalDate();
    org.joda.time.LocalDate var83 = var81.withMonthOfYear(1);
    org.joda.time.LocalDate var85 = var81.withWeekyear(1);
    org.joda.time.LocalDate var87 = var81.withDayOfYear(1);
    org.joda.time.LocalDate var89 = var87.minusMonths(16);
    boolean var90 = var78.equals((java.lang.Object)16);
    org.joda.time.YearMonth var91 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var78);
    java.lang.String var92 = var91.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Hours var93 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial)var72, (org.joda.time.ReadablePartial)var91);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "PT0H"+ "'", var69.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "1970-01"+ "'", var92.equals("1970-01"));

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var54.isLeap(1386411782707L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var5.addMinutes(104);
    org.joda.time.MutableDateTime.Property var10 = var5.minuteOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setWeekOfWeekyear(15795333);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    int var12 = var0.getWeekyear();
    org.joda.time.DateTime.Property var13 = var0.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    boolean var9 = var6.isShorterThan((org.joda.time.ReadableDuration)var8);
    org.joda.time.Duration var10 = var1.plus((org.joda.time.ReadableDuration)var6);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var13.setChronology((org.joda.time.Chronology)var16);
    org.joda.time.MutablePeriod var18 = new org.joda.time.MutablePeriod(0L, var12, (org.joda.time.Chronology)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    var21.setWeekOfWeekyear(1);
    int var24 = var21.getRoundingMode();
    var21.addMillis(100);
    var21.setSecondOfMinute(10);
    org.joda.time.PeriodType var29 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var30 = new org.joda.time.Period((org.joda.time.ReadableDuration)var20, (org.joda.time.ReadableInstant)var21, var29);
    org.joda.time.Days var31 = var30.toStandardDays();
    org.joda.time.Duration var32 = var31.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var34 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var35 = var34.hours();
    org.joda.time.DateTimeField var36 = var34.minuteOfHour();
    org.joda.time.LocalDate var37 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var34);
    var18.setPeriod((org.joda.time.ReadableDuration)var32, (org.joda.time.Chronology)var34);
    int var39 = var10.compareTo((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    var42.setWeekOfWeekyear(1);
    int var45 = var42.getRoundingMode();
    var42.addMillis(100);
    var42.setSecondOfMinute(10);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var41, (org.joda.time.ReadableInstant)var42, var50);
    org.joda.time.LocalDateTime var52 = org.joda.time.LocalDateTime.now();
    int var53 = var52.getDayOfYear();
    org.joda.time.Chronology var54 = var52.getChronology();
    org.joda.time.chrono.StrictChronology var55 = org.joda.time.chrono.StrictChronology.getInstance(var54);
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.LocalDate var58 = var57.toLocalDate();
    org.joda.time.LocalDate var60 = var58.withMonthOfYear(1);
    org.joda.time.LocalDate var62 = var58.withWeekyear(1);
    org.joda.time.LocalDate var64 = var58.withDayOfYear(1);
    org.joda.time.LocalDate var66 = var64.minusMonths(16);
    boolean var67 = var55.equals((java.lang.Object)16);
    java.lang.String var68 = var55.toString();
    org.joda.time.Period var69 = var32.toPeriod(var50, (org.joda.time.Chronology)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "StrictChronology[ISOChronology[UTC]]"+ "'", var68.equals("StrictChronology[ISOChronology[UTC]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.Period var10 = var1.toPeriod();
    int var11 = var1.getYears();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime var29 = var0.plus(1377768182707L);
    org.joda.time.DateTime.Property var30 = var29.dayOfYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var34 = var29.withDate((-3), 23, 15795333);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var19 = var10.plus((org.joda.time.ReadableDuration)var15);
    var6.add((org.joda.time.ReadableDuration)var15);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Interval var29 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var26);
    boolean var31 = var29.isAfter(10L);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var32.setChronology((org.joda.time.Chronology)var35);
    org.joda.time.Interval var37 = var29.withChronology((org.joda.time.Chronology)var35);
    org.joda.time.DurationField var38 = var35.halfdays();
    org.joda.time.LocalTime var39 = new org.joda.time.LocalTime((-703463L), (org.joda.time.Chronology)var35);
    org.joda.time.chrono.EthiopicChronology var41 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var42 = var41.hours();
    org.joda.time.DateTimeField var43 = var41.minuteOfHour();
    org.joda.time.LocalDate var44 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var41);
    org.joda.time.LocalDate.Property var45 = var44.weekyear();
    org.joda.time.LocalDate.Property var46 = var44.dayOfMonth();
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = var48.toLocalDate();
    org.joda.time.DateMidnight var51 = var48.minusWeeks((-1));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    var54.setWeekOfWeekyear(1);
    int var57 = var54.getRoundingMode();
    var54.addMillis(100);
    var54.setSecondOfMinute(10);
    org.joda.time.PeriodType var62 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var63 = new org.joda.time.Period((org.joda.time.ReadableDuration)var53, (org.joda.time.ReadableInstant)var54, var62);
    org.joda.time.Days var64 = var63.toStandardDays();
    org.joda.time.DurationFieldType var65 = var64.getFieldType();
    org.joda.time.DateMidnight var67 = var51.withFieldAdded(var65, 1);
    org.joda.time.chrono.JulianChronology var68 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var69 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var68);
    org.joda.time.LocalDate var70 = var69.toLocalDate();
    org.joda.time.DateMidnight var72 = var69.minusWeeks((-1));
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var75 = new org.joda.time.MutableDateTime();
    var75.setWeekOfWeekyear(1);
    int var78 = var75.getRoundingMode();
    var75.addMillis(100);
    var75.setSecondOfMinute(10);
    org.joda.time.PeriodType var83 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableDuration)var74, (org.joda.time.ReadableInstant)var75, var83);
    org.joda.time.Days var85 = var84.toStandardDays();
    org.joda.time.DurationFieldType var86 = var85.getFieldType();
    org.joda.time.DateMidnight var88 = var72.withFieldAdded(var86, 1);
    org.joda.time.DateMidnight var90 = var51.withFieldAdded(var86, 13);
    org.joda.time.IllegalFieldValueException var94 = new org.joda.time.IllegalFieldValueException(var86, (java.lang.Number)(-1), (java.lang.Number)(short)(-1), (java.lang.Number)0);
    org.joda.time.LocalDate var96 = var44.withFieldAdded(var86, 13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var98 = var39.withFieldAdded(var86, 12196);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.MutableInterval var21 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var22 = var21.copy();
    org.joda.time.DateTime var23 = var22.getStart();
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.months();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var35, var50);
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23, var50);
    org.joda.time.DateMidnight var54 = var4.withYear(33);
    org.joda.time.DateMidnight var56 = var54.minusYears(20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var60 = var54.getMaximumValue(1377742981L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.minutes();
    org.joda.time.DateTimeField var2 = var0.hourOfHalfday();
    org.joda.time.DurationField var3 = var0.years();
    org.joda.time.DateTimeField var4 = var0.clockhourOfDay();
    org.joda.time.YearMonth var5 = org.joda.time.YearMonth.now((org.joda.time.Chronology)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withWeekyear(28);
    org.joda.time.LocalDate var7 = var5.minusWeeks((-22));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.PartialConverter[] var2 = var0.getPartialConverters();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.DateMidnight var7 = var4.minusWeeks((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    org.joda.time.DateMidnight var23 = var7.withFieldAdded(var21, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.PartialConverter var24 = var0.getPartialConverter((java.lang.Object)1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var0.toString("PT0.010S");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.Interval var38 = var36.toInterval();
    org.joda.time.MutableInterval var39 = var38.toMutableInterval();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var66 = var65.year();
    boolean var67 = var63.isBefore((org.joda.time.ReadableInstant)var65);
    org.joda.time.Interval var68 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var65);
    org.joda.time.Interval var69 = var68.toInterval();
    org.joda.time.Partial var70 = new org.joda.time.Partial();
    java.lang.String var71 = var70.toString();
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var73 = new org.joda.time.MutablePeriod(var72);
    org.joda.time.DurationFieldType[] var74 = var73.getFieldTypes();
    org.joda.time.Partial var75 = var70.plus((org.joda.time.ReadablePeriod)var73);
    org.joda.time.Interval var76 = var69.withPeriodAfterStart((org.joda.time.ReadablePeriod)var73);
    boolean var77 = var39.contains((org.joda.time.ReadableInterval)var69);
    org.joda.time.Period var78 = new org.joda.time.Period();
    var39.setPeriodAfterStart((org.joda.time.ReadablePeriod)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    org.joda.time.TimeOfDay var7 = new org.joda.time.TimeOfDay();
    int var8 = var7.size();
    org.joda.time.TimeOfDay var10 = var7.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var12 = var7.minusMinutes(1);
    org.joda.time.TimeOfDay var14 = var12.plusHours(2013);
    org.joda.time.Chronology var15 = var14.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var16 = new org.joda.time.LocalDateTime(12182, 20, 4, 8, 3, 51, 240, var15);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.Interval var38 = var36.toInterval();
    org.joda.time.MutableInterval var39 = var38.toMutableInterval();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var66 = var65.year();
    boolean var67 = var63.isBefore((org.joda.time.ReadableInstant)var65);
    org.joda.time.Interval var68 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var65);
    org.joda.time.Interval var69 = var68.toInterval();
    org.joda.time.Partial var70 = new org.joda.time.Partial();
    java.lang.String var71 = var70.toString();
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var73 = new org.joda.time.MutablePeriod(var72);
    org.joda.time.DurationFieldType[] var74 = var73.getFieldTypes();
    org.joda.time.Partial var75 = var70.plus((org.joda.time.ReadablePeriod)var73);
    org.joda.time.Interval var76 = var69.withPeriodAfterStart((org.joda.time.ReadablePeriod)var73);
    boolean var77 = var39.contains((org.joda.time.ReadableInterval)var69);
    boolean var79 = var39.isAfter(957L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    int var3 = org.joda.time.field.FieldUtils.getWrappedValue(11, 7, 25785);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 11);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    java.lang.String var8 = var6.toString();
    java.lang.String var10 = var6.toString("1970-01");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "03:23:17.833"+ "'", var8.equals("03:23:17.833"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "1970-01"+ "'", var10.equals("1970-01"));

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var26 = var25.toStandardDuration();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    boolean var33 = var26.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var41 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var46 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var45);
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var48 = var47.year();
    boolean var49 = var45.isBefore((org.joda.time.ReadableInstant)var47);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.Duration var60 = var51.plus((org.joda.time.ReadableDuration)var56);
    var47.add((org.joda.time.ReadableDuration)var56);
    org.joda.time.Seconds var62 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var47);
    org.joda.time.Weeks var63 = var62.toStandardWeeks();
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    boolean var68 = var65.isShorterThan((org.joda.time.ReadableDuration)var67);
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    boolean var73 = var70.isShorterThan((org.joda.time.ReadableDuration)var72);
    org.joda.time.Duration var74 = var65.plus((org.joda.time.ReadableDuration)var70);
    boolean var75 = var63.equals((java.lang.Object)var74);
    org.joda.time.LocalDateTime var77 = var34.withDurationAdded((org.joda.time.ReadableDuration)var74, 10);
    boolean var78 = var26.isShorterThan((org.joda.time.ReadableDuration)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(240, 19, 14, 216, 51);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear((-1));
    org.joda.time.LocalDateTime.Property var5 = var0.dayOfWeek();
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusSeconds(100);
    org.joda.time.Period var17 = var13.minusMillis(10);
    org.joda.time.LocalDateTime var18 = var6.plus((org.joda.time.ReadablePeriod)var17);
    org.joda.time.LocalDateTime var19 = var0.minus((org.joda.time.ReadablePeriod)var17);
    int var20 = var0.getCenturyOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 20);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var5.addMonths(104);
    var5.addMinutes(80);
    var5.addMinutes(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var60 = var54.isLeap((-79L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    org.joda.time.IllegalFieldValueException var4 = new org.joda.time.IllegalFieldValueException("8581 seconds", (java.lang.Number)51, (java.lang.Number)948, (java.lang.Number)69);
    java.lang.Number var5 = var4.getIllegalNumberValue();
    org.joda.time.DateTimeFieldType var6 = var4.getDateTimeFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 51+ "'", var5.equals(51));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.StrictChronology var3 = org.joda.time.chrono.StrictChronology.getInstance(var2);
    org.joda.time.DateTime var11 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate.Property var13 = var12.weekyear();
    long var15 = var3.set((org.joda.time.ReadablePartial)var12, 104L);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var17.toDuration();
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    boolean var25 = var3.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var2 = var0.minusHours(4);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var4 = var3.dayOfYear();
    org.joda.time.YearMonthDay var5 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var3);
    int var6 = var5.getYear();
    org.joda.time.Period var9 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    int var24 = var9.get(var23);
    org.joda.time.YearMonthDay var25 = var5.minus((org.joda.time.ReadablePeriod)var9);
    org.joda.time.DateTime var26 = var25.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var27);
    org.joda.time.DateTimeField var30 = var27.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.LocalDate var36 = var34.minusMonths(0);
    int[] var38 = var31.get((org.joda.time.ReadablePartial)var36, 100L);
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var43 = var42.hours();
    org.joda.time.LocalTime var44 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var42);
    org.joda.time.Period var45 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var42);
    org.joda.time.DateTimeField var46 = var42.millisOfSecond();
    org.joda.time.DateTimeField var47 = var42.secondOfDay();
    org.joda.time.field.SkipDateTimeField var49 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var31, var47, 100);
    org.joda.time.LocalDateTime var50 = org.joda.time.LocalDateTime.now();
    int var51 = var50.getDayOfYear();
    org.joda.time.Chronology var52 = var50.getChronology();
    int var53 = var50.getYearOfCentury();
    int var54 = var49.getMaximumValue((org.joda.time.ReadablePartial)var50);
    boolean var56 = var49.isLeap(1L);
    org.joda.time.LocalDateTime var57 = org.joda.time.LocalDateTime.now();
    int var58 = var57.getDayOfYear();
    int var59 = var49.getMinimumValue((org.joda.time.ReadablePartial)var57);
    org.joda.time.DurationField var60 = var49.getDurationField();
    org.joda.time.DateTimeFieldType var61 = var49.getType();
    org.joda.time.field.OffsetDateTimeField var65 = new org.joda.time.field.OffsetDateTimeField(var30, var61, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var68 = new org.joda.time.IllegalFieldValueException(var61, (java.lang.Number)35L, "secondOfDay");
    int var69 = var26.get(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var71 = var0.withField(var61, 2013);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 12198);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    int var41 = var40.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Minutes var5 = var2.toStandardMinutes();
    int var6 = var2.getMonths();
    org.joda.time.Period var8 = var2.minusMillis(69);
    org.joda.time.Period var10 = var8.plusSeconds(1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Duration var1 = org.joda.time.Duration.parse("\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var7 = var0.withHourOfDay(240);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.withMonthOfYear(1);
    org.joda.time.LocalDate var17 = var13.withWeekyear(1);
    org.joda.time.LocalDate var19 = var13.withDayOfYear(1);
    boolean var20 = var9.equals((java.lang.Object)var19);
    int var21 = var19.getEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var1 = org.joda.time.Interval.parse("PeriodType[Months]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    org.joda.time.MutableInterval var24 = new org.joda.time.MutableInterval();
    var24.setStartMillis((-1L));
    org.joda.time.Chronology var27 = var24.getChronology();
    boolean var28 = var22.equals((java.lang.Object)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setDurationBeforeEnd((-7200000L));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.PeriodType var12 = var10.withWeeksRemoved();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.LocalTime var18 = var16.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = org.joda.time.LocalTime.now();
    boolean var20 = var18.isAfter((org.joda.time.ReadablePartial)var19);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var21);
    org.joda.time.DurationField var24 = var21.hours();
    boolean var25 = var19.equals((java.lang.Object)var21);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.LocalTime var39 = var19.minus((org.joda.time.ReadablePeriod)var37);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    var42.setWeekOfWeekyear(1);
    int var45 = var42.getRoundingMode();
    var42.addMillis(100);
    var42.setSecondOfMinute(10);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var41, (org.joda.time.ReadableInstant)var42, var50);
    org.joda.time.Days var52 = var51.toStandardDays();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.Period var59 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var61 = var59.plusSeconds(100);
    org.joda.time.Period var63 = var59.minusMillis(10);
    boolean var64 = var54.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var65 = var54.dayOfYear();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.LocalDate var70 = var68.minusMonths(0);
    org.joda.time.DateTime var71 = var68.toDateTimeAtMidnight();
    org.joda.time.DateTime var73 = var71.withCenturyOfEra(4);
    org.joda.time.Days var74 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var54, (org.joda.time.ReadableInstant)var73);
    org.joda.time.Days var76 = var74.dividedBy(1);
    boolean var77 = var52.isGreaterThan(var74);
    org.joda.time.DurationFieldType var78 = var52.getFieldType();
    org.joda.time.Period var80 = var37.withField(var78, 0);
    org.joda.time.Minutes var81 = var37.toStandardMinutes();
    org.joda.time.Period var86 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var88 = var86.plusYears((-1));
    org.joda.time.Minutes var89 = var86.toStandardMinutes();
    org.joda.time.Minutes var91 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var92 = var89.minus(var91);
    org.joda.time.Minutes var93 = var81.minus(var92);
    org.joda.time.DurationFieldType var94 = var81.getFieldType();
    int var95 = var12.indexOf(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 3);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.Seconds var26 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var11);
    org.joda.time.Seconds var28 = var26.plus(2005);
    org.joda.time.Minutes var29 = var26.toStandardMinutes();
    java.lang.String var30 = var0.print((org.joda.time.ReadablePeriod)var26);
    java.lang.String var31 = var26.toString();
    org.joda.time.Seconds var33 = var26.dividedBy(13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "8597 seconds"+ "'", var30.equals("8597 seconds"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PT8597S"+ "'", var31.equals("PT8597S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    org.joda.time.DateTime var28 = org.joda.time.DateTime.now();
    long var29 = var28.getMillis();
    var10.setMillis((org.joda.time.ReadableInstant)var28);
    org.joda.time.DateTime var31 = var28.withTimeAtStartOfDay();
    org.joda.time.DateTime.Property var32 = var31.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377746597600L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var63 = var57.add((-62157023999896L), 240);
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    int var2 = org.joda.time.field.FieldUtils.safeAdd(21, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 20);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var4 = new org.joda.time.TimeOfDay(21, (-948), 928, 0);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var6 = new org.joda.time.DateTime(80, 1, 12182, 86399, 20, 4);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var41 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var43 = var42.year();
    boolean var44 = var40.isBefore((org.joda.time.ReadableInstant)var42);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    var47.setWeekOfWeekyear(1);
    int var50 = var47.getRoundingMode();
    var47.addMillis(100);
    var47.setSecondOfMinute(10);
    org.joda.time.PeriodType var55 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var56 = new org.joda.time.Period((org.joda.time.ReadableDuration)var46, (org.joda.time.ReadableInstant)var47, var55);
    org.joda.time.Days var57 = var56.toStandardDays();
    org.joda.time.Duration var58 = var57.toStandardDuration();
    org.joda.time.MutableInterval var59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadablePeriod)var57);
    boolean var60 = var36.overlaps((org.joda.time.ReadableInterval)var59);
    org.joda.time.Interval var61 = var36.toInterval();
    long var62 = var36.toDurationMillis();
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Duration var13 = var1.plus(100L);
    long var14 = var1.getStandardSeconds();
    org.joda.time.Duration var17 = new org.joda.time.Duration(1377768182707035L, 1386411782707L);
    boolean var18 = var1.isLongerThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var43 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var42);
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var45 = var44.year();
    boolean var46 = var42.isBefore((org.joda.time.ReadableInstant)var44);
    org.joda.time.Interval var47 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var44);
    boolean var48 = var47.isBeforeNow();
    org.joda.time.Duration var49 = var47.toDuration();
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.Duration var60 = var51.plus((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var61 = var49.minus((org.joda.time.ReadableDuration)var51);
    boolean var62 = var17.isLongerThan((org.joda.time.ReadableDuration)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-3600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var5.setChronology((org.joda.time.Chronology)var8);
    org.joda.time.MutablePeriod var10 = new org.joda.time.MutablePeriod(0L, var4, (org.joda.time.Chronology)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    int var16 = var13.getRoundingMode();
    var13.addMillis(100);
    var13.setSecondOfMinute(10);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var22 = new org.joda.time.Period((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var13, var21);
    org.joda.time.Days var23 = var22.toStandardDays();
    org.joda.time.Duration var24 = var23.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.DateTimeField var28 = var26.minuteOfHour();
    org.joda.time.LocalDate var29 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var26);
    var10.setPeriod((org.joda.time.ReadableDuration)var24, (org.joda.time.Chronology)var26);
    org.joda.time.DateTime var32 = var0.withDurationAdded((org.joda.time.ReadableDuration)var24, 228);
    int var33 = var32.getYearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377746597835L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2013);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    int var10 = var9.getDayOfWeek();
    org.joda.time.DateTime var11 = var9.toDateTimeAtCurrentTime();
    org.joda.time.DateTime var13 = var11.withYearOfEra(69781948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var15 = var11.withDayOfWeek(12196);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var41 = var38.add(1377746580754L, 1377673200216L);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.field.FieldUtils.verifyValueBounds("03:23:01.948", 100, 69781948, 28);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withDayOfYear(1);
    org.joda.time.LocalDate.Property var6 = var5.era();
    org.joda.time.LocalDate var8 = var5.minusMonths(19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }


    org.joda.time.YearMonth var5 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var7 = var5.withChronologyRetainFields((org.joda.time.Chronology)var6);
    org.joda.time.TimeOfDay var8 = new org.joda.time.TimeOfDay(100L, (org.joda.time.Chronology)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var9 = new org.joda.time.DateMidnight(318, 19, 759, (org.joda.time.Chronology)var6);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Interval var34 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var31);
    org.joda.time.DateTimeZone var35 = var31.getZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var36 = new org.joda.time.DateTime(759, 12182, 928, 1, 318, 86399, var35);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.PartialConverter[] var2 = var0.getPartialConverters();
    org.joda.time.convert.PartialConverter[] var3 = var0.getPartialConverters();
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.now();
    int var5 = var4.getDayOfYear();
    org.joda.time.LocalDateTime var7 = var4.minusSeconds(2005);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.PeriodConverter var8 = var0.getPeriodConverter((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var4 = new org.joda.time.LocalTime(4, 15795333, 86399, 3);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    org.joda.time.Days var1 = org.joda.time.Days.days((-9));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.MonthDay var3 = org.joda.time.MonthDay.now(var1);
    java.lang.String var5 = var3.toString("20:23:00.489");
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    org.joda.time.Duration var27 = var26.toStandardDuration();
    org.joda.time.MutableInterval var28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadablePeriod)var26);
    org.joda.time.Days var30 = var26.plus(23);
    org.joda.time.MonthDay var31 = var3.minus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.DateTimeFieldType[] var32 = var31.getFieldTypes();
    org.joda.time.MonthDay var34 = var31.plusMonths(951);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "20:23:00.489"+ "'", var5.equals("20:23:00.489"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.LocalTime var9 = var5.plusMillis(4);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var22 = var21.dayOfYear();
    org.joda.time.YearMonthDay var23 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var24 = var10.withChronologyRetainFields((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var26 = var24.plusMillis(2005);
    java.lang.String var27 = var24.toString();
    org.joda.time.TimeOfDay var29 = var24.plusSeconds(4);
    boolean var30 = var9.isBefore((org.joda.time.ReadablePartial)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var32 = var24.getFieldType(34);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "T03:23:18.688"+ "'", var27.equals("T03:23:18.688"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.dayOfWeek();
    var5.setDate(1377746581334L);
    int var23 = var5.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 8);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var10 = var8.withHourOfDay(14);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.LocalTime var14 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var12);
    org.joda.time.LocalTime var16 = var14.withMillisOfSecond(1);
    org.joda.time.LocalTime var18 = var16.minusHours((-1));
    org.joda.time.Partial var19 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var16);
    int var20 = var10.compareTo((org.joda.time.ReadablePartial)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(1377742995215L);
    org.joda.time.MutableDateTime var2 = var1.toMutableDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }


    org.joda.time.DateTime var7 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    int var8 = var7.getHourOfDay();
    org.joda.time.DateTime.Property var9 = var7.yearOfCentury();
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod(var10);
    var11.addDays(1);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    var11.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var20);
    var21.clear();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.MutableDateTime.Property var44 = var29.dayOfWeek();
    var21.setPeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var50 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var49);
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.LocalDate var53 = var52.toLocalDate();
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var55 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var52, (org.joda.time.ReadableInstant)var54);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var57 = var56.year();
    boolean var58 = var54.isBefore((org.joda.time.ReadableInstant)var56);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    boolean var63 = var60.isShorterThan((org.joda.time.ReadableDuration)var62);
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    boolean var68 = var65.isShorterThan((org.joda.time.ReadableDuration)var67);
    org.joda.time.Duration var69 = var60.plus((org.joda.time.ReadableDuration)var65);
    var56.add((org.joda.time.ReadableDuration)var65);
    org.joda.time.Seconds var71 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var56);
    org.joda.time.Seconds var72 = var71.negated();
    var21.mergePeriod((org.joda.time.ReadablePeriod)var72);
    org.joda.time.DateTime var74 = var7.plus((org.joda.time.ReadablePeriod)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.year();
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var4 = org.joda.time.DateTimeUtils.getZone(var3);
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now(var3);
    org.joda.time.format.DateTimeFormatter var6 = var1.withZone(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var7 = org.joda.time.YearMonth.parse("+00:00:00.759", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    var0.setDurationBeforeEnd(1L);
    long var4 = var0.toDurationMillis();
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval();
    boolean var6 = var0.isBefore((org.joda.time.ReadableInterval)var5);
    long var7 = var5.toDurationMillis();
    var5.setEndMillis(208L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.DateTimeFieldType[] var6 = var0.getFieldTypes();
    org.joda.time.DateTimeFieldType[] var7 = var0.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTime var1 = var0.toDateTimeISO();
    org.joda.time.Instant var4 = var0.withDurationAdded(1000L, 12196);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    var14.setWeeks(73381948);
    int var26 = var14.getWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 73381948);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.YearMonth var8 = org.joda.time.YearMonth.now(var6);
    int var9 = var8.size();
    org.joda.time.YearMonth.Property var10 = var8.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.seconds(216);
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.PeriodType var3 = var1.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var3 = org.joda.time.chrono.ISOChronology.getInstance(var2);
    org.joda.time.DurationField var4 = var3.millis();
    org.joda.time.YearMonth var5 = new org.joda.time.YearMonth(1377768182711L, (org.joda.time.Chronology)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.MutableInterval var21 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var22 = var21.copy();
    org.joda.time.DateTime var23 = var22.getStart();
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.months();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var35, var50);
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23, var50);
    org.joda.time.DateMidnight var54 = var4.withYear(33);
    org.joda.time.DateMidnight var56 = var54.minusDays(51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var58 = var56.withCenturyOfEra(15795333);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = var0.toString("PT8597S");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var3 = var0.toMutableDateTime(var2);
    org.joda.time.MutableDateTime.Property var4 = var3.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.DateMidnight var11 = var9.minusMonths(100);
    org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime.Property var13 = var0.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377746598382L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }


    org.joda.time.IllegalFieldValueException var4 = new org.joda.time.IllegalFieldValueException("8581 seconds", (java.lang.Number)51, (java.lang.Number)948, (java.lang.Number)69);
    java.lang.Number var5 = var4.getIllegalNumberValue();
    org.joda.time.DurationFieldType var6 = var4.getDurationFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 51+ "'", var5.equals(51));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.PartialConverter var3 = var0.getPartialConverter((java.lang.Object)2762381894421796L);
    org.joda.time.DateTime var4 = org.joda.time.DateTime.now();
    long var5 = var4.getMillis();
    org.joda.time.DateTime.Property var6 = var4.yearOfEra();
    org.joda.time.PeriodType var8 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var9.setChronology((org.joda.time.Chronology)var12);
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(0L, var8, (org.joda.time.Chronology)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.Days var27 = var26.toStandardDays();
    org.joda.time.Duration var28 = var27.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var30 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var31 = var30.hours();
    org.joda.time.DateTimeField var32 = var30.minuteOfHour();
    org.joda.time.LocalDate var33 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var30);
    var14.setPeriod((org.joda.time.ReadableDuration)var28, (org.joda.time.Chronology)var30);
    org.joda.time.DateTime var36 = var4.withDurationAdded((org.joda.time.ReadableDuration)var28, 228);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.DurationConverter var37 = var0.getDurationConverter((java.lang.Object)228);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1377746598427L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.DurationField var29 = var18.getDurationField();
    long var31 = var18.roundHalfCeiling(1377746597622L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1377746597241L);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    var37.addSeconds((-1));
    boolean var42 = var29.isAfter((org.joda.time.ReadableInstant)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var37.setMillisOfSecond(12182);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    int var7 = var6.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var8 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var10 = var9.getZone();
    org.joda.time.Chronology var11 = var8.withZone(var10);
    org.joda.time.Interval var12 = var6.toInterval(var10);
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.now(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    org.joda.time.Period var2 = new org.joda.time.Period(15946L, 35L);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    org.joda.time.chrono.ISOChronology var1 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay(1377742981000L, (org.joda.time.Chronology)var1);
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusYears((-1));
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Period var13 = var7.normalizedStandard(var12);
    org.joda.time.PeriodType var14 = var12.withMillisRemoved();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var12);
    org.joda.time.YearMonthDay var16 = var2.plus((org.joda.time.ReadablePeriod)var15);
    org.joda.time.YearMonthDay.Property var17 = var2.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.YearMonthDay var5 = var2.withYear(28);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    org.joda.time.MutableDateTime.Property var8 = var6.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.Weeks var21 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    org.joda.time.MutableDateTime.Property var24 = var22.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.Period var31 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var33 = var31.plusSeconds(100);
    org.joda.time.Period var35 = var31.minusMillis(10);
    boolean var36 = var26.equals((java.lang.Object)10);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var26);
    boolean var38 = var21.isLessThan(var37);
    org.joda.time.YearMonthDay var39 = var2.minus((org.joda.time.ReadablePeriod)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Hours var37 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.MonthDay var3 = org.joda.time.MonthDay.now(var1);
    java.lang.String var5 = var3.toString("20:23:00.489");
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    org.joda.time.Duration var27 = var26.toStandardDuration();
    org.joda.time.MutableInterval var28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadablePeriod)var26);
    org.joda.time.Days var30 = var26.plus(23);
    org.joda.time.MonthDay var31 = var3.minus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.DateTimeFieldType[] var32 = var31.getFieldTypes();
    java.lang.String var33 = var31.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "20:23:00.489"+ "'", var5.equals("20:23:00.489"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "--08-29"+ "'", var33.equals("--08-29"));

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.DurationFieldType var40 = var39.getFieldType();
    org.joda.time.Period var42 = var24.withField(var40, 0);
    org.joda.time.PeriodType var43 = var42.getPeriodType();
    org.joda.time.DateTime var44 = org.joda.time.DateTime.now();
    long var45 = var44.getMillis();
    org.joda.time.DateTime.Property var46 = var44.yearOfEra();
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    var49.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var49.setChronology((org.joda.time.Chronology)var52);
    org.joda.time.MutablePeriod var54 = new org.joda.time.MutablePeriod(0L, var48, (org.joda.time.Chronology)var52);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    var57.setWeekOfWeekyear(1);
    int var60 = var57.getRoundingMode();
    var57.addMillis(100);
    var57.setSecondOfMinute(10);
    org.joda.time.PeriodType var65 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var66 = new org.joda.time.Period((org.joda.time.ReadableDuration)var56, (org.joda.time.ReadableInstant)var57, var65);
    org.joda.time.Days var67 = var66.toStandardDays();
    org.joda.time.Duration var68 = var67.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var70 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var71 = var70.hours();
    org.joda.time.DateTimeField var72 = var70.minuteOfHour();
    org.joda.time.LocalDate var73 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var70);
    var54.setPeriod((org.joda.time.ReadableDuration)var68, (org.joda.time.Chronology)var70);
    org.joda.time.DateTime var76 = var44.withDurationAdded((org.joda.time.ReadableDuration)var68, 228);
    org.joda.time.LocalDate var77 = var44.toLocalDate();
    org.joda.time.DateTime var79 = var44.minusYears(228);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var42, (org.joda.time.ReadableInstant)var79);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1377746598626L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    org.joda.time.DateTime var8 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    int var9 = var8.getHourOfDay();
    org.joda.time.DateTime.Property var10 = var8.yearOfCentury();
    org.joda.time.LocalDate var11 = var8.toLocalDate();
    org.joda.time.tz.FixedDateTimeZone var16 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.chrono.ISOChronology var17 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var16);
    org.joda.time.DateTime var18 = var8.withZoneRetainFields((org.joda.time.DateTimeZone)var16);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime(1377746591931L, (org.joda.time.DateTimeZone)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.StrictChronology var3 = org.joda.time.chrono.StrictChronology.getInstance(var2);
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.DateTimeField var6 = var4.minuteOfHour();
    boolean var7 = var3.equals((java.lang.Object)var4);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearDayTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toStringList();
    int var2 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.DateTime var12 = var5.plusHours(2005);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var17 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var16);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.Seconds var38 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var39 = var38.toStandardDuration();
    org.joda.time.DateTime var40 = var12.minus((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var43 = var39.withDurationAdded(1377746597241L, 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var5 = var4.dayOfYear();
    org.joda.time.YearMonthDay var6 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var4);
    int var7 = var6.getDayOfMonth();
    int var8 = var6.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var13 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var14);
    var15.addDays(1);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    var15.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var24);
    var25.clear();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var32 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var31);
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var34 = var33.year();
    boolean var35 = var31.isBefore((org.joda.time.ReadableInstant)var33);
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    boolean var45 = var42.isShorterThan((org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var46 = var37.plus((org.joda.time.ReadableDuration)var42);
    var33.add((org.joda.time.ReadableDuration)var42);
    org.joda.time.MutableDateTime.Property var48 = var33.dayOfWeek();
    var25.setPeriod((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var33);
    boolean var50 = var13.equals((java.lang.Object)var25);
    boolean var51 = var13.isFixed();
    boolean var52 = var13.isFixed();
    org.joda.time.DateTime var53 = var6.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var13);
    org.joda.time.DateMidnight var54 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var13);
    boolean var55 = var0.isAfter((org.joda.time.ReadableInstant)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }


    org.joda.time.chrono.GregorianChronology var0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.year();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var7 = var0.getDateTimeMillis(208L, 1, 8400, 33, 228);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var6 = new org.joda.time.DateTime(73394, 2005, 10, 14, 20, 13);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    var11.addDays(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.Period var12 = var4.minusMillis((-948));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    org.joda.time.LocalDateTime var32 = var28.withYear((-1));
    int var33 = var19.compareTo((org.joda.time.ReadablePartial)var28);
    java.util.Date var34 = var28.toDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMillisRemoved();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var9);
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod(var9);
    var13.setYears(69);
    org.joda.time.MutablePeriod var16 = var13.toMutablePeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }


    org.joda.time.MonthDay var0 = new org.joda.time.MonthDay();
    org.joda.time.LocalDate var2 = var0.toLocalDate(14400001);
    org.joda.time.DateTimeFieldType[] var3 = var0.getFieldTypes();
    int[] var4 = new int[] { };
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var7.setChronology((org.joda.time.Chronology)var10);
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(0L, var6, (org.joda.time.Chronology)var10);
    org.joda.time.LocalTime var13 = new org.joda.time.LocalTime((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var14 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    int var15 = var14.getDayOfWeek();
    org.joda.time.DateTime var16 = var14.toDateTimeAtCurrentTime();
    org.joda.time.DateTime var18 = var16.withYearOfEra(69781948);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    var19.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var19.setChronology((org.joda.time.Chronology)var22);
    org.joda.time.MonthDay var24 = new org.joda.time.MonthDay((java.lang.Object)var18, (org.joda.time.Chronology)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var25 = new org.joda.time.Partial(var3, var4, (org.joda.time.Chronology)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    org.joda.time.chrono.GregorianChronology var0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var2 = var1.year();
    org.joda.time.MutableDateTime.Property var3 = var1.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.Period var10 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var12 = var10.plusSeconds(100);
    org.joda.time.Period var14 = var10.minusMillis(10);
    boolean var15 = var5.equals((java.lang.Object)10);
    org.joda.time.Weeks var16 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var18 = var17.year();
    org.joda.time.MutableDateTime.Property var19 = var17.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.Period var26 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var28 = var26.plusSeconds(100);
    org.joda.time.Period var30 = var26.minusMillis(10);
    boolean var31 = var21.equals((java.lang.Object)10);
    org.joda.time.Weeks var32 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var21);
    org.joda.time.Weeks var33 = var16.minus(var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    org.joda.time.MutableDateTime.Property var36 = var34.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.Period var43 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var45 = var43.plusSeconds(100);
    org.joda.time.Period var47 = var43.minusMillis(10);
    boolean var48 = var38.equals((java.lang.Object)10);
    org.joda.time.Weeks var49 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    org.joda.time.MutableDateTime.Property var52 = var50.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.Period var59 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var61 = var59.plusSeconds(100);
    org.joda.time.Period var63 = var59.minusMillis(10);
    boolean var64 = var54.equals((java.lang.Object)10);
    org.joda.time.Weeks var65 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var50, (org.joda.time.ReadableInstant)var54);
    org.joda.time.Weeks var66 = var49.minus(var65);
    boolean var67 = var33.isGreaterThan(var49);
    org.joda.time.Minutes var68 = var49.toStandardMinutes();
    int[] var70 = var0.get((org.joda.time.ReadablePeriod)var49, 1377673200216L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    org.joda.time.Period var1 = org.joda.time.Period.months(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    int var18 = var15.getHourOfDay();
    int var19 = var15.getCenturyOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var0);
    org.joda.time.YearMonth var4 = var2.plusMonths(100);
    int var5 = var2.size();
    org.joda.time.DateTimeFieldType[] var6 = var2.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.LocalDate var12 = var10.minusMonths(0);
    int[] var14 = var7.get((org.joda.time.ReadablePartial)var12, 100L);
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var19 = var18.hours();
    org.joda.time.LocalTime var20 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var18);
    org.joda.time.Period var21 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var18);
    org.joda.time.DateTimeField var22 = var18.millisOfSecond();
    org.joda.time.DateTimeField var23 = var18.secondOfDay();
    org.joda.time.field.SkipDateTimeField var25 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var7, var23, 100);
    org.joda.time.DurationField var26 = var25.getRangeDurationField();
    int var28 = var25.getMaximumValue(2762381894421796L);
    boolean var29 = var25.isSupported();
    org.joda.time.Instant var30 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var32 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var33 = var30.toMutableDateTime(var32);
    org.joda.time.MonthDay var34 = org.joda.time.MonthDay.now(var32);
    int[] var38 = new int[] { 1, 1, 0};
    int var39 = var25.getMaximumValue((org.joda.time.ReadablePartial)var34, var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var40 = new org.joda.time.Partial(var6, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 86399);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    int var42 = var38.get((-1L));
    java.lang.String var44 = var38.getAsText(1377746581948L);
    org.joda.time.field.DelegatedDateTimeField var45 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1883);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "1832"+ "'", var44.equals("1832"));

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.DateTimeFieldType[] var2 = var1.getFieldTypes();
    org.joda.time.DateTimeZone var5 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeUtils.getZone(var5);
    org.joda.time.LocalDate var7 = new org.joda.time.LocalDate(35L, var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Seconds var8 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusSeconds(100);
    org.joda.time.Period var11 = var7.minusMillis(10);
    boolean var12 = var2.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var13 = var2.dayOfYear();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    org.joda.time.DateTime var19 = var16.toDateTimeAtMidnight();
    org.joda.time.DateTime var21 = var19.withCenturyOfEra(4);
    org.joda.time.Days var22 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var21);
    org.joda.time.DateTime var24 = var21.plusSeconds(10);
    org.joda.time.DateTime var26 = var24.minusMinutes(16);
    org.joda.time.DateTime.Property var27 = var24.era();
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var29 = var28.minutes();
    org.joda.time.DateTimeField var30 = var28.year();
    org.joda.time.DurationField var31 = var28.hours();
    org.joda.time.DateTime var32 = var24.withChronology((org.joda.time.Chronology)var28);
    org.joda.time.DateTime var34 = var32.plusMinutes(2);
    org.joda.time.LocalDateTime var36 = org.joda.time.LocalDateTime.now();
    int var37 = var36.getDayOfYear();
    org.joda.time.Chronology var38 = var36.getChronology();
    org.joda.time.chrono.StrictChronology var39 = org.joda.time.chrono.StrictChronology.getInstance(var38);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.LocalDate var44 = var42.withMonthOfYear(1);
    org.joda.time.LocalDate var46 = var42.withWeekyear(1);
    org.joda.time.LocalDate var48 = var42.withDayOfYear(1);
    org.joda.time.LocalDate var50 = var48.minusMonths(16);
    boolean var51 = var39.equals((java.lang.Object)16);
    org.joda.time.YearMonth var52 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var39);
    org.joda.time.Chronology var53 = var39.withUTC();
    org.joda.time.DateTime var54 = var32.toDateTime(var53);
    org.joda.time.Period var55 = new org.joda.time.Period(957L, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Duration var13 = var1.plus(100L);
    long var14 = var1.getStandardSeconds();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var16 = var15.dayOfYear();
    org.joda.time.YearMonthDay var17 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var15);
    org.joda.time.YearMonthDay var19 = var17.plusDays((-1));
    org.joda.time.DateMidnight var20 = var19.toDateMidnight();
    boolean var21 = var20.isAfterNow();
    org.joda.time.DateMidnight var23 = var20.minus(1377768182707L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var24 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-3600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    var11.setDays(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.setSeconds(1);
    int var14 = var11.getSeconds();
    int var15 = var11.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    org.joda.time.LocalDateTime var26 = var19.plusSeconds(228);
    org.joda.time.LocalDateTime var28 = var26.minusHours(16);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.LocalDate var33 = var31.minusMonths(0);
    org.joda.time.DateTime var34 = var31.toDateTimeAtMidnight();
    org.joda.time.DateTime var36 = var34.withMillis(100L);
    org.joda.time.DateTime.Property var37 = var36.era();
    org.joda.time.TimeOfDay var38 = var36.toTimeOfDay();
    org.joda.time.TimeOfDay var40 = var38.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var50 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var49);
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var52 = var51.year();
    boolean var53 = var49.isBefore((org.joda.time.ReadableInstant)var51);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    boolean var63 = var60.isShorterThan((org.joda.time.ReadableDuration)var62);
    org.joda.time.Duration var64 = var55.plus((org.joda.time.ReadableDuration)var60);
    var51.add((org.joda.time.ReadableDuration)var60);
    org.joda.time.Seconds var66 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var51);
    org.joda.time.Duration var67 = var66.toStandardDuration();
    org.joda.time.TimeOfDay var69 = var40.withPeriodAdded((org.joda.time.ReadablePeriod)var66, 948);
    org.joda.time.LocalTime var70 = var40.toLocalTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Seconds var71 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial)var28, (org.joda.time.ReadablePartial)var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var1 = org.joda.time.MonthDay.parse("8597 seconds");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    java.lang.String var20 = var18.toString();
    long var22 = var18.roundHalfFloor(1377746581334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var20.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1377746581241L);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    int var42 = var38.get((-1L));
    java.lang.String var44 = var38.getAsShortText(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1883);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "884"+ "'", var44.equals("884"));

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    org.joda.time.Hours var1 = org.joda.time.Hours.parseHours("PT0H");
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var5 = new org.joda.time.MonthDay((java.lang.Object)var1, (org.joda.time.Chronology)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.DateMidnight var11 = var9.minusMonths(100);
    org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    boolean var14 = var12.isBefore(1377768182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377746599386L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.weekyear();
    org.joda.time.MutableDateTime.Property var21 = var5.year();
    boolean var23 = var5.equals((java.lang.Object)(byte)0);
    long var24 = var5.getMillis();
    org.joda.time.MutableDateTime.Property var25 = var5.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1377742999393L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonthDay var46 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.MonthDay var47 = org.joda.time.MonthDay.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonth var48 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.TimeOfDay var49 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.field.FieldUtils.verifyValueBounds("2013-08-28T20:23:01.948-07:00/2013-08-28T20:23:01.948-07:00", 12200, 12196171, 69);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var19 = var10.plus((org.joda.time.ReadableDuration)var15);
    var6.add((org.joda.time.ReadableDuration)var15);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Interval var29 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var26);
    boolean var31 = var29.isAfter(10L);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var32.setChronology((org.joda.time.Chronology)var35);
    org.joda.time.Interval var37 = var29.withChronology((org.joda.time.Chronology)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    var40.setWeekOfWeekyear(1);
    int var43 = var40.getRoundingMode();
    var40.addMillis(100);
    var40.setSecondOfMinute(10);
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var49 = new org.joda.time.Period((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var40, var48);
    org.joda.time.Days var50 = var49.toStandardDays();
    org.joda.time.Hours var51 = var50.toStandardHours();
    java.lang.String var52 = var51.toString();
    org.joda.time.Days var53 = var51.toStandardDays();
    org.joda.time.Minutes var54 = var53.toStandardMinutes();
    org.joda.time.Duration var55 = var54.toStandardDuration();
    org.joda.time.Interval var56 = var29.withDurationAfterStart((org.joda.time.ReadableDuration)var55);
    org.joda.time.Instant var57 = var0.plus((org.joda.time.ReadableDuration)var55);
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var59 = new org.joda.time.MutablePeriod(var58);
    var59.addDays(1);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    var59.add((org.joda.time.ReadableDuration)var65);
    org.joda.time.MutableDateTime var68 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var65, (org.joda.time.ReadableInstant)var68);
    org.joda.time.Instant var70 = var57.minus((org.joda.time.ReadableDuration)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PT0H"+ "'", var52.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.Interval var38 = var36.toInterval();
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var43 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var42);
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var45 = var44.year();
    boolean var46 = var42.isBefore((org.joda.time.ReadableInstant)var44);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var57 = var48.plus((org.joda.time.ReadableDuration)var53);
    var44.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.LocalDate var61 = var60.toLocalDate();
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var63 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var60, (org.joda.time.ReadableInstant)var62);
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var65 = var64.year();
    boolean var66 = var62.isBefore((org.joda.time.ReadableInstant)var64);
    org.joda.time.Interval var67 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var44, (org.joda.time.ReadableInstant)var64);
    boolean var68 = var67.isBeforeNow();
    org.joda.time.Duration var69 = var67.toDuration();
    org.joda.time.Interval var70 = var38.withDurationAfterStart((org.joda.time.ReadableDuration)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var72 = var70.withEndMillis(35L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendSecondOfDay(73394);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.tz.FixedDateTimeZone var15 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var23, (org.joda.time.ReadableInstant)var26);
    var27.clear();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.MutableDateTime.Property var50 = var35.dayOfWeek();
    var27.setPeriod((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var35);
    boolean var52 = var15.equals((java.lang.Object)var27);
    org.joda.time.Chronology var53 = var9.withZone((org.joda.time.DateTimeZone)var15);
    org.joda.time.Chronology var54 = var9.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    boolean var42 = var4.isFixed();
    org.joda.time.chrono.ISOChronology var43 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withDayOfYear(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeField var7 = var3.getField(928);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var3 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime.Property var12 = var9.minuteOfHour();
    org.joda.time.MutableDateTime.Property var13 = var9.millisOfSecond();
    org.joda.time.Chronology var14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(9L, var2, var14);
    org.joda.time.YearMonth var16 = new org.joda.time.YearMonth(99L, var14);
    org.joda.time.MonthDay var17 = org.joda.time.MonthDay.now(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var19 = var17.withMonthOfYear(70541200);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.tz.FixedDateTimeZone var6 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var7 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(var7);
    var8.addDays(1);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    var8.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var17);
    var18.clear();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    boolean var33 = var30.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var39 = var30.plus((org.joda.time.ReadableDuration)var35);
    var26.add((org.joda.time.ReadableDuration)var35);
    org.joda.time.MutableDateTime.Property var41 = var26.dayOfWeek();
    var18.setPeriod((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var26);
    boolean var43 = var6.equals((java.lang.Object)var18);
    boolean var44 = var6.isFixed();
    org.joda.time.LocalTime var45 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone)var6);
    org.joda.time.DateTime var46 = var1.toDateTimeAtStartOfDay((org.joda.time.DateTimeZone)var6);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance((org.joda.time.DateTimeZone)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    int var5 = var0.getMillisOfDay();
    org.joda.time.LocalDateTime var7 = var0.withYear(1);
    org.joda.time.YearMonth var9 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var11 = var9.withChronologyRetainFields((org.joda.time.Chronology)var10);
    java.lang.String var12 = var11.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var13 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 12200592);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "1970-01"+ "'", var12.equals("1970-01"));

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    var14.clear();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var64 = var14.toDurationFrom((org.joda.time.ReadableInstant)var52);
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var67);
    var14.add(1L, (org.joda.time.Chronology)var67);
    org.joda.time.MutablePeriod var70 = var14.copy();
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Days var83 = var82.toStandardDays();
    org.joda.time.DurationFieldType var84 = var83.getFieldType();
    int var85 = var70.indexOf(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 2);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var9 = var0.getDateTimeMillis((-86390600L), 51, 2005, 2013, 2013);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.parse("T20:23:12.318", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    int var2 = org.joda.time.field.FieldUtils.safeAdd(0, 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 35);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    long var25 = var22.getMillis((-9));
    java.lang.String var26 = var22.toString();
    java.lang.String var27 = var22.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-9L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DurationField[days]"+ "'", var26.equals("DurationField[days]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "days"+ "'", var27.equals("days"));

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    org.joda.time.LocalTime var9 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.CopticChronology var11 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)var5, 318);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.TimeOfDay var10 = var0.plus((org.joda.time.ReadablePeriod)var7);
    int var11 = var7.getHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.YearMonthDay var5 = var2.withYear(28);
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "2005-12-23"+ "'", var6.equals("2005-12-23"));

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    org.joda.time.MonthDay var0 = new org.joda.time.MonthDay();
    int var1 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.DateTime var7 = var6.toDateTimeAtMidnight();
    org.joda.time.LocalDate var9 = var6.plusDays(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var7 = org.joda.time.LocalDateTime.now();
    int var8 = var7.getDayOfYear();
    org.joda.time.Chronology var9 = var7.getChronology();
    int var10 = var7.getYearOfCentury();
    int var11 = var7.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var13 = var7.minusMinutes(1);
    org.joda.time.Years var14 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var5, (org.joda.time.ReadablePartial)var7);
    org.joda.time.LocalDateTime var16 = var7.plusWeeks(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight.Property var22 = var4.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    org.joda.time.Months var2 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    org.joda.time.Months var4 = var2.plus(2013);
    org.joda.time.TimeOfDay var5 = new org.joda.time.TimeOfDay();
    int var6 = var5.size();
    org.joda.time.chrono.EthiopicChronology var8 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var9 = var8.hours();
    org.joda.time.LocalTime var10 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var8);
    org.joda.time.LocalTime var12 = var10.withMillisOfSecond(1);
    org.joda.time.LocalTime var14 = var12.minusHours((-1));
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var5, (org.joda.time.ReadablePartial)var14);
    int var16 = var5.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var18 = var5.withChronologyRetainFields((org.joda.time.Chronology)var17);
    org.joda.time.Months var20 = org.joda.time.Months.months((-1));
    org.joda.time.Months var22 = var20.plus(100);
    int var23 = var20.size();
    org.joda.time.TimeOfDay var25 = var5.withPeriodAdded((org.joda.time.ReadablePeriod)var20, 2013);
    org.joda.time.Months var26 = var4.plus(var20);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    var27.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var27.setChronology((org.joda.time.Chronology)var30);
    org.joda.time.DateTimeField var32 = var30.clockhourOfHalfday();
    org.joda.time.DateTimeField var33 = var30.minuteOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var34 = new org.joda.time.LocalDate((java.lang.Object)var26, (org.joda.time.Chronology)var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 940);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var0.minusMonths(33);
    org.joda.time.DateTime var6 = var0.minus((-60779281008478L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusSeconds(100);
    org.joda.time.Period var17 = var13.minusMillis(10);
    boolean var18 = var8.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var19 = var8.dayOfYear();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    org.joda.time.DateTime var25 = var22.toDateTimeAtMidnight();
    org.joda.time.DateTime var27 = var25.withCenturyOfEra(4);
    org.joda.time.Days var28 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var27);
    org.joda.time.DateTime var30 = var27.plusSeconds(10);
    org.joda.time.tz.FixedDateTimeZone var35 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.DateTime var36 = var27.toDateTime((org.joda.time.DateTimeZone)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var37 = new org.joda.time.DateTime(19, 8, 104, 19, 86399, 630, 70541200, (org.joda.time.DateTimeZone)var35);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    int var5 = var0.getMillisOfDay();
    org.joda.time.LocalDateTime var7 = var0.withYear(1);
    org.joda.time.LocalDateTime var9 = var0.minusHours(69);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.withMonthOfYear(1);
    org.joda.time.LocalDate var16 = var12.withWeekyear(1);
    org.joda.time.LocalDate var18 = var12.withDayOfYear(1);
    org.joda.time.LocalDate var20 = var18.minusMonths(16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Seconds var21 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 12200998);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.days();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DurationFieldType var2 = var0.getFieldType(928);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    java.lang.String var18 = var17.toString();
    org.joda.time.YearMonth var20 = var17.plusYears(21);
    org.joda.time.format.DateTimeFormatter var21 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.chrono.LenientChronology var30 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var25);
    org.joda.time.format.DateTimeFormatter var31 = var21.withChronology((org.joda.time.Chronology)var30);
    org.joda.time.chrono.ISOChronology var32 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var37 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var39 = var37.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var40 = var32.withZone((org.joda.time.DateTimeZone)var37);
    long var42 = var37.nextTransition(9L);
    org.joda.time.Chronology var43 = var30.withZone((org.joda.time.DateTimeZone)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var44 = new org.joda.time.LocalDateTime((java.lang.Object)21, (org.joda.time.DateTimeZone)var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "1970-01"+ "'", var18.equals("1970-01"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var2.plusHours(2013);
    int var5 = var4.getCenturyOfEra();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.DateMidnight var10 = var7.minusWeeks((-1));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    int var16 = var13.getRoundingMode();
    var13.addMillis(100);
    var13.setSecondOfMinute(10);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var22 = new org.joda.time.Period((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var13, var21);
    org.joda.time.Days var23 = var22.toStandardDays();
    org.joda.time.DurationFieldType var24 = var23.getFieldType();
    org.joda.time.DateMidnight var26 = var10.withFieldAdded(var24, 1);
    org.joda.time.DateMidnight.Property var27 = var10.monthOfYear();
    int var28 = var10.getYearOfCentury();
    org.joda.time.Weeks var29 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var31 = var4.withMonthOfYear(948);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Chronology var18 = var4.withUTC();
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    var21.setWeekOfWeekyear(1);
    int var24 = var21.getRoundingMode();
    var21.addMillis(100);
    var21.setSecondOfMinute(10);
    org.joda.time.PeriodType var29 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var30 = new org.joda.time.Period((org.joda.time.ReadableDuration)var20, (org.joda.time.ReadableInstant)var21, var29);
    org.joda.time.Days var31 = var30.toStandardDays();
    org.joda.time.Hours var32 = var31.toStandardHours();
    java.lang.String var33 = var32.toString();
    org.joda.time.Days var34 = var32.toStandardDays();
    org.joda.time.Hours var36 = var32.multipliedBy(2013);
    org.joda.time.Seconds var37 = var36.toStandardSeconds();
    org.joda.time.Weeks var38 = var37.toStandardWeeks();
    boolean var39 = var4.equals((java.lang.Object)var37);
    org.joda.time.chrono.EthiopicChronology var44 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.LocalDate var49 = var47.minusMonths(0);
    int[] var51 = var44.get((org.joda.time.ReadablePartial)var49, 100L);
    org.joda.time.DateTime var52 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var44);
    org.joda.time.chrono.EthiopicChronology var56 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var57 = var56.hours();
    org.joda.time.LocalTime var58 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var56);
    org.joda.time.Period var59 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var56);
    org.joda.time.DateTimeField var60 = var56.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var44, var60);
    org.joda.time.YearMonthDay var62 = new org.joda.time.YearMonthDay(240, 4, 9, (org.joda.time.Chronology)var44);
    int[] var65 = new int[] { 100, 100};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.validate((org.joda.time.ReadablePartial)var62, var65);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PT0H"+ "'", var33.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var10 = new org.joda.time.YearMonth(var9);
    org.joda.time.Chronology var11 = var7.withZone(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var12 = new org.joda.time.LocalDateTime(21, 12196, 884, 34, 51, 16, 51, (org.joda.time.Chronology)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var7 = var6.hours();
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var6);
    org.joda.time.LocalTime var10 = var8.withMillisOfSecond(1);
    org.joda.time.LocalTime var11 = org.joda.time.LocalTime.now();
    boolean var12 = var10.isAfter((org.joda.time.ReadablePartial)var11);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var13);
    org.joda.time.DurationField var16 = var13.hours();
    boolean var17 = var11.equals((java.lang.Object)var13);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.LocalTime var31 = var11.minus((org.joda.time.ReadablePeriod)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.Period var51 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var53 = var51.plusSeconds(100);
    org.joda.time.Period var55 = var51.minusMillis(10);
    boolean var56 = var46.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var57 = var46.dayOfYear();
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var59 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var58);
    org.joda.time.LocalDate var60 = var59.toLocalDate();
    org.joda.time.LocalDate var62 = var60.minusMonths(0);
    org.joda.time.DateTime var63 = var60.toDateTimeAtMidnight();
    org.joda.time.DateTime var65 = var63.withCenturyOfEra(4);
    org.joda.time.Days var66 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var65);
    org.joda.time.Days var68 = var66.dividedBy(1);
    boolean var69 = var44.isGreaterThan(var66);
    org.joda.time.DurationFieldType var70 = var44.getFieldType();
    org.joda.time.Period var72 = var29.withField(var70, 0);
    org.joda.time.Minutes var73 = var29.toStandardMinutes();
    org.joda.time.Period var78 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var80 = var78.plusYears((-1));
    org.joda.time.Minutes var81 = var78.toStandardMinutes();
    org.joda.time.Minutes var83 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var84 = var81.minus(var83);
    org.joda.time.Minutes var85 = var73.minus(var84);
    org.joda.time.DurationFieldType var86 = var73.getFieldType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var88 = var2.withFieldAdded(var86, 15795333);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.LocalDateTime var9 = var6.minusSeconds(2005);
    org.joda.time.Chronology var10 = var6.getChronology();
    org.joda.time.DateTimeZone var12 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var13 = org.joda.time.MutableDateTime.now(var12);
    org.joda.time.DateTime var14 = var6.toDateTime(var12);
    org.joda.time.DateTime var15 = var5.toDateTime(var12);
    org.joda.time.MonthDay var16 = org.joda.time.MonthDay.now(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    org.joda.time.DateTimeUtils.setCurrentMillisOffset(15946L);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime(20792L);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    boolean var26 = var18.isSupported();
    long var29 = var18.getDifferenceAsLong(1377742981948L, 9L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var30 = new org.joda.time.Period((java.lang.Object)var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377742981L);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonthDay var46 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    org.joda.time.LocalDateTime var50 = var47.minusSeconds(2005);
    org.joda.time.Chronology var51 = var47.getChronology();
    org.joda.time.DateTimeZone var53 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var54 = org.joda.time.MutableDateTime.now(var53);
    org.joda.time.DateTime var55 = var47.toDateTime(var53);
    int var56 = var47.getSecondOfMinute();
    org.joda.time.LocalDateTime var58 = var47.minusHours(240);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var59 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var46, (org.joda.time.ReadablePartial)var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.DateMidnight var46 = var43.withYearOfCentury(13);
    org.joda.time.DateMidnight.Property var47 = var43.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime.Property var3 = var0.centuryOfEra();
    org.joda.time.LocalDateTime var5 = var0.plusMinutes(2013);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    var11.addDays(104);
    org.joda.time.MutableDateTime.Property var28 = var11.minuteOfDay();
    org.joda.time.DateTimeZone var30 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var31 = org.joda.time.DateTimeUtils.getZone(var30);
    java.lang.String var32 = var30.toString();
    var11.setZone(var30);
    org.joda.time.format.DateTimeFormatterBuilder var34 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var36 = var34.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var38 = var34.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var42 = var39.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var43 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.minusMonths(0);
    int[] var50 = var43.get((org.joda.time.ReadablePartial)var48, 100L);
    org.joda.time.chrono.EthiopicChronology var54 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var55 = var54.hours();
    org.joda.time.LocalTime var56 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var54);
    org.joda.time.Period var57 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var54);
    org.joda.time.DateTimeField var58 = var54.millisOfSecond();
    org.joda.time.DateTimeField var59 = var54.secondOfDay();
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var43, var59, 100);
    org.joda.time.LocalDateTime var62 = org.joda.time.LocalDateTime.now();
    int var63 = var62.getDayOfYear();
    org.joda.time.Chronology var64 = var62.getChronology();
    int var65 = var62.getYearOfCentury();
    int var66 = var61.getMaximumValue((org.joda.time.ReadablePartial)var62);
    boolean var68 = var61.isLeap(1L);
    org.joda.time.LocalDateTime var69 = org.joda.time.LocalDateTime.now();
    int var70 = var69.getDayOfYear();
    int var71 = var61.getMinimumValue((org.joda.time.ReadablePartial)var69);
    org.joda.time.DurationField var72 = var61.getDurationField();
    org.joda.time.DateTimeFieldType var73 = var61.getType();
    org.joda.time.field.OffsetDateTimeField var77 = new org.joda.time.field.OffsetDateTimeField(var42, var73, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var80 = new org.joda.time.IllegalFieldValueException(var73, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var83 = var34.appendFraction(var73, 33, (-948));
    boolean var84 = var11.isSupported(var73);
    org.joda.time.LocalDateTime var86 = var5.withField(var73, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.field.FieldUtils.verifyValueBounds(var73, (-3), 13, 240);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "+00:00:00.759"+ "'", var32.equals("+00:00:00.759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setDurationBeforeEnd(1L);
    org.joda.time.DateTime var3 = var0.getEnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    org.joda.time.TimeOfDay var2 = new org.joda.time.TimeOfDay();
    int var3 = var2.size();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var9 = var7.withMillisOfSecond(1);
    org.joda.time.LocalTime var11 = var9.minusHours((-1));
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var2, (org.joda.time.ReadablePartial)var11);
    int var13 = var2.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var15 = var2.withChronologyRetainFields((org.joda.time.Chronology)var14);
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(100L, (-62157023999896L), (org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var17 = var14.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 147);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    int var42 = var38.getMaximumValue((-7200000L));
    int var44 = var38.getMinimumValue(1325559981L);
    boolean var46 = var38.isLeap(1980000000L);
    org.joda.time.DurationField var47 = var38.getLeapDurationField();
    org.joda.time.chrono.EthiopicChronology var49 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var50 = var49.hours();
    org.joda.time.DateTimeField var51 = var49.minuteOfHour();
    org.joda.time.LocalDate var52 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var49);
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var57 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var54, (org.joda.time.ReadableInstant)var56);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var59 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var58);
    org.joda.time.LocalDate var60 = var59.toLocalDate();
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var62 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var59, (org.joda.time.ReadableInstant)var61);
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var64 = var63.year();
    boolean var65 = var61.isBefore((org.joda.time.ReadableInstant)var63);
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    boolean var70 = var67.isShorterThan((org.joda.time.ReadableDuration)var69);
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    boolean var75 = var72.isShorterThan((org.joda.time.ReadableDuration)var74);
    org.joda.time.Duration var76 = var67.plus((org.joda.time.ReadableDuration)var72);
    var63.add((org.joda.time.ReadableDuration)var72);
    org.joda.time.Seconds var78 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var54, (org.joda.time.ReadableInstant)var63);
    org.joda.time.Seconds var80 = var78.plus(2005);
    org.joda.time.LocalDate var82 = var52.withPeriodAdded((org.joda.time.ReadablePeriod)var78, 104);
    org.joda.time.TimeOfDay var84 = new org.joda.time.TimeOfDay();
    int var85 = var84.size();
    org.joda.time.TimeOfDay var87 = var84.withMillisOfSecond(1);
    int[] var88 = var87.getValues();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var90 = var38.addWrapPartial((org.joda.time.ReadablePartial)var82, 12182, var88, 100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 884);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var5 = new org.joda.time.DateTime(35, 100, 104, 884, 147);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var6 = new org.joda.time.DateTime(2, 147, 22, 14400001, 12182, 104);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var4.toDateTimeAtMidnight();
    org.joda.time.LocalDate var7 = var4.plusDays(951);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }


    org.joda.time.MonthDay var1 = new org.joda.time.MonthDay(2762381894421796L);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.years();
    org.joda.time.DateTimeField var4 = var0.monthOfYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.field.FieldUtils.verifyValueBounds(var4, 73392, 80, (-3));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }


    org.joda.time.MutableDateTime var0 = org.joda.time.MutableDateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var4 = var2.plusDays(2013);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    org.joda.time.DateMidnight var25 = var9.withFieldAdded(var23, 1);
    org.joda.time.field.PreciseDurationField var27 = new org.joda.time.field.PreciseDurationField(var23, 1L);
    org.joda.time.DateMidnight var29 = var4.withFieldAdded(var23, 228);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod(var30);
    var31.addDays(1);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    var31.add((org.joda.time.ReadableDuration)var37);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var40);
    org.joda.time.PeriodType var42 = var41.getPeriodType();
    org.joda.time.MutablePeriod var43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var29, var42);
    java.util.GregorianCalendar var44 = var29.toGregorianCalendar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(0L);
    int var2 = var1.getYear();
    org.joda.time.YearMonth.Property var3 = var1.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    org.joda.time.Weeks var32 = var15.minus(var31);
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var34 = var33.year();
    org.joda.time.MutableDateTime.Property var35 = var33.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.Period var42 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var44 = var42.plusSeconds(100);
    org.joda.time.Period var46 = var42.minusMillis(10);
    boolean var47 = var37.equals((java.lang.Object)10);
    org.joda.time.Weeks var48 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var37);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    org.joda.time.MutableDateTime.Property var51 = var49.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.Period var58 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var60 = var58.plusSeconds(100);
    org.joda.time.Period var62 = var58.minusMillis(10);
    boolean var63 = var53.equals((java.lang.Object)10);
    org.joda.time.Weeks var64 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var49, (org.joda.time.ReadableInstant)var53);
    org.joda.time.Weeks var65 = var48.minus(var64);
    boolean var66 = var32.isGreaterThan(var48);
    org.joda.time.Minutes var67 = var48.toStandardMinutes();
    org.joda.time.Duration var68 = var67.toStandardDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.TimeOfDay var7 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var9 = var7.minusHours(4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Seconds var10 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial)var6, (org.joda.time.ReadablePartial)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }


    long var2 = org.joda.time.field.FieldUtils.safeAdd(1377742981323L, (-7200000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1377735781323L);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.plusSeconds(197);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    org.joda.time.LocalDateTime var26 = var19.plusSeconds(228);
    org.joda.time.LocalDateTime var28 = var26.minusHours(16);
    int var29 = var28.getCenturyOfEra();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var31 = var28.withWeekOfWeekyear(0);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 20);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    boolean var6 = var3.isShorterThan((org.joda.time.ReadableDuration)var5);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    org.joda.time.Duration var12 = var3.plus((org.joda.time.ReadableDuration)var8);
    org.joda.time.Instant var14 = var1.withDurationAdded((org.joda.time.ReadableDuration)var3, 1);
    long var15 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-3600000L));

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withDayOfYear(1);
    org.joda.time.LocalDate.Property var6 = var3.weekOfWeekyear();
    org.joda.time.MutableInterval var7 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var8 = var7.copy();
    org.joda.time.DateTime var9 = var8.getStart();
    java.util.Date var10 = var9.toDate();
    int var11 = var9.getWeekyear();
    org.joda.time.format.DateTimeFormatterBuilder var12 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var14 = var12.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var16 = var12.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var20 = var17.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    int[] var28 = var21.get((org.joda.time.ReadablePartial)var26, 100L);
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.LocalTime var34 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var32);
    org.joda.time.Period var35 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var36 = var32.millisOfSecond();
    org.joda.time.DateTimeField var37 = var32.secondOfDay();
    org.joda.time.field.SkipDateTimeField var39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var21, var37, 100);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    org.joda.time.Chronology var42 = var40.getChronology();
    int var43 = var40.getYearOfCentury();
    int var44 = var39.getMaximumValue((org.joda.time.ReadablePartial)var40);
    boolean var46 = var39.isLeap(1L);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    int var49 = var39.getMinimumValue((org.joda.time.ReadablePartial)var47);
    org.joda.time.DurationField var50 = var39.getDurationField();
    org.joda.time.DateTimeFieldType var51 = var39.getType();
    org.joda.time.field.OffsetDateTimeField var55 = new org.joda.time.field.OffsetDateTimeField(var20, var51, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var58 = new org.joda.time.IllegalFieldValueException(var51, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var61 = var12.appendFraction(var51, 33, (-948));
    org.joda.time.DateTime.Property var62 = var9.property(var51);
    int var63 = var3.indexOf(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }


    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.MutableInterval var29 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var30 = var29.copy();
    org.joda.time.DateTime var31 = var30.getStart();
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var33.toDuration();
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var41);
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var44 = var43.year();
    boolean var45 = var41.isBefore((org.joda.time.ReadableInstant)var43);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var56 = var47.plus((org.joda.time.ReadableDuration)var52);
    var43.add((org.joda.time.ReadableDuration)var52);
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    org.joda.time.Period var59 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var43, var58);
    org.joda.time.MutablePeriod var60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var31, var58);
    org.joda.time.PeriodType var61 = var58.withHoursRemoved();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var62 = new org.joda.time.Period((-17), 1883, 4, 4, 25785, 197, 692, 928, var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.seconds(216);
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Seconds var4 = var1.dividedBy((-13));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    org.joda.time.Minutes var1 = org.joda.time.Minutes.parseMinutes("P0D");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    org.joda.time.LocalDate.Property var6 = var4.dayOfMonth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var7 = new org.joda.time.MutableInterval((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var1 = new org.joda.time.LocalDateTime((java.lang.Object)"\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT03:23:18");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    org.joda.time.Chronology var4 = var0.withUTC();
    org.joda.time.DateTimeField var5 = var0.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.tTime();
    boolean var1 = var0.isPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate.Property var7 = var4.yearOfCentury();
    org.joda.time.LocalDate var9 = var4.plusYears(1);
    java.lang.String var10 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2013-01-16"+ "'", var10.equals("2013-01-16"));

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    long var30 = var18.addWrapField(1377746581948L, 8400);
    boolean var31 = var18.isSupported();
    int var33 = var18.get((-79L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1377754981948L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardMinutes(1377735781323L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    int var5 = var4.getWeeks();
    org.joda.time.Period var7 = org.joda.time.Period.days(1);
    org.joda.time.Period var9 = var7.minusHours(0);
    org.joda.time.Period var10 = var4.plus((org.joda.time.ReadablePeriod)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalTime.Property var9 = var8.millisOfSecond();
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var12 = var10.minusHours(4);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadablePartial)var8, (org.joda.time.ReadablePartial)var12, var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.Period var45 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var47 = var45.plusSeconds(100);
    org.joda.time.Period var49 = var45.minusMillis(10);
    boolean var50 = var40.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var51 = var40.dayOfYear();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.LocalDate var56 = var54.minusMonths(0);
    org.joda.time.DateTime var57 = var54.toDateTimeAtMidnight();
    org.joda.time.DateTime var59 = var57.withCenturyOfEra(4);
    org.joda.time.Days var60 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var59);
    org.joda.time.Days var62 = var60.dividedBy(1);
    boolean var63 = var38.isGreaterThan(var60);
    org.joda.time.DurationFieldType var64 = var38.getFieldType();
    org.joda.time.Days var66 = var38.multipliedBy(4);
    org.joda.time.Days var67 = var38.negated();
    org.joda.time.TimeOfDay var69 = var12.withPeriodAdded((org.joda.time.ReadablePeriod)var67, 951);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.DurationConverter[] var2 = var0.getDurationConverters();
    org.joda.time.convert.InstantConverter[] var3 = var0.getInstantConverters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    org.joda.time.DurationField var14 = var0.months();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var17 = var14.subtract((-7200L), 1377768182717035L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.LocalTime var9 = var5.withHourOfDay(4);
    org.joda.time.LocalTime var11 = var5.minusMinutes(33);
    org.joda.time.LocalTime.Property var12 = var5.millisOfSecond();
    org.joda.time.LocalTime.Property var13 = var5.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    boolean var35 = var25.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var36 = var25.dayOfYear();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    org.joda.time.DateTime var42 = var39.toDateTimeAtMidnight();
    org.joda.time.DateTime var44 = var42.withCenturyOfEra(4);
    org.joda.time.Days var45 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var44);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.LocalTime var51 = var49.withMillisOfSecond(1);
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.now();
    boolean var53 = var51.isAfter((org.joda.time.ReadablePartial)var52);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var54);
    org.joda.time.DurationField var57 = var54.hours();
    boolean var58 = var52.equals((java.lang.Object)var54);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    int var64 = var61.getRoundingMode();
    var61.addMillis(100);
    var61.setSecondOfMinute(10);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var60, (org.joda.time.ReadableInstant)var61, var69);
    org.joda.time.Days var71 = var70.toStandardDays();
    org.joda.time.LocalTime var72 = var52.minus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var73 = var25.plus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var75 = var25.plus(1L);
    org.joda.time.Minutes var76 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateMidnight.Property var77 = var25.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var2 = new org.joda.time.Interval(1386411782707L, 1377746599386L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getSecondOfDay();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.LocalDate var8 = var6.minusMonths(0);
    org.joda.time.DateTime var9 = var6.toDateTimeAtMidnight();
    org.joda.time.DateTime var11 = var9.withMillis(100L);
    int var12 = var9.getWeekyear();
    org.joda.time.LocalDateTime var13 = var9.toLocalDateTime();
    org.joda.time.LocalTime var14 = var9.toLocalTime();
    org.joda.time.DateTime var16 = var9.plusHours(2005);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    boolean var29 = var25.isBefore((org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    var27.add((org.joda.time.ReadableDuration)var36);
    org.joda.time.Seconds var42 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var43 = var42.toStandardDuration();
    org.joda.time.DateTime var44 = var16.minus((org.joda.time.ReadableDuration)var43);
    var0.add((org.joda.time.ReadableDuration)var43, 7);
    var0.setMinuteOfDay(197);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 12217);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.setSeconds(1);
    int var14 = var11.getSeconds();
    org.joda.time.TimeOfDay var15 = new org.joda.time.TimeOfDay();
    int var16 = var15.size();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var19 = var18.hours();
    org.joda.time.LocalTime var20 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var18);
    org.joda.time.LocalTime var22 = var20.withMillisOfSecond(1);
    org.joda.time.LocalTime var24 = var22.minusHours((-1));
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var15, (org.joda.time.ReadablePartial)var24);
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.IllegalFieldValueException var30 = new org.joda.time.IllegalFieldValueException(var26, (java.lang.Number)10.0d, (java.lang.Number)1377746681334L, (java.lang.Number)1377742981948L);
    int var31 = var11.get(var26);
    org.joda.time.IllegalFieldValueException var35 = new org.joda.time.IllegalFieldValueException(var26, (java.lang.Number)1377746599106L, (java.lang.Number)73381948, (java.lang.Number)1377768182717035L);
    org.joda.time.chrono.GregorianChronology var36 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var37);
    org.joda.time.DurationField var40 = var37.hours();
    org.joda.time.Chronology var41 = var37.withUTC();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var46 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var45);
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var48 = var47.year();
    boolean var49 = var45.isBefore((org.joda.time.ReadableInstant)var47);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.Duration var60 = var51.plus((org.joda.time.ReadableDuration)var56);
    var47.add((org.joda.time.ReadableDuration)var56);
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Interval var70 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var67);
    org.joda.time.DateTimeZone var71 = var67.getZone();
    org.joda.time.Chronology var72 = var37.withZone(var71);
    org.joda.time.Chronology var73 = var36.withZone(var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var74 = new org.joda.time.LocalTime((java.lang.Object)var26, var71);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var59 = var54.getMaximumValue();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.LocalDateTime var11 = var0.minusHours(240);
    int var12 = var0.getHourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var2 = org.joda.time.DateTime.parse("PeriodType[Months]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = var0.getValue(14400001);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.plusHours(2013);
    org.joda.time.LocalDateTime var8 = org.joda.time.LocalDateTime.now();
    int var9 = var8.getDayOfYear();
    org.joda.time.Chronology var10 = var8.getChronology();
    int var11 = var8.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var13 = var8.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var14 = var13.yearOfCentury();
    org.joda.time.LocalDateTime var16 = var13.plusHours(69);
    org.joda.time.LocalDateTime var18 = var13.minusHours((-22));
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    org.joda.time.DateTime var29 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var31 = var29.withMillis(0L);
    org.joda.time.MutablePeriod var32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var26, (org.joda.time.ReadableInstant)var31);
    org.joda.time.LocalDateTime var33 = var18.minus((org.joda.time.ReadableDuration)var26);
    org.joda.time.format.DateTimeFormatterBuilder var34 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var36 = var34.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var38 = var34.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var39 = var38.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var40 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var42 = var40.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var44 = var40.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var45);
    org.joda.time.DateTimeField var48 = var45.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var49 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.LocalDate var54 = var52.minusMonths(0);
    int[] var56 = var49.get((org.joda.time.ReadablePartial)var54, 100L);
    org.joda.time.chrono.EthiopicChronology var60 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var61 = var60.hours();
    org.joda.time.LocalTime var62 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var60);
    org.joda.time.Period var63 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var60);
    org.joda.time.DateTimeField var64 = var60.millisOfSecond();
    org.joda.time.DateTimeField var65 = var60.secondOfDay();
    org.joda.time.field.SkipDateTimeField var67 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var49, var65, 100);
    org.joda.time.LocalDateTime var68 = org.joda.time.LocalDateTime.now();
    int var69 = var68.getDayOfYear();
    org.joda.time.Chronology var70 = var68.getChronology();
    int var71 = var68.getYearOfCentury();
    int var72 = var67.getMaximumValue((org.joda.time.ReadablePartial)var68);
    boolean var74 = var67.isLeap(1L);
    org.joda.time.LocalDateTime var75 = org.joda.time.LocalDateTime.now();
    int var76 = var75.getDayOfYear();
    int var77 = var67.getMinimumValue((org.joda.time.ReadablePartial)var75);
    org.joda.time.DurationField var78 = var67.getDurationField();
    org.joda.time.DateTimeFieldType var79 = var67.getType();
    org.joda.time.field.OffsetDateTimeField var83 = new org.joda.time.field.OffsetDateTimeField(var48, var79, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var86 = new org.joda.time.IllegalFieldValueException(var79, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var89 = var40.appendFraction(var79, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var90 = var39.appendText(var79);
    org.joda.time.LocalDateTime var92 = var18.withField(var79, 25785);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var94 = var5.withField(var79, 23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var56 = var54.roundHalfEven(1377746593922L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.LocalDate var7 = var2.plusDays((-1));
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.LocalDate var12 = var10.withMonthOfYear(1);
    org.joda.time.DateMidnight var13 = var10.toDateMidnight();
    org.joda.time.LocalDate var15 = var10.plusDays((-1));
    org.joda.time.Minutes var16 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var2, (org.joda.time.ReadablePartial)var15);
    org.joda.time.LocalDate var18 = var15.withDayOfYear(16);
    org.joda.time.LocalDate.Property var19 = var18.dayOfMonth();
    org.joda.time.LocalDate.Property var20 = var18.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var3 = var0.toMutableDateTime(var2);
    long var4 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setWeekOfWeekyear(100);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1377746617249L);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var26 = var25.toStandardDuration();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    boolean var33 = var26.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Hours var34 = var32.toStandardHours();
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.Hours var48 = var47.toStandardHours();
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.Days var61 = var60.toStandardDays();
    org.joda.time.Hours var62 = var61.toStandardHours();
    java.lang.String var63 = var62.toString();
    org.joda.time.Hours var64 = var48.plus(var62);
    org.joda.time.Hours var65 = var34.plus(var64);
    org.joda.time.PeriodType var66 = var64.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "PT0H"+ "'", var63.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    var0.setDurationBeforeEnd(1L);
    long var4 = var0.toDurationMillis();
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval();
    boolean var6 = var0.isBefore((org.joda.time.ReadableInterval)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setStartMillis(1377742981L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.TimeOfDay var16 = var3.plusMinutes(13);
    org.joda.time.LocalTime var17 = var3.toLocalTime();
    org.joda.time.TimeOfDay var19 = var3.plusSeconds(69);
    org.joda.time.TimeOfDay var20 = new org.joda.time.TimeOfDay();
    int var21 = var20.size();
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var29 = var27.minusHours((-1));
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var20, (org.joda.time.ReadablePartial)var29);
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var32 = var31.dayOfYear();
    org.joda.time.YearMonthDay var33 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var31);
    org.joda.time.TimeOfDay var34 = var20.withChronologyRetainFields((org.joda.time.Chronology)var31);
    org.joda.time.TimeOfDay var36 = var34.plusMillis(2005);
    java.lang.String var37 = var34.toString();
    org.joda.time.TimeOfDay var39 = var34.plusSeconds(4);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    boolean var62 = var59.isShorterThan((org.joda.time.ReadableDuration)var61);
    org.joda.time.Duration var63 = var54.plus((org.joda.time.ReadableDuration)var59);
    var50.add((org.joda.time.ReadableDuration)var59);
    org.joda.time.Seconds var65 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var50);
    org.joda.time.Seconds var66 = var65.negated();
    org.joda.time.Seconds var68 = var66.plus(240);
    org.joda.time.TimeOfDay var69 = var34.plus((org.joda.time.ReadablePeriod)var66);
    org.joda.time.TimeOfDay var70 = var19.plus((org.joda.time.ReadablePeriod)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "T03:23:37.467"+ "'", var37.equals("T03:23:37.467"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    org.joda.time.DateTimeFieldType[] var23 = var21.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.DateTimeField var26 = var24.minuteOfHour();
    long var30 = var24.add(1L, 1377746580759L, 2005);
    org.joda.time.MonthDay var31 = var21.withChronologyRetainFields((org.joda.time.Chronology)var24);
    org.joda.time.MonthDay var33 = var31.plusDays(8);
    org.joda.time.MonthDay.Property var34 = var33.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    org.joda.time.DateMidnight var45 = var43.plusDays(35);
    java.lang.String var46 = var45.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var48 = var45.withWeekOfWeekyear(240);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "2013-10-10T00:00:00.000Z"+ "'", var46.equals("2013-10-10T00:00:00.000Z"));

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    org.joda.time.DateTime.Property var12 = var0.minuteOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var14 = var0.withHourOfDay(928);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    org.joda.time.TimeOfDay var1 = org.joda.time.TimeOfDay.fromMillisOfDay(80003L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusSeconds(100);
    org.joda.time.Period var8 = var4.minusMillis(10);
    org.joda.time.Period var10 = var8.withDays(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.LocalTime var20 = var7.plus((org.joda.time.ReadablePeriod)var19);
    org.joda.time.Period var22 = var19.minusMillis(28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var24 = var19.minusMonths(37);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    org.joda.time.DateTime var12 = var9.toDateTimeAtMidnight();
    org.joda.time.DateTime var14 = var12.withMillis(100L);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.DateMidnight var19 = var16.minusWeeks((-1));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    int var25 = var22.getRoundingMode();
    var22.addMillis(100);
    var22.setSecondOfMinute(10);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var31 = new org.joda.time.Period((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var22, var30);
    org.joda.time.Days var32 = var31.toStandardDays();
    org.joda.time.DurationFieldType var33 = var32.getFieldType();
    org.joda.time.DateMidnight var35 = var19.withFieldAdded(var33, 1);
    org.joda.time.DateMidnight.Property var36 = var19.monthOfYear();
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.PeriodType var49 = var47.withWeeksRemoved();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var19, var47);
    org.joda.time.Duration var51 = var6.toDurationTo((org.joda.time.ReadableInstant)var14);
    org.joda.time.Duration var54 = var51.withDurationAdded(1377742993058L, 80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    int var6 = var2.getWeekyear();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    org.joda.time.MutableDateTime.Property var9 = var7.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusSeconds(100);
    org.joda.time.Period var20 = var16.minusMillis(10);
    boolean var21 = var11.equals((java.lang.Object)10);
    org.joda.time.Weeks var22 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    org.joda.time.MutableDateTime.Property var25 = var23.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.Period var32 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var34 = var32.plusSeconds(100);
    org.joda.time.Period var36 = var32.minusMillis(10);
    boolean var37 = var27.equals((java.lang.Object)10);
    org.joda.time.Weeks var38 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Weeks var39 = var22.minus(var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    org.joda.time.MutableDateTime.Property var42 = var40.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var43);
    org.joda.time.Period var49 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var51 = var49.plusSeconds(100);
    org.joda.time.Period var53 = var49.minusMillis(10);
    boolean var54 = var44.equals((java.lang.Object)10);
    org.joda.time.Weeks var55 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var57 = var56.year();
    org.joda.time.MutableDateTime.Property var58 = var56.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.Period var65 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var67 = var65.plusSeconds(100);
    org.joda.time.Period var69 = var65.minusMillis(10);
    boolean var70 = var60.equals((java.lang.Object)10);
    org.joda.time.Weeks var71 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Weeks var72 = var55.minus(var71);
    boolean var73 = var39.isGreaterThan(var55);
    org.joda.time.LocalDate var74 = var2.minus((org.joda.time.ReadablePeriod)var39);
    org.joda.time.chrono.ISOChronology var75 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var80 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var82 = var80.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var84 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var85 = org.joda.time.chrono.JulianChronology.getInstance(var84);
    long var87 = var80.getMillisKeepLocal(var84, 1377746580759L);
    org.joda.time.Chronology var88 = var75.withZone(var84);
    org.joda.time.chrono.JulianChronology var89 = org.joda.time.chrono.JulianChronology.getInstance(var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var90 = new org.joda.time.MonthDay((java.lang.Object)var39, (org.joda.time.Chronology)var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var6 = var0.withDayOfYear(2005);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(759, 948, (-22), 51, (-3));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusSeconds(100);
    org.joda.time.Period var17 = var13.minusMillis(10);
    boolean var18 = var8.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var19 = var8.dayOfYear();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    org.joda.time.DateTime var25 = var22.toDateTimeAtMidnight();
    org.joda.time.DateTime var27 = var25.withCenturyOfEra(4);
    org.joda.time.Days var28 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var27);
    org.joda.time.DateMidnight var30 = var8.plusMonths(10);
    org.joda.time.DateTimeZone var32 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var33 = org.joda.time.MutableDateTime.now(var32);
    org.joda.time.DateMidnight var34 = var8.withZoneRetainFields(var32);
    org.joda.time.DateTime var35 = var6.toDateTimeAtMidnight(var32);
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var37 = var36.dayOfYear();
    org.joda.time.YearMonthDay var38 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var36);
    org.joda.time.YearMonthDay var40 = var38.plusDays((-1));
    org.joda.time.DateTime var41 = var40.toDateTimeAtCurrentTime();
    int var42 = var41.getWeekOfWeekyear();
    boolean var43 = var35.equals((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateMidnight var5 = var4.toDateMidnight();
    boolean var6 = var5.isAfterNow();
    org.joda.time.LocalDateTime var7 = new org.joda.time.LocalDateTime((java.lang.Object)var5);
    org.joda.time.LocalDate var8 = var5.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var30);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var33 = var32.year();
    boolean var34 = var30.isBefore((org.joda.time.ReadableInstant)var32);
    org.joda.time.Interval var35 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var32);
    boolean var37 = var35.isAfter(10L);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    var38.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var38.setChronology((org.joda.time.Chronology)var41);
    org.joda.time.Interval var43 = var35.withChronology((org.joda.time.Chronology)var41);
    org.joda.time.DurationField var44 = var41.halfdays();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime(1970, 15, 9, 12196171, 228, 884, 33, (org.joda.time.Chronology)var41);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    long var30 = var22.getUnitMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1L);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.YearMonthDay var5 = var2.withYear(28);
    org.joda.time.Instant var7 = new org.joda.time.Instant(2762381894421796L);
    long var8 = var7.getMillis();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var14 = var10.toDuration();
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Years var19 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var20 = var19.getPeriodType();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableDuration)var14, var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var24 = var21.plusMonths(228);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    var4.setDate(1377746581334L);
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var11);
    var12.addDays(1);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    var12.add((org.joda.time.ReadableDuration)var18);
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var21);
    var22.clear();
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var25 = new org.joda.time.MutablePeriod(var24);
    var25.addDays(1);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    var25.add((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadablePeriod)var25);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var39 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    boolean var42 = var38.isBefore((org.joda.time.ReadableInstant)var40);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var44.plus((org.joda.time.ReadableDuration)var49);
    var40.add((org.joda.time.ReadableDuration)var49);
    org.joda.time.Hours var55 = var49.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var56 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var25.setPeriod((org.joda.time.ReadableDuration)var49, (org.joda.time.Chronology)var56);
    var25.clear();
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    org.joda.time.MutableDateTime.Property var61 = var59.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.Period var68 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var70 = var68.plusSeconds(100);
    org.joda.time.Period var72 = var68.minusMillis(10);
    boolean var73 = var63.equals((java.lang.Object)10);
    org.joda.time.Weeks var74 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var59, (org.joda.time.ReadableInstant)var63);
    org.joda.time.Duration var75 = var25.toDurationFrom((org.joda.time.ReadableInstant)var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var76 = var0.compare((java.lang.Object)var4, (java.lang.Object)var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    org.joda.time.TimeOfDay var15 = var13.minusMinutes(0);
    int var16 = var13.getSecondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 765);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 37);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.DateTime var10 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var12 = var10.withMillis(0L);
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var15 = var7.withMillis(1377742981948L);
    java.lang.String var16 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "PT-3600S"+ "'", var16.equals("PT-3600S"));

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime var29 = var27.withWeekyear(692);
    org.joda.time.LocalDateTime.Property var30 = var27.minuteOfHour();
    int var31 = var27.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 12217692);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var14 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var13);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var16 = var15.year();
    boolean var17 = var13.isBefore((org.joda.time.ReadableInstant)var15);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    org.joda.time.Duration var28 = var19.plus((org.joda.time.ReadableDuration)var24);
    var15.add((org.joda.time.ReadableDuration)var24);
    org.joda.time.Seconds var30 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var15);
    org.joda.time.Seconds var32 = var30.plus(2005);
    org.joda.time.LocalDate var34 = var4.withPeriodAdded((org.joda.time.ReadablePeriod)var30, 104);
    org.joda.time.Hours var35 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime(14, 3, 228, 194, (-1377742992), 12196, (-1));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendMonthOfYear(20);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendHourOfDay(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var1 = org.joda.time.Minutes.parseMinutes("2013-01-16");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.parse("days");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    java.util.GregorianCalendar var29 = var7.toGregorianCalendar();
    var7.addMillis(12200);
    org.joda.time.DateTimeField var32 = var7.getRoundingField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.DateTime var10 = var0.toDateTime();
    org.joda.time.format.DateTimeFormatterBuilder var11 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var13 = var11.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var15 = var11.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var16);
    org.joda.time.DateTimeField var19 = var16.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.LocalDate var25 = var23.minusMonths(0);
    int[] var27 = var20.get((org.joda.time.ReadablePartial)var25, 100L);
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var32 = var31.hours();
    org.joda.time.LocalTime var33 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var31);
    org.joda.time.Period var34 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var31);
    org.joda.time.DateTimeField var35 = var31.millisOfSecond();
    org.joda.time.DateTimeField var36 = var31.secondOfDay();
    org.joda.time.field.SkipDateTimeField var38 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var20, var36, 100);
    org.joda.time.LocalDateTime var39 = org.joda.time.LocalDateTime.now();
    int var40 = var39.getDayOfYear();
    org.joda.time.Chronology var41 = var39.getChronology();
    int var42 = var39.getYearOfCentury();
    int var43 = var38.getMaximumValue((org.joda.time.ReadablePartial)var39);
    boolean var45 = var38.isLeap(1L);
    org.joda.time.LocalDateTime var46 = org.joda.time.LocalDateTime.now();
    int var47 = var46.getDayOfYear();
    int var48 = var38.getMinimumValue((org.joda.time.ReadablePartial)var46);
    org.joda.time.DurationField var49 = var38.getDurationField();
    org.joda.time.DateTimeFieldType var50 = var38.getType();
    org.joda.time.field.OffsetDateTimeField var54 = new org.joda.time.field.OffsetDateTimeField(var19, var50, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var57 = new org.joda.time.IllegalFieldValueException(var50, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var60 = var11.appendFraction(var50, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var61 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var62 = var61.minutes();
    org.joda.time.DateTimeField var63 = var61.year();
    org.joda.time.DurationField var64 = var61.hours();
    org.joda.time.field.UnsupportedDateTimeField var65 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var50, var64);
    boolean var66 = var0.isSupported(var50);
    int var67 = var0.getWeekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 35);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateMidnight var23 = var1.plusMonths(10);
    org.joda.time.DateMidnight var26 = var1.withDurationAdded(1377746581334L, 216);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Days var7 = var6.toStandardDays();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.Hours var21 = var20.toStandardHours();
    java.lang.String var22 = var21.toString();
    org.joda.time.Days var23 = var21.toStandardDays();
    org.joda.time.Minutes var24 = var23.toStandardMinutes();
    int var25 = var23.size();
    org.joda.time.Minutes var26 = var23.toStandardMinutes();
    org.joda.time.Days var28 = var23.minus(228);
    org.joda.time.Days var29 = var7.minus(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "PT0H"+ "'", var22.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    int var7 = var6.getMonths();
    org.joda.time.MutableInterval var8 = new org.joda.time.MutableInterval();
    var8.setStartMillis((-1L));
    org.joda.time.Chronology var11 = var8.getChronology();
    org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval();
    long var13 = var12.getEndMillis();
    org.joda.time.Months var14 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var12);
    org.joda.time.Chronology var15 = var12.getChronology();
    boolean var16 = var8.isAfter((org.joda.time.ReadableInterval)var12);
    var6.setPeriod((org.joda.time.ReadableInterval)var12);
    org.joda.time.Weeks var18 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    java.lang.String var1 = var0.toString();
    org.joda.time.Chronology var2 = var0.withUTC();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime(var2);
    org.joda.time.MutableDateTime.Property var4 = var3.yearOfCentury();
    int var5 = var3.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ISOChronology[UTC]"+ "'", var1.equals("ISOChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 8);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeParser var5 = var4.toParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    org.joda.time.Period var1 = org.joda.time.Period.days(1);
    org.joda.time.MutablePeriod var2 = var1.toMutablePeriod();
    org.joda.time.PeriodType var3 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod(var3);
    var4.addDays(1);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    var4.add((org.joda.time.ReadableDuration)var10);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var13);
    var14.clear();
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadablePeriod)var17);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var30);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var33 = var32.year();
    boolean var34 = var30.isBefore((org.joda.time.ReadableInstant)var32);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    boolean var44 = var41.isShorterThan((org.joda.time.ReadableDuration)var43);
    org.joda.time.Duration var45 = var36.plus((org.joda.time.ReadableDuration)var41);
    var32.add((org.joda.time.ReadableDuration)var41);
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = var48.toLocalDate();
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var51 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var50);
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var53 = var52.year();
    boolean var54 = var50.isBefore((org.joda.time.ReadableInstant)var52);
    org.joda.time.Interval var55 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var52);
    boolean var57 = var55.isAfter(10L);
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    var58.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var61 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var58.setChronology((org.joda.time.Chronology)var61);
    org.joda.time.Interval var63 = var55.withChronology((org.joda.time.Chronology)var61);
    var14.setPeriod((org.joda.time.ReadableInterval)var55);
    var14.addMillis((-1));
    int var67 = var14.getWeeks();
    org.joda.time.DateTime var68 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.MutableDateTime var72 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var73 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var72);
    org.joda.time.MutableDateTime var74 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var75 = var74.year();
    boolean var76 = var72.isBefore((org.joda.time.ReadableInstant)var74);
    org.joda.time.MutableDateTime.Property var77 = var74.minuteOfHour();
    org.joda.time.MutableDateTime.Property var78 = var74.millisOfSecond();
    org.joda.time.Chronology var79 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var68, (org.joda.time.ReadableInstant)var74);
    org.joda.time.Duration var80 = var14.toDurationFrom((org.joda.time.ReadableInstant)var74);
    org.joda.time.Duration var81 = var1.toDurationFrom((org.joda.time.ReadableInstant)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getInstance();
    org.joda.time.DateTimeFieldType var1 = var0.getLowerLimit();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    org.joda.time.DurationField var5 = var2.hours();
    org.joda.time.DateTimeField var6 = var2.clockhourOfDay();
    org.joda.time.MutableInterval var7 = new org.joda.time.MutableInterval();
    long var8 = var7.getEndMillis();
    long var9 = var7.getEndMillis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var10 = var0.compare((java.lang.Object)var6, (java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forPattern("8581 seconds");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    boolean var9 = var6.isShorterThan((org.joda.time.ReadableDuration)var8);
    org.joda.time.Duration var10 = var1.plus((org.joda.time.ReadableDuration)var6);
    long var11 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration)var10);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardMinutes((-62156990340999L));
    boolean var14 = var10.isEqual((org.joda.time.ReadableDuration)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-7200000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.YearMonthDay.Property var5 = var2.year();
    org.joda.time.DateTime var6 = var2.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var16);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    var23.setHourOfDay(10);
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var23);
    org.joda.time.Years var42 = var40.dividedBy(104);
    boolean var43 = var8.isLessThan(var40);
    java.lang.String var44 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "P-1Y"+ "'", var44.equals("P-1Y"));

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendMonthOfYear(35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var3 = new org.joda.time.LocalTime(147, 73394, 12217);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.format.DateTimeFormatter var4 = org.joda.time.format.ISODateTimeFormat.basicTTime();
    java.lang.String var5 = var3.toString(var4);
    org.joda.time.Interval var6 = var3.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000"+ "'", var5.equals("T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    boolean var2 = var1.isParser();
    org.joda.time.Chronology var3 = var1.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var4 = org.joda.time.DateTime.parse("1962-04-23", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.Hours var50 = var49.toStandardHours();
    java.lang.String var51 = var50.toString();
    org.joda.time.Days var52 = var50.toStandardDays();
    org.joda.time.Minutes var53 = var52.toStandardMinutes();
    org.joda.time.Duration var54 = var53.toStandardDuration();
    org.joda.time.Interval var55 = var28.withDurationAfterStart((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    var58.setWeekOfWeekyear(1);
    int var61 = var58.getRoundingMode();
    var58.addMillis(100);
    var58.setSecondOfMinute(10);
    org.joda.time.PeriodType var66 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var67 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var58, var66);
    org.joda.time.Days var68 = var67.toStandardDays();
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.Period var75 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var77 = var75.plusSeconds(100);
    org.joda.time.Period var79 = var75.minusMillis(10);
    boolean var80 = var70.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var81 = var70.dayOfYear();
    org.joda.time.chrono.JulianChronology var82 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var83 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var82);
    org.joda.time.LocalDate var84 = var83.toLocalDate();
    org.joda.time.LocalDate var86 = var84.minusMonths(0);
    org.joda.time.DateTime var87 = var84.toDateTimeAtMidnight();
    org.joda.time.DateTime var89 = var87.withCenturyOfEra(4);
    org.joda.time.Days var90 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var89);
    org.joda.time.Days var92 = var90.dividedBy(1);
    boolean var93 = var68.isGreaterThan(var90);
    org.joda.time.DurationFieldType var94 = var68.getFieldType();
    org.joda.time.Days var96 = var68.multipliedBy(4);
    org.joda.time.Duration var97 = var96.toStandardDuration();
    org.joda.time.Interval var98 = var28.withDurationAfterStart((org.joda.time.ReadableDuration)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "PT0H"+ "'", var51.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }


    org.joda.time.MutableDateTime var0 = org.joda.time.MutableDateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var4 = var2.plusDays(2013);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    org.joda.time.DateMidnight var25 = var9.withFieldAdded(var23, 1);
    org.joda.time.field.PreciseDurationField var27 = new org.joda.time.field.PreciseDurationField(var23, 1L);
    org.joda.time.DateMidnight var29 = var4.withFieldAdded(var23, 228);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod(var30);
    var31.addDays(1);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    var31.add((org.joda.time.ReadableDuration)var37);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var40);
    org.joda.time.PeriodType var42 = var41.getPeriodType();
    org.joda.time.MutablePeriod var43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var29, var42);
    int var44 = var43.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 36);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var26 = var25.toStandardDuration();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    boolean var33 = var26.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Hours var34 = var32.toStandardHours();
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.Hours var48 = var47.toStandardHours();
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.Days var61 = var60.toStandardDays();
    org.joda.time.Hours var62 = var61.toStandardHours();
    java.lang.String var63 = var62.toString();
    org.joda.time.Hours var64 = var48.plus(var62);
    org.joda.time.Hours var65 = var34.plus(var64);
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var68 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var34, (org.joda.time.ReadableInstant)var67);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "PT0H"+ "'", var63.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    long var31 = var22.getMillis((-9));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-9L));

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }


    org.joda.time.chrono.ISOChronology var1 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay(1377742981000L, (org.joda.time.Chronology)var1);
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusYears((-1));
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Period var13 = var7.normalizedStandard(var12);
    org.joda.time.PeriodType var14 = var12.withMillisRemoved();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var12);
    org.joda.time.YearMonthDay var16 = var2.plus((org.joda.time.ReadablePeriod)var15);
    org.joda.time.DateTime var17 = var16.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.YearMonthDay var4 = new org.joda.time.YearMonthDay(1325559981L, var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var5.setChronology((org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var10 = var8.clockhourOfHalfday();
    org.joda.time.field.SkipDateTimeField var12 = new org.joda.time.field.SkipDateTimeField(var3, var10, (-22));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight(893, 0, 884);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.plusWeeks(73381948);
    org.joda.time.LocalDate.Property var11 = var10.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Hours var1 = org.joda.time.Hours.parseHours("PT8597S");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.plusHours(2013);
    org.joda.time.Chronology var8 = var7.getChronology();
    org.joda.time.TimeOfDay var10 = var7.minusSeconds(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now(var8);
    org.joda.time.Interval var10 = var3.toInterval(var8);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = var32.toLocalDate();
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var35 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var34);
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var37 = var36.year();
    boolean var38 = var34.isBefore((org.joda.time.ReadableInstant)var36);
    org.joda.time.Interval var39 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var36);
    org.joda.time.Interval var40 = var39.toInterval();
    org.joda.time.Interval var41 = var10.overlap((org.joda.time.ReadableInterval)var40);
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var46 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var45);
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var48 = var47.year();
    boolean var49 = var45.isBefore((org.joda.time.ReadableInstant)var47);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.Duration var60 = var51.plus((org.joda.time.ReadableDuration)var56);
    var47.add((org.joda.time.ReadableDuration)var56);
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.chrono.JulianChronology var82 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var83 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var82);
    org.joda.time.LocalDate var84 = var83.toLocalDate();
    org.joda.time.MutableDateTime var85 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var86 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var83, (org.joda.time.ReadableInstant)var85);
    org.joda.time.MutableDateTime var87 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var88 = var87.year();
    boolean var89 = var85.isBefore((org.joda.time.ReadableInstant)var87);
    org.joda.time.Interval var90 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var67, (org.joda.time.ReadableInstant)var87);
    org.joda.time.Interval var91 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var87);
    org.joda.time.Interval var92 = var40.overlap((org.joda.time.ReadableInterval)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.Instant var3 = var0.plus(100L);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var7 = var4.millisOfSecond();
    int var8 = var0.get(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 611);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    boolean var5 = var0.equals((java.lang.Object)(-1000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(2005, (-13), (-1), 36, 12196171, 951, 4, 104);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicTime();
    boolean var1 = var0.isPrinter();
    org.joda.time.Instant var2 = new org.joda.time.Instant();
    org.joda.time.Instant var3 = var2.toInstant();
    org.joda.time.Chronology var4 = var3.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var5 = new org.joda.time.DateTime((java.lang.Object)var0, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var7 = new org.joda.time.DateTime(21, 86399, 0, (-948), 80, 2013, 318);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var10 = var0.withMonthOfYear(25785);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.LocalDate var6 = new org.joda.time.LocalDate(1378524281334L, (org.joda.time.DateTimeZone)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var8 = var6.withWeekOfWeekyear(630);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.minusMonths(0);
    int[] var8 = var1.get((org.joda.time.ReadablePartial)var6, 100L);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.LocalTime var14 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var12);
    org.joda.time.Period var15 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var12);
    org.joda.time.DateTimeField var16 = var12.millisOfSecond();
    org.joda.time.DateTimeField var17 = var12.secondOfDay();
    org.joda.time.field.SkipDateTimeField var19 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var1, var17, 100);
    org.joda.time.LocalDateTime var20 = org.joda.time.LocalDateTime.now();
    int var21 = var20.getDayOfYear();
    org.joda.time.Chronology var22 = var20.getChronology();
    int var23 = var20.getYearOfCentury();
    int var24 = var19.getMaximumValue((org.joda.time.ReadablePartial)var20);
    int var25 = var20.getSecondOfMinute();
    org.joda.time.LocalDateTime var27 = var20.plusSeconds(228);
    org.joda.time.LocalDateTime var29 = var27.minusHours(16);
    org.joda.time.LocalDateTime.Property var30 = var29.centuryOfEra();
    org.joda.time.LocalDateTime var32 = var29.withYear((-22));
    java.lang.String var33 = var0.print((org.joda.time.ReadablePartial)var29);
    org.joda.time.LocalDateTime.Property var34 = var29.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "T11:27:26"+ "'", var33.equals("T11:27:26"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var5 = var1.toDuration();
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    long var9 = var7.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-3600000L));

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.withWeekOfWeekyear(2);
    org.joda.time.Instant var36 = new org.joda.time.Instant();
    org.joda.time.Instant var37 = var36.toInstant();
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod(var38);
    var39.addDays(1);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    var39.add((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableDuration)var45, var74);
    org.joda.time.Period var77 = new org.joda.time.Period((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.Chronology var78 = var37.getChronology();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = var2.toString("PT4210.001S");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forStyle("T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.withMonthOfYear(1);
    org.joda.time.LocalDate var17 = var13.withWeekyear(1);
    org.joda.time.LocalDate var19 = var13.withDayOfYear(1);
    boolean var20 = var9.equals((java.lang.Object)var19);
    org.joda.time.LocalDate var21 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    java.util.Date var22 = var21.toDate();
    int var23 = var21.getWeekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 51);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeField var8 = var7.dayOfYear();
    org.joda.time.DateTimeField var9 = var7.clockhourOfHalfday();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime(1, 104, 70541200, 10, 951, 948, 36, (org.joda.time.Chronology)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }


    org.joda.time.DateMidnight var1 = new org.joda.time.DateMidnight(1377746598784L);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    org.joda.time.MutableDateTime.Property var28 = var10.minuteOfHour();
    org.joda.time.DateTimeField var29 = var10.getRoundingField();
    org.joda.time.MutableDateTime.Property var30 = var10.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.YearMonthDay.Property var5 = var2.year();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.Hours var26 = var20.toStandardHours();
    org.joda.time.YearMonthDay var28 = var2.withPeriodAdded((org.joda.time.ReadablePeriod)var26, 2013);
    org.joda.time.PeriodType var29 = var26.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.withSecondOfMinute(10);
    org.joda.time.DateTime var11 = var5.withDurationAdded(3L, 34);
    org.joda.time.DateTime var13 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var15 = var13.withMillis(0L);
    org.joda.time.DateTime var17 = var15.plusHours(2013);
    org.joda.time.chrono.ISOChronology var18 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var23 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var25 = var23.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var27 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstance(var27);
    long var30 = var23.getMillisKeepLocal(var27, 1377746580759L);
    org.joda.time.Chronology var31 = var18.withZone(var27);
    org.joda.time.DateTimeZone var33 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var34 = org.joda.time.chrono.ISOChronology.getInstance(var33);
    org.joda.time.Chronology var35 = var18.withZone(var33);
    org.joda.time.DateTime var36 = var15.toDateTime(var33);
    org.joda.time.LocalTime var37 = new org.joda.time.LocalTime(104L, var33);
    org.joda.time.DateTime var38 = var5.withZone(var33);
    long var40 = var33.convertUTCToLocal(1377746597835L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1377746598594L);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var29.plus((org.joda.time.ReadableDuration)var34);
    var25.add((org.joda.time.ReadableDuration)var34);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Interval var48 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var45);
    org.joda.time.Interval var49 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var45);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var51, (org.joda.time.ReadableInstant)var53);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    boolean var57 = var53.isBefore((org.joda.time.ReadableInstant)var55);
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    boolean var62 = var59.isShorterThan((org.joda.time.ReadableDuration)var61);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    boolean var67 = var64.isShorterThan((org.joda.time.ReadableDuration)var66);
    org.joda.time.Duration var68 = var59.plus((org.joda.time.ReadableDuration)var64);
    var55.add((org.joda.time.ReadableDuration)var64);
    org.joda.time.MutableDateTime.Property var70 = var55.dayOfWeek();
    var55.addMonths((-9));
    boolean var73 = var5.isEqual((org.joda.time.ReadableInstant)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.withSecondOfMinute(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var10 = var8.withYearOfEra((-1377742992));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    var0.setDate((org.joda.time.ReadableInstant)var7);
    org.joda.time.tz.FixedDateTimeZone var17 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone)var17);
    var7.setZone((org.joda.time.DateTimeZone)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var5 = var2.withWeekOfWeekyear((-59));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2013);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    java.lang.String var24 = var18.getAsShortText(1377742992740L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "8592"+ "'", var24.equals("8592"));

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.Seconds var26 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var11);
    org.joda.time.Seconds var28 = var26.plus(2005);
    org.joda.time.Minutes var29 = var26.toStandardMinutes();
    java.lang.String var30 = var0.print((org.joda.time.ReadablePeriod)var26);
    org.joda.time.Minutes var31 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod)var26);
    org.joda.time.Period var32 = var31.toPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "8619 seconds"+ "'", var30.equals("8619 seconds"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.fullDateTime();
    org.joda.time.format.DateTimeFormatter var2 = var1.withZoneUTC();
    boolean var3 = var2.isParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var4 = org.joda.time.LocalDate.parse("57680", var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.LocalDateTime var11 = var0.minusHours(240);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var13 = var0.withEra(3);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.DurationField var26 = var18.getDurationField();
    long var29 = var18.addWrapField((-208L), 21);
    int var30 = var18.getMinimumValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-86379208L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    boolean var32 = var15.isLessThan(var31);
    org.joda.time.Weeks var34 = var31.dividedBy(1);
    org.joda.time.Days var35 = var34.toStandardDays();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var36 = new org.joda.time.DateTime((java.lang.Object)var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    org.joda.time.IllegalFieldValueException var4 = new org.joda.time.IllegalFieldValueException("8581 seconds", (java.lang.Number)51, (java.lang.Number)948, (java.lang.Number)69);
    java.lang.Number var5 = var4.getIllegalNumberValue();
    java.lang.String var6 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 51+ "'", var5.equals(51));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.joda.time.IllegalFieldValueException: Value 51 for 8581 seconds must be in the range [948,69]"+ "'", var6.equals("org.joda.time.IllegalFieldValueException: Value 51 for 8581 seconds must be in the range [948,69]"));

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var9 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod(var10);
    var11.addDays(1);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    var11.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var20);
    var21.clear();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.MutableDateTime.Property var44 = var29.dayOfWeek();
    var21.setPeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    boolean var46 = var9.equals((java.lang.Object)var21);
    boolean var47 = var9.isFixed();
    boolean var48 = var9.isFixed();
    org.joda.time.DateTime var49 = var2.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var9);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.seconds();
    org.joda.time.format.DateTimeFormatter var51 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var55 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var56 = var55.hours();
    org.joda.time.LocalTime var57 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var55);
    org.joda.time.Period var58 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var55);
    org.joda.time.DateTimeField var59 = var55.millisOfSecond();
    org.joda.time.chrono.LenientChronology var60 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var55);
    org.joda.time.format.DateTimeFormatter var61 = var51.withChronology((org.joda.time.Chronology)var60);
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.LocalDate var66 = var64.withMonthOfYear(1);
    org.joda.time.LocalDate var68 = var64.withWeekyear(1);
    org.joda.time.LocalDate var70 = var64.withDayOfYear(1);
    boolean var71 = var60.equals((java.lang.Object)var70);
    org.joda.time.LocalDate var72 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var73 = new org.joda.time.LocalDate((org.joda.time.Chronology)var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var74 = new org.joda.time.Period((java.lang.Object)var2, var50, (org.joda.time.Chronology)var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    org.joda.time.PeriodType var7 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(var7);
    var8.addDays(1);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    var8.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var17);
    var18.clear();
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod(var20);
    var21.addDays(1);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    var21.add((org.joda.time.ReadableDuration)var27);
    var18.add((org.joda.time.ReadablePeriod)var21);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = var32.toLocalDate();
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var35 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var34);
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var37 = var36.year();
    boolean var38 = var34.isBefore((org.joda.time.ReadableInstant)var36);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var49 = var40.plus((org.joda.time.ReadableDuration)var45);
    var36.add((org.joda.time.ReadableDuration)var45);
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.LocalDate var53 = var52.toLocalDate();
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var55 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var52, (org.joda.time.ReadableInstant)var54);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var57 = var56.year();
    boolean var58 = var54.isBefore((org.joda.time.ReadableInstant)var56);
    org.joda.time.Interval var59 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var56);
    boolean var61 = var59.isAfter(10L);
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    var62.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var62.setChronology((org.joda.time.Chronology)var65);
    org.joda.time.Interval var67 = var59.withChronology((org.joda.time.Chronology)var65);
    var18.setPeriod((org.joda.time.ReadableInterval)var59);
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    var71.setWeekOfWeekyear(1);
    int var74 = var71.getRoundingMode();
    var71.addMillis(100);
    var71.setSecondOfMinute(10);
    org.joda.time.PeriodType var79 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var80 = new org.joda.time.Period((org.joda.time.ReadableDuration)var70, (org.joda.time.ReadableInstant)var71, var79);
    org.joda.time.Days var81 = var80.toStandardDays();
    org.joda.time.Hours var82 = var81.toStandardHours();
    org.joda.time.Interval var83 = var59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var81);
    org.joda.time.Duration var84 = var83.toDuration();
    org.joda.time.Years var85 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var83);
    java.lang.String var86 = var83.toString();
    org.joda.time.Period var91 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.Interval var92 = var83.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var91);
    org.joda.time.DurationFieldType[] var93 = var91.getFieldTypes();
    org.joda.time.Period var94 = var91.toPeriod();
    var6.setPeriod((org.joda.time.ReadablePeriod)var91);
    var6.addWeeks(69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "2013-08-29T03:23:39.437+00:00:00.100/2013-08-29T03:23:39.437+00:00:00.100"+ "'", var86.equals("2013-08-29T03:23:39.437+00:00:00.100/2013-08-29T03:23:39.437+00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDateTime var9 = org.joda.time.LocalDateTime.now();
    int var10 = var9.getDayOfYear();
    org.joda.time.Chronology var11 = var9.getChronology();
    org.joda.time.LocalDateTime.Property var12 = var9.centuryOfEra();
    org.joda.time.LocalDateTime var14 = var9.plusMinutes(2013);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var19 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var18);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var21 = var20.year();
    boolean var22 = var18.isBefore((org.joda.time.ReadableInstant)var20);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var33 = var24.plus((org.joda.time.ReadableDuration)var29);
    var20.add((org.joda.time.ReadableDuration)var29);
    var20.addDays(104);
    org.joda.time.MutableDateTime.Property var37 = var20.minuteOfDay();
    org.joda.time.DateTimeZone var39 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var40 = org.joda.time.DateTimeUtils.getZone(var39);
    java.lang.String var41 = var39.toString();
    var20.setZone(var39);
    org.joda.time.format.DateTimeFormatterBuilder var43 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var45 = var43.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var47 = var43.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var48 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var49 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var48);
    org.joda.time.LocalDate var50 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var48);
    org.joda.time.DateTimeField var51 = var48.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var52 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    int[] var59 = var52.get((org.joda.time.ReadablePartial)var57, 100L);
    org.joda.time.chrono.EthiopicChronology var63 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var64 = var63.hours();
    org.joda.time.LocalTime var65 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var63);
    org.joda.time.Period var66 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var63);
    org.joda.time.DateTimeField var67 = var63.millisOfSecond();
    org.joda.time.DateTimeField var68 = var63.secondOfDay();
    org.joda.time.field.SkipDateTimeField var70 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var52, var68, 100);
    org.joda.time.LocalDateTime var71 = org.joda.time.LocalDateTime.now();
    int var72 = var71.getDayOfYear();
    org.joda.time.Chronology var73 = var71.getChronology();
    int var74 = var71.getYearOfCentury();
    int var75 = var70.getMaximumValue((org.joda.time.ReadablePartial)var71);
    boolean var77 = var70.isLeap(1L);
    org.joda.time.LocalDateTime var78 = org.joda.time.LocalDateTime.now();
    int var79 = var78.getDayOfYear();
    int var80 = var70.getMinimumValue((org.joda.time.ReadablePartial)var78);
    org.joda.time.DurationField var81 = var70.getDurationField();
    org.joda.time.DateTimeFieldType var82 = var70.getType();
    org.joda.time.field.OffsetDateTimeField var86 = new org.joda.time.field.OffsetDateTimeField(var51, var82, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var89 = new org.joda.time.IllegalFieldValueException(var82, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var92 = var43.appendFraction(var82, 33, (-948));
    boolean var93 = var20.isSupported(var82);
    org.joda.time.LocalDateTime var95 = var14.withField(var82, 10);
    org.joda.time.LocalDate var96 = var8.withFields((org.joda.time.ReadablePartial)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "+00:00:00.759"+ "'", var41.equals("+00:00:00.759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var9 = var3.getDateTimeMillis(1377746598784L, 853, 86399, 2, 86399);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    org.joda.time.MutableDateTime.Property var22 = var5.minuteOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setDateTime(12217692, (-22), 241, 1970, (-13), 999, 692);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    var5.setDayOfYear(104);
    org.joda.time.MutableDateTime.Property var31 = var5.weekyear();
    var5.addSeconds(13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    org.joda.time.DateTimeFieldType[] var23 = var21.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.DateTimeField var26 = var24.minuteOfHour();
    long var30 = var24.add(1L, 1377746580759L, 2005);
    org.joda.time.MonthDay var31 = var21.withChronologyRetainFields((org.joda.time.Chronology)var24);
    org.joda.time.MonthDay var33 = var31.plusDays(8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var35 = var31.toString("PeriodType[YearWeekDayTime]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.DateMidnight.Property var5 = var1.weekOfWeekyear();
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    int[] var13 = var6.get((org.joda.time.ReadablePartial)var11, 100L);
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.DateMidnight var16 = var14.minusMonths(240);
    org.joda.time.Weeks var17 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonthDay var46 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.TimeOfDay var47 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar)var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var49 = var47.withSecondOfMinute(15795333);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDurationBeforeEnd((-1L));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var29 = var28.isBeforeNow();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var51, (org.joda.time.ReadableInstant)var53);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    boolean var57 = var53.isBefore((org.joda.time.ReadableInstant)var55);
    org.joda.time.Interval var58 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var55);
    boolean var60 = var58.isAfter(10L);
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var64 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var61.setChronology((org.joda.time.Chronology)var64);
    org.joda.time.Interval var66 = var58.withChronology((org.joda.time.Chronology)var64);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    var69.setWeekOfWeekyear(1);
    int var72 = var69.getRoundingMode();
    var69.addMillis(100);
    var69.setSecondOfMinute(10);
    org.joda.time.PeriodType var77 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var78 = new org.joda.time.Period((org.joda.time.ReadableDuration)var68, (org.joda.time.ReadableInstant)var69, var77);
    org.joda.time.Days var79 = var78.toStandardDays();
    org.joda.time.Hours var80 = var79.toStandardHours();
    java.lang.String var81 = var80.toString();
    org.joda.time.Days var82 = var80.toStandardDays();
    org.joda.time.Minutes var83 = var82.toStandardMinutes();
    org.joda.time.Duration var84 = var83.toStandardDuration();
    org.joda.time.Interval var85 = var58.withDurationAfterStart((org.joda.time.ReadableDuration)var84);
    org.joda.time.Interval var86 = var28.overlap((org.joda.time.ReadableInterval)var85);
    org.joda.time.Seconds var87 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "PT0H"+ "'", var81.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.standard();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var3 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime.Property var12 = var9.minuteOfHour();
    org.joda.time.MutableDateTime.Property var13 = var9.millisOfSecond();
    org.joda.time.Chronology var14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(9L, var2, var14);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    var19.setWeekOfWeekyear(1);
    int var22 = var19.getRoundingMode();
    var19.addMillis(100);
    var19.setSecondOfMinute(10);
    org.joda.time.PeriodType var27 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var28 = new org.joda.time.Period((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var19, var27);
    org.joda.time.Days var29 = var28.toStandardDays();
    org.joda.time.DurationFieldType var30 = var29.getFieldType();
    int var31 = var16.indexOf(var30);
    var15.add(var30, 22);
    org.joda.time.IllegalFieldValueException var35 = new org.joda.time.IllegalFieldValueException(var30, "1970-01");
    int var36 = var0.indexOf(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    var11.setWeeks(69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod(var38);
    int var40 = var39.getSeconds();
    int var41 = var39.getMonths();
    var39.setWeeks((-1));
    org.joda.time.Weeks var44 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var39);
    org.joda.time.Minutes var45 = var44.toStandardMinutes();
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    org.joda.time.MutableDateTime.Property var48 = var46.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var49 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var50 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var49);
    org.joda.time.Period var55 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var57 = var55.plusSeconds(100);
    org.joda.time.Period var59 = var55.minusMillis(10);
    boolean var60 = var50.equals((java.lang.Object)10);
    org.joda.time.Weeks var61 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var50);
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var63 = var62.year();
    org.joda.time.MutableDateTime.Property var64 = var62.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var66 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var65);
    org.joda.time.Period var71 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var73 = var71.plusSeconds(100);
    org.joda.time.Period var75 = var71.minusMillis(10);
    boolean var76 = var66.equals((java.lang.Object)10);
    org.joda.time.Weeks var77 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var62, (org.joda.time.ReadableInstant)var66);
    org.joda.time.Weeks var78 = var61.minus(var77);
    org.joda.time.Weeks var80 = var77.minus(3);
    boolean var81 = var44.isLessThan(var80);
    boolean var82 = var37.isLessThan(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    boolean var37 = var28.isBeforeNow();
    org.joda.time.TimeOfDay var38 = new org.joda.time.TimeOfDay();
    int var39 = var38.size();
    org.joda.time.chrono.EthiopicChronology var41 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var42 = var41.hours();
    org.joda.time.LocalTime var43 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var41);
    org.joda.time.LocalTime var45 = var43.withMillisOfSecond(1);
    org.joda.time.LocalTime var47 = var45.minusHours((-1));
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var38, (org.joda.time.ReadablePartial)var47);
    org.joda.time.DurationFieldType var49 = var48.getFieldType();
    org.joda.time.IllegalFieldValueException var53 = new org.joda.time.IllegalFieldValueException(var49, (java.lang.Number)10.0d, (java.lang.Number)1377746681334L, (java.lang.Number)1377742981948L);
    boolean var54 = var28.equals((java.lang.Object)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var2 = org.joda.time.Months.months((-1));
    org.joda.time.Months var4 = var2.plus(100);
    int var5 = var2.size();
    java.lang.String var6 = var0.print((org.joda.time.ReadablePeriod)var2);
    org.joda.time.format.PeriodPrinter var7 = var0.getPrinter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var9 = var0.parseMutablePeriod("2005-12-23");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "-1 months"+ "'", var6.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.PeriodType var14 = var12.withWeeksRemoved();
    org.joda.time.LocalDateTime var15 = org.joda.time.LocalDateTime.now();
    int var16 = var15.getDayOfYear();
    org.joda.time.LocalDateTime var18 = var15.minusSeconds(2005);
    org.joda.time.Chronology var19 = var15.getChronology();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(1377746580759L, 100L, var14, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    org.joda.time.DateTime var28 = org.joda.time.DateTime.now();
    long var29 = var28.getMillis();
    var10.setMillis((org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime.Property var31 = var10.yearOfCentury();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.setMinuteOfDay(73381948);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377746620015L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    int var3 = var1.getDayOfYear();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    int var9 = var8.getMillisOfSecond();
    boolean var10 = var1.isEqual((org.joda.time.ReadableInstant)var8);
    org.joda.time.DateMidnight var12 = var8.withYearOfEra(9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    java.lang.String var43 = var38.getAsText(208L);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.withMonthOfYear(1);
    org.joda.time.LocalDate var50 = var46.withWeekyear(1);
    org.joda.time.LocalDate var52 = var46.withDayOfYear(1);
    org.joda.time.LocalDate var54 = var52.minusMonths(16);
    int var55 = var38.getMaximumValue((org.joda.time.ReadablePartial)var52);
    org.joda.time.chrono.EthiopicChronology var56 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var57 = var56.dayOfYear();
    org.joda.time.YearMonthDay var58 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var56);
    int var59 = var58.getYear();
    org.joda.time.Period var62 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    var65.setWeekOfWeekyear(1);
    int var68 = var65.getRoundingMode();
    var65.addMillis(100);
    var65.setSecondOfMinute(10);
    org.joda.time.PeriodType var73 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var74 = new org.joda.time.Period((org.joda.time.ReadableDuration)var64, (org.joda.time.ReadableInstant)var65, var73);
    org.joda.time.Days var75 = var74.toStandardDays();
    org.joda.time.DurationFieldType var76 = var75.getFieldType();
    int var77 = var62.get(var76);
    org.joda.time.YearMonthDay var78 = var58.minus((org.joda.time.ReadablePeriod)var62);
    org.joda.time.DateTimeFieldType[] var79 = var78.getFieldTypes();
    int var80 = var38.getMaximumValue((org.joda.time.ReadablePartial)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1092"+ "'", var43.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 948);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime.Property var28 = var19.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.YearMonthDay var5 = var2.withYear(28);
    org.joda.time.Instant var7 = new org.joda.time.Instant(2762381894421796L);
    long var8 = var7.getMillis();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var14 = var10.toDuration();
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Years var19 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var20 = var19.getPeriodType();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableDuration)var14, var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var21);
    org.joda.time.tz.FixedDateTimeZone var27 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod(var28);
    var29.addDays(1);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    var29.add((org.joda.time.ReadableDuration)var35);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var35, (org.joda.time.ReadableInstant)var38);
    var39.clear();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var46 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var45);
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var48 = var47.year();
    boolean var49 = var45.isBefore((org.joda.time.ReadableInstant)var47);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.Duration var60 = var51.plus((org.joda.time.ReadableDuration)var56);
    var47.add((org.joda.time.ReadableDuration)var56);
    org.joda.time.MutableDateTime.Property var62 = var47.dayOfWeek();
    var39.setPeriod((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var47);
    boolean var64 = var27.equals((java.lang.Object)var39);
    boolean var65 = var27.isFixed();
    org.joda.time.LocalTime var66 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone)var27);
    org.joda.time.DateTime var67 = var2.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone)var27);
    int var69 = var27.getOffsetFromLocal(1325559981L);
    long var71 = var27.convertUTCToLocal(1377768182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1377768182807L);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }


    org.joda.time.YearMonth var0 = org.joda.time.YearMonth.now();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var2 = var0.toLocalDate(12200);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.MutableDateTime var12 = var2.copy();
    var12.setMillisOfSecond(884);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeFieldType[] var18 = var17.getFieldTypes();
    org.joda.time.YearMonth var20 = var17.plusYears(15795333);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.seconds();
    org.joda.time.Period var3 = new org.joda.time.Period(1377746580759L, 1377746597600L, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeFormatterBuilder var59 = var5.appendYearOfEra(69781948, 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    int var45 = var43.getCenturyOfEra();
    org.joda.time.YearMonthDay var46 = var43.toYearMonthDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Duration var77 = var76.toDuration();
    org.joda.time.Years var78 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var76);
    java.lang.String var79 = var76.toString();
    org.joda.time.Period var84 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.Interval var85 = var76.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var84);
    org.joda.time.DurationFieldType[] var86 = var84.getFieldTypes();
    org.joda.time.Period var87 = var84.toPeriod();
    int var88 = var87.getMonths();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "2013-08-29T03:23:40.426+00:00:00.100/2013-08-29T03:23:40.426+00:00:00.100"+ "'", var79.equals("2013-08-29T03:23:40.426+00:00:00.100/2013-08-29T03:23:40.426+00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    org.joda.time.Years var1 = org.joda.time.Years.years(2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.LocalDateTime var5 = org.joda.time.LocalDateTime.now();
    int var6 = var5.getDayOfYear();
    org.joda.time.Chronology var7 = var5.getChronology();
    org.joda.time.YearMonthDay var8 = new org.joda.time.YearMonthDay(var7);
    org.joda.time.YearMonthDay var10 = var8.plusYears(2013);
    org.joda.time.Days var11 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial)var2, (org.joda.time.ReadablePartial)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    java.lang.String var6 = var4.toString();
    org.joda.time.format.DateTimeFormatterBuilder var7 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var11 = var7.appendHourOfHalfday(759);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var11.appendDayOfYear(12182);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var17 = var14.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    int[] var25 = var18.get((org.joda.time.ReadablePartial)var23, 100L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var29);
    org.joda.time.Period var32 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var29);
    org.joda.time.DateTimeField var33 = var29.millisOfSecond();
    org.joda.time.DateTimeField var34 = var29.secondOfDay();
    org.joda.time.field.SkipDateTimeField var36 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var18, var34, 100);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var36.getMaximumValue((org.joda.time.ReadablePartial)var37);
    boolean var43 = var36.isLeap(1L);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    int var46 = var36.getMinimumValue((org.joda.time.ReadablePartial)var44);
    org.joda.time.DurationField var47 = var36.getDurationField();
    org.joda.time.DateTimeFieldType var48 = var36.getType();
    org.joda.time.field.OffsetDateTimeField var52 = new org.joda.time.field.OffsetDateTimeField(var17, var48, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var55 = new org.joda.time.IllegalFieldValueException(var48, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var56 = var13.appendText(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var57 = var4.get(var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1962-04-23"+ "'", var6.equals("1962-04-23"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    var0.setDate((org.joda.time.ReadableInstant)var7);
    org.joda.time.Instant var13 = org.joda.time.Instant.now();
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var14);
    var15.addDays(1);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    var15.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var24);
    org.joda.time.Instant var26 = var13.minus((org.joda.time.ReadableDuration)var21);
    var7.add((org.joda.time.ReadableDuration)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    java.lang.String var7 = var2.toString();
    org.joda.time.Period var12 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var14 = var12.plusYears((-1));
    org.joda.time.Minutes var15 = var12.toStandardMinutes();
    org.joda.time.Minutes var17 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var18 = var15.minus(var17);
    org.joda.time.PeriodType var19 = var15.getPeriodType();
    org.joda.time.Period var20 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var2, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "2012-12-21T03:23:40.525Z"+ "'", var7.equals("2012-12-21T03:23:40.525Z"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    int var6 = var4.getOffsetFromLocal(1377746599386L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Interval var33 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var30);
    boolean var34 = var33.isBeforeNow();
    org.joda.time.Duration var35 = var33.toDuration();
    org.joda.time.LocalDateTime var36 = var0.minus((org.joda.time.ReadableDuration)var35);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var37.getWeekOfWeekyear();
    org.joda.time.Period var42 = new org.joda.time.Period((org.joda.time.ReadablePartial)var36, (org.joda.time.ReadablePartial)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var44 = var37.withSecondOfMinute(100);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 35);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var1 = org.joda.time.Interval.parse("8595 seconds");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.LocalDateTime var4 = new org.joda.time.LocalDateTime(var2);
    org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(1377742981000L, var2);
    org.joda.time.LocalDateTime.Property var6 = var5.millisOfDay();
    org.joda.time.LocalDateTime var8 = var5.minusSeconds(69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    var7.addHours((-948));
    org.joda.time.MutableDateTime.Property var31 = var7.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    org.joda.time.LocalDate var1 = new org.joda.time.LocalDate(1L);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.parseSeconds("PT8594S");
    org.joda.time.Weeks var2 = var1.toStandardWeeks();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.LocalDate var7 = var5.minusMonths(0);
    org.joda.time.DateTime var8 = var5.toDateTimeAtMidnight();
    org.joda.time.DateTime var10 = var8.withMillis(100L);
    org.joda.time.DateTime.Property var11 = var10.era();
    org.joda.time.TimeOfDay var12 = var10.toTimeOfDay();
    org.joda.time.TimeOfDay var14 = var12.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var19 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var18);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var29.plus((org.joda.time.ReadableDuration)var34);
    var25.add((org.joda.time.ReadableDuration)var34);
    org.joda.time.Seconds var40 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Duration var41 = var40.toStandardDuration();
    org.joda.time.TimeOfDay var43 = var14.withPeriodAdded((org.joda.time.ReadablePeriod)var40, 948);
    org.joda.time.Chronology var44 = var14.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var45 = new org.joda.time.DateMidnight((java.lang.Object)var2, var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatterBuilder var52 = var49.appendFractionOfMinute((-17), 194);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.Years var6 = var4.dividedBy(2);
    org.joda.time.Years var8 = var4.multipliedBy(692);
    org.joda.time.Years var10 = var8.plus(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var28 = var18.set(1377746594906L, "2013-08-29T03:23:38.914+00:00:00.100/2013-08-29T03:23:38.914+00:00:00.100");
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    boolean var42 = var4.isFixed();
    boolean var43 = var4.isFixed();
    org.joda.time.chrono.EthiopicChronology var44 = org.joda.time.chrono.EthiopicChronology.getInstance((org.joda.time.DateTimeZone)var4);
    org.joda.time.DateTime var45 = new org.joda.time.DateTime((org.joda.time.DateTimeZone)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.tz.FixedDateTimeZone var7 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var8 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var9 = new org.joda.time.MutablePeriod(var8);
    var9.addDays(1);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    var9.add((org.joda.time.ReadableDuration)var15);
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var18);
    var19.clear();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    boolean var29 = var25.isBefore((org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    var27.add((org.joda.time.ReadableDuration)var36);
    org.joda.time.MutableDateTime.Property var42 = var27.dayOfWeek();
    var19.setPeriod((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var27);
    boolean var44 = var7.equals((java.lang.Object)var19);
    boolean var45 = var7.isFixed();
    boolean var46 = var7.isFixed();
    org.joda.time.Chronology var47 = var0.withZone((org.joda.time.DateTimeZone)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(var2);
    org.joda.time.YearMonthDay.Property var4 = var3.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.LocalDateTime var4 = new org.joda.time.LocalDateTime(var2);
    org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(1377742981000L, var2);
    org.joda.time.LocalDateTime.Property var6 = var5.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    boolean var61 = var57.isPrecise();
    long var62 = var57.getUnitMillis();
    long var65 = var57.getDifferenceAsLong((-1000L), 1377768182707L);
    long var68 = var57.getMillis(12196171, (-7200000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86400000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-15946L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1053749174400000L);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var7 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.MutableDateTime.Property var16 = var13.minuteOfHour();
    org.joda.time.MutableDateTime.Property var17 = var13.millisOfSecond();
    org.joda.time.Chronology var18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var13);
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(9L, var6, var18);
    org.joda.time.YearMonth var20 = new org.joda.time.YearMonth(99L, var18);
    org.joda.time.DateTime var21 = var2.toDateTime(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var23 = var21.withSecondOfMinute(240);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.DateMidnight var28 = var25.minusWeeks((-1));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.DateMidnight var44 = var28.withFieldAdded(var42, 1);
    org.joda.time.MutableInterval var45 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var46 = var45.copy();
    org.joda.time.DateTime var47 = var46.getStart();
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.MutablePeriod var76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var47, var74);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var79 = new org.joda.time.MutableDateTime();
    var79.setWeekOfWeekyear(1);
    int var82 = var79.getRoundingMode();
    var79.addMillis(100);
    var79.setSecondOfMinute(10);
    org.joda.time.PeriodType var87 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var88 = new org.joda.time.Period((org.joda.time.ReadableDuration)var78, (org.joda.time.ReadableInstant)var79, var87);
    org.joda.time.PeriodType var89 = var87.withWeeksRemoved();
    org.joda.time.MutablePeriod var90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var28, var87);
    org.joda.time.DateMidnight var92 = var28.minusDays(33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    java.lang.String var20 = var18.toString();
    int var21 = var18.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var23 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 2005);
    boolean var24 = var23.isSupported();
    org.joda.time.DurationField var25 = var23.getDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var20.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.hourMinute();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var2 = org.joda.time.LocalDateTime.parse("03:23:01.948", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var6 = new org.joda.time.MutableInterval((java.lang.Object)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }


    org.joda.time.YearMonth var0 = new org.joda.time.YearMonth();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var4 = var2.plusDays(2013);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    org.joda.time.DateMidnight var25 = var9.withFieldAdded(var23, 1);
    org.joda.time.field.PreciseDurationField var27 = new org.joda.time.field.PreciseDurationField(var23, 1L);
    org.joda.time.DateMidnight var29 = var4.withFieldAdded(var23, 228);
    org.joda.time.field.PreciseDurationField var31 = new org.joda.time.field.PreciseDurationField(var23, (-9L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var33 = var0.withFieldAdded(var23, 4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    var0.setDurationBeforeEnd(1L);
    long var4 = var0.toDurationMillis();
    org.joda.time.ReadableInterval var5 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval)var0);
    var0.setEndMillis(228009L);
    org.joda.time.DateTime var15 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    int var16 = var15.getHourOfDay();
    org.joda.time.DateTime.Property var17 = var15.yearOfCentury();
    org.joda.time.LocalDate var18 = var15.toLocalDate();
    boolean var19 = var0.contains((org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.DateMidnight var23 = var21.plusDays(2013);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.DateMidnight var28 = var25.minusWeeks((-1));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.DateMidnight var44 = var28.withFieldAdded(var42, 1);
    org.joda.time.field.PreciseDurationField var46 = new org.joda.time.field.PreciseDurationField(var42, 1L);
    org.joda.time.DateMidnight var48 = var23.withFieldAdded(var42, 228);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var54 = var50.toDuration();
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.DateMidnight var58 = var48.minus((org.joda.time.ReadableDuration)var56);
    org.joda.time.MutableDateTime var59 = var48.toMutableDateTimeISO();
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var66 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var65);
    org.joda.time.LocalDate var67 = var66.toLocalDate();
    org.joda.time.MutableDateTime var68 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var69 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var66, (org.joda.time.ReadableInstant)var68);
    org.joda.time.MutableDateTime var70 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var71 = var70.year();
    boolean var72 = var68.isBefore((org.joda.time.ReadableInstant)var70);
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    boolean var77 = var74.isShorterThan((org.joda.time.ReadableDuration)var76);
    org.joda.time.Duration var79 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var81 = org.joda.time.Duration.standardHours((-1L));
    boolean var82 = var79.isShorterThan((org.joda.time.ReadableDuration)var81);
    org.joda.time.Duration var83 = var74.plus((org.joda.time.ReadableDuration)var79);
    var70.add((org.joda.time.ReadableDuration)var79);
    org.joda.time.Seconds var85 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var70);
    var70.setWeekOfWeekyear(28);
    org.joda.time.DateTime var88 = org.joda.time.DateTime.now();
    long var89 = var88.getMillis();
    var70.setMillis((org.joda.time.ReadableInstant)var88);
    org.joda.time.DateTime var91 = var88.withTimeAtStartOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInterval((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var88);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1377746620857L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    org.joda.time.TimeOfDay var15 = var13.minusMinutes(0);
    org.joda.time.TimeOfDay var17 = var15.plusMinutes(35);
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    int[] var25 = var18.get((org.joda.time.ReadablePartial)var23, 100L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var29);
    org.joda.time.Period var32 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var29);
    org.joda.time.DateTimeField var33 = var29.millisOfSecond();
    org.joda.time.DateTimeField var34 = var29.secondOfDay();
    org.joda.time.field.SkipDateTimeField var36 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var18, var34, 100);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var36.getMaximumValue((org.joda.time.ReadablePartial)var37);
    boolean var43 = var36.isLeap(1L);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    int var46 = var36.getMinimumValue((org.joda.time.ReadablePartial)var44);
    org.joda.time.DurationField var47 = var36.getDurationField();
    org.joda.time.DateTimeFieldType var48 = var36.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay.Property var49 = var15.property(var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 965);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("hi!", "years", 7, 611);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    int var9 = var6.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var11 = var6.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var12 = var11.yearOfCentury();
    org.joda.time.LocalDateTime var14 = var11.plusWeeks(240);
    boolean var15 = var5.isAfter((org.joda.time.ReadablePartial)var11);
    org.joda.time.LocalDateTime var17 = var11.minusSeconds(318);
    int var18 = var17.getCenturyOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 20);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var19 = var10.plus((org.joda.time.ReadableDuration)var15);
    var6.add((org.joda.time.ReadableDuration)var15);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Interval var29 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var26);
    boolean var31 = var29.isAfter(10L);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var32.setChronology((org.joda.time.Chronology)var35);
    org.joda.time.Interval var37 = var29.withChronology((org.joda.time.Chronology)var35);
    org.joda.time.DateTime var38 = new org.joda.time.DateTime(1377673200216L, (org.joda.time.Chronology)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    org.joda.time.DateTimeFieldType[] var23 = var21.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.DateTimeField var26 = var24.minuteOfHour();
    long var30 = var24.add(1L, 1377746580759L, 2005);
    org.joda.time.MonthDay var31 = var21.withChronologyRetainFields((org.joda.time.Chronology)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var33 = var21.withDayOfMonth(37);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }


    org.joda.time.LocalDate var0 = org.joda.time.LocalDate.now();
    org.joda.time.LocalDate.Property var1 = var0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    java.lang.String var18 = var17.toString();
    org.joda.time.YearMonth var20 = var17.plusYears(21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var22 = var17.withMonthOfYear(692);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "1970-01"+ "'", var18.equals("1970-01"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    long var26 = var22.getValueAsLong(1377746601520L, (-100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746601520L);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    int var24 = var4.getSecondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.minutes();
    org.joda.time.DateTimeField var9 = var7.year();
    org.joda.time.DateTimeField var10 = var7.millisOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var11 = new org.joda.time.DateTime(240, 14, 73381948, 951, 12196, 12194, 999, (org.joda.time.Chronology)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.LocalDateTime var57 = org.joda.time.LocalDateTime.now();
    int var58 = var57.getDayOfYear();
    org.joda.time.LocalDateTime var60 = var57.minusSeconds(2005);
    org.joda.time.chrono.EthiopicChronology var62 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var63 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var64 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var63);
    org.joda.time.LocalDate var65 = var64.toLocalDate();
    org.joda.time.LocalDate var67 = var65.minusMonths(0);
    int[] var69 = var62.get((org.joda.time.ReadablePartial)var67, 100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var71 = var54.set((org.joda.time.ReadablePartial)var57, 765, var69, 12217692);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.minusSeconds(8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var7 = var5.withSecondOfMinute(100);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.DateMidnight.Property var5 = var1.weekOfWeekyear();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    var7.add((org.joda.time.ReadableDuration)var13);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var16);
    var17.clear();
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    var17.add((org.joda.time.ReadablePeriod)var20);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.Hours var50 = var44.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var51 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var20.setPeriod((org.joda.time.ReadableDuration)var44, (org.joda.time.Chronology)var51);
    org.joda.time.MutablePeriod var53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var44);
    int var54 = var53.size();
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.Period var62 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var64 = var62.plusSeconds(100);
    org.joda.time.Period var66 = var62.minusMillis(10);
    boolean var67 = var57.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var68 = var57.dayOfYear();
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.LocalDate var73 = var71.minusMonths(0);
    org.joda.time.DateTime var74 = var71.toDateTimeAtMidnight();
    org.joda.time.DateTime var76 = var74.withCenturyOfEra(4);
    org.joda.time.Days var77 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var57, (org.joda.time.ReadableInstant)var76);
    org.joda.time.DateTime var79 = var76.plusSeconds(10);
    org.joda.time.tz.FixedDateTimeZone var84 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.DateTime var85 = var76.toDateTime((org.joda.time.DateTimeZone)var84);
    org.joda.time.chrono.CopticChronology var86 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)var84);
    var53.setPeriod(1377673200216L, (org.joda.time.Chronology)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.now();
    boolean var9 = var7.isAfter((org.joda.time.ReadablePartial)var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DurationField var13 = var10.hours();
    boolean var14 = var8.equals((java.lang.Object)var10);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.Days var27 = var26.toStandardDays();
    org.joda.time.LocalTime var28 = var8.minus((org.joda.time.ReadablePeriod)var26);
    int var29 = var1.compareTo((org.joda.time.ReadablePartial)var28);
    org.joda.time.Years var31 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var32 = var31.getPeriodType();
    org.joda.time.Years var34 = org.joda.time.Years.years((-1));
    int var35 = var31.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var34);
    org.joda.time.LocalTime var36 = var28.minus((org.joda.time.ReadablePeriod)var31);
    org.joda.time.YearMonth var38 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var40 = var38.withChronologyRetainFields((org.joda.time.Chronology)var39);
    org.joda.time.Years var42 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var43 = var42.getPeriodType();
    org.joda.time.Years var45 = org.joda.time.Years.years((-1));
    int var46 = var42.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var45);
    int[] var49 = var39.get((org.joda.time.ReadablePeriod)var45, 0L, 0L);
    boolean var50 = var31.isLessThan(var45);
    org.joda.time.TimeOfDay var51 = new org.joda.time.TimeOfDay();
    int var52 = var51.size();
    org.joda.time.chrono.EthiopicChronology var54 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var55 = var54.hours();
    org.joda.time.LocalTime var56 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var54);
    org.joda.time.LocalTime var58 = var56.withMillisOfSecond(1);
    org.joda.time.LocalTime var60 = var58.minusHours((-1));
    org.joda.time.Years var61 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var51, (org.joda.time.ReadablePartial)var60);
    org.joda.time.Years var63 = var61.minus(16);
    boolean var64 = var31.isGreaterThan(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.DurationFieldType var38 = var12.getFieldType();
    org.joda.time.Days var40 = var12.plus(759);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    var43.setWeekOfWeekyear(1);
    int var46 = var43.getRoundingMode();
    var43.addMillis(100);
    var43.setSecondOfMinute(10);
    org.joda.time.PeriodType var51 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var52 = new org.joda.time.Period((org.joda.time.ReadableDuration)var42, (org.joda.time.ReadableInstant)var43, var51);
    org.joda.time.Days var53 = var52.toStandardDays();
    java.lang.String var54 = var53.toString();
    org.joda.time.Days var56 = var53.plus(692);
    boolean var57 = var12.isGreaterThan(var56);
    org.joda.time.Period var62 = new org.joda.time.Period(1, 10, 10, 1);
    int var63 = var62.getWeeks();
    org.joda.time.Period var64 = var62.toPeriod();
    org.joda.time.Days var65 = var64.toStandardDays();
    boolean var66 = var12.isGreaterThan(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "P0D"+ "'", var54.equals("P0D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod(241, 18, 12200, 40);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.DateTime var24 = var23.withEarlierOffsetAtOverlap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusHours(69);
    org.joda.time.LocalDateTime var10 = var5.minusHours((-22));
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var11);
    var12.addDays(1);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    var12.add((org.joda.time.ReadableDuration)var18);
    org.joda.time.DateTime var21 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var23 = var21.withMillis(0L);
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var23);
    org.joda.time.LocalDateTime var25 = var10.minus((org.joda.time.ReadableDuration)var18);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var27 = var26.dayOfYear();
    org.joda.time.YearMonthDay var28 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var26);
    org.joda.time.YearMonthDay var30 = var28.plusYears(13);
    org.joda.time.DateTimeZone var32 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var33 = var28.toInterval(var32);
    org.joda.time.DateMidnight var34 = var28.toDateMidnight();
    org.joda.time.DateMidnight var36 = var34.plus(1377742981000L);
    org.joda.time.DateTime var37 = var10.toDateTime((org.joda.time.ReadableInstant)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(var2);
    org.joda.time.YearMonthDay var5 = var3.plusYears(2013);
    org.joda.time.TimeOfDay var6 = new org.joda.time.TimeOfDay();
    int var7 = var6.size();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var10 = var9.hours();
    org.joda.time.LocalTime var11 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var9);
    org.joda.time.LocalTime var13 = var11.withMillisOfSecond(1);
    org.joda.time.LocalTime var15 = var13.minusHours((-1));
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var6, (org.joda.time.ReadablePartial)var15);
    int var17 = var6.getMillisOfSecond();
    org.joda.time.TimeOfDay var19 = var6.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var20 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var25 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var27 = var25.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var29 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstance(var29);
    long var32 = var25.getMillisKeepLocal(var29, 1377746580759L);
    org.joda.time.Chronology var33 = var20.withZone(var29);
    java.util.TimeZone var34 = var29.toTimeZone();
    org.joda.time.DateTime var35 = var5.toDateTime(var19, var29);
    int var36 = var35.getDayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 363);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 6);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Minutes var5 = var2.toStandardMinutes();
    int var6 = var2.getMonths();
    org.joda.time.Period var8 = var2.minusMillis(69);
    org.joda.time.Period var10 = var2.minusHours(69);
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.hours();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var12 = var2.withPeriodType(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTime var29 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var31 = var29.withMillis(0L);
    boolean var32 = var28.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var37 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var36);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var39 = var38.year();
    boolean var40 = var36.isBefore((org.joda.time.ReadableInstant)var38);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    boolean var45 = var42.isShorterThan((org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var51 = var42.plus((org.joda.time.ReadableDuration)var47);
    var38.add((org.joda.time.ReadableDuration)var47);
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var57 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var54, (org.joda.time.ReadableInstant)var56);
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var59 = var58.year();
    boolean var60 = var56.isBefore((org.joda.time.ReadableInstant)var58);
    org.joda.time.Interval var61 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var58);
    boolean var62 = var61.isBeforeNow();
    org.joda.time.Duration var63 = var61.toDuration();
    org.joda.time.DateTime var64 = var29.minus((org.joda.time.ReadableDuration)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusYears((-1));
    org.joda.time.Minutes var18 = var15.toStandardMinutes();
    org.joda.time.Minutes var19 = var7.plus(var18);
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusYears((-1));
    org.joda.time.Minutes var28 = var25.toStandardMinutes();
    org.joda.time.Minutes var30 = var28.minus(692);
    boolean var31 = var19.isGreaterThan(var30);
    org.joda.time.Period var36 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var38 = var36.plusYears((-1));
    org.joda.time.Minutes var39 = var36.toStandardMinutes();
    org.joda.time.Minutes var41 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var42 = var39.minus(var41);
    org.joda.time.Period var47 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var49 = var47.plusYears((-1));
    org.joda.time.Minutes var50 = var47.toStandardMinutes();
    org.joda.time.Minutes var51 = var39.plus(var50);
    org.joda.time.DurationFieldType var52 = var51.getFieldType();
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusYears((-1));
    org.joda.time.Minutes var60 = var57.toStandardMinutes();
    org.joda.time.Minutes var62 = var60.minus(692);
    boolean var63 = var51.isGreaterThan(var62);
    boolean var64 = var30.isGreaterThan(var62);
    org.joda.time.Minutes var65 = var62.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var6 = new org.joda.time.LocalDateTime(31, 15, 34, 23, 9, 69);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var0);
    org.joda.time.YearMonth var4 = var2.plusMonths(100);
    org.joda.time.format.DateTimeFormatterBuilder var5 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var5.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var9.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var11 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var13 = var11.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var15 = var11.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var16);
    org.joda.time.DateTimeField var19 = var16.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.LocalDate var25 = var23.minusMonths(0);
    int[] var27 = var20.get((org.joda.time.ReadablePartial)var25, 100L);
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var32 = var31.hours();
    org.joda.time.LocalTime var33 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var31);
    org.joda.time.Period var34 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var31);
    org.joda.time.DateTimeField var35 = var31.millisOfSecond();
    org.joda.time.DateTimeField var36 = var31.secondOfDay();
    org.joda.time.field.SkipDateTimeField var38 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var20, var36, 100);
    org.joda.time.LocalDateTime var39 = org.joda.time.LocalDateTime.now();
    int var40 = var39.getDayOfYear();
    org.joda.time.Chronology var41 = var39.getChronology();
    int var42 = var39.getYearOfCentury();
    int var43 = var38.getMaximumValue((org.joda.time.ReadablePartial)var39);
    boolean var45 = var38.isLeap(1L);
    org.joda.time.LocalDateTime var46 = org.joda.time.LocalDateTime.now();
    int var47 = var46.getDayOfYear();
    int var48 = var38.getMinimumValue((org.joda.time.ReadablePartial)var46);
    org.joda.time.DurationField var49 = var38.getDurationField();
    org.joda.time.DateTimeFieldType var50 = var38.getType();
    org.joda.time.field.OffsetDateTimeField var54 = new org.joda.time.field.OffsetDateTimeField(var19, var50, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var57 = new org.joda.time.IllegalFieldValueException(var50, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var60 = var11.appendFraction(var50, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var61 = var10.appendText(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var62 = var2.get(var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }


    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var3);
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval((-7200000L), (-208L), (org.joda.time.Chronology)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.LocalTime var9 = var5.withHourOfDay(4);
    org.joda.time.LocalTime var11 = var9.plusMillis(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var13 = var11.withHourOfDay(57600100);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }


    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var3 = var2.minutes();
    org.joda.time.DateTimeField var4 = var2.hourOfHalfday();
    org.joda.time.DurationField var5 = var2.years();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(1377746581241L, 99L, (org.joda.time.Chronology)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }


    org.joda.time.Partial var2 = new org.joda.time.Partial();
    java.lang.String var3 = var2.toString();
    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var5 = new org.joda.time.MutablePeriod(var4);
    org.joda.time.DurationFieldType[] var6 = var5.getFieldTypes();
    org.joda.time.Partial var7 = var2.plus((org.joda.time.ReadablePeriod)var5);
    var5.add(2762381894421796L);
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.minutes();
    org.joda.time.DateTime var12 = new org.joda.time.DateTime((java.lang.Object)2762381894421796L, (org.joda.time.Chronology)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var13 = new org.joda.time.TimeOfDay(853, 765, (org.joda.time.Chronology)var10);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }


    int var1 = org.joda.time.field.FieldUtils.safeToInt(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 100);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }


    org.joda.time.format.DateTimeFormatterBuilder var1 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var3 = var1.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var1.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var6.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatter var10 = org.joda.time.format.ISODateTimeFormat.dateHour();
    java.lang.Integer var11 = var10.getPivotYear();
    org.joda.time.format.DateTimeFormatterBuilder var12 = var9.append(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var13 = org.joda.time.YearMonth.parse("2013-10-10T00:00:00.000Z", var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }


    org.joda.time.Period var1 = org.joda.time.Period.days(104);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.YearMonth var45 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.LocalDate var46 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forStyle("2005-12-23");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.withMonthOfYear(1);
    org.joda.time.LocalDate var7 = var3.withWeekyear(1);
    org.joda.time.LocalDate var9 = var3.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var10 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var11 = var9.toString(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.parse("2005-12-23", var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var11.equals("2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.minusWeeks(759);
    org.joda.time.LocalDateTime.Property var7 = var6.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var2 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime.Property var11 = var8.minuteOfHour();
    org.joda.time.MutableDateTime.Property var12 = var8.millisOfSecond();
    org.joda.time.Chronology var13 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(9L, var1, var13);
    org.joda.time.YearMonthDay var15 = new org.joda.time.YearMonthDay(var13);
    org.joda.time.DateMidnight var16 = var15.toDateMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }


    org.joda.time.LocalDate var6 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod(var12);
    var13.addDays(1);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    var13.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var22);
    var23.clear();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var35.plus((org.joda.time.ReadableDuration)var40);
    var31.add((org.joda.time.ReadableDuration)var40);
    org.joda.time.MutableDateTime.Property var46 = var31.dayOfWeek();
    var23.setPeriod((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var31);
    boolean var48 = var11.equals((java.lang.Object)var23);
    boolean var49 = var11.isFixed();
    org.joda.time.LocalTime var50 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateTime var51 = var6.toDateTimeAtStartOfDay((org.joda.time.DateTimeZone)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var52 = new org.joda.time.DateTime(3, 853, 7, 692, 216, (org.joda.time.DateTimeZone)var11);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendMillisOfDay((-59));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    var5.addMillis(216);
    int var24 = var5.getRoundingMode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setWeekOfWeekyear(853);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Duration var1 = org.joda.time.Duration.standardDays(1377742993058L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime((java.lang.Object)var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test452"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.DurationFieldType var40 = var39.getFieldType();
    org.joda.time.Period var42 = var24.withField(var40, 0);
    org.joda.time.PeriodType var43 = var42.getPeriodType();
    org.joda.time.PeriodType var44 = var43.withDaysRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test453"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.TimeOfDay var10 = var0.plus((org.joda.time.ReadablePeriod)var7);
    var7.addYears(1970);
    java.lang.Object var13 = var7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test454"); }


    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.LocalTime var4 = org.joda.time.LocalTime.fromMillisOfDay(1377768182707L, (org.joda.time.Chronology)var2);
    org.joda.time.Chronology var5 = var2.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test455"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("57680", "\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT03:23:01", (-13), 35);
    org.joda.time.DateTime var5 = new org.joda.time.DateTime((org.joda.time.DateTimeZone)var4);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test456"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    var0.addMillis(100);
    var0.setSecondOfMinute(10);
    int var8 = var0.getYearOfEra();
    boolean var10 = var0.isBefore(1377746581948L);
    org.joda.time.MutableDateTime.Property var11 = var0.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test457"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Seconds var27 = var25.plus(2005);
    org.joda.time.Minutes var28 = var25.toStandardMinutes();
    org.joda.time.Minutes var30 = var28.dividedBy(100);
    org.joda.time.Seconds var31 = var28.toStandardSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test458"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.minusMonths(0);
    int[] var8 = var1.get((org.joda.time.ReadablePartial)var6, 100L);
    org.joda.time.DateTime var9 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var1);
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.Period var16 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var13);
    org.joda.time.DateTimeField var17 = var13.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var1, var17);
    org.joda.time.DateTimeField var19 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var18);
    java.lang.String var20 = var18.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "millisOfSecond"+ "'", var20.equals("millisOfSecond"));

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test459"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalTime var45 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar)var44);
    int var46 = var45.getMillisOfDay();
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    var49.setWeekOfWeekyear(1);
    int var52 = var49.getRoundingMode();
    var49.addMillis(100);
    var49.setSecondOfMinute(10);
    org.joda.time.PeriodType var57 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var58 = new org.joda.time.Period((org.joda.time.ReadableDuration)var48, (org.joda.time.ReadableInstant)var49, var57);
    org.joda.time.Days var59 = var58.toStandardDays();
    org.joda.time.Hours var60 = var59.toStandardHours();
    java.lang.String var61 = var60.toString();
    org.joda.time.Days var62 = var60.toStandardDays();
    org.joda.time.Minutes var63 = var62.toStandardMinutes();
    int var64 = var62.size();
    org.joda.time.Minutes var65 = var62.toStandardMinutes();
    org.joda.time.Days var67 = var62.minus(228);
    org.joda.time.LocalTime var68 = var45.plus((org.joda.time.ReadablePeriod)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "PT0H"+ "'", var61.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test460"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var9 = new org.joda.time.Interval((java.lang.Object)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test461"); }


    org.joda.time.Period var8 = new org.joda.time.Period(12217, (-22), 1970, 765, 1, 62, 28, 13);
    org.joda.time.MutableInterval var9 = new org.joda.time.MutableInterval();
    var9.setStartMillis((-1L));
    org.joda.time.Chronology var12 = var9.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime((java.lang.Object)(-22), var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test462"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    org.joda.time.DateMidnight.Property var24 = var4.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test463"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.DateMidnight var11 = var9.minusMonths(100);
    org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    int[] var20 = var13.get((org.joda.time.ReadablePartial)var18, 100L);
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.LocalTime var26 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var24);
    org.joda.time.Period var27 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var24);
    org.joda.time.DateTimeField var28 = var24.millisOfSecond();
    org.joda.time.DateTimeField var29 = var24.secondOfDay();
    org.joda.time.field.SkipDateTimeField var31 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, var29, 100);
    var12.setChronology((org.joda.time.Chronology)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377746621805L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test464"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Hours var49 = var43.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var19.setPeriod((org.joda.time.ReadableDuration)var43, (org.joda.time.Chronology)var50);
    org.joda.time.DateTime var52 = var4.plus((org.joda.time.ReadableDuration)var43);
    org.joda.time.Days var53 = var43.toStandardDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377746621819L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test465"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    org.joda.time.field.PreciseDurationField var59 = new org.joda.time.field.PreciseDurationField(var50, (-1L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var62 = var59.getValue(1378524281334L, 1386408182707L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test466"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Hours var37 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test467"); }


    org.joda.time.DateTimeUtils.setCurrentMillisOffset(1377746617222L);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test468"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Interval var77 = var76.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test469"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.MonthDay var3 = org.joda.time.MonthDay.now(var1);
    org.joda.time.MonthDay var5 = var3.plusDays(100);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.LocalDate var10 = var8.minusMonths(0);
    org.joda.time.DateTime var11 = var8.toDateTimeAtMidnight();
    org.joda.time.DateTime var13 = var11.withMillis(100L);
    org.joda.time.DateTime.Property var14 = var13.era();
    org.joda.time.TimeOfDay var15 = var13.toTimeOfDay();
    org.joda.time.TimeOfDay var17 = var15.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var27 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var26);
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var29 = var28.year();
    boolean var30 = var26.isBefore((org.joda.time.ReadableInstant)var28);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var41 = var32.plus((org.joda.time.ReadableDuration)var37);
    var28.add((org.joda.time.ReadableDuration)var37);
    org.joda.time.Seconds var43 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var28);
    org.joda.time.Duration var44 = var43.toStandardDuration();
    org.joda.time.TimeOfDay var46 = var17.withPeriodAdded((org.joda.time.ReadablePeriod)var43, 948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var47 = new org.joda.time.Period((org.joda.time.ReadablePartial)var3, (org.joda.time.ReadablePartial)var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test470"); }


    org.joda.time.chrono.IslamicChronology var0 = org.joda.time.chrono.IslamicChronology.getInstance();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test471"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.field.FieldUtils.verifyValueBounds("20:23:00.489", 37, 12217692, 2005);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test472"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.LocalTime var86 = var7.toLocalTime();
    int var87 = var86.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 4);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test473"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    var2.setTime(99L);
    var2.setWeekyear(197);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test474"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTime var29 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var31 = var29.withMillis(0L);
    boolean var32 = var28.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var34 = var29.minusWeeks(73381948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test475"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate.Property var7 = var4.yearOfCentury();
    int var8 = var4.getCenturyOfEra();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.Period var28 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var30 = var28.plusSeconds(100);
    org.joda.time.Period var32 = var28.minusMillis(10);
    boolean var33 = var23.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var34 = var23.dayOfYear();
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.LocalDate var39 = var37.minusMonths(0);
    org.joda.time.DateTime var40 = var37.toDateTimeAtMidnight();
    org.joda.time.DateTime var42 = var40.withCenturyOfEra(4);
    org.joda.time.Days var43 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var42);
    org.joda.time.Days var45 = var43.dividedBy(1);
    boolean var46 = var21.isGreaterThan(var43);
    org.joda.time.Weeks var47 = var43.toStandardWeeks();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var65 = var64.year();
    org.joda.time.MutableDateTime.Property var66 = var64.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var67);
    org.joda.time.Period var73 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var75 = var73.plusSeconds(100);
    org.joda.time.Period var77 = var73.minusMillis(10);
    boolean var78 = var68.equals((java.lang.Object)10);
    org.joda.time.Weeks var79 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var64, (org.joda.time.ReadableInstant)var68);
    org.joda.time.Weeks var80 = var63.minus(var79);
    org.joda.time.Weeks var81 = var47.plus(var63);
    org.joda.time.LocalDate var82 = var4.minus((org.joda.time.ReadablePeriod)var47);
    org.joda.time.Weeks var84 = var47.minus(15);
    org.joda.time.Weeks var86 = var84.dividedBy((-59));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test476"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    org.joda.time.convert.PartialConverter[] var4 = var0.getPartialConverters();
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var6 = var5.copy();
    org.joda.time.DateTime var7 = var6.getStart();
    java.util.Date var8 = var7.toDate();
    org.joda.time.MonthDay var9 = org.joda.time.MonthDay.fromDateFields(var8);
    org.joda.time.Period var14 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var16 = var14.plusSeconds(100);
    org.joda.time.Period var18 = var16.withSeconds(0);
    int var19 = var18.getMonths();
    org.joda.time.MonthDay var20 = var9.minus((org.joda.time.ReadablePeriod)var18);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var35.plus((org.joda.time.ReadableDuration)var40);
    var31.add((org.joda.time.ReadableDuration)var40);
    org.joda.time.Seconds var46 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var31);
    org.joda.time.Seconds var47 = var46.negated();
    org.joda.time.Seconds var49 = var47.plus(240);
    org.joda.time.MonthDay var50 = var20.plus((org.joda.time.ReadablePeriod)var49);
    org.joda.time.MonthDay var52 = var20.minusMonths(22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.DurationConverter var53 = var0.getDurationConverter((java.lang.Object)var52);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var2.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var3.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test477"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.addWrapField(9L, 228);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var34 = var18.addWrapField((-62156990340999L), 12196171);
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 228009L);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test478"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.Seconds var44 = var41.dividedBy(104);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test479"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    int var5 = var4.getWeeks();
    org.joda.time.Period var6 = var4.toPeriod();
    int var7 = var6.getDays();
    org.joda.time.Period var9 = var6.minusMillis(38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test480"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var31 = var19.withTime(240, 73381948, 893, 765);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test481"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var59 = var54.addWrapField(1377742999393L, (-9));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test482"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.weekyear();
    org.joda.time.MutableDateTime.Property var21 = var5.year();
    boolean var23 = var5.equals((java.lang.Object)(byte)0);
    var5.addDays(216);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.withMonthOfYear(1);
    org.joda.time.DateMidnight var31 = var28.toDateMidnight();
    org.joda.time.DateMidnight.Property var32 = var31.yearOfEra();
    var5.setDate((org.joda.time.ReadableInstant)var31);
    org.joda.time.MutableDateTime.Property var34 = var5.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test483"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DurationField var1 = var0.weeks();
    org.joda.time.Chronology var2 = var0.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test484"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.Hours var20 = var14.toStandardHours();
    java.lang.String var21 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PT-1H"+ "'", var21.equals("PT-1H"));

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test485"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var16);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    var23.setHourOfDay(10);
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var23);
    org.joda.time.Years var42 = var40.dividedBy(104);
    boolean var43 = var8.isLessThan(var40);
    java.lang.String var44 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "P87Y"+ "'", var44.equals("P87Y"));

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test486"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    org.joda.time.LocalDateTime var32 = var28.withYear((-1));
    int var33 = var19.compareTo((org.joda.time.ReadablePartial)var28);
    org.joda.time.LocalDateTime var35 = var28.withCenturyOfEra(1);
    int var36 = var35.getEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test487"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicWeekDateTimeNoMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test488"); }


    org.joda.time.MutableDateTime var0 = org.joda.time.MutableDateTime.now();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDateTime(73381948, 12200, 951, 9, 17, 228, 1970);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test489"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.fromDateFields(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test490"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var59 = var54.getMinimumValue();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test491"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.minusMonths(0);
    int[] var8 = var1.get((org.joda.time.ReadablePartial)var6, 100L);
    org.joda.time.DateTime var9 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var1);
    org.joda.time.DateTimeField var10 = var1.millisOfSecond();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var18 = var1.getDateTimeMillis(17, (-13), 8, 12, 37, (-22), 22);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test492"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearDay();
    org.joda.time.LocalDateTime var3 = org.joda.time.LocalDateTime.now();
    int var4 = var3.getDayOfYear();
    org.joda.time.Chronology var5 = var3.getChronology();
    org.joda.time.chrono.StrictChronology var6 = org.joda.time.chrono.StrictChronology.getInstance(var5);
    org.joda.time.DateTime var14 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate.Property var16 = var15.weekyear();
    long var18 = var6.set((org.joda.time.ReadablePartial)var15, 104L);
    org.joda.time.LocalTime var19 = new org.joda.time.LocalTime((org.joda.time.Chronology)var6);
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod((-62156990340999L), 1378524281334L, var2, (org.joda.time.Chronology)var6);
    var20.addYears(11);
    int var23 = var20.getYears();
    java.lang.String var24 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2024);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "P2024Y131D"+ "'", var24.equals("P2024Y131D"));

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test493"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearMonthDay();
    org.joda.time.PeriodType var1 = var0.withMillisRemoved();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test494"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(8400, 197, 25785);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test495"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var3.addMillis((-1));
    boolean var11 = var3.isBefore((-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test496"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("57680");
    org.joda.time.LocalDate.Property var2 = var1.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test497"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Duration var2 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    var3.setWeekOfWeekyear(1);
    int var6 = var3.getRoundingMode();
    var3.addMillis(100);
    var3.setSecondOfMinute(10);
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var12 = new org.joda.time.Period((org.joda.time.ReadableDuration)var2, (org.joda.time.ReadableInstant)var3, var11);
    org.joda.time.Days var13 = var12.toStandardDays();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.Period var20 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var22 = var20.plusSeconds(100);
    org.joda.time.Period var24 = var20.minusMillis(10);
    boolean var25 = var15.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var26 = var15.dayOfYear();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.LocalDate var31 = var29.minusMonths(0);
    org.joda.time.DateTime var32 = var29.toDateTimeAtMidnight();
    org.joda.time.DateTime var34 = var32.withCenturyOfEra(4);
    org.joda.time.Days var35 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var34);
    org.joda.time.Days var37 = var35.dividedBy(1);
    boolean var38 = var13.isGreaterThan(var35);
    org.joda.time.Days var40 = var13.dividedBy(100);
    java.lang.String var41 = var0.print((org.joda.time.ReadablePeriod)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "0 days"+ "'", var41.equals("0 days"));

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test498"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    org.joda.time.DateMidnight var24 = var8.withFieldAdded(var22, 1);
    org.joda.time.field.PreciseDurationField var26 = new org.joda.time.field.PreciseDurationField(var22, 1L);
    org.joda.time.DateMidnight var28 = var3.withFieldAdded(var22, 228);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var22, (-9L));
    long var33 = var30.add(1377742992740L, 12182);
    long var36 = var30.subtract(80003L, 147);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1377742883102L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 81326L);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test499"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    boolean var1 = var0.isParser();
    org.joda.time.tz.FixedDateTimeZone var6 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var8 = var6.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var10 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstance(var10);
    long var13 = var6.getMillisKeepLocal(var10, 1377746580759L);
    org.joda.time.format.DateTimeFormatter var14 = var0.withZone(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var16 = var0.parseMillis("--08-29");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test500"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.DateTimeField var6 = var3.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

}
