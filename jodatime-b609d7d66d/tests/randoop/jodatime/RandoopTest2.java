package randoop.jodatime;

import junit.framework.*;

public class RandoopTest2 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test1"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.DateTime var12 = var5.minusSeconds(35);
    org.joda.time.DateTime var14 = var5.withWeekyear(228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test2"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Partial var8 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = var5.toString("T04:27:00");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test3"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var31 = var22.add(1377768182717035L, 1377742981L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1377769560460016L);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test4"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Period var69 = var67.minusHours(147);
    org.joda.time.Seconds var70 = var69.toStandardSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test5"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var2 = org.joda.time.chrono.ISOChronology.getInstance(var1);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ISOChronology[+00:00:00.759]"+ "'", var3.equals("ISOChronology[+00:00:00.759]"));

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test6"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var7 = var4.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var8 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.LocalDate var13 = var11.minusMonths(0);
    int[] var15 = var8.get((org.joda.time.ReadablePartial)var13, 100L);
    org.joda.time.chrono.EthiopicChronology var19 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var20 = var19.hours();
    org.joda.time.LocalTime var21 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var19);
    org.joda.time.Period var22 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var19);
    org.joda.time.DateTimeField var23 = var19.millisOfSecond();
    org.joda.time.DateTimeField var24 = var19.secondOfDay();
    org.joda.time.field.SkipDateTimeField var26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var8, var24, 100);
    org.joda.time.LocalDateTime var27 = org.joda.time.LocalDateTime.now();
    int var28 = var27.getDayOfYear();
    org.joda.time.Chronology var29 = var27.getChronology();
    int var30 = var27.getYearOfCentury();
    int var31 = var26.getMaximumValue((org.joda.time.ReadablePartial)var27);
    boolean var33 = var26.isLeap(1L);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    int var36 = var26.getMinimumValue((org.joda.time.ReadablePartial)var34);
    org.joda.time.DurationField var37 = var26.getDurationField();
    org.joda.time.DateTimeFieldType var38 = var26.getType();
    org.joda.time.field.OffsetDateTimeField var42 = new org.joda.time.field.OffsetDateTimeField(var7, var38, 884, 3, 948);
    boolean var43 = var42.isSupported();
    int var44 = var42.getMaximumValue();
    org.joda.time.DateTimeFieldType var45 = var42.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay.Property var46 = var3.property(var45);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test7"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.LocalDateTime var11 = var5.toLocalDateTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var15 = var5.withDate(948, 893, (-948));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test8"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    long var25 = var22.getMillis((-9));
    java.lang.String var26 = var22.toString();
    long var29 = var22.getValueAsLong(1377673200216L, 208L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-9L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "DurationField[days]"+ "'", var26.equals("DurationField[days]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377673200216L);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test9"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.YearMonth var8 = org.joda.time.YearMonth.now(var6);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test10"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.DateTimeFieldType[] var6 = var0.getFieldTypes();
    org.joda.time.TimeOfDay.Property var7 = var0.hourOfDay();
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var11 = var8.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    int[] var19 = var12.get((org.joda.time.ReadablePartial)var17, 100L);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.Period var26 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var23);
    org.joda.time.DateTimeField var27 = var23.millisOfSecond();
    org.joda.time.DateTimeField var28 = var23.secondOfDay();
    org.joda.time.field.SkipDateTimeField var30 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var12, var28, 100);
    org.joda.time.LocalDateTime var31 = org.joda.time.LocalDateTime.now();
    int var32 = var31.getDayOfYear();
    org.joda.time.Chronology var33 = var31.getChronology();
    int var34 = var31.getYearOfCentury();
    int var35 = var30.getMaximumValue((org.joda.time.ReadablePartial)var31);
    boolean var37 = var30.isLeap(1L);
    org.joda.time.LocalDateTime var38 = org.joda.time.LocalDateTime.now();
    int var39 = var38.getDayOfYear();
    int var40 = var30.getMinimumValue((org.joda.time.ReadablePartial)var38);
    org.joda.time.DurationField var41 = var30.getDurationField();
    org.joda.time.DateTimeFieldType var42 = var30.getType();
    org.joda.time.field.OffsetDateTimeField var46 = new org.joda.time.field.OffsetDateTimeField(var11, var42, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)35L, "secondOfDay");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var51 = var0.withField(var42, 18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test11"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Minutes var7 = var6.toStandardMinutes();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    boolean var22 = var7.equals((java.lang.Object)var20);
    org.joda.time.DateTimeZone var24 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var25 = org.joda.time.MutableDateTime.now(var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusYears((-1));
    org.joda.time.Minutes var33 = var30.toStandardMinutes();
    org.joda.time.Minutes var35 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var36 = var33.minus(var35);
    org.joda.time.Period var41 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var43 = var41.plusYears((-1));
    org.joda.time.Minutes var44 = var41.toStandardMinutes();
    org.joda.time.Minutes var45 = var33.plus(var44);
    var25.add((org.joda.time.ReadablePeriod)var45);
    boolean var47 = var7.isLessThan(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test12"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    var3.add((-3600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test13"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var8 = org.joda.time.MutableDateTime.now(var7);
    var8.setTime(99L);
    var8.setYear(34);
    boolean var13 = var5.isBefore((org.joda.time.ReadableInstant)var8);
    var8.addMonths(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test14"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var25 = new org.joda.time.MutablePeriod(var24);
    int var26 = var25.getSeconds();
    int var27 = var25.getMonths();
    var25.setWeeks((-1));
    org.joda.time.Weeks var30 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var25);
    org.joda.time.Weeks var32 = var30.multipliedBy(86399);
    org.joda.time.Duration var33 = var30.toStandardDuration();
    org.joda.time.Duration var35 = var33.plus(1377735781323L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var36 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableDuration)var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test15"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear((-1));
    org.joda.time.LocalDateTime.Property var5 = var0.dayOfWeek();
    int var6 = var0.getHourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 6);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test16"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var4 = new org.joda.time.LocalTime(363, 228, 194, 116);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test17"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.LocalTime var14 = var6.minusMillis(12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var16 = var6.withSecondOfMinute(999);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test18"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.secondOfDay();
    org.joda.time.DateTimeField var2 = var0.monthOfYear();
    java.lang.String var3 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "BuddhistChronology[PT0H]"+ "'", var3.equals("BuddhistChronology[PT0H]"));

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test19"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.YearMonthDay var5 = var2.withYear(28);
    org.joda.time.Instant var7 = new org.joda.time.Instant(2762381894421796L);
    long var8 = var7.getMillis();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var14 = var10.toDuration();
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Years var19 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var20 = var19.getPeriodType();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableDuration)var14, var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var21);
    int var23 = var2.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2049);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test20"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    var0.addMonths(2005);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDayOfMonth(8400);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test21"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    java.lang.String var20 = var18.toString();
    int var21 = var18.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var23 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 2005);
    java.lang.String var25 = var23.getAsShortText((-100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var20.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "2004"+ "'", var25.equals("2004"));

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test22"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    java.lang.String var42 = var38.getAsText(1378524281334L);
    long var45 = var38.getDifferenceAsLong((-86390600L), (-86386600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "1218"+ "'", var42.equals("1218"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-4000L));

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test23"); }


    org.joda.time.chrono.CopticChronology var0 = org.joda.time.chrono.CopticChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test24"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    long var63 = var57.add((-7200000L), 23);
    long var65 = var57.getValueAsLong((-60779281008478L));
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.DateMidnight var70 = var67.minusWeeks((-1));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Days var83 = var82.toStandardDays();
    org.joda.time.DurationFieldType var84 = var83.getFieldType();
    org.joda.time.DateMidnight var86 = var70.withFieldAdded(var84, 1);
    org.joda.time.field.PreciseDurationField var88 = new org.joda.time.field.PreciseDurationField(var84, 1L);
    long var91 = var88.getMillis(3, 9L);
    int var92 = var57.compareTo((org.joda.time.DurationField)var88);
    int var94 = var57.getValue(1377746597622L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1980000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-703463L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 15946);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test25"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    java.lang.String var43 = var0.toString();
    java.lang.String var44 = var0.toStringList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test26"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(363, 2, 28, 33, 10);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test27"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(var1);
    var2.addDays(1);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    boolean var9 = var6.isShorterThan((org.joda.time.ReadableDuration)var8);
    var2.add((org.joda.time.ReadableDuration)var8);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var11);
    var12.clear();
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var14);
    var15.addDays(1);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    var15.add((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadablePeriod)var15);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var34.plus((org.joda.time.ReadableDuration)var39);
    var30.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.Hours var45 = var39.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var15.setPeriod((org.joda.time.ReadableDuration)var39, (org.joda.time.Chronology)var46);
    int var48 = var15.getDays();
    int var51 = var0.parseInto((org.joda.time.ReadWritablePeriod)var15, "Aug 23, 2013 12:00:00 AM", 4);
    var15.setPeriod((-3600000L), 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 4);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test28"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    var0.setDurationBeforeEnd(1L);
    long var4 = var0.toDurationMillis();
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval();
    boolean var6 = var0.isBefore((org.joda.time.ReadableInterval)var5);
    org.joda.time.Chronology var7 = var0.getChronology();
    org.joda.time.Days var8 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDurationBeforeEnd((-9L));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test29"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var52 = var49.appendTwoDigitWeekyear(20, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test30"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toStringList();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.setPeriod(1377742981948L, 9L);
    org.joda.time.Partial var17 = var0.minus((org.joda.time.ReadablePeriod)var13);
    java.lang.String var18 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test31"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = org.joda.time.field.FieldUtils.safeToInt(1377673200216L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test32"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var5.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var9.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var11 = var10.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var12 = var4.append(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test33"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.DurationFieldType var38 = var12.getFieldType();
    org.joda.time.Days var40 = var12.plus(759);
    org.joda.time.Weeks var41 = var12.toStandardWeeks();
    int var42 = var12.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test34"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    org.joda.time.Years var6 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var7 = var6.getPeriodType();
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    int var10 = var6.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var9);
    org.joda.time.TimeOfDay var11 = new org.joda.time.TimeOfDay();
    int var12 = var11.size();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.LocalTime var18 = var16.withMillisOfSecond(1);
    org.joda.time.LocalTime var20 = var18.minusHours((-1));
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var11, (org.joda.time.ReadablePartial)var20);
    boolean var22 = var9.isLessThan(var21);
    org.joda.time.LocalTime var23 = var4.minus((org.joda.time.ReadablePeriod)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var25 = var4.withHourOfDay(12194);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test35"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.DateTime.Property var5 = var4.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2755493225160L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test36"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    int var2 = var1.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test37"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.minusMonths(0);
    int[] var8 = var1.get((org.joda.time.ReadablePartial)var6, 100L);
    org.joda.time.DateTimeField var9 = var1.yearOfEra();
    org.joda.time.LocalTime var10 = org.joda.time.LocalTime.fromMillisOfDay(3L, (org.joda.time.Chronology)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test38"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forID("org.joda.time.IllegalFieldValueException: Value 28 for days must be in the range [10.0,1377746580759]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test39"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Period var8 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.millisOfSecond();
    org.joda.time.chrono.LenientChronology var10 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var5);
    org.joda.time.format.DateTimeFormatter var11 = var1.withChronology((org.joda.time.Chronology)var10);
    org.joda.time.chrono.ISOChronology var12 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var17 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var19 = var17.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var20 = var12.withZone((org.joda.time.DateTimeZone)var17);
    long var22 = var17.nextTransition(9L);
    org.joda.time.Chronology var23 = var10.withZone((org.joda.time.DateTimeZone)var17);
    org.joda.time.MonthDay var24 = new org.joda.time.MonthDay(1386411782707L, (org.joda.time.Chronology)var10);
    org.joda.time.MonthDay var26 = var24.minusDays(36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test40"); }


    org.joda.time.tz.UTCProvider var0 = new org.joda.time.tz.UTCProvider();
    java.util.Set var1 = var0.getAvailableIDs();
    org.joda.time.DateTimeZone.setProvider((org.joda.time.tz.Provider)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test41"); }


    org.joda.time.LocalDate var1 = new org.joda.time.LocalDate(1377746581948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.Seconds var27 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Seconds var29 = var27.plus(2005);
    org.joda.time.Minutes var30 = var27.toStandardMinutes();
    org.joda.time.Seconds var32 = var27.multipliedBy(3);
    org.joda.time.LocalDate var33 = var1.minus((org.joda.time.ReadablePeriod)var32);
    org.joda.time.Interval var34 = var1.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test42"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    long var78 = var57.add(2755493225160L, 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2776315625160L);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test43"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.getDifferenceAsLong(1377746621805L, (-7200000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 382709L);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test44"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonth var46 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonth var47 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.chrono.EthiopicChronology var49 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var50 = var49.hours();
    org.joda.time.LocalTime var51 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var49);
    org.joda.time.LocalTime var53 = var51.withMillisOfSecond(1);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.LocalDate var61 = var60.toLocalDate();
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var63 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var60, (org.joda.time.ReadableInstant)var62);
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var65 = var64.year();
    boolean var66 = var62.isBefore((org.joda.time.ReadableInstant)var64);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    boolean var76 = var73.isShorterThan((org.joda.time.ReadableDuration)var75);
    org.joda.time.Duration var77 = var68.plus((org.joda.time.ReadableDuration)var73);
    var64.add((org.joda.time.ReadableDuration)var73);
    org.joda.time.Seconds var79 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var64);
    org.joda.time.Seconds var81 = var79.plus(2005);
    org.joda.time.Minutes var82 = var79.toStandardMinutes();
    org.joda.time.Minutes var84 = var82.dividedBy(100);
    org.joda.time.LocalTime var85 = var51.plus((org.joda.time.ReadablePeriod)var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var86 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial)var47, (org.joda.time.ReadablePartial)var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test45"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    long var23 = var18.add(35L, 1377768182707L);
    int var25 = var18.getMinimumValue(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test46"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    java.lang.String var43 = var38.getAsText(208L);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.withMonthOfYear(1);
    org.joda.time.LocalDate var50 = var46.withWeekyear(1);
    org.joda.time.LocalDate var52 = var46.withDayOfYear(1);
    org.joda.time.LocalDate var54 = var52.minusMonths(16);
    int var55 = var38.getMaximumValue((org.joda.time.ReadablePartial)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var58 = var38.getDifference(9400L, 1386411782707L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1092"+ "'", var43.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 948);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test47"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var2.plusHours(2013);
    int var5 = var4.getCenturyOfEra();
    org.joda.time.format.DateTimeFormatter var6 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var7 = new org.joda.time.TimeOfDay();
    int var8 = var7.size();
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.hours();
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var10);
    org.joda.time.LocalTime var14 = var12.withMillisOfSecond(1);
    org.joda.time.LocalTime var16 = var14.minusHours((-1));
    org.joda.time.Years var17 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var7, (org.joda.time.ReadablePartial)var16);
    int var18 = var7.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var20 = var7.withChronologyRetainFields((org.joda.time.Chronology)var19);
    org.joda.time.format.DateTimeFormatter var21 = var6.withChronology((org.joda.time.Chronology)var19);
    org.joda.time.DateTimeZone var22 = var19.getZone();
    org.joda.time.DateTime var23 = var4.withZone(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 431);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test48"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    org.joda.time.DateTime var41 = var1.toDateTimeISO();
    org.joda.time.DateTime var43 = var41.minusMillis(20);
    org.joda.time.MutableDateTime var44 = var43.toMutableDateTime();
    org.joda.time.DateTime var46 = var43.plusWeeks(14400001);
    org.joda.time.DateTime.Property var47 = var46.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test49"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    int var4 = var1.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var1.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var7 = var6.yearOfCentury();
    org.joda.time.LocalDateTime var9 = var6.plusWeeks(240);
    int[] var11 = var0.get((org.joda.time.ReadablePartial)var6, 80003L);
    int var12 = var6.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test50"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    long var44 = var38.add(1377742992740L, 318);
    long var46 = var38.roundHalfFloor(1377742995215L);
    java.lang.String var47 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1377742993058L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1377742995215L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var47.equals("DateTimeField[secondOfDay]"));

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test51"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.minusMonths(16);
    org.joda.time.LocalDate var12 = var10.withWeekyear(240);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withMillis(100L);
    org.joda.time.DateTime.Property var21 = var20.era();
    org.joda.time.TimeOfDay var22 = var20.toTimeOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var23 = new org.joda.time.Period((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test52"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    org.joda.time.Chronology var1 = var0.getChronology();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test53"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.IntervalConverter[] var2 = var0.getIntervalConverters();
    java.lang.String var3 = var0.toString();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.LocalDate var8 = var6.minusMonths(0);
    org.joda.time.DateTime var9 = var6.toDateTimeAtMidnight();
    org.joda.time.DateTime var11 = var9.withMillis(100L);
    int var12 = var9.getWeekyear();
    org.joda.time.LocalDateTime var13 = var9.toLocalDateTime();
    org.joda.time.LocalTime var14 = var9.toLocalTime();
    org.joda.time.DateTime var16 = var9.plusHours(2005);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    boolean var29 = var25.isBefore((org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    var27.add((org.joda.time.ReadableDuration)var36);
    org.joda.time.Seconds var42 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var43 = var42.toStandardDuration();
    org.joda.time.DateTime var44 = var16.minus((org.joda.time.ReadableDuration)var43);
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var46 = var45.dayOfYear();
    org.joda.time.YearMonthDay var47 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var45);
    org.joda.time.YearMonthDay var49 = var47.plusYears(13);
    org.joda.time.DateTimeZone var51 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var52 = var47.toInterval(var51);
    org.joda.time.DateMidnight var53 = var47.toDateMidnight();
    org.joda.time.DateMidnight var55 = var53.plus(1377742981000L);
    org.joda.time.Period var56 = new org.joda.time.Period((org.joda.time.ReadableInstant)var44, (org.joda.time.ReadableInstant)var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.PartialConverter var57 = var0.getPartialConverter((java.lang.Object)var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var3.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test54"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    boolean var30 = var22.isPrecise();
    boolean var31 = var22.isPrecise();
    long var34 = var22.subtract(1377746591931L, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1377746591916L);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test55"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.ISOPeriodFormat.alternate();
    java.util.Locale var1 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test56"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.plusHours(2013);
    org.joda.time.TimeOfDay var9 = var7.plusMillis(10);
    int var10 = var7.getHourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test57"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var58 = new org.joda.time.Partial(var45, (-3));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test58"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.MonthDay var3 = org.joda.time.MonthDay.now(var1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    var6.setWeekOfWeekyear(1);
    int var9 = var6.getRoundingMode();
    var6.addMillis(100);
    var6.setSecondOfMinute(10);
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableDuration)var5, (org.joda.time.ReadableInstant)var6, var14);
    org.joda.time.Days var16 = var15.toStandardDays();
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.Period var23 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var25 = var23.plusSeconds(100);
    org.joda.time.Period var27 = var23.minusMillis(10);
    boolean var28 = var18.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var29 = var18.dayOfYear();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.LocalDate var34 = var32.minusMonths(0);
    org.joda.time.DateTime var35 = var32.toDateTimeAtMidnight();
    org.joda.time.DateTime var37 = var35.withCenturyOfEra(4);
    org.joda.time.Days var38 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var37);
    org.joda.time.Days var40 = var38.dividedBy(1);
    boolean var41 = var16.isGreaterThan(var38);
    org.joda.time.Weeks var42 = var38.toStandardWeeks();
    org.joda.time.MonthDay var43 = var3.minus((org.joda.time.ReadablePeriod)var42);
    org.joda.time.Minutes var44 = var42.toStandardMinutes();
    java.lang.String var45 = var42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "P-88703W"+ "'", var45.equals("P-88703W"));

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test59"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    org.joda.time.LocalDate.Property var11 = var8.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test60"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonth var46 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.LocalDate var47 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test61"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.LocalTime var9 = new org.joda.time.LocalTime((org.joda.time.Chronology)var8);
    org.joda.time.LocalDateTime var10 = org.joda.time.LocalDateTime.now();
    int var11 = var10.getDayOfYear();
    org.joda.time.Chronology var12 = var10.getChronology();
    int var13 = var10.getYearOfCentury();
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    boolean var27 = var10.equals((java.lang.Object)var26);
    org.joda.time.LocalTime var28 = var9.plus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.format.DateTimeFormatter var29 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.util.Locale var30 = var29.getLocale();
    java.lang.String var31 = var28.toString(var29);
    org.joda.time.DateTime var32 = var5.toDateTime(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var34 = var32.withWeekOfWeekyear(12217);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT06:47:05"+ "'", var31.equals("\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT06:47:05"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test62"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.era();
    java.lang.String var2 = var0.toString();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.LocalDate var7 = var5.minusMonths(0);
    org.joda.time.DateTime var8 = var5.toDateTimeAtMidnight();
    org.joda.time.DateTime var10 = var8.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var11 = var10.monthOfYear();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.Period var18 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var20 = var18.plusSeconds(100);
    org.joda.time.Period var22 = var18.minusMillis(10);
    boolean var23 = var13.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var24 = var13.dayOfYear();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.LocalDate var29 = var27.minusMonths(0);
    org.joda.time.DateTime var30 = var27.toDateTimeAtMidnight();
    org.joda.time.DateTime var32 = var30.withCenturyOfEra(4);
    org.joda.time.Days var33 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var32);
    org.joda.time.DateTime var35 = var32.plusSeconds(10);
    boolean var36 = var10.isAfter((org.joda.time.ReadableInstant)var32);
    org.joda.time.DateTime var38 = var32.withWeekOfWeekyear(2);
    org.joda.time.Instant var39 = new org.joda.time.Instant();
    org.joda.time.Instant var40 = var39.toInstant();
    org.joda.time.PeriodType var41 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var42 = new org.joda.time.MutablePeriod(var41);
    var42.addDays(1);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    boolean var49 = var46.isShorterThan((org.joda.time.ReadableDuration)var48);
    var42.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var56 = var52.toDuration();
    org.joda.time.chrono.JulianChronology var57 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var58 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var57);
    org.joda.time.LocalDate var59 = var58.toLocalDate();
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var61 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var58, (org.joda.time.ReadableInstant)var60);
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var63 = var62.year();
    boolean var64 = var60.isBefore((org.joda.time.ReadableInstant)var62);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var75 = var66.plus((org.joda.time.ReadableDuration)var71);
    var62.add((org.joda.time.ReadableDuration)var71);
    org.joda.time.PeriodType var77 = org.joda.time.PeriodType.months();
    org.joda.time.Period var78 = new org.joda.time.Period((org.joda.time.ReadableDuration)var52, (org.joda.time.ReadableInstant)var62, var77);
    org.joda.time.Period var79 = new org.joda.time.Period((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableDuration)var48, var77);
    org.joda.time.Period var80 = new org.joda.time.Period((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.Period var82 = var80.plusYears(948);
    int[] var85 = var0.get((org.joda.time.ReadablePeriod)var80, 228009L, 1377742883102L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "BuddhistChronology[PT0H]"+ "'", var2.equals("BuddhistChronology[PT0H]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test63"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.DateTimeField var8 = var3.secondOfDay();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.LocalTime var14 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var12);
    org.joda.time.Period var15 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var12);
    org.joda.time.DateTimeField var16 = var12.millisOfSecond();
    org.joda.time.DateTimeField var17 = var12.secondOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var18 = new org.joda.time.YearMonthDay((java.lang.Object)var3, (org.joda.time.Chronology)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test64"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.LocalDate var5 = org.joda.time.LocalDate.fromDateFields(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test65"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(0L);
    org.joda.time.chrono.GregorianChronology var2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var3);
    org.joda.time.DurationField var6 = var3.hours();
    org.joda.time.Chronology var7 = var3.withUTC();
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var32 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var31);
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var34 = var33.year();
    boolean var35 = var31.isBefore((org.joda.time.ReadableInstant)var33);
    org.joda.time.Interval var36 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var33);
    org.joda.time.DateTimeZone var37 = var33.getZone();
    org.joda.time.Chronology var38 = var3.withZone(var37);
    org.joda.time.Chronology var39 = var2.withZone(var37);
    org.joda.time.Interval var40 = var1.toInterval(var37);
    org.joda.time.LocalTime var41 = org.joda.time.LocalTime.now(var37);
    org.joda.time.LocalTime var43 = var41.minusSeconds(16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test66"); }


    org.joda.time.IllegalFieldValueException var4 = new org.joda.time.IllegalFieldValueException("8581 seconds", (java.lang.Number)51, (java.lang.Number)948, (java.lang.Number)69);
    java.lang.Number var5 = var4.getIllegalNumberValue();
    java.lang.String var6 = var4.getFieldName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 51+ "'", var5.equals(51));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "8581 seconds"+ "'", var6.equals("8581 seconds"));

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test67"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    java.lang.String var6 = var4.toString();
    org.joda.time.LocalDateTime var8 = org.joda.time.LocalDateTime.now();
    int var9 = var8.getDayOfYear();
    org.joda.time.Chronology var10 = var8.getChronology();
    org.joda.time.chrono.StrictChronology var11 = org.joda.time.chrono.StrictChronology.getInstance(var10);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.DateTimeField var14 = var12.minuteOfHour();
    boolean var15 = var11.equals((java.lang.Object)var12);
    org.joda.time.Chronology var16 = var12.withUTC();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay((-3600L), (org.joda.time.Chronology)var12);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.Period var24 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var26 = var24.plusSeconds(100);
    org.joda.time.Period var28 = var24.minusMillis(10);
    boolean var29 = var19.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var30 = var19.dayOfYear();
    int var31 = var19.getSecondOfDay();
    org.joda.time.DateMidnight var33 = var19.withWeekyear(240);
    org.joda.time.DateMidnight var35 = var33.minusMonths(28);
    org.joda.time.DateTimeZone var36 = var35.getZone();
    org.joda.time.DateTime var37 = var4.toDateTime(var17, var36);
    org.joda.time.LocalTime var38 = org.joda.time.LocalTime.now(var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstance(var36, 853);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1962-04-23"+ "'", var6.equals("1962-04-23"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test68"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    boolean var30 = var29.isBeforeNow();
    long var31 = var29.getStartMillis();
    boolean var32 = var29.isAfterNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2755489625830L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test69"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = org.joda.time.field.FieldUtils.safeMultiply((-86390600L), 1377742883102L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test70"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var1 = org.joda.time.MutableDateTime.parse("DurationField[days]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test71"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.LocalDate var7 = var2.plusDays((-1));
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.LocalDate var12 = var10.withMonthOfYear(1);
    org.joda.time.DateMidnight var13 = var10.toDateMidnight();
    org.joda.time.LocalDate var15 = var10.plusDays((-1));
    org.joda.time.Minutes var16 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var2, (org.joda.time.ReadablePartial)var15);
    org.joda.time.LocalDateTime var17 = org.joda.time.LocalDateTime.now();
    int var18 = var17.getDayOfYear();
    org.joda.time.Chronology var19 = var17.getChronology();
    int var20 = var17.getYearOfCentury();
    int var21 = var17.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var23 = var17.plusMonths(34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var24 = var2.isBefore((org.joda.time.ReadablePartial)var23);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test72"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.LocalTime var9 = var5.withHourOfDay(4);
    org.joda.time.LocalTime.Property var10 = var5.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test73"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.hours();
    org.joda.time.Period var39 = var36.toPeriod(var38);
    org.joda.time.Period var40 = var39.toPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test74"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var2 = org.joda.time.chrono.ISOChronology.getInstance(var1);
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test75"); }


    org.joda.time.LocalDateTime var2 = org.joda.time.LocalDateTime.now();
    int var3 = var2.getDayOfYear();
    org.joda.time.Chronology var4 = var2.getChronology();
    org.joda.time.chrono.StrictChronology var5 = org.joda.time.chrono.StrictChronology.getInstance(var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.LocalDate var10 = var8.withMonthOfYear(1);
    org.joda.time.LocalDate var12 = var8.withWeekyear(1);
    org.joda.time.LocalDate var14 = var8.withDayOfYear(1);
    org.joda.time.LocalDate var16 = var14.minusMonths(16);
    boolean var17 = var5.equals((java.lang.Object)16);
    org.joda.time.YearMonth var18 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Chronology var19 = var5.withUTC();
    org.joda.time.YearMonth var20 = new org.joda.time.YearMonth(1377735781323L, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test76"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(14400001, 194, 331);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test77"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateMidnight var5 = var4.toDateMidnight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var7 = var4.getFieldType(14);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test78"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test79"); }


    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay(2762381894421796L);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test80"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var60 = var54.remainder(1377746599106L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test81"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.LocalTime var4 = org.joda.time.LocalTime.fromDateFields(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.Period var11 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var13 = var11.plusSeconds(100);
    org.joda.time.Period var15 = var11.minusMillis(10);
    boolean var16 = var6.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var17 = var6.dayOfYear();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.minusMonths(0);
    org.joda.time.DateTime var23 = var20.toDateTimeAtMidnight();
    org.joda.time.DateTime var25 = var23.withCenturyOfEra(4);
    org.joda.time.Days var26 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var25);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var29 = var28.hours();
    org.joda.time.LocalTime var30 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var28);
    org.joda.time.LocalTime var32 = var30.withMillisOfSecond(1);
    org.joda.time.LocalTime var33 = org.joda.time.LocalTime.now();
    boolean var34 = var32.isAfter((org.joda.time.ReadablePartial)var33);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var35);
    org.joda.time.DurationField var38 = var35.hours();
    boolean var39 = var33.equals((java.lang.Object)var35);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    var42.setWeekOfWeekyear(1);
    int var45 = var42.getRoundingMode();
    var42.addMillis(100);
    var42.setSecondOfMinute(10);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var41, (org.joda.time.ReadableInstant)var42, var50);
    org.joda.time.Days var52 = var51.toStandardDays();
    org.joda.time.LocalTime var53 = var33.minus((org.joda.time.ReadablePeriod)var51);
    org.joda.time.DateMidnight var54 = var6.plus((org.joda.time.ReadablePeriod)var51);
    org.joda.time.DateMidnight var56 = var6.plus(1L);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    var59.setWeekOfWeekyear(1);
    int var62 = var59.getRoundingMode();
    var59.addMillis(100);
    var59.setSecondOfMinute(10);
    org.joda.time.PeriodType var67 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var68 = new org.joda.time.Period((org.joda.time.ReadableDuration)var58, (org.joda.time.ReadableInstant)var59, var67);
    org.joda.time.Days var69 = var68.toStandardDays();
    org.joda.time.Hours var70 = var69.toStandardHours();
    org.joda.time.DateMidnight var71 = var6.minus((org.joda.time.ReadablePeriod)var69);
    org.joda.time.Days var72 = var69.negated();
    org.joda.time.LocalTime var73 = var4.plus((org.joda.time.ReadablePeriod)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test82"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.plusHours(2013);
    org.joda.time.TimeOfDay var9 = var7.plusMillis(10);
    int var10 = var7.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 46);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test83"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    int var39 = var38.getOffset();
    int var42 = var38.getDifference(70534000L, (-7200L));
    org.joda.time.DurationField var43 = var38.getDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 884);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 70541200);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test84"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var4 = new org.joda.time.YearMonth((java.lang.Object)var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test85"); }


    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var9.withEra(1);
    int var12 = var11.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var13 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var14 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var15 = var14.getZone();
    org.joda.time.Chronology var16 = var13.withZone(var15);
    org.joda.time.Interval var17 = var11.toInterval(var15);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.minusMonths(0);
    org.joda.time.DateTime var23 = var22.toDateTimeAtMidnight();
    int var24 = var11.compareTo((org.joda.time.ReadablePartial)var22);
    org.joda.time.DateTimeZone var26 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var27 = org.joda.time.DateTimeUtils.getZone(var26);
    org.joda.time.LocalDateTime var28 = new org.joda.time.LocalDateTime(var26);
    org.joda.time.MonthDay var29 = new org.joda.time.MonthDay(var26);
    org.joda.time.DateMidnight var30 = var22.toDateMidnight(var26);
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var32 = new org.joda.time.DateTime(948, 41, 363, 69, 228, var26);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test86"); }


    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.LocalDate var7 = var5.minusMonths(0);
    org.joda.time.DateTime var8 = var5.toDateTimeAtMidnight();
    org.joda.time.DateTime var10 = var8.withMillis(100L);
    org.joda.time.Chronology var11 = var8.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var12 = new org.joda.time.DateMidnight(33, 57, 3, var11);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test87"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.plusWeeks(73381948);
    org.joda.time.LocalDate.Property var11 = var8.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test88"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.LocalTime var9 = var5.withHourOfDay(4);
    org.joda.time.LocalTime var11 = var5.minusMinutes(33);
    org.joda.time.LocalTime.Property var12 = var5.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test89"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var19);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    boolean var33 = var30.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var39 = var30.plus((org.joda.time.ReadableDuration)var35);
    var26.add((org.joda.time.ReadableDuration)var35);
    org.joda.time.Seconds var41 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var26);
    org.joda.time.Seconds var42 = var41.negated();
    org.joda.time.Seconds var44 = var42.plus(240);
    org.joda.time.MonthDay var45 = var15.plus((org.joda.time.ReadablePeriod)var44);
    org.joda.time.MonthDay var47 = var15.minusMonths(22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var48 = new org.joda.time.MonthDay((java.lang.Object)22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test90"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.YearMonth.Property var6 = var5.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test91"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var23);
    org.joda.time.DurationField var26 = var23.hours();
    int var27 = var22.compareTo(var26);
    org.joda.time.format.DateTimeFormatterBuilder var28 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var30 = var28.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var33 = var28.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var36 = var33.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var38 = var36.appendTwoDigitWeekyear(9);
    boolean var39 = var22.equals((java.lang.Object)var36);
    long var42 = var22.getMillis(893, 35L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 893L);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test92"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(0L);
    org.joda.time.chrono.GregorianChronology var2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var3);
    org.joda.time.DurationField var6 = var3.hours();
    org.joda.time.Chronology var7 = var3.withUTC();
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var32 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var31);
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var34 = var33.year();
    boolean var35 = var31.isBefore((org.joda.time.ReadableInstant)var33);
    org.joda.time.Interval var36 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var33);
    org.joda.time.DateTimeZone var37 = var33.getZone();
    org.joda.time.Chronology var38 = var3.withZone(var37);
    org.joda.time.Chronology var39 = var2.withZone(var37);
    org.joda.time.Interval var40 = var1.toInterval(var37);
    org.joda.time.chrono.IslamicChronology var41 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var42 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var43 = var42.getZone();
    org.joda.time.Chronology var44 = var41.withZone(var43);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType var45 = var41.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology var46 = org.joda.time.chrono.IslamicChronology.getInstance(var37, var45);
    org.joda.time.MutableDateTime var47 = org.joda.time.MutableDateTime.now(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test93"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var5.addMinutes(104);
    long var10 = var5.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2755499466141L);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test94"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var10 = var8.withHourOfDay(14);
    org.joda.time.LocalTime.Property var11 = var8.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test95"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var53.subtract((-100L), 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-7092000100L));

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test96"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    boolean var35 = var25.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var36 = var25.dayOfYear();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    org.joda.time.DateTime var42 = var39.toDateTimeAtMidnight();
    org.joda.time.DateTime var44 = var42.withCenturyOfEra(4);
    org.joda.time.Days var45 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var44);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.LocalTime var51 = var49.withMillisOfSecond(1);
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.now();
    boolean var53 = var51.isAfter((org.joda.time.ReadablePartial)var52);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var54);
    org.joda.time.DurationField var57 = var54.hours();
    boolean var58 = var52.equals((java.lang.Object)var54);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    int var64 = var61.getRoundingMode();
    var61.addMillis(100);
    var61.setSecondOfMinute(10);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var60, (org.joda.time.ReadableInstant)var61, var69);
    org.joda.time.Days var71 = var70.toStandardDays();
    org.joda.time.LocalTime var72 = var52.minus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var73 = var25.plus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var75 = var25.plus(1L);
    org.joda.time.Minutes var76 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateMidnight var78 = var4.minus((-7092000100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test97"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.minusMonths(0);
    int[] var8 = var1.get((org.joda.time.ReadablePartial)var6, 100L);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.LocalTime var14 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var12);
    org.joda.time.Period var15 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var12);
    org.joda.time.DateTimeField var16 = var12.millisOfSecond();
    org.joda.time.DateTimeField var17 = var12.secondOfDay();
    org.joda.time.field.SkipDateTimeField var19 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var1, var17, 100);
    org.joda.time.LocalDateTime var20 = org.joda.time.LocalDateTime.now();
    int var21 = var20.getDayOfYear();
    org.joda.time.Chronology var22 = var20.getChronology();
    int var23 = var20.getYearOfCentury();
    int var24 = var19.getMaximumValue((org.joda.time.ReadablePartial)var20);
    boolean var26 = var19.isLeap(1L);
    org.joda.time.LocalDateTime var27 = org.joda.time.LocalDateTime.now();
    int var28 = var27.getDayOfYear();
    int var29 = var19.getMinimumValue((org.joda.time.ReadablePartial)var27);
    org.joda.time.format.DateTimeFormatter var30 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
    java.lang.String var31 = var27.toString(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var32 = org.joda.time.MonthDay.parse("P-4D", var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "2057-04-26T06:47"+ "'", var31.equals("2057-04-26T06:47"));

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test98"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var60 = var54.addWrapField(1377742981323L, (-3));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test99"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimePrinter var11 = var8.toPrinter();
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendEraText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test100"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    int var7 = var6.getMonths();
    org.joda.time.MutableInterval var8 = new org.joda.time.MutableInterval();
    var8.setStartMillis((-1L));
    org.joda.time.Chronology var11 = var8.getChronology();
    org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval();
    long var13 = var12.getEndMillis();
    org.joda.time.Months var14 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var12);
    org.joda.time.Chronology var15 = var12.getChronology();
    boolean var16 = var8.isAfter((org.joda.time.ReadableInterval)var12);
    var6.setPeriod((org.joda.time.ReadableInterval)var12);
    int var18 = var6.getWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test101"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.timeNoMillis();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.LocalTime var11 = var7.plusSeconds((-1));
    org.joda.time.LocalDateTime var12 = org.joda.time.LocalDateTime.now();
    int var13 = var12.getDayOfYear();
    org.joda.time.LocalDateTime var15 = var12.minusSeconds(2005);
    org.joda.time.Chronology var16 = var12.getChronology();
    org.joda.time.DateTimeZone var18 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var19 = org.joda.time.MutableDateTime.now(var18);
    org.joda.time.DateTime var20 = var12.toDateTime(var18);
    org.joda.time.DateTime var21 = var11.toDateTimeToday(var18);
    org.joda.time.format.DateTimeFormatter var22 = var1.withZone(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.parse("T20:23:12.318", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test102"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateMidnight var23 = var1.plusMonths(10);
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var26 = org.joda.time.MutableDateTime.now(var25);
    org.joda.time.DateMidnight var27 = var1.withZoneRetainFields(var25);
    org.joda.time.DateMidnight var29 = var1.minusDays(35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test103"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var56 = var54.getMaximumValue();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test104"); }


    org.joda.time.Period var5 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var7 = var5.plusYears((-1));
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var10 = var9.getPeriodType();
    org.joda.time.Period var11 = var5.normalizedStandard(var10);
    org.joda.time.PeriodType var12 = var10.withMillisRemoved();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod(var10);
    org.joda.time.PeriodType var14 = var10.withYearsRemoved();
    org.joda.time.Period var15 = new org.joda.time.Period(86400000L, var14);
    org.joda.time.Minutes var16 = var15.toStandardMinutes();
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    var19.setWeekOfWeekyear(1);
    int var22 = var19.getRoundingMode();
    var19.addMillis(100);
    var19.setSecondOfMinute(10);
    org.joda.time.PeriodType var27 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var28 = new org.joda.time.Period((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var19, var27);
    org.joda.time.Days var29 = var28.toStandardDays();
    org.joda.time.DurationFieldType var30 = var29.getFieldType();
    org.joda.time.IllegalFieldValueException var34 = new org.joda.time.IllegalFieldValueException(var30, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    int var35 = var15.indexOf(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test105"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime.Property var8 = var5.minuteOfHour();
    var5.addDays((-948));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setDayOfWeek(16);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test106"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.DateTimeZone var18 = var17.getZone();
    org.joda.time.DateMidnight var20 = var17.minusWeeks(692);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test107"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.LocalDate var23 = var2.toLocalDate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var25 = var23.withMonthOfYear(34);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test108"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.LocalDateTime var9 = var6.minusSeconds(2005);
    org.joda.time.Chronology var10 = var6.getChronology();
    org.joda.time.DateTimeZone var12 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var13 = org.joda.time.MutableDateTime.now(var12);
    org.joda.time.DateTime var14 = var6.toDateTime(var12);
    org.joda.time.DateTime var15 = var5.toDateTime(var12);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var23, (org.joda.time.ReadableInstant)var26);
    var27.clear();
    org.joda.time.PeriodType var29 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var30 = new org.joda.time.MutablePeriod(var29);
    var30.addDays(1);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    var30.add((org.joda.time.ReadableDuration)var36);
    var27.add((org.joda.time.ReadablePeriod)var30);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.Hours var60 = var54.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var61 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var30.setPeriod((org.joda.time.ReadableDuration)var54, (org.joda.time.Chronology)var61);
    org.joda.time.DateTime var64 = var15.withDurationAdded((org.joda.time.ReadableDuration)var54, 2);
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var66 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var65);
    org.joda.time.LocalDate var67 = var66.toLocalDate();
    org.joda.time.MutableDateTime var68 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var69 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var66, (org.joda.time.ReadableInstant)var68);
    org.joda.time.chrono.JulianChronology var70 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var71 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var70);
    org.joda.time.LocalDate var72 = var71.toLocalDate();
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var74 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var71, (org.joda.time.ReadableInstant)var73);
    org.joda.time.MutableDateTime var75 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var76 = var75.year();
    boolean var77 = var73.isBefore((org.joda.time.ReadableInstant)var75);
    org.joda.time.Duration var79 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var81 = org.joda.time.Duration.standardHours((-1L));
    boolean var82 = var79.isShorterThan((org.joda.time.ReadableDuration)var81);
    org.joda.time.Duration var84 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var86 = org.joda.time.Duration.standardHours((-1L));
    boolean var87 = var84.isShorterThan((org.joda.time.ReadableDuration)var86);
    org.joda.time.Duration var88 = var79.plus((org.joda.time.ReadableDuration)var84);
    var75.add((org.joda.time.ReadableDuration)var84);
    org.joda.time.Seconds var90 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var66, (org.joda.time.ReadableInstant)var75);
    org.joda.time.Seconds var92 = var90.plus(2005);
    org.joda.time.Minutes var93 = var90.toStandardMinutes();
    org.joda.time.Minutes var95 = var93.dividedBy(100);
    org.joda.time.DateTime var96 = var15.plus((org.joda.time.ReadablePeriod)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test109"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.withSecondOfMinute(10);
    org.joda.time.DateTime var11 = var5.withDurationAdded(3L, 34);
    org.joda.time.DateTime var13 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var15 = var13.withMillis(0L);
    org.joda.time.DateTime var17 = var15.plusHours(2013);
    org.joda.time.chrono.ISOChronology var18 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var23 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var25 = var23.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var27 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstance(var27);
    long var30 = var23.getMillisKeepLocal(var27, 1377746580759L);
    org.joda.time.Chronology var31 = var18.withZone(var27);
    org.joda.time.DateTimeZone var33 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var34 = org.joda.time.chrono.ISOChronology.getInstance(var33);
    org.joda.time.Chronology var35 = var18.withZone(var33);
    org.joda.time.DateTime var36 = var15.toDateTime(var33);
    org.joda.time.LocalTime var37 = new org.joda.time.LocalTime(104L, var33);
    org.joda.time.DateTime var38 = var5.withZone(var33);
    org.joda.time.DateTime var40 = var5.plusSeconds(73394);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test110"); }


    org.joda.time.Duration var1 = new org.joda.time.Duration(1L);
    org.joda.time.chrono.ISOChronology var2 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.DateTimeField var3 = var2.millisOfSecond();
    org.joda.time.Period var4 = var1.toPeriod((org.joda.time.Chronology)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test111"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.format.DateTimeFormatterBuilder var3 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var5 = var3.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var3.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var11 = var8.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    int[] var19 = var12.get((org.joda.time.ReadablePartial)var17, 100L);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.Period var26 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var23);
    org.joda.time.DateTimeField var27 = var23.millisOfSecond();
    org.joda.time.DateTimeField var28 = var23.secondOfDay();
    org.joda.time.field.SkipDateTimeField var30 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var12, var28, 100);
    org.joda.time.LocalDateTime var31 = org.joda.time.LocalDateTime.now();
    int var32 = var31.getDayOfYear();
    org.joda.time.Chronology var33 = var31.getChronology();
    int var34 = var31.getYearOfCentury();
    int var35 = var30.getMaximumValue((org.joda.time.ReadablePartial)var31);
    boolean var37 = var30.isLeap(1L);
    org.joda.time.LocalDateTime var38 = org.joda.time.LocalDateTime.now();
    int var39 = var38.getDayOfYear();
    int var40 = var30.getMinimumValue((org.joda.time.ReadablePartial)var38);
    org.joda.time.DurationField var41 = var30.getDurationField();
    org.joda.time.DateTimeFieldType var42 = var30.getType();
    org.joda.time.field.OffsetDateTimeField var46 = new org.joda.time.field.OffsetDateTimeField(var11, var42, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var52 = var3.appendFraction(var42, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var53 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var54 = var53.minutes();
    org.joda.time.DateTimeField var55 = var53.year();
    org.joda.time.DurationField var56 = var53.hours();
    org.joda.time.field.UnsupportedDateTimeField var57 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var42, var56);
    int var58 = var2.indexOf(var42);
    org.joda.time.IllegalFieldValueException var60 = new org.joda.time.IllegalFieldValueException(var42, "8595 seconds");
    java.lang.String var61 = var60.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "org.joda.time.IllegalFieldValueException: Value \"8595 seconds\" for secondOfDay is not supported"+ "'", var61.equals("org.joda.time.IllegalFieldValueException: Value \"8595 seconds\" for secondOfDay is not supported"));

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test112"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var7 = org.joda.time.chrono.ISOChronology.getInstance(var6);
    org.joda.time.DurationField var8 = var7.millis();
    var1.add((-7200000L), (org.joda.time.Chronology)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setPeriod(24424, (-3), 2019, 34, 1, 2013, 240, 57600100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test113"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Weeks var8 = var6.multipliedBy(86399);
    org.joda.time.Duration var9 = var6.toStandardDuration();
    org.joda.time.Duration var10 = var9.toDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test114"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.fromDateFields(var3);
    org.joda.time.LocalDate var5 = org.joda.time.LocalDate.fromDateFields(var3);
    org.joda.time.LocalDate.Property var6 = var5.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test115"); }


    org.joda.time.format.DateTimeFormatter var7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.chrono.LenientChronology var16 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var11);
    org.joda.time.format.DateTimeFormatter var17 = var7.withChronology((org.joda.time.Chronology)var16);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.withMonthOfYear(1);
    org.joda.time.LocalDate var24 = var20.withWeekyear(1);
    org.joda.time.LocalDate var26 = var20.withDayOfYear(1);
    boolean var27 = var16.equals((java.lang.Object)var26);
    org.joda.time.LocalDate var28 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var29 = new org.joda.time.LocalDate((org.joda.time.Chronology)var16);
    org.joda.time.DateTime var30 = new org.joda.time.DateTime(51, 15795333, 17, 51, 85450, 1970, 12196, (org.joda.time.Chronology)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test116"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTimeFieldType[] var23 = var22.getFieldTypes();
    org.joda.time.LocalDate var24 = var22.toLocalDate();
    int var25 = var24.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2049);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test117"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.mediumTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = var0.parseMillis("millisOfSecond");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test118"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.LenientChronology var8 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var3);
    org.joda.time.LocalDateTime var9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var10 = var3.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test119"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    boolean var26 = var18.isSupported();
    long var29 = var18.getDifferenceAsLong(1377742981948L, 9L);
    long var31 = var18.roundHalfCeiling(1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377742981L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1378524280900L);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test120"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Period var8 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.millisOfSecond();
    org.joda.time.chrono.LenientChronology var10 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var5);
    org.joda.time.format.DateTimeFormatter var11 = var1.withChronology((org.joda.time.Chronology)var10);
    org.joda.time.format.DateTimeFormatter var12 = var11.withZoneUTC();
    org.joda.time.format.DateTimeParser var13 = var11.getParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var14 = org.joda.time.MonthDay.parse("P-4D", var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test121"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.millis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test122"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = var4.getValue(38);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test123"); }


    org.joda.time.IllegalFieldValueException var2 = new org.joda.time.IllegalFieldValueException("DurationField[days]", "P759MT382707H24M41.334S");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test124"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.DateTime var10 = var7.withSecondOfMinute(10);
    org.joda.time.LocalDateTime var11 = var10.toLocalDateTime();
    org.joda.time.DateTime var13 = var10.minusMillis(2019);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test125"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(36, 1970);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test126"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Minutes var5 = var2.toStandardMinutes();
    org.joda.time.Weeks var6 = var5.toStandardWeeks();
    org.joda.time.MutableInterval var7 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var8 = var7.copy();
    org.joda.time.DateTime var9 = var8.getStart();
    java.util.Date var10 = var9.toDate();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var14 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var19 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var18);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var21 = var20.year();
    boolean var22 = var18.isBefore((org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime.Property var23 = var20.minuteOfHour();
    org.joda.time.MutableDateTime.Property var24 = var20.millisOfSecond();
    org.joda.time.Chronology var25 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutablePeriod var26 = new org.joda.time.MutablePeriod(9L, var13, var25);
    org.joda.time.YearMonth var27 = new org.joda.time.YearMonth(99L, var25);
    org.joda.time.DateTime var28 = var9.toDateTime(var25);
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod((java.lang.Object)var5, var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test127"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.Weeks var38 = var34.toStandardWeeks();
    org.joda.time.Days var40 = var34.dividedBy(2019);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test128"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.tz.FixedDateTimeZone var15 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var23, (org.joda.time.ReadableInstant)var26);
    var27.clear();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.MutableDateTime.Property var50 = var35.dayOfWeek();
    var27.setPeriod((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var35);
    boolean var52 = var15.equals((java.lang.Object)var27);
    org.joda.time.Chronology var53 = var9.withZone((org.joda.time.DateTimeZone)var15);
    org.joda.time.DateTime var54 = new org.joda.time.DateTime((org.joda.time.Chronology)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test129"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var6 = new org.joda.time.LocalDateTime(2049, 69781948, 100, 20, 22, 228);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test130"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.plusHours(2013);
    org.joda.time.TimeOfDay var9 = var7.plusMillis(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var9.toString("DateTimeField[secondOfDay]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test131"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant((-1717000L));

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test132"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendMillisOfDay(611);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var2.appendLiteral("2013-10-10T00:00:00.000Z");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test133"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.StrictChronology var3 = org.joda.time.chrono.StrictChronology.getInstance(var2);
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.DateTimeField var6 = var4.minuteOfHour();
    boolean var7 = var3.equals((java.lang.Object)var4);
    org.joda.time.Chronology var8 = var4.withUTC();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var9 = new org.joda.time.TimeOfDay((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test134"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    boolean var9 = var7.isEqual(35L);
    org.joda.time.DateTime var11 = var7.minusYears(19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var13 = var7.withWeekOfWeekyear(363);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test135"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.YearMonth var6 = new org.joda.time.YearMonth((org.joda.time.Chronology)var3);
    org.joda.time.YearMonth var8 = var6.plusMonths(69781948);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var9.setChronology((org.joda.time.Chronology)var12);
    org.joda.time.DateTimeField var14 = var12.clockhourOfHalfday();
    org.joda.time.DateTimeField var15 = var12.secondOfDay();
    org.joda.time.YearMonth var16 = var8.withChronologyRetainFields((org.joda.time.Chronology)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test136"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    long var30 = var18.addWrapField(1377746581948L, 8400);
    org.joda.time.Duration var31 = new org.joda.time.Duration((java.lang.Object)var30);
    org.joda.time.Minutes var32 = var31.toStandardMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1377754981948L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test137"); }


    org.joda.time.Duration var2 = new org.joda.time.Duration(3L, (-86386600L));

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test138"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Weeks var26 = var25.toStandardWeeks();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    boolean var38 = var26.equals((java.lang.Object)var37);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var40 = new org.joda.time.MutablePeriod(var39);
    int var41 = var40.getSeconds();
    int var42 = var40.getMonths();
    var40.setWeeks((-1));
    org.joda.time.Weeks var45 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var40);
    org.joda.time.Days var46 = var45.toStandardDays();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var48 = var47.year();
    org.joda.time.MutableDateTime.Property var49 = var47.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.Period var56 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var58 = var56.plusSeconds(100);
    org.joda.time.Period var60 = var56.minusMillis(10);
    boolean var61 = var51.equals((java.lang.Object)10);
    org.joda.time.Weeks var62 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var51);
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var64 = var63.year();
    org.joda.time.MutableDateTime.Property var65 = var63.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.Period var72 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var74 = var72.plusSeconds(100);
    org.joda.time.Period var76 = var72.minusMillis(10);
    boolean var77 = var67.equals((java.lang.Object)10);
    org.joda.time.Weeks var78 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var67);
    org.joda.time.Weeks var79 = var62.minus(var78);
    org.joda.time.Weeks var81 = var79.multipliedBy(147);
    boolean var82 = var45.isLessThan(var79);
    boolean var83 = var26.isGreaterThan(var79);
    org.joda.time.Weeks var85 = var26.dividedBy(38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test139"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var9 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod(var10);
    var11.addDays(1);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    var11.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var20);
    var21.clear();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.MutableDateTime.Property var44 = var29.dayOfWeek();
    var21.setPeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    boolean var46 = var9.equals((java.lang.Object)var21);
    boolean var47 = var9.isFixed();
    boolean var48 = var9.isFixed();
    org.joda.time.DateTime var49 = var2.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var9);
    int var51 = var9.getOffset(1377746594066L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 100);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test140"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.joda.time.field.FieldUtils.safeMultiplyToInt(1377742991900L, 1000L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test141"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod(var28);
    int var30 = var29.getSeconds();
    int var31 = var29.getMonths();
    var29.setWeeks((-1));
    org.joda.time.Weeks var34 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var29);
    org.joda.time.Minutes var35 = var34.toStandardMinutes();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    var38.setWeekOfWeekyear(1);
    int var41 = var38.getRoundingMode();
    var38.addMillis(100);
    var38.setSecondOfMinute(10);
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var47 = new org.joda.time.Period((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var38, var46);
    org.joda.time.Days var48 = var47.toStandardDays();
    org.joda.time.DurationFieldType var49 = var48.getFieldType();
    boolean var50 = var35.equals((java.lang.Object)var48);
    org.joda.time.Duration var51 = var48.toStandardDuration();
    var9.add((org.joda.time.ReadableDuration)var51, 318);
    var9.addMinutes(228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test142"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime.Property var16 = var0.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test143"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.DurationFieldType var13 = var12.getFieldType();
    org.joda.time.IllegalFieldValueException var17 = new org.joda.time.IllegalFieldValueException(var13, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    java.lang.String var18 = var17.toString();
    java.lang.Throwable[] var19 = var17.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.joda.time.IllegalFieldValueException: Value 28 for days must be in the range [10.0,1377746580759]"+ "'", var18.equals("org.joda.time.IllegalFieldValueException: Value 28 for days must be in the range [10.0,1377746580759]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test144"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusYears((-1));
    org.joda.time.Minutes var18 = var15.toStandardMinutes();
    org.joda.time.Minutes var19 = var7.plus(var18);
    org.joda.time.Period var24 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var26 = var24.plusYears((-1));
    org.joda.time.Minutes var27 = var24.toStandardMinutes();
    org.joda.time.Minutes var29 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var30 = var27.minus(var29);
    org.joda.time.Minutes var31 = var19.plus(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var33 = var19.multipliedBy((-1377742992));
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test145"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Hours var17 = var13.multipliedBy(2013);
    org.joda.time.Seconds var18 = var17.toStandardSeconds();
    org.joda.time.Weeks var19 = var18.toStandardWeeks();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var21 = var20.year();
    org.joda.time.MutableDateTime.Property var22 = var20.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.Period var29 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var31 = var29.plusSeconds(100);
    org.joda.time.Period var33 = var29.minusMillis(10);
    boolean var34 = var24.equals((java.lang.Object)10);
    org.joda.time.Weeks var35 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var24);
    org.joda.time.Weeks var36 = var19.minus(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DurationFieldType var38 = var35.getFieldType(228);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test146"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.DateMidnight.Property var5 = var1.weekOfWeekyear();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    var7.add((org.joda.time.ReadableDuration)var13);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var16);
    var17.clear();
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    var17.add((org.joda.time.ReadablePeriod)var20);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.Hours var50 = var44.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var51 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var20.setPeriod((org.joda.time.ReadableDuration)var44, (org.joda.time.Chronology)var51);
    org.joda.time.MutablePeriod var53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var55 = var44.withMillis((-15946L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test147"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.tz.FixedDateTimeZone var10 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone)var10);
    org.joda.time.LocalTime var12 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var10);
    org.joda.time.Chronology var13 = var3.withZone((org.joda.time.DateTimeZone)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test148"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    int var9 = var6.getYearOfCentury();
    org.joda.time.LocalDateTime.Property var10 = var6.weekOfWeekyear();
    int var11 = var5.compareTo((org.joda.time.ReadablePartial)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test149"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime.Property var29 = var25.year();
    org.joda.time.DateTime var30 = org.joda.time.DateTime.now();
    long var31 = var30.getMillis();
    org.joda.time.DateTime.Property var32 = var30.yearOfEra();
    org.joda.time.DateTime var34 = var30.withMillisOfDay(216);
    org.joda.time.PeriodType var35 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var36 = new org.joda.time.MutablePeriod(var35);
    var36.addDays(1);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    var36.add((org.joda.time.ReadableDuration)var42);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var42, (org.joda.time.ReadableInstant)var45);
    var46.clear();
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var49 = new org.joda.time.MutablePeriod(var48);
    var49.addDays(1);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    var49.add((org.joda.time.ReadableDuration)var55);
    var46.add((org.joda.time.ReadablePeriod)var49);
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.LocalDate var61 = var60.toLocalDate();
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var63 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var60, (org.joda.time.ReadableInstant)var62);
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var65 = var64.year();
    boolean var66 = var62.isBefore((org.joda.time.ReadableInstant)var64);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    boolean var76 = var73.isShorterThan((org.joda.time.ReadableDuration)var75);
    org.joda.time.Duration var77 = var68.plus((org.joda.time.ReadableDuration)var73);
    var64.add((org.joda.time.ReadableDuration)var73);
    org.joda.time.Hours var79 = var73.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var80 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var49.setPeriod((org.joda.time.ReadableDuration)var73, (org.joda.time.Chronology)var80);
    org.joda.time.DateTime var82 = var34.plus((org.joda.time.ReadableDuration)var73);
    boolean var83 = var25.isEqual((org.joda.time.ReadableInstant)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2755493227112L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test150"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(35L, var2);
    org.joda.time.LocalDate.Property var5 = var4.centuryOfEra();
    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.hours();
    org.joda.time.LocalTime var9 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var7);
    org.joda.time.LocalTime var11 = var9.withMillisOfSecond(1);
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.now();
    boolean var13 = var11.isAfter((org.joda.time.ReadablePartial)var12);
    org.joda.time.Chronology var14 = var12.getChronology();
    org.joda.time.LocalDate var15 = var4.withFields((org.joda.time.ReadablePartial)var12);
    org.joda.time.LocalTime var17 = var12.withMillisOfSecond(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var17.toString("2013-08-28T20:23");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test151"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DurationField var1 = var0.hours();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test152"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.DateTime var20 = org.joda.time.DateTime.now();
    long var21 = var20.getMillis();
    org.joda.time.DateTime.Property var22 = var20.yearOfEra();
    org.joda.time.DateTime var24 = var20.withMillisOfDay(216);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.DateMidnight var29 = var26.minusWeeks((-1));
    org.joda.time.DateMidnight var31 = var29.minusMonths(100);
    org.joda.time.MutableInterval var32 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var33 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2755493227180L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test153"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.DateMidnight var5 = var3.withDayOfMonth(10);
    org.joda.time.DateMidnight var7 = var5.minusWeeks(14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test154"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.DurationField var29 = var18.getDurationField();
    org.joda.time.DateTimeFieldType var30 = var18.getType();
    java.lang.String var31 = var18.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "secondOfDay"+ "'", var31.equals("secondOfDay"));

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test155"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod((-703463L), (-1L), var2);
    org.joda.time.PeriodType var5 = var2.withSecondsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test156"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    var0.addMillis(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setMonthOfYear(41);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test157"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Duration var13 = var1.plus(100L);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime.Property var34 = var19.dayOfWeek();
    var19.addMonths((-9));
    int var37 = var19.getCenturyOfEra();
    org.joda.time.Period var42 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var44 = var42.plusYears((-1));
    org.joda.time.Years var46 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var47 = var46.getPeriodType();
    org.joda.time.Period var48 = var42.normalizedStandard(var47);
    org.joda.time.PeriodType var49 = var47.withMillisRemoved();
    org.joda.time.PeriodType var50 = var47.withYearsRemoved();
    org.joda.time.MutablePeriod var51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var19, var47);
    org.joda.time.Period var53 = org.joda.time.Period.days(9);
    org.joda.time.Period var55 = var53.withHours(124);
    org.joda.time.Period var58 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    int var64 = var61.getRoundingMode();
    var61.addMillis(100);
    var61.setSecondOfMinute(10);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var60, (org.joda.time.ReadableInstant)var61, var69);
    org.joda.time.Days var71 = var70.toStandardDays();
    org.joda.time.DurationFieldType var72 = var71.getFieldType();
    int var73 = var58.get(var72);
    org.joda.time.IllegalFieldValueException var75 = new org.joda.time.IllegalFieldValueException(var72, "T20:23:01.948");
    org.joda.time.Period var77 = var53.withFieldAdded(var72, 999);
    var19.add(var72, 12217);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test158"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forPattern("PeriodType[YearWeekDayTime]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test159"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var3 = var0.toMutableDateTime(var2);
    long var4 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime.Property var5 = var3.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2755493227240L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test160"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.year();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now(var2);
    org.joda.time.format.DateTimeFormatter var5 = var0.withZone(var2);
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.format.DateTimeFormatter var8 = var0.withZone(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test161"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.DateTime var87 = var7.minusDays(8400);
    org.joda.time.LocalDateTime var88 = org.joda.time.LocalDateTime.now();
    int var89 = var88.getDayOfYear();
    org.joda.time.Chronology var90 = var88.getChronology();
    org.joda.time.chrono.StrictChronology var91 = org.joda.time.chrono.StrictChronology.getInstance(var90);
    org.joda.time.chrono.EthiopicChronology var92 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var93 = var92.hours();
    org.joda.time.DateTimeField var94 = var92.minuteOfHour();
    boolean var95 = var91.equals((java.lang.Object)var92);
    org.joda.time.DateTime var96 = var7.toDateTime((org.joda.time.Chronology)var91);
    org.joda.time.DateTime var98 = var7.plus(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test162"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    org.joda.time.MutableDateTime var22 = var5.copy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test163"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var2 = new org.joda.time.TimeOfDay();
    int var3 = var2.size();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var9 = var7.withMillisOfSecond(1);
    org.joda.time.LocalTime var11 = var9.minusHours((-1));
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var2, (org.joda.time.ReadablePartial)var11);
    int var13 = var2.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var15 = var2.withChronologyRetainFields((org.joda.time.Chronology)var14);
    org.joda.time.format.DateTimeFormatter var16 = var1.withChronology((org.joda.time.Chronology)var14);
    java.util.Locale var17 = var16.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var18 = org.joda.time.LocalTime.parse("T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000", var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 546);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test164"); }


    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    org.joda.time.DurationField var5 = var2.eras();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var6 = new org.joda.time.MonthDay(951, 57, (org.joda.time.Chronology)var2);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test165"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var9 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var9.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var14 = var13.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var15 = var14.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var16 = var5.appendOptional(var15);
    org.joda.time.format.DateTimeFormatterBuilder var17 = var16.appendHalfdayOfDayText();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.Instant var21 = var19.toInstant();
    org.joda.time.LocalDateTime var22 = org.joda.time.LocalDateTime.now();
    int var23 = var22.getDayOfYear();
    org.joda.time.Chronology var24 = var22.getChronology();
    org.joda.time.YearMonthDay var25 = new org.joda.time.YearMonthDay(var24);
    org.joda.time.YearMonthDay var27 = var25.plusYears(2013);
    org.joda.time.TimeOfDay var28 = new org.joda.time.TimeOfDay();
    int var29 = var28.size();
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var32 = var31.hours();
    org.joda.time.LocalTime var33 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var31);
    org.joda.time.LocalTime var35 = var33.withMillisOfSecond(1);
    org.joda.time.LocalTime var37 = var35.minusHours((-1));
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var28, (org.joda.time.ReadablePartial)var37);
    int var39 = var28.getMillisOfSecond();
    org.joda.time.TimeOfDay var41 = var28.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var42 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var47 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var49 = var47.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var51 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstance(var51);
    long var54 = var47.getMillisKeepLocal(var51, 1377746580759L);
    org.joda.time.Chronology var55 = var42.withZone(var51);
    java.util.TimeZone var56 = var51.toTimeZone();
    org.joda.time.DateTime var57 = var27.toDateTime(var41, var51);
    org.joda.time.DateTime var58 = var21.toDateTime(var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var59 = new org.joda.time.LocalDate((java.lang.Object)var17, var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 585);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test166"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    var14.setPeriod(1377746601520L, 1053749174400000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test167"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var1 = var0.toString();
    org.joda.time.DateTimeZone var2 = var0.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "GJChronology[UTC]"+ "'", var1.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test168"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.PeriodType var8 = var1.withSecondsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test169"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var10 = var8.minusMonths(240);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.DateMidnight var15 = var12.minusWeeks((-1));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    var18.setWeekOfWeekyear(1);
    int var21 = var18.getRoundingMode();
    var18.addMillis(100);
    var18.setSecondOfMinute(10);
    org.joda.time.PeriodType var26 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var18, var26);
    org.joda.time.Days var28 = var27.toStandardDays();
    org.joda.time.DurationFieldType var29 = var28.getFieldType();
    org.joda.time.DateMidnight var31 = var15.withFieldAdded(var29, 1);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.DateMidnight var54 = var15.withFieldAdded(var50, 13);
    org.joda.time.DateMidnight var56 = var10.withFieldAdded(var50, 692);
    org.joda.time.DateMidnight.Property var57 = var10.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test170"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forPattern("P87Y");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test171"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTime var29 = var5.toDateTime();
    var5.addMonths(69);
    var5.setWeekyear(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test172"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    org.joda.time.Weeks var32 = var15.minus(var31);
    org.joda.time.Seconds var33 = var31.toStandardSeconds();
    org.joda.time.Seconds var35 = var33.plus(73392);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test173"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    int var12 = var0.getWeekyear();
    org.joda.time.DateTime var14 = var0.minus(1980000000L);
    org.joda.time.DateTime var16 = var0.withMillisOfSecond(8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test174"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.Period var8 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var10 = var8.plusSeconds(100);
    org.joda.time.Period var12 = var8.minusMillis(10);
    boolean var13 = var3.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var14 = var3.dayOfYear();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    org.joda.time.DateTime var20 = var17.toDateTimeAtMidnight();
    org.joda.time.DateTime var22 = var20.withCenturyOfEra(4);
    org.joda.time.Days var23 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var22);
    org.joda.time.DateTime var25 = var22.plusSeconds(10);
    org.joda.time.DateTime var27 = var25.minusMinutes(16);
    org.joda.time.DateTime var29 = var27.withWeekyear(16);
    org.joda.time.Chronology var30 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var27);
    org.joda.time.format.DateTimeFormatter var31 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    boolean var32 = var31.isParser();
    org.joda.time.tz.FixedDateTimeZone var37 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var39 = var37.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var41 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstance(var41);
    long var44 = var37.getMillisKeepLocal(var41, 1377746580759L);
    org.joda.time.format.DateTimeFormatter var45 = var31.withZone(var41);
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now(var41);
    org.joda.time.chrono.BuddhistChronology var47 = org.joda.time.chrono.BuddhistChronology.getInstance(var41);
    var0.setZoneRetainFields(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test175"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    long var24 = var18.add(3L, 80);
    org.joda.time.chrono.ISOChronology var25 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var30 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var32 = var30.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var34 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstance(var34);
    long var37 = var30.getMillisKeepLocal(var34, 1377746580759L);
    org.joda.time.Chronology var38 = var25.withZone(var34);
    org.joda.time.DateTimeZone var40 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var41 = org.joda.time.chrono.ISOChronology.getInstance(var40);
    org.joda.time.Chronology var42 = var25.withZone(var40);
    org.joda.time.LocalDate var43 = new org.joda.time.LocalDate((java.lang.Object)3L, (org.joda.time.Chronology)var25);
    org.joda.time.DurationField var44 = var25.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 80003L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test176"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.TimeOfDay var11 = var9.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.TimeOfDay var40 = var11.withPeriodAdded((org.joda.time.ReadablePeriod)var37, 948);
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var42 = var41.year();
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var43);
    org.joda.time.Period var49 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var51 = var49.plusSeconds(100);
    org.joda.time.Period var53 = var49.minusMillis(10);
    boolean var54 = var44.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var55 = var44.dayOfYear();
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.LocalDate var58 = var57.toLocalDate();
    org.joda.time.LocalDate var60 = var58.minusMonths(0);
    org.joda.time.DateTime var61 = var58.toDateTimeAtMidnight();
    org.joda.time.DateTime var63 = var61.withCenturyOfEra(4);
    org.joda.time.Days var64 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var44, (org.joda.time.ReadableInstant)var63);
    org.joda.time.DateTime var66 = var63.plusSeconds(10);
    org.joda.time.DateTime var68 = var66.minusMinutes(16);
    org.joda.time.DateTime var70 = var68.withWeekyear(16);
    org.joda.time.Chronology var71 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var68);
    org.joda.time.LocalTime var72 = new org.joda.time.LocalTime((java.lang.Object)var40, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test177"); }


    org.joda.time.IllegalFieldValueException var4 = new org.joda.time.IllegalFieldValueException("P121961710312T697819483414166.171", (java.lang.Number)(short)100, (java.lang.Number)34, (java.lang.Number)2024);
    java.lang.Number var5 = var4.getUpperBound();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 2024+ "'", var5.equals(2024));

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test178"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var27 = var19.withMonthOfYear(17);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test179"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.minusMonths(16);
    int var11 = var8.getDayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 7);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test180"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-1));
    org.joda.time.Months var3 = var1.plus(100);
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    boolean var7 = var3.isGreaterThan(var6);
    org.joda.time.Months var9 = var3.minus(69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test181"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var1 = var0.getZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var6 = var0.getDateTimeMillis(17, 682, 33, 12194);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test182"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMillisRemoved();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var9);
    org.joda.time.PeriodType var13 = var9.withDaysRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test183"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Period var8 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.millisOfSecond();
    org.joda.time.chrono.LenientChronology var10 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var5);
    org.joda.time.format.DateTimeFormatter var11 = var1.withChronology((org.joda.time.Chronology)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var12 = org.joda.time.LocalTime.parse("BuddhistChronology[PT0H]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test184"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Duration var77 = var76.toDuration();
    org.joda.time.Years var78 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var76);
    boolean var79 = var76.isBeforeNow();
    long var80 = var76.getStartMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2755493227819L);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test185"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var49 = var1.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.Period var51 = var46.withMinutes(216);
    org.joda.time.Period var53 = var46.withMinutes(9);
    org.joda.time.Period var55 = var53.minusMillis(69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test186"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusHours(69);
    org.joda.time.LocalDateTime var10 = var5.minusHours((-22));
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var11);
    var12.addDays(1);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    var12.add((org.joda.time.ReadableDuration)var18);
    org.joda.time.DateTime var21 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var23 = var21.withMillis(0L);
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var23);
    org.joda.time.LocalDateTime var25 = var10.minus((org.joda.time.ReadableDuration)var18);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withMillis(100L);
    org.joda.time.DateTime.Property var34 = var33.era();
    org.joda.time.TimeOfDay var35 = var33.toTimeOfDay();
    org.joda.time.TimeOfDay var37 = var35.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var41);
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var43);
    org.joda.time.LocalDate var45 = var44.toLocalDate();
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var47 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var44, (org.joda.time.ReadableInstant)var46);
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    boolean var50 = var46.isBefore((org.joda.time.ReadableInstant)var48);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var52.plus((org.joda.time.ReadableDuration)var57);
    var48.add((org.joda.time.ReadableDuration)var57);
    org.joda.time.Seconds var63 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var48);
    org.joda.time.Duration var64 = var63.toStandardDuration();
    org.joda.time.TimeOfDay var66 = var37.withPeriodAdded((org.joda.time.ReadablePeriod)var63, 948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var67 = var10.compareTo((org.joda.time.ReadablePartial)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test187"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var1 = org.joda.time.Interval.parse("884");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test188"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.DateTime var10 = var7.withSecondOfMinute(10);
    org.joda.time.LocalDateTime var11 = var10.toLocalDateTime();
    org.joda.time.YearMonth var14 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var16 = var14.withChronologyRetainFields((org.joda.time.Chronology)var15);
    org.joda.time.TimeOfDay var17 = new org.joda.time.TimeOfDay(100L, (org.joda.time.Chronology)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var18 = new org.joda.time.MutablePeriod((java.lang.Object)var11, (org.joda.time.Chronology)var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test189"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Weeks var1 = org.joda.time.Weeks.parseWeeks("2013-01-16");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test190"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    org.joda.time.LocalDateTime var32 = var28.withYear((-1));
    int var33 = var19.compareTo((org.joda.time.ReadablePartial)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var35 = var19.withSecondOfMinute((-22));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test191"); }


    org.joda.time.Period var4 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.DurationFieldType[] var5 = var4.getFieldTypes();
    org.joda.time.Period var7 = var4.minusMonths(22);
    org.joda.time.Period var9 = var7.minusYears(630);
    org.joda.time.Period var11 = var9.withMonths(12217);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test192"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTime var1 = var0.toDateTimeISO();
    org.joda.time.DateTime.Property var2 = var1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test193"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.getDifferenceAsLong(104L, 0L);
    long var33 = var18.roundCeiling(9L);
    int var35 = var18.getMinimumValue(3L);
    java.lang.String var36 = var18.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 900L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "secondOfDay"+ "'", var36.equals("secondOfDay"));

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test194"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.LocalDate var17 = var4.toLocalDate(1970);
    org.joda.time.LocalDateTime var18 = org.joda.time.LocalDateTime.now();
    int var19 = var18.getDayOfYear();
    org.joda.time.Chronology var20 = var18.getChronology();
    int var21 = var18.getYearOfCentury();
    int var22 = var18.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var24 = var18.plusMonths(34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var25 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial)var17, (org.joda.time.ReadablePartial)var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test195"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var3 = new org.joda.time.LocalTime(194, 1962, 86399);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test196"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTime var23 = var2.toDateTimeAtCurrentTime();
    org.joda.time.Interval var24 = var2.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test197"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    org.joda.time.Years var6 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var7 = var6.getPeriodType();
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    int var10 = var6.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var9);
    org.joda.time.TimeOfDay var11 = new org.joda.time.TimeOfDay();
    int var12 = var11.size();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.LocalTime var18 = var16.withMillisOfSecond(1);
    org.joda.time.LocalTime var20 = var18.minusHours((-1));
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var11, (org.joda.time.ReadablePartial)var20);
    boolean var22 = var9.isLessThan(var21);
    org.joda.time.LocalTime var23 = var4.minus((org.joda.time.ReadablePeriod)var21);
    int var24 = var23.getHourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 6);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test198"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.hours();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    org.joda.time.DateTimeField var5 = var2.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    int[] var13 = var6.get((org.joda.time.ReadablePartial)var11, 100L);
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var18 = var17.hours();
    org.joda.time.LocalTime var19 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var17);
    org.joda.time.Period var20 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var21 = var17.millisOfSecond();
    org.joda.time.DateTimeField var22 = var17.secondOfDay();
    org.joda.time.field.SkipDateTimeField var24 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var6, var22, 100);
    org.joda.time.LocalDateTime var25 = org.joda.time.LocalDateTime.now();
    int var26 = var25.getDayOfYear();
    org.joda.time.Chronology var27 = var25.getChronology();
    int var28 = var25.getYearOfCentury();
    int var29 = var24.getMaximumValue((org.joda.time.ReadablePartial)var25);
    boolean var31 = var24.isLeap(1L);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    int var34 = var24.getMinimumValue((org.joda.time.ReadablePartial)var32);
    org.joda.time.DurationField var35 = var24.getDurationField();
    org.joda.time.DateTimeFieldType var36 = var24.getType();
    org.joda.time.field.OffsetDateTimeField var40 = new org.joda.time.field.OffsetDateTimeField(var5, var36, 884, 3, 948);
    long var42 = var40.roundCeiling(3L);
    org.joda.time.field.SkipUndoDateTimeField var44 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var0, (org.joda.time.DateTimeField)var40, 18);
    long var46 = var40.roundHalfEven((-3600L));
    long var48 = var40.roundCeiling(208L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-3600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 208L);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test199"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    org.joda.time.DurationFieldType[] var4 = var3.getFieldTypes();
    org.joda.time.Partial var5 = var0.plus((org.joda.time.ReadablePeriod)var3);
    java.lang.String var6 = var5.toStringList();
    org.joda.time.format.DateTimeFormatter var7 = var5.getFormatter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = var5.toString("2013-08-28T20:23:11.641-07:00/2013-08-28T20:23:11.641-07:00");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test200"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    java.lang.String var8 = var6.toString();
    org.joda.time.Chronology var9 = var6.getChronology();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "06:47:08.290"+ "'", var8.equals("06:47:08.290"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test201"); }


    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(692, 4);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test202"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Interval var33 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var30);
    boolean var34 = var33.isBeforeNow();
    org.joda.time.Duration var35 = var33.toDuration();
    org.joda.time.LocalDateTime var36 = var0.minus((org.joda.time.ReadableDuration)var35);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var37.getWeekOfWeekyear();
    org.joda.time.Period var42 = new org.joda.time.Period((org.joda.time.ReadablePartial)var36, (org.joda.time.ReadablePartial)var37);
    org.joda.time.LocalDateTime var44 = var36.plusDays(12182);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test203"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var2.getEra();
    org.joda.time.PeriodType var7 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(var7);
    var8.addDays(1);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    var8.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.DateTime var17 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var19 = var17.withMillis(0L);
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var19);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var22 = new org.joda.time.MutablePeriod(var21);
    var22.addDays(1);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    var22.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var31);
    var32.setPeriod(1377768182707L);
    var20.add((org.joda.time.ReadablePeriod)var32);
    org.joda.time.MutablePeriod var44 = new org.joda.time.MutablePeriod(73381948, 692, 3, 3, 21, 692, 34, 228);
    var32.mergePeriod((org.joda.time.ReadablePeriod)var44);
    org.joda.time.LocalDate var46 = var2.minus((org.joda.time.ReadablePeriod)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test204"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeZone var16 = var13.getZone();
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var20 = var17.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    int[] var28 = var21.get((org.joda.time.ReadablePartial)var26, 100L);
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.LocalTime var34 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var32);
    org.joda.time.Period var35 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var36 = var32.millisOfSecond();
    org.joda.time.DateTimeField var37 = var32.secondOfDay();
    org.joda.time.field.SkipDateTimeField var39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var21, var37, 100);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    org.joda.time.Chronology var42 = var40.getChronology();
    int var43 = var40.getYearOfCentury();
    int var44 = var39.getMaximumValue((org.joda.time.ReadablePartial)var40);
    boolean var46 = var39.isLeap(1L);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    int var49 = var39.getMinimumValue((org.joda.time.ReadablePartial)var47);
    org.joda.time.DurationField var50 = var39.getDurationField();
    org.joda.time.DateTimeFieldType var51 = var39.getType();
    org.joda.time.field.OffsetDateTimeField var55 = new org.joda.time.field.OffsetDateTimeField(var20, var51, 884, 3, 948);
    long var57 = var55.roundCeiling(3L);
    long var59 = var55.roundHalfEven(1377768182707035L);
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, (org.joda.time.DateTimeField)var55, (-1));
    int var63 = var55.getMinimumValue(228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 434);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 884);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test205"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    boolean var1 = var0.isParser();
    org.joda.time.tz.FixedDateTimeZone var6 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var8 = var6.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var10 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstance(var10);
    long var13 = var6.getMillisKeepLocal(var10, 1377746580759L);
    org.joda.time.format.DateTimeFormatter var14 = var0.withZone(var10);
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now(var10);
    org.joda.time.chrono.BuddhistChronology var16 = org.joda.time.chrono.BuddhistChronology.getInstance(var10);
    org.joda.time.LocalDateTime var17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test206"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    org.joda.time.DateTimeFieldType[] var23 = var21.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.DateTimeField var26 = var24.minuteOfHour();
    long var30 = var24.add(1L, 1377746580759L, 2005);
    org.joda.time.MonthDay var31 = var21.withChronologyRetainFields((org.joda.time.Chronology)var24);
    org.joda.time.MonthDay var33 = var31.plusDays(8);
    org.joda.time.chrono.EthiopicChronology var34 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var35 = var34.dayOfYear();
    org.joda.time.YearMonthDay var36 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var34);
    org.joda.time.format.DateTimeFormatterBuilder var37 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var39 = var37.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var41 = var37.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var42);
    org.joda.time.DateTimeField var45 = var42.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = var48.toLocalDate();
    org.joda.time.LocalDate var51 = var49.minusMonths(0);
    int[] var53 = var46.get((org.joda.time.ReadablePartial)var51, 100L);
    org.joda.time.chrono.EthiopicChronology var57 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var58 = var57.hours();
    org.joda.time.LocalTime var59 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var57);
    org.joda.time.Period var60 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var57);
    org.joda.time.DateTimeField var61 = var57.millisOfSecond();
    org.joda.time.DateTimeField var62 = var57.secondOfDay();
    org.joda.time.field.SkipDateTimeField var64 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var46, var62, 100);
    org.joda.time.LocalDateTime var65 = org.joda.time.LocalDateTime.now();
    int var66 = var65.getDayOfYear();
    org.joda.time.Chronology var67 = var65.getChronology();
    int var68 = var65.getYearOfCentury();
    int var69 = var64.getMaximumValue((org.joda.time.ReadablePartial)var65);
    boolean var71 = var64.isLeap(1L);
    org.joda.time.LocalDateTime var72 = org.joda.time.LocalDateTime.now();
    int var73 = var72.getDayOfYear();
    int var74 = var64.getMinimumValue((org.joda.time.ReadablePartial)var72);
    org.joda.time.DurationField var75 = var64.getDurationField();
    org.joda.time.DateTimeFieldType var76 = var64.getType();
    org.joda.time.field.OffsetDateTimeField var80 = new org.joda.time.field.OffsetDateTimeField(var45, var76, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var83 = new org.joda.time.IllegalFieldValueException(var76, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var86 = var37.appendFraction(var76, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var87 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var88 = var87.minutes();
    org.joda.time.DateTimeField var89 = var87.year();
    org.joda.time.DurationField var90 = var87.hours();
    org.joda.time.field.UnsupportedDateTimeField var91 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var76, var90);
    int var92 = var36.indexOf(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay.Property var93 = var33.property(var76);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == (-1));

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test207"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var9 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod(var10);
    var11.addDays(1);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    var11.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var20);
    var21.clear();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.MutableDateTime.Property var44 = var29.dayOfWeek();
    var21.setPeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    boolean var46 = var9.equals((java.lang.Object)var21);
    boolean var47 = var9.isFixed();
    boolean var48 = var9.isFixed();
    org.joda.time.DateTime var49 = var2.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var9);
    org.joda.time.DateMidnight var50 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var9);
    org.joda.time.MutableDateTime var51 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone)var9);
    long var54 = var9.convertLocalToUTC(1377746580759L, true);
    org.joda.time.chrono.ISOChronology var55 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var9);
    long var58 = var9.convertLocalToUTC((-1000L), true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1377746580659L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1100L));

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test208"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.MutableInterval var21 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var22 = var21.copy();
    org.joda.time.DateTime var23 = var22.getStart();
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.months();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var35, var50);
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23, var50);
    int[] var53 = var52.getValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test209"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test210"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.DateTimeZone var2 = var0.getZone();
    java.lang.String var3 = var2.getID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "BuddhistChronology[PT0H]"+ "'", var1.equals("BuddhistChronology[PT0H]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "PT0H"+ "'", var3.equals("PT0H"));

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test211"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.DateTime var7 = var6.toDateTimeAtStartOfDay();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    java.lang.String var19 = var18.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var20 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableDuration)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "PT-7200S"+ "'", var19.equals("PT-7200S"));

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test212"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    org.joda.time.DurationFieldType[] var4 = var3.getFieldTypes();
    org.joda.time.Partial var5 = var0.plus((org.joda.time.ReadablePeriod)var3);
    java.lang.String var6 = var5.toStringList();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.withMonthOfYear(1);
    org.joda.time.LocalDate var13 = var11.withEra(1);
    int var14 = var13.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var15 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var16 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var17 = var16.getZone();
    org.joda.time.Chronology var18 = var15.withZone(var17);
    org.joda.time.Interval var19 = var13.toInterval(var17);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    org.joda.time.DateTime var25 = var24.toDateTimeAtMidnight();
    int var26 = var13.compareTo((org.joda.time.ReadablePartial)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var27 = var5.isEqual((org.joda.time.ReadablePartial)var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test213"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMillisRemoved();
    org.joda.time.PeriodType var12 = var9.withYearsRemoved();
    java.lang.String var13 = var9.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Years"+ "'", var13.equals("Years"));

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test214"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.DateTime var17 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var9);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.Period var24 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var25 = var21.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25);
    org.joda.time.DateTimeField var27 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var26);
    int var28 = var26.getMinimumValue();
    org.joda.time.field.SkipUndoDateTimeField var30 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var3, (org.joda.time.DateTimeField)var26, 19);
    long var32 = var26.roundHalfCeiling(1325559981L);
    long var34 = var26.roundHalfEven(2731816026305L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1325559981L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2731816026305L);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test215"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.withMonthOfYear(1);
    org.joda.time.LocalDate var17 = var13.withWeekyear(1);
    org.joda.time.LocalDate var19 = var13.withDayOfYear(1);
    boolean var20 = var9.equals((java.lang.Object)var19);
    org.joda.time.LocalDate var21 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    java.util.Date var22 = var21.toDate();
    org.joda.time.LocalDate.Property var23 = var21.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test216"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    org.joda.time.DateMidnight var45 = var43.plus(1325559981L);
    int var46 = var45.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 18);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test217"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test218"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toStringList();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.setPeriod(1377742981948L, 9L);
    org.joda.time.Partial var17 = var0.minus((org.joda.time.ReadablePeriod)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var19 = var17.getValue(2049);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test219"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTimeFieldType[] var23 = var22.getFieldTypes();
    org.joda.time.MutableInterval var24 = new org.joda.time.MutableInterval();
    long var25 = var24.getEndMillis();
    org.joda.time.Months var26 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var24);
    org.joda.time.Chronology var27 = var24.getChronology();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var29 = new org.joda.time.LocalDateTime((java.lang.Object)var23, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test220"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var1 = org.joda.time.LocalTime.parse("P121961710312T697819483414166.171");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test221"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-1));
    org.joda.time.Months var3 = var1.plus(100);
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    boolean var7 = var3.isGreaterThan(var6);
    org.joda.time.PeriodType var8 = var3.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test222"); }


    org.joda.time.MutableDateTime var0 = org.joda.time.MutableDateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var4 = var2.plusDays(2013);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    org.joda.time.DateMidnight var25 = var9.withFieldAdded(var23, 1);
    org.joda.time.field.PreciseDurationField var27 = new org.joda.time.field.PreciseDurationField(var23, 1L);
    org.joda.time.DateMidnight var29 = var4.withFieldAdded(var23, 228);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod(var30);
    var31.addDays(1);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    var31.add((org.joda.time.ReadableDuration)var37);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var40);
    org.joda.time.PeriodType var42 = var41.getPeriodType();
    org.joda.time.MutablePeriod var43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var29, var42);
    var43.addMinutes(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test223"); }


    org.joda.time.tz.FixedDateTimeZone var7 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var9 = var7.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var11 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstance(var11);
    long var14 = var7.getMillisKeepLocal(var11, 1377746580759L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var15 = new org.joda.time.DateMidnight(116, 11, (-59), var11);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1377746580754L);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test224"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology)var2);
    org.joda.time.Chronology var5 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test225"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    boolean var42 = var4.isFixed();
    boolean var43 = var4.isFixed();
    org.joda.time.LocalDate var44 = new org.joda.time.LocalDate((org.joda.time.DateTimeZone)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test226"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    org.joda.time.DateTime.Property var3 = var2.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test227"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.setPeriod(1377768182707L);
    var11.setMillis(13);
    java.lang.Object var16 = var11.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test228"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var5 = var1.toDuration();
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.Seconds var34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var35 = var34.toStandardDuration();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var41 = var37.toDuration();
    boolean var42 = var35.isShorterThan((org.joda.time.ReadableDuration)var41);
    long var43 = var41.getStandardDays();
    int var44 = var7.compareTo((org.joda.time.ReadableDuration)var41);
    org.joda.time.Seconds var45 = var7.toStandardSeconds();
    org.joda.time.Seconds var46 = var45.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test229"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    org.joda.time.DurationField var15 = var14.eras();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test230"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.MutableDateTime var12 = var2.copy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDateTime(147, 37, 1970, 5, 659, 529, 228);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test231"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.DateTimeField var21 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test232"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime.Property var8 = var5.minuteOfHour();
    org.joda.time.MutableDateTime.Property var9 = var5.millisOfSecond();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setDayOfMonth(100);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test233"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    org.joda.time.DateMidnight var15 = new org.joda.time.DateMidnight((org.joda.time.Chronology)var14);
    org.joda.time.DurationField var16 = var14.centuries();
    org.joda.time.DateTime var17 = org.joda.time.DateTime.now((org.joda.time.Chronology)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test234"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Hours var49 = var43.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var19.setPeriod((org.joda.time.ReadableDuration)var43, (org.joda.time.Chronology)var50);
    org.joda.time.DateTime var52 = var4.plus((org.joda.time.ReadableDuration)var43);
    org.joda.time.DateTime var55 = var52.withDurationAdded(1L, 15795333);
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.Period var62 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var64 = var62.plusSeconds(100);
    org.joda.time.Period var66 = var62.minusMillis(10);
    boolean var67 = var57.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var68 = var57.dayOfYear();
    int var69 = var57.getSecondOfDay();
    org.joda.time.DateMidnight var71 = var57.withWeekyear(240);
    org.joda.time.DateMidnight var73 = var71.minusMonths(28);
    org.joda.time.DateTimeZone var74 = var73.getZone();
    org.joda.time.DateTime var75 = var55.withZoneRetainFields(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2755493229041L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test235"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("2013-08-29T03:23:19.999+00:00:00.759/2013-08-29T03:23:19.999+00:00:00.759");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test236"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.weekyear();
    org.joda.time.MutableDateTime.Property var21 = var5.year();
    boolean var23 = var5.equals((java.lang.Object)(byte)0);
    long var24 = var5.getMillis();
    org.joda.time.MutableDateTime var25 = var5.copy();
    org.joda.time.MutableDateTime.Property var26 = var5.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2755489629153L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test237"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.DateTime var25 = var23.minusMinutes(16);
    org.joda.time.DateTime var27 = var25.withWeekyear(16);
    org.joda.time.DateTime var29 = var25.withYearOfCentury(35);
    org.joda.time.DateTime var31 = var29.withDayOfMonth(13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var33 = var29.withMonthOfYear(28);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test238"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var2 = org.joda.time.Months.months((-1));
    org.joda.time.Months var4 = var2.plus(100);
    int var5 = var2.size();
    java.lang.String var6 = var0.print((org.joda.time.ReadablePeriod)var2);
    org.joda.time.PeriodType var7 = var0.getParseType();
    org.joda.time.format.PeriodPrinter var8 = var0.getPrinter();
    boolean var9 = var0.isParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "-1 months"+ "'", var6.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test239"); }


    org.joda.time.Years var1 = org.joda.time.Years.years(12217692);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test240"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    org.joda.time.DateTime var65 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var70 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var67, (org.joda.time.ReadableInstant)var69);
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var72 = var71.year();
    boolean var73 = var69.isBefore((org.joda.time.ReadableInstant)var71);
    org.joda.time.MutableDateTime.Property var74 = var71.minuteOfHour();
    org.joda.time.MutableDateTime.Property var75 = var71.millisOfSecond();
    org.joda.time.Chronology var76 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var71);
    org.joda.time.Duration var77 = var11.toDurationFrom((org.joda.time.ReadableInstant)var71);
    org.joda.time.Period var80 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var82 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var83 = new org.joda.time.MutableDateTime();
    var83.setWeekOfWeekyear(1);
    int var86 = var83.getRoundingMode();
    var83.addMillis(100);
    var83.setSecondOfMinute(10);
    org.joda.time.PeriodType var91 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var92 = new org.joda.time.Period((org.joda.time.ReadableDuration)var82, (org.joda.time.ReadableInstant)var83, var91);
    org.joda.time.Days var93 = var92.toStandardDays();
    org.joda.time.DurationFieldType var94 = var93.getFieldType();
    int var95 = var80.get(var94);
    var11.add(var94, 216);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test241"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(69);
    org.joda.time.Months var3 = var1.plus(216);
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    org.joda.time.Months var8 = var6.plus(240);
    org.joda.time.Months var9 = var3.plus(var6);
    org.joda.time.MutableInterval var10 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var11 = var10.copy();
    org.joda.time.DateTime var12 = var11.getStart();
    java.util.Date var13 = var12.toDate();
    org.joda.time.DateTime var14 = var12.withLaterOffsetAtOverlap();
    org.joda.time.DateTime var15 = var12.withTimeAtStartOfDay();
    org.joda.time.MutableInterval var16 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var6, (org.joda.time.ReadableInstant)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test242"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.DateTimeFieldType[] var68 = var67.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var69 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.LocalDateTime var70 = org.joda.time.LocalDateTime.now();
    int var71 = var70.getDayOfYear();
    org.joda.time.Chronology var72 = var70.getChronology();
    int var73 = var70.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var75 = var70.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var76 = var75.yearOfCentury();
    org.joda.time.LocalDateTime var78 = var75.plusWeeks(240);
    int[] var80 = var69.get((org.joda.time.ReadablePartial)var75, 80003L);
    org.joda.time.chrono.EthiopicChronology var81 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var82 = new org.joda.time.Partial(var68, var80, (org.joda.time.Chronology)var81);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test243"); }


    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var4 = var2.withChronologyRetainFields((org.joda.time.Chronology)var3);
    org.joda.time.Years var6 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var7 = var6.getPeriodType();
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    int var10 = var6.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var9);
    int[] var13 = var3.get((org.joda.time.ReadablePeriod)var9, 0L, 0L);
    org.joda.time.LocalDate var14 = new org.joda.time.LocalDate(3L, (org.joda.time.Chronology)var3);
    int var15 = var14.getDayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 113);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test244"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    int var9 = var6.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var11 = var6.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var12 = var11.yearOfCentury();
    org.joda.time.LocalDateTime var14 = var11.plusWeeks(240);
    boolean var15 = var5.isAfter((org.joda.time.ReadablePartial)var11);
    org.joda.time.LocalDateTime var17 = var11.minusSeconds(318);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.DateMidnight var22 = var19.minusWeeks((-1));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    var25.setWeekOfWeekyear(1);
    int var28 = var25.getRoundingMode();
    var25.addMillis(100);
    var25.setSecondOfMinute(10);
    org.joda.time.PeriodType var33 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var34 = new org.joda.time.Period((org.joda.time.ReadableDuration)var24, (org.joda.time.ReadableInstant)var25, var33);
    org.joda.time.Days var35 = var34.toStandardDays();
    org.joda.time.DurationFieldType var36 = var35.getFieldType();
    org.joda.time.DateMidnight var38 = var22.withFieldAdded(var36, 1);
    org.joda.time.LocalDateTime var40 = var17.withFieldAdded(var36, 9);
    int var41 = var17.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 24);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test245"); }


    org.joda.time.YearMonth var5 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var7 = var5.withChronologyRetainFields((org.joda.time.Chronology)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var8 = new org.joda.time.LocalTime(62, 17, 884, 113, (org.joda.time.Chronology)var6);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test246"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    var8.setHourOfDay(10);
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var8);
    org.joda.time.Interval var26 = var2.toInterval();
    org.joda.time.DateMidnight var28 = var2.withYear(104);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test247"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.DateMidnight var7 = var5.plusDays(2013);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var26, 1L);
    org.joda.time.DateMidnight var32 = var7.withFieldAdded(var26, 228);
    org.joda.time.field.PreciseDurationField var34 = new org.joda.time.field.PreciseDurationField(var26, (-9L));
    org.joda.time.LocalDateTime var36 = var3.withFieldAdded(var26, 7);
    int var37 = var36.getSecondOfMinute();
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.DateMidnight var42 = var39.minusWeeks((-1));
    org.joda.time.DateMidnight var44 = var39.withWeekOfWeekyear(35);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var51, (org.joda.time.ReadableInstant)var53);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    boolean var57 = var53.isBefore((org.joda.time.ReadableInstant)var55);
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    boolean var62 = var59.isShorterThan((org.joda.time.ReadableDuration)var61);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    boolean var67 = var64.isShorterThan((org.joda.time.ReadableDuration)var66);
    org.joda.time.Duration var68 = var59.plus((org.joda.time.ReadableDuration)var64);
    var55.add((org.joda.time.ReadableDuration)var64);
    org.joda.time.Seconds var70 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var55);
    org.joda.time.Duration var71 = var70.toStandardDuration();
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    boolean var76 = var73.isShorterThan((org.joda.time.ReadableDuration)var75);
    org.joda.time.Duration var77 = var73.toDuration();
    boolean var78 = var71.isShorterThan((org.joda.time.ReadableDuration)var77);
    org.joda.time.Duration var80 = var77.withMillis(228009L);
    org.joda.time.Period var81 = new org.joda.time.Period((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableDuration)var77);
    org.joda.time.LocalDateTime var82 = var36.minus((org.joda.time.ReadableDuration)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test248"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.minusSeconds(8);
    org.joda.time.Years var7 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var8 = var7.getPeriodType();
    org.joda.time.Years var10 = org.joda.time.Years.years((-1));
    int var11 = var7.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var10);
    org.joda.time.MutablePeriod var12 = var10.toMutablePeriod();
    int var13 = var12.size();
    org.joda.time.LocalTime var15 = var3.withPeriodAdded((org.joda.time.ReadablePeriod)var12, 1883);
    int var16 = var15.getMillisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test249"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    org.joda.time.DateTime var41 = var1.toDateTimeISO();
    org.joda.time.DateTime var43 = var41.minusMillis(20);
    org.joda.time.MutableDateTime var44 = var43.toMutableDateTime();
    int var45 = var44.getMinuteOfHour();
    var44.setMinuteOfDay(216);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 47);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test250"); }


    int var1 = org.joda.time.field.FieldUtils.safeNegate(34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-34));

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test251"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(2762381894421796L);
    long var2 = var1.getMillis();
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    boolean var7 = var4.isShorterThan((org.joda.time.ReadableDuration)var6);
    org.joda.time.Duration var8 = var4.toDuration();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    org.joda.time.Years var13 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var14 = var13.getPeriodType();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var8, var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    java.lang.String var27 = var26.toString();
    org.joda.time.Instant var29 = var1.withDurationAdded((org.joda.time.ReadableDuration)var26, 759);
    long var30 = var29.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "PT-7200S"+ "'", var27.equals("PT-7200S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762376429621796L);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test252"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
    org.joda.time.format.PeriodParser var1 = var0.getParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test253"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    org.joda.time.DateMidnight var24 = var8.withFieldAdded(var22, 1);
    org.joda.time.field.PreciseDurationField var26 = new org.joda.time.field.PreciseDurationField(var22, 1L);
    org.joda.time.DateMidnight var28 = var3.withFieldAdded(var22, 228);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var22, (-9L));
    int var33 = var30.getDifference(1377746581948L, 1377746617724L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 3975);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test254"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var32 = var31.toStandardDuration();
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var34.toDuration();
    boolean var39 = var32.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var40 = var38.toStandardHours();
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    var43.setWeekOfWeekyear(1);
    int var46 = var43.getRoundingMode();
    var43.addMillis(100);
    var43.setSecondOfMinute(10);
    org.joda.time.PeriodType var51 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var52 = new org.joda.time.Period((org.joda.time.ReadableDuration)var42, (org.joda.time.ReadableInstant)var43, var51);
    org.joda.time.Days var53 = var52.toStandardDays();
    org.joda.time.Hours var54 = var53.toStandardHours();
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    var57.setWeekOfWeekyear(1);
    int var60 = var57.getRoundingMode();
    var57.addMillis(100);
    var57.setSecondOfMinute(10);
    org.joda.time.PeriodType var65 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var66 = new org.joda.time.Period((org.joda.time.ReadableDuration)var56, (org.joda.time.ReadableInstant)var57, var65);
    org.joda.time.Days var67 = var66.toStandardDays();
    org.joda.time.Hours var68 = var67.toStandardHours();
    java.lang.String var69 = var68.toString();
    org.joda.time.Hours var70 = var54.plus(var68);
    org.joda.time.Hours var71 = var40.plus(var70);
    org.joda.time.YearMonthDay var72 = var4.plus((org.joda.time.ReadablePeriod)var70);
    int var73 = var4.size();
    int var74 = var4.getDayOfMonth();
    org.joda.time.LocalDate var75 = var4.toLocalDate();
    org.joda.time.DateTime var76 = var4.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "PT0H"+ "'", var69.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test255"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.format.DateTimeFormatter var2 = var0.withDefaultYear(15795333);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test256"); }


    org.joda.time.format.DateTimeFormatterBuilder var1 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var3 = var1.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var1.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var6.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatter var10 = org.joda.time.format.ISODateTimeFormat.dateHour();
    java.lang.Integer var11 = var10.getPivotYear();
    org.joda.time.format.DateTimeFormatterBuilder var12 = var9.append(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.parse("20:23:00.489", var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test257"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.now();
    boolean var9 = var7.isAfter((org.joda.time.ReadablePartial)var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DurationField var13 = var10.hours();
    boolean var14 = var8.equals((java.lang.Object)var10);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.Days var27 = var26.toStandardDays();
    org.joda.time.LocalTime var28 = var8.minus((org.joda.time.ReadablePeriod)var26);
    int var29 = var1.compareTo((org.joda.time.ReadablePartial)var28);
    org.joda.time.Years var31 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var32 = var31.getPeriodType();
    org.joda.time.Years var34 = org.joda.time.Years.years((-1));
    int var35 = var31.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var34);
    org.joda.time.LocalTime var36 = var28.minus((org.joda.time.ReadablePeriod)var31);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var41 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var43 = var42.year();
    boolean var44 = var40.isBefore((org.joda.time.ReadableInstant)var42);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    boolean var49 = var46.isShorterThan((org.joda.time.ReadableDuration)var48);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var55 = var46.plus((org.joda.time.ReadableDuration)var51);
    var42.add((org.joda.time.ReadableDuration)var51);
    org.joda.time.MutableDateTime.Property var57 = var42.dayOfWeek();
    var42.addMonths((-9));
    org.joda.time.MutableDateTime.Property var60 = var42.era();
    boolean var61 = var36.equals((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test258"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var1 = org.joda.time.MutableInterval.parse("org.joda.time.IllegalFieldValueException: Value 51 for 8581 seconds must be in the range [948,69]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test259"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.Instant var3 = var0.plus(100L);
    boolean var5 = var0.isAfter(20792L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test260"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    java.lang.String var4 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var2.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var3.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"+ "'", var4.equals("ConverterManager[5 instant,7 partial,5 duration,5 period,3 interval]"));

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test261"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.DateTime var10 = var0.toDateTime();
    org.joda.time.LocalDateTime.Property var11 = var0.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test262"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.clear();
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadablePeriod)var16);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var35.plus((org.joda.time.ReadableDuration)var40);
    var31.add((org.joda.time.ReadableDuration)var40);
    org.joda.time.Hours var46 = var40.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var16.setPeriod((org.joda.time.ReadableDuration)var40, (org.joda.time.Chronology)var47);
    var0.add((org.joda.time.ReadableDuration)var40, 241);
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.LocalDate var53 = var52.toLocalDate();
    org.joda.time.DateMidnight var55 = var52.minusWeeks((-1));
    org.joda.time.DateMidnight var57 = var55.minusMonths(100);
    org.joda.time.MutablePeriod var58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var40, (org.joda.time.ReadableInstant)var55);
    org.joda.time.MutableInterval var59 = new org.joda.time.MutableInterval();
    long var60 = var59.getEndMillis();
    org.joda.time.Months var61 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var59);
    org.joda.time.Chronology var62 = var59.getChronology();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now(var62);
    org.joda.time.DateMidnight var64 = new org.joda.time.DateMidnight(var62);
    org.joda.time.Period var65 = var40.toPeriod(var62);
    org.joda.time.YearMonthDay var66 = new org.joda.time.YearMonthDay(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test263"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeZone var16 = var13.getZone();
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var20 = var17.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    int[] var28 = var21.get((org.joda.time.ReadablePartial)var26, 100L);
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.LocalTime var34 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var32);
    org.joda.time.Period var35 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var36 = var32.millisOfSecond();
    org.joda.time.DateTimeField var37 = var32.secondOfDay();
    org.joda.time.field.SkipDateTimeField var39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var21, var37, 100);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    org.joda.time.Chronology var42 = var40.getChronology();
    int var43 = var40.getYearOfCentury();
    int var44 = var39.getMaximumValue((org.joda.time.ReadablePartial)var40);
    boolean var46 = var39.isLeap(1L);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    int var49 = var39.getMinimumValue((org.joda.time.ReadablePartial)var47);
    org.joda.time.DurationField var50 = var39.getDurationField();
    org.joda.time.DateTimeFieldType var51 = var39.getType();
    org.joda.time.field.OffsetDateTimeField var55 = new org.joda.time.field.OffsetDateTimeField(var20, var51, 884, 3, 948);
    long var57 = var55.roundCeiling(3L);
    long var59 = var55.roundHalfEven(1377768182707035L);
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, (org.joda.time.DateTimeField)var55, (-1));
    int var62 = var55.getMaximumValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 227);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 948);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test264"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    var10.setYear(147);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.DateMidnight var33 = var31.plusDays(2013);
    boolean var34 = var31.isAfterNow();
    org.joda.time.Months var35 = org.joda.time.Months.monthsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test265"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var2 = org.joda.time.Months.months((-1));
    org.joda.time.Months var4 = var2.plus(100);
    int var5 = var2.size();
    java.lang.String var6 = var0.print((org.joda.time.ReadablePeriod)var2);
    org.joda.time.format.PeriodPrinter var7 = var0.getPrinter();
    org.joda.time.PeriodType var8 = var0.getParseType();
    org.joda.time.PeriodType var9 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var10 = new org.joda.time.MutablePeriod(var9);
    int var11 = var10.getSeconds();
    int var12 = var10.getMonths();
    var10.setWeeks((-1));
    org.joda.time.Weeks var15 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var10);
    org.joda.time.Minutes var16 = var15.toStandardMinutes();
    org.joda.time.MutablePeriod var17 = var15.toMutablePeriod();
    int var20 = var0.parseInto((org.joda.time.ReadWritablePeriod)var17, "0357-04-13T00:00:10.000", 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "-1 months"+ "'", var6.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 51);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test266"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTime var23 = var22.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var24);
    org.joda.time.DateTimeField var27 = var24.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.LocalDate var33 = var31.minusMonths(0);
    int[] var35 = var28.get((org.joda.time.ReadablePartial)var33, 100L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var40 = var39.hours();
    org.joda.time.LocalTime var41 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var39);
    org.joda.time.Period var42 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var43 = var39.millisOfSecond();
    org.joda.time.DateTimeField var44 = var39.secondOfDay();
    org.joda.time.field.SkipDateTimeField var46 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var28, var44, 100);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    org.joda.time.Chronology var49 = var47.getChronology();
    int var50 = var47.getYearOfCentury();
    int var51 = var46.getMaximumValue((org.joda.time.ReadablePartial)var47);
    boolean var53 = var46.isLeap(1L);
    org.joda.time.LocalDateTime var54 = org.joda.time.LocalDateTime.now();
    int var55 = var54.getDayOfYear();
    int var56 = var46.getMinimumValue((org.joda.time.ReadablePartial)var54);
    org.joda.time.DurationField var57 = var46.getDurationField();
    org.joda.time.DateTimeFieldType var58 = var46.getType();
    org.joda.time.field.OffsetDateTimeField var62 = new org.joda.time.field.OffsetDateTimeField(var27, var58, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var65 = new org.joda.time.IllegalFieldValueException(var58, (java.lang.Number)35L, "secondOfDay");
    int var66 = var23.get(var58);
    org.joda.time.DateTime var68 = var23.withYearOfEra(9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 24430);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test267"); }


    org.joda.time.LocalDate var0 = new org.joda.time.LocalDate();
    int var1 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 3);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test268"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.DateTime var25 = var23.minusMinutes(16);
    org.joda.time.DateTime var27 = var25.withWeekyear(16);
    org.joda.time.DateTime var29 = var25.withWeekOfWeekyear(3);
    org.joda.time.format.DateTimeFormatterBuilder var30 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var32 = var30.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var34 = var30.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var35);
    org.joda.time.DateTimeField var38 = var35.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.LocalDate var44 = var42.minusMonths(0);
    int[] var46 = var39.get((org.joda.time.ReadablePartial)var44, 100L);
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.hours();
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var50);
    org.joda.time.Period var53 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var50);
    org.joda.time.DateTimeField var54 = var50.millisOfSecond();
    org.joda.time.DateTimeField var55 = var50.secondOfDay();
    org.joda.time.field.SkipDateTimeField var57 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var39, var55, 100);
    org.joda.time.LocalDateTime var58 = org.joda.time.LocalDateTime.now();
    int var59 = var58.getDayOfYear();
    org.joda.time.Chronology var60 = var58.getChronology();
    int var61 = var58.getYearOfCentury();
    int var62 = var57.getMaximumValue((org.joda.time.ReadablePartial)var58);
    boolean var64 = var57.isLeap(1L);
    org.joda.time.LocalDateTime var65 = org.joda.time.LocalDateTime.now();
    int var66 = var65.getDayOfYear();
    int var67 = var57.getMinimumValue((org.joda.time.ReadablePartial)var65);
    org.joda.time.DurationField var68 = var57.getDurationField();
    org.joda.time.DateTimeFieldType var69 = var57.getType();
    org.joda.time.field.OffsetDateTimeField var73 = new org.joda.time.field.OffsetDateTimeField(var38, var69, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var76 = new org.joda.time.IllegalFieldValueException(var69, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var79 = var30.appendFraction(var69, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var80 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var81 = var80.minutes();
    org.joda.time.DateTimeField var82 = var80.year();
    org.joda.time.DurationField var83 = var80.hours();
    org.joda.time.field.UnsupportedDateTimeField var84 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var69, var83);
    org.joda.time.DateTimeFieldType var85 = var84.getType();
    int var86 = var29.get(var85);
    org.joda.time.chrono.EthiopicChronology var88 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var89 = var88.hours();
    org.joda.time.DateTimeField var90 = var88.minuteOfHour();
    org.joda.time.LocalDate var91 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var88);
    org.joda.time.DateTime var92 = var29.withChronology((org.joda.time.Chronology)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 85450);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test269"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    var0.setDate((org.joda.time.ReadableInstant)var7);
    int var13 = var0.getDayOfMonth();
    var0.addMillis(8400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 26);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test270"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    boolean var32 = var15.isLessThan(var31);
    org.joda.time.Weeks var34 = var31.dividedBy(1);
    org.joda.time.Days var35 = var34.toStandardDays();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var37 = var36.year();
    org.joda.time.MutableDateTime.Property var38 = var36.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.Period var45 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var47 = var45.plusSeconds(100);
    org.joda.time.Period var49 = var45.minusMillis(10);
    boolean var50 = var40.equals((java.lang.Object)10);
    org.joda.time.Weeks var51 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var40);
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var53 = var52.year();
    org.joda.time.MutableDateTime.Property var54 = var52.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var55 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var56 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var55);
    org.joda.time.Period var61 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var63 = var61.plusSeconds(100);
    org.joda.time.Period var65 = var61.minusMillis(10);
    boolean var66 = var56.equals((java.lang.Object)10);
    org.joda.time.Weeks var67 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var52, (org.joda.time.ReadableInstant)var56);
    org.joda.time.Weeks var68 = var51.minus(var67);
    org.joda.time.Weeks var70 = var67.minus(3);
    org.joda.time.Weeks var71 = var34.minus(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test271"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.Period var37 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var39 = var37.plusSeconds(100);
    org.joda.time.Period var41 = var37.minusMillis(10);
    boolean var42 = var32.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var43 = var32.dayOfYear();
    int var44 = var32.getSecondOfDay();
    org.joda.time.DateMidnight var46 = var32.withWeekyear(240);
    org.joda.time.DateMidnight var48 = var46.minusMonths(28);
    org.joda.time.DateTimeZone var49 = var48.getZone();
    org.joda.time.Interval var50 = var17.toInterval(var49);
    org.joda.time.Interval var51 = var50.toInterval();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var56 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var53, (org.joda.time.ReadableInstant)var55);
    org.joda.time.chrono.JulianChronology var57 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var58 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var57);
    org.joda.time.LocalDate var59 = var58.toLocalDate();
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var61 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var58, (org.joda.time.ReadableInstant)var60);
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var63 = var62.year();
    boolean var64 = var60.isBefore((org.joda.time.ReadableInstant)var62);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var75 = var66.plus((org.joda.time.ReadableDuration)var71);
    var62.add((org.joda.time.ReadableDuration)var71);
    org.joda.time.Seconds var77 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var53, (org.joda.time.ReadableInstant)var62);
    org.joda.time.Seconds var79 = var77.plus(2005);
    org.joda.time.Minutes var80 = var77.toStandardMinutes();
    org.joda.time.Interval var81 = var50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var77);
    org.joda.time.LocalDateTime var82 = org.joda.time.LocalDateTime.now();
    int var83 = var82.getDayOfYear();
    org.joda.time.Chronology var84 = var82.getChronology();
    org.joda.time.chrono.StrictChronology var85 = org.joda.time.chrono.StrictChronology.getInstance(var84);
    org.joda.time.chrono.JulianChronology var86 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var87 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var86);
    org.joda.time.LocalDate var88 = var87.toLocalDate();
    org.joda.time.LocalDate var90 = var88.withMonthOfYear(1);
    org.joda.time.LocalDate var92 = var88.withWeekyear(1);
    org.joda.time.LocalDate var94 = var88.withDayOfYear(1);
    org.joda.time.LocalDate var96 = var94.minusMonths(16);
    boolean var97 = var85.equals((java.lang.Object)16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var98 = new org.joda.time.DateTime((java.lang.Object)var77, (org.joda.time.Chronology)var85);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test272"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    org.joda.time.MutableDateTime.Property var22 = var5.minuteOfDay();
    org.joda.time.DateTimeZone var24 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeUtils.getZone(var24);
    java.lang.String var26 = var24.toString();
    var5.setZone(var24);
    org.joda.time.format.DateTimeFormatterBuilder var28 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var30 = var28.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var32 = var28.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var33);
    org.joda.time.DateTimeField var36 = var33.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var37 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.LocalDate var42 = var40.minusMonths(0);
    int[] var44 = var37.get((org.joda.time.ReadablePartial)var42, 100L);
    org.joda.time.chrono.EthiopicChronology var48 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var49 = var48.hours();
    org.joda.time.LocalTime var50 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var48);
    org.joda.time.Period var51 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var48);
    org.joda.time.DateTimeField var52 = var48.millisOfSecond();
    org.joda.time.DateTimeField var53 = var48.secondOfDay();
    org.joda.time.field.SkipDateTimeField var55 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var37, var53, 100);
    org.joda.time.LocalDateTime var56 = org.joda.time.LocalDateTime.now();
    int var57 = var56.getDayOfYear();
    org.joda.time.Chronology var58 = var56.getChronology();
    int var59 = var56.getYearOfCentury();
    int var60 = var55.getMaximumValue((org.joda.time.ReadablePartial)var56);
    boolean var62 = var55.isLeap(1L);
    org.joda.time.LocalDateTime var63 = org.joda.time.LocalDateTime.now();
    int var64 = var63.getDayOfYear();
    int var65 = var55.getMinimumValue((org.joda.time.ReadablePartial)var63);
    org.joda.time.DurationField var66 = var55.getDurationField();
    org.joda.time.DateTimeFieldType var67 = var55.getType();
    org.joda.time.field.OffsetDateTimeField var71 = new org.joda.time.field.OffsetDateTimeField(var36, var67, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var74 = new org.joda.time.IllegalFieldValueException(var67, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var77 = var28.appendFraction(var67, 33, (-948));
    boolean var78 = var5.isSupported(var67);
    org.joda.time.IllegalFieldValueException var82 = new org.joda.time.IllegalFieldValueException(var67, (java.lang.Number)15946L, (java.lang.Number)26, (java.lang.Number)1377746581241L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "+00:00:00.759"+ "'", var26.equals("+00:00:00.759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test273"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var49 = var1.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var51 = var1.plus(1L);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    var54.setWeekOfWeekyear(1);
    int var57 = var54.getRoundingMode();
    var54.addMillis(100);
    var54.setSecondOfMinute(10);
    org.joda.time.PeriodType var62 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var63 = new org.joda.time.Period((org.joda.time.ReadableDuration)var53, (org.joda.time.ReadableInstant)var54, var62);
    org.joda.time.Days var64 = var63.toStandardDays();
    org.joda.time.Hours var65 = var64.toStandardHours();
    org.joda.time.DateMidnight var66 = var1.minus((org.joda.time.ReadablePeriod)var64);
    int var67 = var1.getSecondOfDay();
    org.joda.time.MutableDateTime var68 = var1.toMutableDateTimeISO();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test274"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    var16.clear();
    int[] var43 = var16.getValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test275"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    int var5 = var0.getMillisOfDay();
    org.joda.time.LocalDateTime var7 = var0.withYear(1);
    org.joda.time.LocalDateTime var9 = var0.minusHours(69);
    int var10 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 24430687);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test276"); }


    org.joda.time.Period var4 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.Period var6 = var4.minusWeeks(11);
    org.joda.time.Period var8 = var4.plusYears(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test277"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    int var11 = var8.getMonthOfYear();
    org.joda.time.LocalDate.Property var12 = var8.yearOfCentury();
    org.joda.time.LocalDate.Property var13 = var8.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test278"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.minusMonths(16);
    org.joda.time.LocalDate var12 = var10.withWeekyear(240);
    org.joda.time.LocalDate var14 = var12.withYearOfCentury(62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test279"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var24 = var22.getMillis(104);
    long var27 = var22.getDifferenceAsLong(1377746617466L, 15946L);
    long var30 = var22.getMillis(37, (-1717000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 104L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1377746601520L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 37L);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test280"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    org.joda.time.LocalDateTime var26 = var19.plusSeconds(228);
    org.joda.time.LocalDateTime var28 = var26.minusHours(16);
    java.lang.String var29 = var28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2057-04-25T14:50:58.767"+ "'", var29.equals("2057-04-25T14:50:58.767"));

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test281"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    boolean var6 = var3.isShorterThan((org.joda.time.ReadableDuration)var5);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    org.joda.time.Duration var12 = var3.plus((org.joda.time.ReadableDuration)var8);
    org.joda.time.Instant var14 = var1.withDurationAdded((org.joda.time.ReadableDuration)var3, 1);
    org.joda.time.Duration var17 = new org.joda.time.Duration(99L, (-1L));
    org.joda.time.Instant var18 = var14.minus((org.joda.time.ReadableDuration)var17);
    org.joda.time.DateTime var19 = var14.toDateTime();
    int var20 = var19.getMinuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 347);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test282"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.LocalDate var8 = var6.minusMonths(0);
    int[] var10 = var3.get((org.joda.time.ReadablePartial)var8, 100L);
    org.joda.time.DateTime var11 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var12 = var3.millisOfSecond();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var13 = new org.joda.time.Interval(1377742981323L, 37L, (org.joda.time.Chronology)var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test283"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    boolean var8 = var7.isAfterNow();
    org.joda.time.format.DateTimeFormatterBuilder var9 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var9.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var17 = var14.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    int[] var25 = var18.get((org.joda.time.ReadablePartial)var23, 100L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var29);
    org.joda.time.Period var32 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var29);
    org.joda.time.DateTimeField var33 = var29.millisOfSecond();
    org.joda.time.DateTimeField var34 = var29.secondOfDay();
    org.joda.time.field.SkipDateTimeField var36 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var18, var34, 100);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var36.getMaximumValue((org.joda.time.ReadablePartial)var37);
    boolean var43 = var36.isLeap(1L);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    int var46 = var36.getMinimumValue((org.joda.time.ReadablePartial)var44);
    org.joda.time.DurationField var47 = var36.getDurationField();
    org.joda.time.DateTimeFieldType var48 = var36.getType();
    org.joda.time.field.OffsetDateTimeField var52 = new org.joda.time.field.OffsetDateTimeField(var17, var48, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var55 = new org.joda.time.IllegalFieldValueException(var48, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var58 = var9.appendFraction(var48, 33, (-948));
    org.joda.time.Partial var60 = new org.joda.time.Partial(var48, 4);
    boolean var61 = var7.isSupported(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test284"); }


    org.joda.time.DateTimeUtils.setCurrentMillisOffset(1377746597835L);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test285"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    var2.setTime(99L);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.Hours var18 = var17.toStandardHours();
    java.lang.String var19 = var18.toString();
    org.joda.time.Days var20 = var18.toStandardDays();
    org.joda.time.Hours var22 = var18.multipliedBy(2013);
    org.joda.time.Seconds var23 = var22.toStandardSeconds();
    org.joda.time.Weeks var24 = var23.toStandardWeeks();
    var2.add((org.joda.time.ReadablePeriod)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setMinuteOfHour(12200);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "PT0H"+ "'", var19.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test286"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    var7.add((org.joda.time.ReadableDuration)var13);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var16);
    var17.clear();
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    var17.add((org.joda.time.ReadablePeriod)var20);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var51, (org.joda.time.ReadableInstant)var53);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    boolean var57 = var53.isBefore((org.joda.time.ReadableInstant)var55);
    org.joda.time.Interval var58 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var55);
    boolean var60 = var58.isAfter(10L);
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var64 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var61.setChronology((org.joda.time.Chronology)var64);
    org.joda.time.Interval var66 = var58.withChronology((org.joda.time.Chronology)var64);
    var17.setPeriod((org.joda.time.ReadableInterval)var58);
    org.joda.time.LocalDate var69 = var4.withPeriodAdded((org.joda.time.ReadablePeriod)var17, 240);
    var17.setPeriod(10L);
    org.joda.time.chrono.EthiopicChronology var73 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var17.setPeriod(1386411782707L, (org.joda.time.Chronology)var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.setValue(147, 1962);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test287"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    var1.setDays(46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test288"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.format.DateTimeFormatter var4 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var5 = var4.getZone();
    java.util.TimeZone var6 = var5.toTimeZone();
    org.joda.time.Chronology var7 = var3.withZone(var5);
    org.joda.time.MutableDateTime var8 = org.joda.time.MutableDateTime.now(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test289"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    int var7 = var6.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var8 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var10 = var9.getZone();
    org.joda.time.Chronology var11 = var8.withZone(var10);
    org.joda.time.Interval var12 = var6.toInterval(var10);
    org.joda.time.LocalDate.Property var13 = var6.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test290"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    int var42 = var16.getMinutes();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var44 = var43.year();
    org.joda.time.MutableDateTime.Property var45 = var43.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.Period var52 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var54 = var52.plusSeconds(100);
    org.joda.time.Period var56 = var52.minusMillis(10);
    boolean var57 = var47.equals((java.lang.Object)10);
    org.joda.time.Weeks var58 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var47);
    org.joda.time.Chronology var59 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var43);
    org.joda.time.DateTime var60 = org.joda.time.DateTime.now(var59);
    org.joda.time.DateTimeZone var62 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var63 = org.joda.time.DateTimeUtils.getZone(var62);
    org.joda.time.DateTime var64 = var60.toDateTime(var62);
    org.joda.time.DateTime var66 = var64.plusMinutes(985);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var67 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var16, (org.joda.time.ReadableInstant)var66);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-59));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test291"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    org.joda.time.LocalDate.Property var11 = var8.era();
    org.joda.time.TimeOfDay var12 = new org.joda.time.TimeOfDay();
    int var13 = var12.size();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.LocalTime var19 = var17.withMillisOfSecond(1);
    org.joda.time.LocalTime var21 = var19.minusHours((-1));
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var12, (org.joda.time.ReadablePartial)var21);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var24 = var23.dayOfYear();
    org.joda.time.YearMonthDay var25 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var23);
    org.joda.time.TimeOfDay var26 = var12.withChronologyRetainFields((org.joda.time.Chronology)var23);
    org.joda.time.TimeOfDay var28 = var26.plusMillis(2005);
    org.joda.time.TimeOfDay var30 = var28.plusMillis(100);
    boolean var31 = var8.equals((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test292"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.DateMidnight var8 = var2.toDateMidnight();
    org.joda.time.DateMidnight var10 = var8.plus(1377742981000L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var12 = var8.minusYears(12217692);
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test293"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.LocalDate var12 = var10.minusMonths(0);
    org.joda.time.DateTime var13 = var10.toDateTimeAtMidnight();
    org.joda.time.DateTime var15 = var13.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var16 = var15.monthOfYear();
    org.joda.time.DateTime var18 = var15.withSecondOfMinute(10);
    org.joda.time.Duration var19 = new org.joda.time.Duration((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test294"); }


    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var4 = org.joda.time.DateTimeUtils.getZone(var3);
    org.joda.time.DateTime var5 = new org.joda.time.DateTime(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var6 = new org.joda.time.Interval(1377754981948L, 1377746581948L, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test295"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(69);
    org.joda.time.MutableInterval var2 = new org.joda.time.MutableInterval();
    long var3 = var2.getEndMillis();
    org.joda.time.Months var4 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var2);
    org.joda.time.Months var6 = var4.plus(2013);
    org.joda.time.TimeOfDay var7 = new org.joda.time.TimeOfDay();
    int var8 = var7.size();
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.hours();
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var10);
    org.joda.time.LocalTime var14 = var12.withMillisOfSecond(1);
    org.joda.time.LocalTime var16 = var14.minusHours((-1));
    org.joda.time.Years var17 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var7, (org.joda.time.ReadablePartial)var16);
    int var18 = var7.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var20 = var7.withChronologyRetainFields((org.joda.time.Chronology)var19);
    org.joda.time.Months var22 = org.joda.time.Months.months((-1));
    org.joda.time.Months var24 = var22.plus(100);
    int var25 = var22.size();
    org.joda.time.TimeOfDay var27 = var7.withPeriodAdded((org.joda.time.ReadablePeriod)var22, 2013);
    org.joda.time.Months var28 = var6.plus(var22);
    org.joda.time.Months var30 = org.joda.time.Months.months((-1));
    org.joda.time.Months var32 = var30.plus(100);
    int var33 = var30.size();
    org.joda.time.MutableInterval var34 = new org.joda.time.MutableInterval();
    long var35 = var34.getEndMillis();
    org.joda.time.Months var36 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var34);
    org.joda.time.Months var38 = var36.plus(2013);
    org.joda.time.TimeOfDay var39 = new org.joda.time.TimeOfDay();
    int var40 = var39.size();
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var43 = var42.hours();
    org.joda.time.LocalTime var44 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var42);
    org.joda.time.LocalTime var46 = var44.withMillisOfSecond(1);
    org.joda.time.LocalTime var48 = var46.minusHours((-1));
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var39, (org.joda.time.ReadablePartial)var48);
    int var50 = var39.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var52 = var39.withChronologyRetainFields((org.joda.time.Chronology)var51);
    org.joda.time.Months var54 = org.joda.time.Months.months((-1));
    org.joda.time.Months var56 = var54.plus(100);
    int var57 = var54.size();
    org.joda.time.TimeOfDay var59 = var39.withPeriodAdded((org.joda.time.ReadablePeriod)var54, 2013);
    org.joda.time.Months var60 = var38.plus(var54);
    boolean var61 = var30.isLessThan(var60);
    org.joda.time.Months var62 = var6.minus(var60);
    org.joda.time.Months var64 = var62.plus(23);
    org.joda.time.Months var65 = var1.plus(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 842);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 845);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test296"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.tTime();
    org.joda.time.format.DateTimeParser var2 = var1.getParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var3 = org.joda.time.LocalTime.parse("PT8594S", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test297"); }


    org.joda.time.Duration var2 = new org.joda.time.Duration(99L, (-1L));
    org.joda.time.Duration var3 = var2.toDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test298"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.LocalDateTime var5 = var3.withMillisOfSecond(16);
    int var6 = var5.getMillisOfSecond();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var15 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstance(var15);
    long var18 = var11.getMillisKeepLocal(var15, 1377746580759L);
    org.joda.time.DateTime var19 = var5.toDateTime((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateMidnight var20 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var11);
    int var22 = var11.getOffset(3L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var25 = org.joda.time.chrono.GJChronology.getInstance((org.joda.time.DateTimeZone)var11, 1377746601520L, 12182);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 28);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test299"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var24 = var21.toString("Aug 23, 2013 12:00:00 AM");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test300"); }


    org.joda.time.Period var1 = org.joda.time.Period.hours((-9));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test301"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var41 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var43 = var42.year();
    boolean var44 = var40.isBefore((org.joda.time.ReadableInstant)var42);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    var47.setWeekOfWeekyear(1);
    int var50 = var47.getRoundingMode();
    var47.addMillis(100);
    var47.setSecondOfMinute(10);
    org.joda.time.PeriodType var55 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var56 = new org.joda.time.Period((org.joda.time.ReadableDuration)var46, (org.joda.time.ReadableInstant)var47, var55);
    org.joda.time.Days var57 = var56.toStandardDays();
    org.joda.time.Duration var58 = var57.toStandardDuration();
    org.joda.time.MutableInterval var59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadablePeriod)var57);
    boolean var60 = var36.overlaps((org.joda.time.ReadableInterval)var59);
    org.joda.time.Interval var61 = var36.toInterval();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var63 = var36.withEndMillis(1377742991900L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test302"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.LocalDateTime var44 = var26.withFieldAdded(var42, 100);
    org.joda.time.LocalDateTime var46 = var44.withCenturyOfEra(28);
    org.joda.time.LocalDateTime var48 = var44.minusMinutes(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test303"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.DateTime.Property var24 = var23.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test304"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.get(var16);
    org.joda.time.Period var19 = var2.withMillis(1);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.LocalTime var25 = var23.withMillisOfSecond(1);
    org.joda.time.LocalTime var26 = org.joda.time.LocalTime.now();
    boolean var27 = var25.isAfter((org.joda.time.ReadablePartial)var26);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var28);
    org.joda.time.DurationField var31 = var28.hours();
    boolean var32 = var26.equals((java.lang.Object)var28);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    var35.setWeekOfWeekyear(1);
    int var38 = var35.getRoundingMode();
    var35.addMillis(100);
    var35.setSecondOfMinute(10);
    org.joda.time.PeriodType var43 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var44 = new org.joda.time.Period((org.joda.time.ReadableDuration)var34, (org.joda.time.ReadableInstant)var35, var43);
    org.joda.time.Days var45 = var44.toStandardDays();
    org.joda.time.LocalTime var46 = var26.minus((org.joda.time.ReadablePeriod)var44);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    var49.setWeekOfWeekyear(1);
    int var52 = var49.getRoundingMode();
    var49.addMillis(100);
    var49.setSecondOfMinute(10);
    org.joda.time.PeriodType var57 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var58 = new org.joda.time.Period((org.joda.time.ReadableDuration)var48, (org.joda.time.ReadableInstant)var49, var57);
    org.joda.time.Days var59 = var58.toStandardDays();
    org.joda.time.DurationFieldType var60 = var59.getFieldType();
    org.joda.time.Period var62 = var44.withField(var60, 0);
    org.joda.time.Period var64 = var19.withField(var60, 13);
    int var65 = var64.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test305"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.seconds(216);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.Seconds var27 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var28 = var27.toStandardDuration();
    org.joda.time.Seconds var29 = var1.plus(var27);
    org.joda.time.Hours var30 = var1.toStandardHours();
    org.joda.time.PeriodType var31 = var30.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test306"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.DateMidnight var7 = var4.minusWeeks((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    org.joda.time.DateMidnight var23 = var7.withFieldAdded(var21, 1);
    org.joda.time.MutableInterval var24 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var25 = var24.copy();
    org.joda.time.DateTime var26 = var25.getStart();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var37 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var36);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var39 = var38.year();
    boolean var40 = var36.isBefore((org.joda.time.ReadableInstant)var38);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    boolean var45 = var42.isShorterThan((org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var51 = var42.plus((org.joda.time.ReadableDuration)var47);
    var38.add((org.joda.time.ReadableDuration)var47);
    org.joda.time.PeriodType var53 = org.joda.time.PeriodType.months();
    org.joda.time.Period var54 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var38, var53);
    org.joda.time.MutablePeriod var55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var26, var53);
    org.joda.time.DateMidnight var57 = var7.withYear(33);
    org.joda.time.MutablePeriod var58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime.Property var59 = var0.yearOfEra();
    var0.setTime(2755493225160L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test307"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    var6.setWeekOfWeekyear(1);
    int var9 = var6.getRoundingMode();
    var6.addMillis(100);
    var6.setSecondOfMinute(10);
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableDuration)var5, (org.joda.time.ReadableInstant)var6, var14);
    org.joda.time.Days var16 = var15.toStandardDays();
    boolean var17 = var0.equals((java.lang.Object)var16);
    org.joda.time.LocalDateTime.Property var18 = var0.minuteOfHour();
    int var19 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test308"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    boolean var22 = var18.isSupported();
    org.joda.time.Instant var23 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var26 = var23.toMutableDateTime(var25);
    org.joda.time.MonthDay var27 = org.joda.time.MonthDay.now(var25);
    int[] var31 = new int[] { 1, 1, 0};
    int var32 = var18.getMaximumValue((org.joda.time.ReadablePartial)var27, var31);
    org.joda.time.DateTimeFieldType var33 = var18.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test309"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test310"); }


    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.withMonthOfYear(1);
    org.joda.time.LocalDate var13 = var11.withEra(1);
    int var14 = var13.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var15 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var16 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var17 = var16.getZone();
    org.joda.time.Chronology var18 = var15.withZone(var17);
    org.joda.time.Interval var19 = var13.toInterval(var17);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    org.joda.time.DateTime var25 = var24.toDateTimeAtMidnight();
    int var26 = var13.compareTo((org.joda.time.ReadablePartial)var24);
    org.joda.time.DateTimeZone var28 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var29 = org.joda.time.DateTimeUtils.getZone(var28);
    org.joda.time.LocalDateTime var30 = new org.joda.time.LocalDateTime(var28);
    org.joda.time.MonthDay var31 = new org.joda.time.MonthDay(var28);
    org.joda.time.DateMidnight var32 = var24.toDateMidnight(var28);
    org.joda.time.chrono.EthiopicChronology var33 = org.joda.time.chrono.EthiopicChronology.getInstance(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var34 = new org.joda.time.DateTime(4, 14400001, 23, 42, (-1377742992), 147, 194, var28);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test311"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var2 = org.joda.time.Months.months((-1));
    org.joda.time.Months var4 = var2.plus(100);
    int var5 = var2.size();
    java.lang.String var6 = var0.print((org.joda.time.ReadablePeriod)var2);
    org.joda.time.format.PeriodPrinter var7 = var0.getPrinter();
    org.joda.time.PeriodType var8 = var0.getParseType();
    org.joda.time.MutablePeriod var10 = var0.parseMutablePeriod("8581 seconds");
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.Years var17 = var15.dividedBy(2);
    org.joda.time.Years var19 = var15.multipliedBy(241);
    java.lang.String var20 = var0.print((org.joda.time.ReadablePeriod)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "-1 months"+ "'", var6.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "0 years"+ "'", var20.equals("0 years"));

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test312"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.minutes();
    org.joda.time.DateTimeField var2 = var0.year();
    org.joda.time.DateTimeField var3 = var0.millisOfDay();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance((org.joda.time.Chronology)var0);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "StrictChronology[EthiopicChronology[PT0H]]"+ "'", var5.equals("StrictChronology[EthiopicChronology[PT0H]]"));

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test313"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.field.OffsetDateTimeField var21 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 228);
    java.lang.String var23 = var21.getAsShortText(1377746593932L);
    org.joda.time.DurationField var24 = var21.getLeapDurationField();
    long var26 = var21.roundFloor((-86379208L));
    org.joda.time.DateTimeField var27 = var21.getWrappedField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "12422"+ "'", var23.equals("12422"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-86380100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test314"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.DateMidnight.Property var6 = var5.yearOfEra();
    org.joda.time.DateMidnight var8 = var5.plusYears(948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var10 = var5.withDayOfWeek(15795333);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test315"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.MutableDateTime var12 = var2.copy();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var13.setChronology((org.joda.time.Chronology)var16);
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    var12.setChronology((org.joda.time.Chronology)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setDayOfWeek(318);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test316"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toStringList();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.setPeriod(1377742981948L, 9L);
    org.joda.time.Partial var17 = var0.minus((org.joda.time.ReadablePeriod)var13);
    java.lang.String var18 = var0.toString();
    org.joda.time.chrono.EthiopicChronology var19 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    int[] var26 = var19.get((org.joda.time.ReadablePartial)var24, 100L);
    org.joda.time.chrono.EthiopicChronology var30 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var31 = var30.hours();
    org.joda.time.LocalTime var32 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var30);
    org.joda.time.Period var33 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var30);
    org.joda.time.DateTimeField var34 = var30.millisOfSecond();
    org.joda.time.DateTimeField var35 = var30.secondOfDay();
    org.joda.time.field.SkipDateTimeField var37 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var19, var35, 100);
    org.joda.time.DurationField var38 = var37.getRangeDurationField();
    java.lang.String var39 = var37.toString();
    int var40 = var37.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var42 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var37, 2005);
    boolean var43 = var42.isSupported();
    org.joda.time.DateTimeFieldType var44 = var42.getType();
    org.joda.time.Partial var45 = var0.without(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[]"+ "'", var18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var39.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test317"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.YearMonthDay.Property var5 = var2.monthOfYear();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendHourOfHalfday(759);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var10.appendDayOfYear(12182);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeField var16 = var13.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.minusMonths(0);
    int[] var24 = var17.get((org.joda.time.ReadablePartial)var22, 100L);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var29 = var28.hours();
    org.joda.time.LocalTime var30 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var28);
    org.joda.time.Period var31 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var28);
    org.joda.time.DateTimeField var32 = var28.millisOfSecond();
    org.joda.time.DateTimeField var33 = var28.secondOfDay();
    org.joda.time.field.SkipDateTimeField var35 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var17, var33, 100);
    org.joda.time.LocalDateTime var36 = org.joda.time.LocalDateTime.now();
    int var37 = var36.getDayOfYear();
    org.joda.time.Chronology var38 = var36.getChronology();
    int var39 = var36.getYearOfCentury();
    int var40 = var35.getMaximumValue((org.joda.time.ReadablePartial)var36);
    boolean var42 = var35.isLeap(1L);
    org.joda.time.LocalDateTime var43 = org.joda.time.LocalDateTime.now();
    int var44 = var43.getDayOfYear();
    int var45 = var35.getMinimumValue((org.joda.time.ReadablePartial)var43);
    org.joda.time.DurationField var46 = var35.getDurationField();
    org.joda.time.DateTimeFieldType var47 = var35.getType();
    org.joda.time.field.OffsetDateTimeField var51 = new org.joda.time.field.OffsetDateTimeField(var16, var47, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var54 = new org.joda.time.IllegalFieldValueException(var47, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var12.appendText(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var57 = var2.withField(var47, (-59));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test318"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.minusMonths(16);
    org.joda.time.LocalDate.Property var11 = var10.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test319"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTimeFieldType[] var23 = var22.getFieldTypes();
    org.joda.time.LocalDate var24 = var22.toLocalDate();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.LocalDate var31 = var29.withMonthOfYear(1);
    org.joda.time.LocalDate var33 = var31.withEra(1);
    org.joda.time.LocalDate.Property var34 = var31.yearOfCentury();
    org.joda.time.Period var39 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var41 = var39.plusYears((-1));
    org.joda.time.Minutes var42 = var39.toStandardMinutes();
    org.joda.time.Minutes var44 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var45 = var42.minus(var44);
    org.joda.time.PeriodType var46 = var42.getPeriodType();
    boolean var47 = var31.equals((java.lang.Object)var46);
    org.joda.time.chrono.JulianChronology var48 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var49 = new org.joda.time.MutablePeriod(9L, var46, (org.joda.time.Chronology)var48);
    org.joda.time.LocalTime var50 = org.joda.time.LocalTime.fromMillisOfDay(1377742993058L, (org.joda.time.Chronology)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var51 = var24.toLocalDateTime(var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test320"); }


    org.joda.time.DateMidnight var0 = new org.joda.time.DateMidnight();

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test321"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    java.lang.String var58 = var54.getName();
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    org.joda.time.YearMonth var61 = new org.joda.time.YearMonth((java.lang.Object)var59);
    org.joda.time.YearMonth var64 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var65 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var66 = var64.withChronologyRetainFields((org.joda.time.Chronology)var65);
    org.joda.time.DateTimeField var67 = var65.millisOfDay();
    org.joda.time.Years var69 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var70 = var69.getPeriodType();
    org.joda.time.Years var72 = org.joda.time.Years.years((-1));
    int var73 = var69.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var72);
    org.joda.time.MutablePeriod var74 = var72.toMutablePeriod();
    int var75 = var74.getMonths();
    org.joda.time.PeriodType var76 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var77 = new org.joda.time.MutablePeriod(var76);
    var77.addDays(1);
    org.joda.time.Duration var81 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var83 = org.joda.time.Duration.standardHours((-1L));
    boolean var84 = var81.isShorterThan((org.joda.time.ReadableDuration)var83);
    var77.add((org.joda.time.ReadableDuration)var83);
    org.joda.time.MutableDateTime var86 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var83, (org.joda.time.ReadableInstant)var86);
    org.joda.time.PeriodType var88 = var87.getPeriodType();
    var74.mergePeriod((org.joda.time.ReadablePeriod)var87);
    int[] var91 = var65.get((org.joda.time.ReadablePeriod)var87, 1377746617466L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var93 = var54.addWrapField((org.joda.time.ReadablePartial)var61, 985, var91, 0);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "secondOfDay"+ "'", var58.equals("secondOfDay"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test322"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var1 = new org.joda.time.MonthDay((java.lang.Object)12196171);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test323"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    boolean var23 = var2.isSupported(var22);
    org.joda.time.DateTime var24 = var2.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test324"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Hours var17 = var13.multipliedBy(2013);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.Hours var31 = var30.toStandardHours();
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.Hours var45 = var44.toStandardHours();
    java.lang.String var46 = var45.toString();
    org.joda.time.Hours var47 = var31.plus(var45);
    org.joda.time.Hours var48 = var13.plus(var45);
    int var49 = var45.getHours();
    org.joda.time.Hours var51 = var45.multipliedBy(26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PT0H"+ "'", var46.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test325"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeZone var16 = var13.getZone();
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var20 = var17.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    int[] var28 = var21.get((org.joda.time.ReadablePartial)var26, 100L);
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.LocalTime var34 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var32);
    org.joda.time.Period var35 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var36 = var32.millisOfSecond();
    org.joda.time.DateTimeField var37 = var32.secondOfDay();
    org.joda.time.field.SkipDateTimeField var39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var21, var37, 100);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    org.joda.time.Chronology var42 = var40.getChronology();
    int var43 = var40.getYearOfCentury();
    int var44 = var39.getMaximumValue((org.joda.time.ReadablePartial)var40);
    boolean var46 = var39.isLeap(1L);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    int var49 = var39.getMinimumValue((org.joda.time.ReadablePartial)var47);
    org.joda.time.DurationField var50 = var39.getDurationField();
    org.joda.time.DateTimeFieldType var51 = var39.getType();
    org.joda.time.field.OffsetDateTimeField var55 = new org.joda.time.field.OffsetDateTimeField(var20, var51, 884, 3, 948);
    long var57 = var55.roundCeiling(3L);
    long var59 = var55.roundHalfEven(1377768182707035L);
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, (org.joda.time.DateTimeField)var55, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var64 = var55.getDifference(1377746621805L, 1980000000L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 382);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1377768182707035L);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test326"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("57680");
    org.joda.time.LocalDate var3 = var1.withWeekyear(363);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test327"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now(var8);
    org.joda.time.Interval var10 = var3.toInterval(var8);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = var32.toLocalDate();
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var35 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var34);
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var37 = var36.year();
    boolean var38 = var34.isBefore((org.joda.time.ReadableInstant)var36);
    org.joda.time.Interval var39 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var36);
    org.joda.time.Interval var40 = var39.toInterval();
    org.joda.time.Interval var41 = var10.overlap((org.joda.time.ReadableInterval)var40);
    org.joda.time.Chronology var42 = var10.getChronology();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test328"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var12 = var11.dayOfYear();
    org.joda.time.YearMonthDay var13 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var11);
    org.joda.time.TimeOfDay var14 = var0.withChronologyRetainFields((org.joda.time.Chronology)var11);
    org.joda.time.TimeOfDay var16 = var14.plusMillis(2005);
    org.joda.time.chrono.GJChronology var17 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var18 = var17.getZone();
    org.joda.time.TimeOfDay var19 = var16.withChronologyRetainFields((org.joda.time.Chronology)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var27 = var17.getDateTimeMillis(47, 34, 8, 216, 363, 57, 3);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test329"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.DateTimeField var6 = var3.secondOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var11 = var3.getDateTimeMillis(34, 611, 985, 46);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test330"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    org.joda.time.LocalTime var9 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var5);
    org.joda.time.LocalTime var11 = var9.plusMillis(12182);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test331"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendWeekOfWeekyear(13);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var7.appendEraText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test332"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.minutes();
    org.joda.time.Chronology var3 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var1);
    org.joda.time.TimeOfDay var4 = org.joda.time.TimeOfDay.fromMillisOfDay(80003L, (org.joda.time.Chronology)var1);
    org.joda.time.TimeOfDay var6 = var4.plusMillis(2049);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.withMonthOfYear(1);
    org.joda.time.LocalDate var13 = var9.withWeekyear(1);
    org.joda.time.LocalDate var15 = var9.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var16 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var17 = var15.toString(var16);
    java.lang.String var18 = var6.toString(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var17.equals("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT00:01:22"+ "'", var18.equals("\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT00:01:22"));

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test333"); }


    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.hours();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var9 = new org.joda.time.DateTime(318, 35, 434, 44, 44, 12217692, 41, (org.joda.time.Chronology)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test334"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateMidnight var5 = var4.toDateMidnight();
    org.joda.time.DateMidnight var7 = var5.minus(1377742981948L);
    org.joda.time.DateMidnight.Property var8 = var5.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test335"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.TimeOfDay var11 = var9.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.TimeOfDay var40 = var11.withPeriodAdded((org.joda.time.ReadablePeriod)var37, 948);
    org.joda.time.Chronology var41 = var11.getChronology();
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var43 = var42.dayOfYear();
    org.joda.time.YearMonthDay var44 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var42);
    int var45 = var44.getYear();
    org.joda.time.Period var48 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.Days var61 = var60.toStandardDays();
    org.joda.time.DurationFieldType var62 = var61.getFieldType();
    int var63 = var48.get(var62);
    org.joda.time.YearMonthDay var64 = var44.minus((org.joda.time.ReadablePeriod)var48);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    var67.setWeekOfWeekyear(1);
    int var70 = var67.getRoundingMode();
    var67.addMillis(100);
    var67.setSecondOfMinute(10);
    org.joda.time.PeriodType var75 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableDuration)var66, (org.joda.time.ReadableInstant)var67, var75);
    org.joda.time.Days var77 = var76.toStandardDays();
    org.joda.time.DurationFieldType var78 = var77.getFieldType();
    org.joda.time.IllegalFieldValueException var82 = new org.joda.time.IllegalFieldValueException(var78, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    org.joda.time.YearMonthDay var84 = var44.withFieldAdded(var78, 12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var86 = var11.withFieldAdded(var78, 11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test336"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    int[] var4 = var3.getValues();
    org.joda.time.chrono.ISOChronology var5 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.TimeOfDay var6 = var3.withChronologyRetainFields((org.joda.time.Chronology)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var11 = var5.getDateTimeMillis(759, 331, (-3), 33);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test337"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var28);
    var29.clear();
    org.joda.time.DateMidnight var31 = var17.minus((org.joda.time.ReadablePeriod)var29);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var36 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var35);
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var38 = var37.year();
    boolean var39 = var35.isBefore((org.joda.time.ReadableInstant)var37);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    boolean var44 = var41.isShorterThan((org.joda.time.ReadableDuration)var43);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    boolean var49 = var46.isShorterThan((org.joda.time.ReadableDuration)var48);
    org.joda.time.Duration var50 = var41.plus((org.joda.time.ReadableDuration)var46);
    var37.add((org.joda.time.ReadableDuration)var46);
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var56 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var53, (org.joda.time.ReadableInstant)var55);
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var58 = var57.year();
    boolean var59 = var55.isBefore((org.joda.time.ReadableInstant)var57);
    org.joda.time.Interval var60 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var57);
    org.joda.time.Interval var61 = var60.toInterval();
    org.joda.time.Partial var62 = new org.joda.time.Partial();
    java.lang.String var63 = var62.toString();
    org.joda.time.PeriodType var64 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var65 = new org.joda.time.MutablePeriod(var64);
    org.joda.time.DurationFieldType[] var66 = var65.getFieldTypes();
    org.joda.time.Partial var67 = var62.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.Interval var68 = var61.withPeriodAfterStart((org.joda.time.ReadablePeriod)var65);
    org.joda.time.Hours var69 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval)var68);
    var29.add((org.joda.time.ReadableInterval)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test338"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.Period var23 = new org.joda.time.Period();
    org.joda.time.Period var25 = var23.minusMinutes((-1));
    org.joda.time.YearMonthDay var26 = var2.plus((org.joda.time.ReadablePeriod)var25);
    int var27 = var2.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 18);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test339"); }


    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.LocalTime var4 = org.joda.time.LocalTime.fromMillisOfDay(1377768182707L, (org.joda.time.Chronology)var2);
    int var5 = var4.getHourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test340"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 845);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var80 = var78.getMillis((-62156990340999L));
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test341"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.withWeekOfWeekyear(2);
    org.joda.time.Instant var36 = new org.joda.time.Instant();
    org.joda.time.Instant var37 = var36.toInstant();
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod(var38);
    var39.addDays(1);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    var39.add((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableDuration)var45, var74);
    org.joda.time.Period var77 = new org.joda.time.Period((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.Period var79 = var77.plusMinutes(2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test342"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.addWrapField(9L, 228);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    org.joda.time.Chronology var34 = var32.getChronology();
    org.joda.time.YearMonthDay var35 = new org.joda.time.YearMonthDay(var34);
    org.joda.time.YearMonth var38 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var40 = var38.withChronologyRetainFields((org.joda.time.Chronology)var39);
    org.joda.time.Years var42 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var43 = var42.getPeriodType();
    org.joda.time.Years var45 = org.joda.time.Years.years((-1));
    int var46 = var42.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var45);
    int[] var49 = var39.get((org.joda.time.ReadablePeriod)var45, 0L, 0L);
    int[] var51 = var18.addWrapPartial((org.joda.time.ReadablePartial)var35, (-9), var49, 0);
    int var52 = var35.getMonthOfYear();
    org.joda.time.format.DateTimeFormatter var53 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var54 = new org.joda.time.TimeOfDay();
    int var55 = var54.size();
    org.joda.time.chrono.EthiopicChronology var57 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var58 = var57.hours();
    org.joda.time.LocalTime var59 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var57);
    org.joda.time.LocalTime var61 = var59.withMillisOfSecond(1);
    org.joda.time.LocalTime var63 = var61.minusHours((-1));
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var54, (org.joda.time.ReadablePartial)var63);
    int var65 = var54.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var67 = var54.withChronologyRetainFields((org.joda.time.Chronology)var66);
    org.joda.time.format.DateTimeFormatter var68 = var53.withChronology((org.joda.time.Chronology)var66);
    org.joda.time.DateTimeZone var69 = var66.getZone();
    org.joda.time.DateTime var70 = var35.toDateTimeAtMidnight(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 768);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test343"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    org.joda.time.LocalTime var42 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test344"); }


    org.joda.time.Period var1 = new org.joda.time.Period(10L);
    java.lang.String var2 = var1.toString();
    int var3 = var1.getMillis();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var15 = var14.year();
    boolean var16 = var12.isBefore((org.joda.time.ReadableInstant)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var27 = var18.plus((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.Seconds var29 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var14);
    org.joda.time.Seconds var30 = var29.negated();
    org.joda.time.Period var31 = var1.withFields((org.joda.time.ReadablePeriod)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "PT0.010S"+ "'", var2.equals("PT0.010S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test345"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    org.joda.time.DateTimeZone var10 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var11 = org.joda.time.MutableDateTime.now(var10);
    org.joda.time.MonthDay var12 = org.joda.time.MonthDay.now(var10);
    org.joda.time.MonthDay var14 = var12.plusDays(100);
    boolean var15 = var0.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test346"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.YearMonth var3 = var1.plusMonths(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    var12.setHourOfDay(10);
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Years var31 = var29.minus(69);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var33);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var39 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    boolean var42 = var38.isBefore((org.joda.time.ReadableInstant)var40);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var44.plus((org.joda.time.ReadableDuration)var49);
    var40.add((org.joda.time.ReadableDuration)var49);
    var40.setHourOfDay(10);
    org.joda.time.Years var57 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var40);
    org.joda.time.Years var59 = var57.dividedBy(104);
    boolean var60 = var29.isGreaterThan(var59);
    org.joda.time.YearMonth var62 = var1.withPeriodAdded((org.joda.time.ReadablePeriod)var29, (-9));
    org.joda.time.Years var64 = var29.multipliedBy(21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test347"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now(var8);
    org.joda.time.Interval var10 = var3.toInterval(var8);
    org.joda.time.chrono.GregorianChronology var11 = org.joda.time.chrono.GregorianChronology.getInstance(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstance(var8, 13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test348"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Duration var77 = var76.toDuration();
    long var78 = var76.toDurationMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0L);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test349"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test350"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.DateMidnight var28 = var25.minusWeeks((-1));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.DateMidnight var44 = var28.withFieldAdded(var42, 1);
    org.joda.time.MutableInterval var45 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var46 = var45.copy();
    org.joda.time.DateTime var47 = var46.getStart();
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.MutablePeriod var76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var47, var74);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var79 = new org.joda.time.MutableDateTime();
    var79.setWeekOfWeekyear(1);
    int var82 = var79.getRoundingMode();
    var79.addMillis(100);
    var79.setSecondOfMinute(10);
    org.joda.time.PeriodType var87 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var88 = new org.joda.time.Period((org.joda.time.ReadableDuration)var78, (org.joda.time.ReadableInstant)var79, var87);
    org.joda.time.PeriodType var89 = var87.withWeeksRemoved();
    org.joda.time.MutablePeriod var90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var28, var87);
    var90.addHours(13);
    int var93 = var90.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 100);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test351"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(1377746597835L);
    org.joda.time.DateTime var2 = var1.toDateTimeISO();
    org.joda.time.DateTime var4 = var2.withDayOfYear(31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test352"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    int var42 = var38.getMaximumValue((-7200000L));
    boolean var44 = var38.isLeap((-79L));
    org.joda.time.DurationField var45 = var38.getDurationField();
    long var47 = var38.roundHalfFloor((-86380100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-86380100L));

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test353"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var15 = var4.dayOfYear();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    org.joda.time.DateTime var21 = var18.toDateTimeAtMidnight();
    org.joda.time.DateTime var23 = var21.withCenturyOfEra(4);
    org.joda.time.Days var24 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.LocalTime var30 = var28.withMillisOfSecond(1);
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.now();
    boolean var32 = var30.isAfter((org.joda.time.ReadablePartial)var31);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var33);
    org.joda.time.DurationField var36 = var33.hours();
    boolean var37 = var31.equals((java.lang.Object)var33);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    var40.setWeekOfWeekyear(1);
    int var43 = var40.getRoundingMode();
    var40.addMillis(100);
    var40.setSecondOfMinute(10);
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var49 = new org.joda.time.Period((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var40, var48);
    org.joda.time.Days var50 = var49.toStandardDays();
    org.joda.time.LocalTime var51 = var31.minus((org.joda.time.ReadablePeriod)var49);
    org.joda.time.DateMidnight var52 = var4.plus((org.joda.time.ReadablePeriod)var49);
    org.joda.time.YearMonth var54 = var2.withPeriodAdded((org.joda.time.ReadablePeriod)var49, 10);
    org.joda.time.Interval var55 = var2.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test354"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.YearMonth var6 = new org.joda.time.YearMonth((org.joda.time.Chronology)var3);
    org.joda.time.YearMonth var8 = var6.plusMonths(69781948);
    org.joda.time.YearMonth var10 = var8.withYear(197);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test355"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getDurationField();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var58 = var54.roundHalfEven(1000L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test356"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    java.lang.String var20 = var18.getAsShortText(80003L);
    org.joda.time.DateTimeField var21 = var18.getWrappedField();
    int var23 = var18.get(1377746581948L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var26 = var18.set(1377746580754L, (-13));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "80"+ "'", var20.equals("80"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 12182);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test357"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var50);
    org.joda.time.DateTimeField var53 = var50.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var54 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var55 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var56 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var55);
    org.joda.time.LocalDate var57 = var56.toLocalDate();
    org.joda.time.LocalDate var59 = var57.minusMonths(0);
    int[] var61 = var54.get((org.joda.time.ReadablePartial)var59, 100L);
    org.joda.time.chrono.EthiopicChronology var65 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var66 = var65.hours();
    org.joda.time.LocalTime var67 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var65);
    org.joda.time.Period var68 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var65);
    org.joda.time.DateTimeField var69 = var65.millisOfSecond();
    org.joda.time.DateTimeField var70 = var65.secondOfDay();
    org.joda.time.field.SkipDateTimeField var72 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var54, var70, 100);
    org.joda.time.LocalDateTime var73 = org.joda.time.LocalDateTime.now();
    int var74 = var73.getDayOfYear();
    org.joda.time.Chronology var75 = var73.getChronology();
    int var76 = var73.getYearOfCentury();
    int var77 = var72.getMaximumValue((org.joda.time.ReadablePartial)var73);
    boolean var79 = var72.isLeap(1L);
    org.joda.time.LocalDateTime var80 = org.joda.time.LocalDateTime.now();
    int var81 = var80.getDayOfYear();
    int var82 = var72.getMinimumValue((org.joda.time.ReadablePartial)var80);
    org.joda.time.DurationField var83 = var72.getDurationField();
    org.joda.time.DateTimeFieldType var84 = var72.getType();
    org.joda.time.field.OffsetDateTimeField var88 = new org.joda.time.field.OffsetDateTimeField(var53, var84, 884, 3, 948);
    org.joda.time.DateTimeComparator var89 = org.joda.time.DateTimeComparator.getInstance(var39, var84);
    java.lang.String var90 = var89.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "DateTimeComparator[secondOfDay]"+ "'", var90.equals("DateTimeComparator[secondOfDay]"));

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test358"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.DateTimeFieldType[] var2 = var1.getFieldTypes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var4 = var1.withMonthOfYear(23);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test359"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.DateTime var17 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var9);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.Period var24 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var25 = var21.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25);
    org.joda.time.DateTimeField var27 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var26);
    int var28 = var26.getMinimumValue();
    org.joda.time.field.SkipUndoDateTimeField var30 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var3, (org.joda.time.DateTimeField)var26, 19);
    int var32 = var30.get((-1000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test360"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test361"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.TimeOfDay var11 = var9.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.TimeOfDay var40 = var11.withPeriodAdded((org.joda.time.ReadablePeriod)var37, 948);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var50 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var49);
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var52 = var51.year();
    boolean var53 = var49.isBefore((org.joda.time.ReadableInstant)var51);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    boolean var63 = var60.isShorterThan((org.joda.time.ReadableDuration)var62);
    org.joda.time.Duration var64 = var55.plus((org.joda.time.ReadableDuration)var60);
    var51.add((org.joda.time.ReadableDuration)var60);
    org.joda.time.Seconds var66 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var51);
    org.joda.time.Seconds var67 = var66.negated();
    org.joda.time.Seconds var69 = var67.plus(240);
    org.joda.time.TimeOfDay var70 = var40.plus((org.joda.time.ReadablePeriod)var69);
    org.joda.time.DateTimeFieldType[] var71 = var70.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test362"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    int var5 = var4.getWeeks();
    org.joda.time.Period var6 = var4.toPeriod();
    int var7 = var6.getMonths();
    org.joda.time.Period var9 = var6.plusMillis(28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test363"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var16);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    var23.setHourOfDay(10);
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var23);
    org.joda.time.Years var42 = var40.dividedBy(104);
    boolean var43 = var8.isLessThan(var40);
    org.joda.time.TimeOfDay var44 = new org.joda.time.TimeOfDay();
    int var45 = var44.size();
    org.joda.time.TimeOfDay var47 = var44.withMillisOfSecond(1);
    org.joda.time.Years var49 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var50 = var49.getPeriodType();
    org.joda.time.Years var52 = org.joda.time.Years.years((-1));
    int var53 = var49.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var52);
    org.joda.time.Years var55 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var56 = var55.getPeriodType();
    org.joda.time.Years var57 = var52.minus(var55);
    org.joda.time.TimeOfDay var58 = var47.minus((org.joda.time.ReadablePeriod)var52);
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var60);
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    var67.setHourOfDay(10);
    org.joda.time.Years var84 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var67);
    org.joda.time.Years var86 = var84.dividedBy(104);
    boolean var87 = var52.isLessThan(var84);
    boolean var88 = var8.isGreaterThan(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test364"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    boolean var31 = var28.isAfterNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test365"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardMinutes((-703990L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test366"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.minusMillis(19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test367"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Minutes var68 = var24.toStandardMinutes();
    org.joda.time.Period var70 = var24.minusHours(200);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test368"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    java.lang.String var43 = var38.getAsText(208L);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.DateMidnight var47 = var45.plusDays(2013);
    org.joda.time.chrono.JulianChronology var48 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var49 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var48);
    org.joda.time.LocalDate var50 = var49.toLocalDate();
    org.joda.time.DateMidnight var52 = var49.minusWeeks((-1));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    int var58 = var55.getRoundingMode();
    var55.addMillis(100);
    var55.setSecondOfMinute(10);
    org.joda.time.PeriodType var63 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var64 = new org.joda.time.Period((org.joda.time.ReadableDuration)var54, (org.joda.time.ReadableInstant)var55, var63);
    org.joda.time.Days var65 = var64.toStandardDays();
    org.joda.time.DurationFieldType var66 = var65.getFieldType();
    org.joda.time.DateMidnight var68 = var52.withFieldAdded(var66, 1);
    org.joda.time.field.PreciseDurationField var70 = new org.joda.time.field.PreciseDurationField(var66, 1L);
    org.joda.time.DateMidnight var72 = var47.withFieldAdded(var66, 228);
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    boolean var77 = var74.isShorterThan((org.joda.time.ReadableDuration)var76);
    org.joda.time.Duration var78 = var74.toDuration();
    org.joda.time.Duration var80 = org.joda.time.Duration.standardHours((-1L));
    boolean var81 = var78.isShorterThan((org.joda.time.ReadableDuration)var80);
    org.joda.time.DateMidnight var82 = var72.minus((org.joda.time.ReadableDuration)var80);
    int var83 = var82.getYear();
    org.joda.time.chrono.EthiopicChronology var88 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var89 = var88.hours();
    org.joda.time.LocalTime var90 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var88);
    org.joda.time.Period var91 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var88);
    org.joda.time.TimeOfDay var92 = new org.joda.time.TimeOfDay(9400L, (org.joda.time.Chronology)var88);
    int var93 = var92.getHourOfDay();
    boolean var94 = var82.equals((java.lang.Object)var92);
    int var95 = var38.getMinimumValue((org.joda.time.ReadablePartial)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1092"+ "'", var43.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2063);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 884);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test369"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusSeconds(100);
    int var7 = var4.getYears();
    org.joda.time.DurationFieldType[] var8 = var4.getFieldTypes();
    org.joda.time.Period var10 = var4.withMinutes(2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test370"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.Chronology var16 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var0);
    org.joda.time.DateTime var17 = org.joda.time.DateTime.now(var16);
    org.joda.time.DateTimeZone var19 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeUtils.getZone(var19);
    org.joda.time.DateTime var21 = var17.toDateTime(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var23 = var21.withDayOfWeek(34);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test371"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.LocalDateTime var44 = var26.withFieldAdded(var42, 100);
    org.joda.time.LocalDateTime var46 = var44.withCenturyOfEra(28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var48 = var44.withMonthOfYear(14400001);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test372"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.Period var22 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var24 = var22.plusSeconds(100);
    org.joda.time.Period var26 = var22.minusMillis(10);
    boolean var27 = var17.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var28 = var17.dayOfYear();
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.LocalDate var33 = var31.minusMonths(0);
    org.joda.time.DateTime var34 = var31.toDateTimeAtMidnight();
    org.joda.time.DateTime var36 = var34.withCenturyOfEra(4);
    org.joda.time.Days var37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var36);
    org.joda.time.Days var39 = var37.dividedBy(1);
    boolean var40 = var15.isGreaterThan(var37);
    org.joda.time.DurationFieldType var41 = var15.getFieldType();
    org.joda.time.Days var43 = var15.multipliedBy(4);
    org.joda.time.Duration var44 = var15.toStandardDuration();
    var1.add((org.joda.time.ReadableDuration)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test373"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.DurationField var29 = var18.getDurationField();
    long var32 = var18.getDifferenceAsLong(99L, 80003L);
    int var34 = var18.getMaximumValue(1377746621819L);
    org.joda.time.chrono.EthiopicChronology var38 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var39 = var38.hours();
    org.joda.time.LocalTime var40 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var38);
    org.joda.time.Period var41 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var38);
    org.joda.time.DateTimeField var42 = var38.millisOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var43 = new org.joda.time.LocalTime((java.lang.Object)1377746621819L, (org.joda.time.Chronology)var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-79L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test374"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.format.DateTimeFormatter var4 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var5 = var4.getZone();
    java.util.TimeZone var6 = var5.toTimeZone();
    org.joda.time.Chronology var7 = var3.withZone(var5);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType var8 = var3.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test375"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    org.joda.time.convert.PartialConverter[] var1 = var0.getPartialConverters();
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.YearMonth var4 = new org.joda.time.YearMonth(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.DurationConverter var5 = var0.getDurationConverter((java.lang.Object)var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test376"); }


    org.joda.time.MonthDay var0 = new org.joda.time.MonthDay();
    org.joda.time.LocalDate var2 = var0.toLocalDate(14400001);
    int var3 = var0.getDayOfMonth();
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    var6.setWeekOfWeekyear(1);
    int var9 = var6.getRoundingMode();
    var6.addMillis(100);
    var6.setSecondOfMinute(10);
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableDuration)var5, (org.joda.time.ReadableInstant)var6, var14);
    org.joda.time.Days var16 = var15.toStandardDays();
    org.joda.time.Hours var17 = var16.toStandardHours();
    java.lang.String var18 = var17.toString();
    org.joda.time.Hours var19 = var17.negated();
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.MonthDay var21 = var0.minus((org.joda.time.ReadablePeriod)var20);
    org.joda.time.MonthDay var23 = var0.plusDays(348);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "PT0H"+ "'", var18.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test377"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth(1377746580754L, (org.joda.time.Chronology)var1);
    org.joda.time.DateTimeField var4 = var1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test378"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.YearMonth var3 = var1.plusMonths(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    var12.setHourOfDay(10);
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Years var31 = var29.minus(69);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var33);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var39 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    boolean var42 = var38.isBefore((org.joda.time.ReadableInstant)var40);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var44.plus((org.joda.time.ReadableDuration)var49);
    var40.add((org.joda.time.ReadableDuration)var49);
    var40.setHourOfDay(10);
    org.joda.time.Years var57 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var40);
    org.joda.time.Years var59 = var57.dividedBy(104);
    boolean var60 = var29.isGreaterThan(var59);
    org.joda.time.YearMonth var62 = var1.withPeriodAdded((org.joda.time.ReadablePeriod)var29, (-9));
    org.joda.time.YearMonth var64 = var1.plusMonths(999);
    org.joda.time.LocalDateTime var65 = org.joda.time.LocalDateTime.now();
    int var66 = var65.getDayOfYear();
    org.joda.time.Chronology var67 = var65.getChronology();
    org.joda.time.Period var72 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var74 = var72.plusSeconds(100);
    org.joda.time.Period var76 = var72.minusMillis(10);
    org.joda.time.LocalDateTime var77 = var65.plus((org.joda.time.ReadablePeriod)var76);
    org.joda.time.Period var79 = var76.minusMinutes(4);
    org.joda.time.YearMonth var80 = var1.plus((org.joda.time.ReadablePeriod)var76);
    org.joda.time.DateTimeFieldType[] var81 = var1.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test379"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.seconds(86399);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.Seconds var27 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Seconds var29 = var27.plus(2005);
    org.joda.time.Minutes var30 = var27.toStandardMinutes();
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    var33.setWeekOfWeekyear(1);
    int var36 = var33.getRoundingMode();
    var33.addMillis(100);
    var33.setSecondOfMinute(10);
    org.joda.time.PeriodType var41 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var42 = new org.joda.time.Period((org.joda.time.ReadableDuration)var32, (org.joda.time.ReadableInstant)var33, var41);
    org.joda.time.Days var43 = var42.toStandardDays();
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.Period var50 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var52 = var50.plusSeconds(100);
    org.joda.time.Period var54 = var50.minusMillis(10);
    boolean var55 = var45.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var56 = var45.dayOfYear();
    org.joda.time.chrono.JulianChronology var57 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var58 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var57);
    org.joda.time.LocalDate var59 = var58.toLocalDate();
    org.joda.time.LocalDate var61 = var59.minusMonths(0);
    org.joda.time.DateTime var62 = var59.toDateTimeAtMidnight();
    org.joda.time.DateTime var64 = var62.withCenturyOfEra(4);
    org.joda.time.Days var65 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var64);
    org.joda.time.Days var67 = var65.dividedBy(1);
    boolean var68 = var43.isGreaterThan(var65);
    org.joda.time.DurationFieldType var69 = var43.getFieldType();
    org.joda.time.Seconds var70 = var43.toStandardSeconds();
    boolean var71 = var27.isLessThan(var70);
    boolean var72 = var1.isLessThan(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test380"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.minusWeeks(759);
    org.joda.time.LocalDateTime.Property var7 = var0.era();
    org.joda.time.LocalDateTime var9 = var0.minusMonths(363);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test381"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendWeekOfWeekyear(15795333);
    org.joda.time.format.DateTimeFormatterBuilder var15 = var12.appendTwoDigitWeekyear(12196171, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test382"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forID("BuddhistChronology[PT0H]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test383"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusSeconds(100);
    org.joda.time.Period var11 = var7.minusMillis(10);
    org.joda.time.LocalDateTime var12 = var0.plus((org.joda.time.ReadablePeriod)var11);
    org.joda.time.LocalDateTime.Property var13 = var12.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test384"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    org.joda.time.DurationFieldType var11 = var10.getFieldType();
    org.joda.time.IllegalFieldValueException var15 = new org.joda.time.IllegalFieldValueException(var11, (java.lang.Number)10.0d, (java.lang.Number)1377746681334L, (java.lang.Number)1377742981948L);
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var18 = var17.hours();
    org.joda.time.LocalTime var19 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var17);
    org.joda.time.LocalTime var21 = var19.withMillisOfSecond(1);
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.now();
    boolean var23 = var21.isAfter((org.joda.time.ReadablePartial)var22);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var24);
    org.joda.time.DurationField var27 = var24.hours();
    boolean var28 = var22.equals((java.lang.Object)var24);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.LocalTime var42 = var22.minus((org.joda.time.ReadablePeriod)var40);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    var45.setWeekOfWeekyear(1);
    int var48 = var45.getRoundingMode();
    var45.addMillis(100);
    var45.setSecondOfMinute(10);
    org.joda.time.PeriodType var53 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var54 = new org.joda.time.Period((org.joda.time.ReadableDuration)var44, (org.joda.time.ReadableInstant)var45, var53);
    org.joda.time.Days var55 = var54.toStandardDays();
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.Period var62 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var64 = var62.plusSeconds(100);
    org.joda.time.Period var66 = var62.minusMillis(10);
    boolean var67 = var57.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var68 = var57.dayOfYear();
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.LocalDate var73 = var71.minusMonths(0);
    org.joda.time.DateTime var74 = var71.toDateTimeAtMidnight();
    org.joda.time.DateTime var76 = var74.withCenturyOfEra(4);
    org.joda.time.Days var77 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var57, (org.joda.time.ReadableInstant)var76);
    org.joda.time.Days var79 = var77.dividedBy(1);
    boolean var80 = var55.isGreaterThan(var77);
    org.joda.time.DurationFieldType var81 = var55.getFieldType();
    org.joda.time.Period var83 = var40.withField(var81, 0);
    org.joda.time.IllegalFieldValueException var85 = new org.joda.time.IllegalFieldValueException(var81, "hi!");
    org.joda.time.DurationFieldType var86 = var85.getDurationFieldType();
    var15.addSuppressed((java.lang.Throwable)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test385"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.hours();
    org.joda.time.DateTimeField var9 = var7.minuteOfHour();
    org.joda.time.LocalDate var10 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var7);
    org.joda.time.LocalDate.Property var11 = var10.weekyear();
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod(var12);
    var13.addDays(1);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    var13.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var22);
    var23.clear();
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var26 = new org.joda.time.MutablePeriod(var25);
    var26.addDays(1);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    boolean var33 = var30.isShorterThan((org.joda.time.ReadableDuration)var32);
    var26.add((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadablePeriod)var26);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var42 = var41.year();
    boolean var43 = var39.isBefore((org.joda.time.ReadableInstant)var41);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var54 = var45.plus((org.joda.time.ReadableDuration)var50);
    var41.add((org.joda.time.ReadableDuration)var50);
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.LocalDate var58 = var57.toLocalDate();
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var60 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var57, (org.joda.time.ReadableInstant)var59);
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var62 = var61.year();
    boolean var63 = var59.isBefore((org.joda.time.ReadableInstant)var61);
    org.joda.time.Interval var64 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var61);
    boolean var66 = var64.isAfter(10L);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    var67.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var70 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var67.setChronology((org.joda.time.Chronology)var70);
    org.joda.time.Interval var72 = var64.withChronology((org.joda.time.Chronology)var70);
    var23.setPeriod((org.joda.time.ReadableInterval)var64);
    org.joda.time.LocalDate var75 = var10.withPeriodAdded((org.joda.time.ReadablePeriod)var23, 240);
    org.joda.time.YearMonth var76 = var3.minus((org.joda.time.ReadablePeriod)var23);
    var23.addHours((-948));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test386"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    long var61 = var54.add(1377742999393L, 12194);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = var54.getMinimumValue((-1717000L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1421641399393L);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test387"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.LocalDateTime var10 = org.joda.time.LocalDateTime.now();
    int var11 = var10.getDayOfYear();
    org.joda.time.Chronology var12 = var10.getChronology();
    int var13 = var10.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var15 = var10.withDayOfWeek(2);
    org.joda.time.LocalDateTime var16 = org.joda.time.LocalDateTime.now();
    int var17 = var16.getDayOfYear();
    org.joda.time.Chronology var18 = var16.getChronology();
    int var19 = var16.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var21 = var16.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var22 = var21.yearOfCentury();
    org.joda.time.LocalDateTime var24 = var21.plusWeeks(240);
    boolean var25 = var15.isAfter((org.joda.time.ReadablePartial)var21);
    org.joda.time.LocalDateTime var27 = var21.minusSeconds(318);
    org.joda.time.LocalDateTime var29 = var27.minusSeconds(36);
    org.joda.time.DateTime var30 = var7.withFields((org.joda.time.ReadablePartial)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test388"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.LocalDate.Property var6 = var2.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test389"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var66 = var11.getValue(1970);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test390"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withYear(21);
    org.joda.time.LocalDateTime.Property var6 = var5.dayOfMonth();
    int var7 = var5.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24414169);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test391"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.plusMinutes(2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test392"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    java.lang.String var43 = var38.getAsText(208L);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.withMonthOfYear(1);
    org.joda.time.LocalDate var50 = var46.withWeekyear(1);
    org.joda.time.LocalDate var52 = var46.withDayOfYear(1);
    org.joda.time.LocalDate var54 = var52.minusMonths(16);
    int var55 = var38.getMaximumValue((org.joda.time.ReadablePartial)var52);
    int var56 = var52.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1092"+ "'", var43.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2057);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test393"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var4.appendMillisOfDay(14400001);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var7.appendYear(529, 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test394"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.withMonthOfYear(1);
    org.joda.time.LocalDate var8 = var6.withEra(1);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateMidnight var32 = var10.plusMonths(10);
    org.joda.time.DateTimeZone var34 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var35 = org.joda.time.MutableDateTime.now(var34);
    org.joda.time.DateMidnight var36 = var10.withZoneRetainFields(var34);
    org.joda.time.DateTime var37 = var8.toDateTimeAtMidnight(var34);
    org.joda.time.DateTime var38 = var1.toDateTimeAtCurrentTime(var34);
    org.joda.time.format.DateTimeFormatterBuilder var39 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var42 = var39.appendCenturyOfEra(35, 10);
    org.joda.time.format.DateTimeFormatterBuilder var43 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var45 = var43.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var47 = var43.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var48 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var49 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var48);
    org.joda.time.LocalDate var50 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var48);
    org.joda.time.DateTimeField var51 = var48.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var52 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    int[] var59 = var52.get((org.joda.time.ReadablePartial)var57, 100L);
    org.joda.time.chrono.EthiopicChronology var63 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var64 = var63.hours();
    org.joda.time.LocalTime var65 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var63);
    org.joda.time.Period var66 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var63);
    org.joda.time.DateTimeField var67 = var63.millisOfSecond();
    org.joda.time.DateTimeField var68 = var63.secondOfDay();
    org.joda.time.field.SkipDateTimeField var70 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var52, var68, 100);
    org.joda.time.LocalDateTime var71 = org.joda.time.LocalDateTime.now();
    int var72 = var71.getDayOfYear();
    org.joda.time.Chronology var73 = var71.getChronology();
    int var74 = var71.getYearOfCentury();
    int var75 = var70.getMaximumValue((org.joda.time.ReadablePartial)var71);
    boolean var77 = var70.isLeap(1L);
    org.joda.time.LocalDateTime var78 = org.joda.time.LocalDateTime.now();
    int var79 = var78.getDayOfYear();
    int var80 = var70.getMinimumValue((org.joda.time.ReadablePartial)var78);
    org.joda.time.DurationField var81 = var70.getDurationField();
    org.joda.time.DateTimeFieldType var82 = var70.getType();
    org.joda.time.field.OffsetDateTimeField var86 = new org.joda.time.field.OffsetDateTimeField(var51, var82, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var89 = new org.joda.time.IllegalFieldValueException(var82, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var92 = var43.appendFraction(var82, 33, (-948));
    org.joda.time.Partial var94 = new org.joda.time.Partial(var82, 4);
    org.joda.time.format.DateTimeFormatterBuilder var95 = var42.appendText(var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var96 = var1.get(var82);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test395"); }


    org.joda.time.IllegalFieldValueException var2 = new org.joda.time.IllegalFieldValueException("DurationField[days]", "P759MT382707H24M41.334S");
    java.lang.Number var3 = var2.getIllegalNumberValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test396"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod(var28);
    int var30 = var29.getSeconds();
    int var31 = var29.getMonths();
    var29.setWeeks((-1));
    org.joda.time.Weeks var34 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var29);
    org.joda.time.Minutes var35 = var34.toStandardMinutes();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    var38.setWeekOfWeekyear(1);
    int var41 = var38.getRoundingMode();
    var38.addMillis(100);
    var38.setSecondOfMinute(10);
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var47 = new org.joda.time.Period((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var38, var46);
    org.joda.time.Days var48 = var47.toStandardDays();
    org.joda.time.DurationFieldType var49 = var48.getFieldType();
    boolean var50 = var35.equals((java.lang.Object)var48);
    org.joda.time.Duration var51 = var48.toStandardDuration();
    var9.add((org.joda.time.ReadableDuration)var51, 318);
    org.joda.time.DateTime var54 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var56 = var54.withMillis(0L);
    org.joda.time.DateTime.Property var57 = var56.hourOfDay();
    var9.setTime((org.joda.time.ReadableInstant)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test397"); }


    org.joda.time.DateTime var7 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.DateTime.Property var8 = var7.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test398"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.LocalDateTime var11 = var0.plusMinutes(22);
    org.joda.time.LocalDateTime.Property var12 = var11.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test399"); }


    org.joda.time.DateTime var1 = org.joda.time.DateTime.parse("2057-01-13");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test400"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    org.joda.time.LocalDateTime var28 = var19.minusMillis(14);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    boolean var47 = var19.isSupported(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var51 = var19.withDate(228, 85450, 2019);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test401"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var10 = var8.minusMonths(240);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var12 = var11.dayOfYear();
    org.joda.time.YearMonthDay var13 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var11);
    int var14 = var13.getYear();
    org.joda.time.Period var17 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.DurationFieldType var31 = var30.getFieldType();
    int var32 = var17.get(var31);
    org.joda.time.YearMonthDay var33 = var13.minus((org.joda.time.ReadablePeriod)var17);
    org.joda.time.DateTime var34 = var33.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var36);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var41);
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var44 = var43.year();
    boolean var45 = var41.isBefore((org.joda.time.ReadableInstant)var43);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var56 = var47.plus((org.joda.time.ReadableDuration)var52);
    var43.add((org.joda.time.ReadableDuration)var52);
    var43.setHourOfDay(10);
    org.joda.time.Years var60 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var43);
    org.joda.time.YearMonthDay var61 = var33.minus((org.joda.time.ReadablePeriod)var60);
    org.joda.time.DateMidnight var62 = var8.minus((org.joda.time.ReadablePeriod)var60);
    org.joda.time.DateMidnight.Property var63 = var62.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test402"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.chrono.EthiopicChronology var8 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var9 = var8.minutes();
    org.joda.time.DateTimeField var10 = var8.hourOfHalfday();
    var1.add(4959874731599000L, (org.joda.time.Chronology)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addMonths(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test403"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    int var10 = var9.getDayOfWeek();
    org.joda.time.Months var12 = org.joda.time.Months.months((-1));
    org.joda.time.Months var14 = var12.plus(100);
    int var15 = var12.size();
    org.joda.time.MutableInterval var16 = new org.joda.time.MutableInterval();
    long var17 = var16.getEndMillis();
    org.joda.time.Months var18 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var16);
    org.joda.time.Months var20 = var18.plus(2013);
    org.joda.time.TimeOfDay var21 = new org.joda.time.TimeOfDay();
    int var22 = var21.size();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.LocalTime var26 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var24);
    org.joda.time.LocalTime var28 = var26.withMillisOfSecond(1);
    org.joda.time.LocalTime var30 = var28.minusHours((-1));
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var21, (org.joda.time.ReadablePartial)var30);
    int var32 = var21.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var34 = var21.withChronologyRetainFields((org.joda.time.Chronology)var33);
    org.joda.time.Months var36 = org.joda.time.Months.months((-1));
    org.joda.time.Months var38 = var36.plus(100);
    int var39 = var36.size();
    org.joda.time.TimeOfDay var41 = var21.withPeriodAdded((org.joda.time.ReadablePeriod)var36, 2013);
    org.joda.time.Months var42 = var20.plus(var36);
    boolean var43 = var12.isLessThan(var42);
    org.joda.time.Months var44 = var12.negated();
    org.joda.time.LocalDate var45 = var9.plus((org.joda.time.ReadablePeriod)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 379);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test404"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    org.joda.time.LocalDateTime var26 = var19.plusSeconds(228);
    org.joda.time.LocalDateTime var28 = var26.minusHours(16);
    int var29 = var28.getCenturyOfEra();
    org.joda.time.chrono.EthiopicChronology var30 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var31 = var30.dayOfYear();
    org.joda.time.YearMonthDay var32 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var30);
    int var33 = var32.getYear();
    org.joda.time.Period var36 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    int var51 = var36.get(var50);
    org.joda.time.YearMonthDay var52 = var32.minus((org.joda.time.ReadablePeriod)var36);
    org.joda.time.DateTime var53 = var52.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var55 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var56 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var55);
    org.joda.time.chrono.JulianChronology var57 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var58 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var57);
    org.joda.time.LocalDate var59 = var58.toLocalDate();
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var61 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var58, (org.joda.time.ReadableInstant)var60);
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var63 = var62.year();
    boolean var64 = var60.isBefore((org.joda.time.ReadableInstant)var62);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var75 = var66.plus((org.joda.time.ReadableDuration)var71);
    var62.add((org.joda.time.ReadableDuration)var71);
    var62.setHourOfDay(10);
    org.joda.time.Years var79 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var62);
    org.joda.time.YearMonthDay var80 = var52.minus((org.joda.time.ReadablePeriod)var79);
    org.joda.time.Years var82 = var79.plus(15946);
    org.joda.time.LocalDateTime var84 = var28.withPeriodAdded((org.joda.time.ReadablePeriod)var79, 228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2049);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test405"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.format.DateTimeFormatterBuilder var3 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var5 = var3.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var3.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var11 = var8.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    int[] var19 = var12.get((org.joda.time.ReadablePartial)var17, 100L);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.Period var26 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var23);
    org.joda.time.DateTimeField var27 = var23.millisOfSecond();
    org.joda.time.DateTimeField var28 = var23.secondOfDay();
    org.joda.time.field.SkipDateTimeField var30 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var12, var28, 100);
    org.joda.time.LocalDateTime var31 = org.joda.time.LocalDateTime.now();
    int var32 = var31.getDayOfYear();
    org.joda.time.Chronology var33 = var31.getChronology();
    int var34 = var31.getYearOfCentury();
    int var35 = var30.getMaximumValue((org.joda.time.ReadablePartial)var31);
    boolean var37 = var30.isLeap(1L);
    org.joda.time.LocalDateTime var38 = org.joda.time.LocalDateTime.now();
    int var39 = var38.getDayOfYear();
    int var40 = var30.getMinimumValue((org.joda.time.ReadablePartial)var38);
    org.joda.time.DurationField var41 = var30.getDurationField();
    org.joda.time.DateTimeFieldType var42 = var30.getType();
    org.joda.time.field.OffsetDateTimeField var46 = new org.joda.time.field.OffsetDateTimeField(var11, var42, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var52 = var3.appendFraction(var42, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var53 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var54 = var53.minutes();
    org.joda.time.DateTimeField var55 = var53.year();
    org.joda.time.DurationField var56 = var53.hours();
    org.joda.time.field.UnsupportedDateTimeField var57 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var42, var56);
    int var58 = var2.indexOf(var42);
    org.joda.time.LocalDate var59 = var2.toLocalDate();
    org.joda.time.LocalDate var61 = var59.minusWeeks(12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test406"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Partial var8 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var5);
    org.joda.time.format.DateTimeFormatter var9 = var8.getFormatter();
    org.joda.time.LocalTime var11 = org.joda.time.LocalTime.fromMillisOfDay(1377742981948L);
    org.joda.time.TimeOfDay var12 = new org.joda.time.TimeOfDay();
    int var13 = var12.size();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.LocalTime var19 = var17.withMillisOfSecond(1);
    org.joda.time.LocalTime var21 = var19.minusHours((-1));
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var12, (org.joda.time.ReadablePartial)var21);
    int var23 = var12.getMillisOfSecond();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var25 = var24.dayOfYear();
    org.joda.time.YearMonthDay var26 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var24);
    org.joda.time.format.DateTimeFormatterBuilder var27 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var29 = var27.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var31 = var27.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var35 = var32.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    int[] var43 = var36.get((org.joda.time.ReadablePartial)var41, 100L);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.Period var50 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var47);
    org.joda.time.DateTimeField var51 = var47.millisOfSecond();
    org.joda.time.DateTimeField var52 = var47.secondOfDay();
    org.joda.time.field.SkipDateTimeField var54 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var36, var52, 100);
    org.joda.time.LocalDateTime var55 = org.joda.time.LocalDateTime.now();
    int var56 = var55.getDayOfYear();
    org.joda.time.Chronology var57 = var55.getChronology();
    int var58 = var55.getYearOfCentury();
    int var59 = var54.getMaximumValue((org.joda.time.ReadablePartial)var55);
    boolean var61 = var54.isLeap(1L);
    org.joda.time.LocalDateTime var62 = org.joda.time.LocalDateTime.now();
    int var63 = var62.getDayOfYear();
    int var64 = var54.getMinimumValue((org.joda.time.ReadablePartial)var62);
    org.joda.time.DurationField var65 = var54.getDurationField();
    org.joda.time.DateTimeFieldType var66 = var54.getType();
    org.joda.time.field.OffsetDateTimeField var70 = new org.joda.time.field.OffsetDateTimeField(var35, var66, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var73 = new org.joda.time.IllegalFieldValueException(var66, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var76 = var27.appendFraction(var66, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var77 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var78 = var77.minutes();
    org.joda.time.DateTimeField var79 = var77.year();
    org.joda.time.DurationField var80 = var77.hours();
    org.joda.time.field.UnsupportedDateTimeField var81 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var66, var80);
    int var82 = var26.indexOf(var66);
    int var83 = var12.indexOf(var66);
    boolean var84 = var11.isSupported(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var86 = var8.withField(var66, 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 467);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test407"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.MonthDay var3 = org.joda.time.MonthDay.now(var1);
    java.lang.String var5 = var3.toString("20:23:00.489");
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    org.joda.time.Duration var27 = var26.toStandardDuration();
    org.joda.time.MutableInterval var28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadablePeriod)var26);
    org.joda.time.Days var30 = var26.plus(23);
    org.joda.time.MonthDay var31 = var3.minus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.DateTimeFieldType[] var32 = var31.getFieldTypes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var34 = var31.getFieldType(19);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "20:23:00.489"+ "'", var5.equals("20:23:00.489"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test408"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.weeks();
    org.joda.time.PeriodType var1 = var0.withDaysRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test409"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Minutes var16 = var15.toStandardMinutes();
    org.joda.time.Seconds var17 = var16.toStandardSeconds();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    org.joda.time.MutableDateTime.Property var21 = var19.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.Period var28 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var30 = var28.plusSeconds(100);
    org.joda.time.Period var32 = var28.minusMillis(10);
    boolean var33 = var23.equals((java.lang.Object)10);
    org.joda.time.Weeks var34 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    org.joda.time.MutableDateTime.Property var37 = var35.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.Period var44 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var46 = var44.plusSeconds(100);
    org.joda.time.Period var48 = var44.minusMillis(10);
    boolean var49 = var39.equals((java.lang.Object)10);
    org.joda.time.Weeks var50 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var39);
    boolean var51 = var34.isLessThan(var50);
    org.joda.time.Weeks var53 = var50.dividedBy(1);
    org.joda.time.Days var54 = var50.toStandardDays();
    org.joda.time.Days var56 = var54.plus(12);
    org.joda.time.Seconds var57 = var54.toStandardSeconds();
    org.joda.time.Seconds var58 = var17.minus(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test410"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var4 = new org.joda.time.TimeOfDay(12217, 434, 62, 33);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test411"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicTime();
    org.joda.time.format.DateTimeFormatter var2 = var0.withPivotYear(35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test412"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    org.joda.time.DateTime var6 = var3.toDateTimeAtMidnight();
    org.joda.time.DateTime var8 = var6.withMillis(100L);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.DateMidnight var13 = var10.minusWeeks((-1));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    org.joda.time.DurationFieldType var27 = var26.getFieldType();
    org.joda.time.DateMidnight var29 = var13.withFieldAdded(var27, 1);
    org.joda.time.DateMidnight.Property var30 = var13.monthOfYear();
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    var33.setWeekOfWeekyear(1);
    int var36 = var33.getRoundingMode();
    var33.addMillis(100);
    var33.setSecondOfMinute(10);
    org.joda.time.PeriodType var41 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var42 = new org.joda.time.Period((org.joda.time.ReadableDuration)var32, (org.joda.time.ReadableInstant)var33, var41);
    org.joda.time.PeriodType var43 = var41.withWeeksRemoved();
    org.joda.time.Period var44 = new org.joda.time.Period((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var13, var41);
    org.joda.time.Instant var45 = new org.joda.time.Instant();
    org.joda.time.Instant var46 = var45.toInstant();
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var48 = new org.joda.time.MutablePeriod(var47);
    var48.addDays(1);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    var48.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var62 = var58.toDuration();
    org.joda.time.chrono.JulianChronology var63 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var64 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var63);
    org.joda.time.LocalDate var65 = var64.toLocalDate();
    org.joda.time.MutableDateTime var66 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var67 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var64, (org.joda.time.ReadableInstant)var66);
    org.joda.time.MutableDateTime var68 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var69 = var68.year();
    boolean var70 = var66.isBefore((org.joda.time.ReadableInstant)var68);
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    boolean var75 = var72.isShorterThan((org.joda.time.ReadableDuration)var74);
    org.joda.time.Duration var77 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var79 = org.joda.time.Duration.standardHours((-1L));
    boolean var80 = var77.isShorterThan((org.joda.time.ReadableDuration)var79);
    org.joda.time.Duration var81 = var72.plus((org.joda.time.ReadableDuration)var77);
    var68.add((org.joda.time.ReadableDuration)var77);
    org.joda.time.PeriodType var83 = org.joda.time.PeriodType.months();
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableDuration)var58, (org.joda.time.ReadableInstant)var68, var83);
    org.joda.time.Period var85 = new org.joda.time.Period((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableDuration)var54, var83);
    org.joda.time.DateTime var86 = var8.plus((org.joda.time.ReadableDuration)var54);
    org.joda.time.LocalTime var87 = var8.toLocalTime();
    org.joda.time.LocalTime var89 = var87.withMillisOfDay(1);
    org.joda.time.LocalTime var91 = var87.withMillisOfDay(23);
    java.lang.String var92 = var0.print((org.joda.time.ReadablePartial)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "T00:00:00"+ "'", var92.equals("T00:00:00"));

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test413"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.DateTime var10 = var5.withYear(86399);
    org.joda.time.DateTime var12 = var10.minusDays(661);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test414"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.LocalTime var20 = var7.plus((org.joda.time.ReadablePeriod)var19);
    int var21 = var7.getSecondOfMinute();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var23 = var7.withMinuteOfHour((-59));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test415"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    int var16 = var4.getDayOfMonth();
    org.joda.time.LocalDate var18 = var4.toLocalDate((-22));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test416"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.dayOfWeek();
    var5.addMonths((-9));
    org.joda.time.MutableDateTime.Property var23 = var5.era();
    long var24 = var5.getMillis();
    org.joda.time.format.DateTimeFormatterBuilder var25 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var27 = var25.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var29 = var25.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DateTimeField var33 = var30.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var34 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.LocalDate var39 = var37.minusMonths(0);
    int[] var41 = var34.get((org.joda.time.ReadablePartial)var39, 100L);
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var46 = var45.hours();
    org.joda.time.LocalTime var47 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var45);
    org.joda.time.Period var48 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var45);
    org.joda.time.DateTimeField var49 = var45.millisOfSecond();
    org.joda.time.DateTimeField var50 = var45.secondOfDay();
    org.joda.time.field.SkipDateTimeField var52 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var34, var50, 100);
    org.joda.time.LocalDateTime var53 = org.joda.time.LocalDateTime.now();
    int var54 = var53.getDayOfYear();
    org.joda.time.Chronology var55 = var53.getChronology();
    int var56 = var53.getYearOfCentury();
    int var57 = var52.getMaximumValue((org.joda.time.ReadablePartial)var53);
    boolean var59 = var52.isLeap(1L);
    org.joda.time.LocalDateTime var60 = org.joda.time.LocalDateTime.now();
    int var61 = var60.getDayOfYear();
    int var62 = var52.getMinimumValue((org.joda.time.ReadablePartial)var60);
    org.joda.time.DurationField var63 = var52.getDurationField();
    org.joda.time.DateTimeFieldType var64 = var52.getType();
    org.joda.time.field.OffsetDateTimeField var68 = new org.joda.time.field.OffsetDateTimeField(var33, var64, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var71 = new org.joda.time.IllegalFieldValueException(var64, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var74 = var25.appendFraction(var64, 33, (-948));
    org.joda.time.Partial var76 = new org.joda.time.Partial(var64, 4);
    org.joda.time.MutableDateTime.Property var77 = var5.property(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2731816014500L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test417"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var2 = var0.parseMutableDateTime("org.joda.time.IllegalFieldValueException: Value \"8595 seconds\" for secondOfDay is not supported");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test418"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.LocalDate var46 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.LocalTime var47 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test419"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.LocalDateTime var11 = var5.toLocalDateTime();
    org.joda.time.DateTime var13 = var5.minusSeconds(33);
    org.joda.time.DateTime var15 = var5.minusWeeks(14);
    org.joda.time.YearMonthDay var16 = var15.toYearMonthDay();
    int var17 = var15.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test420"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    org.joda.time.DurationFieldType[] var4 = var3.getFieldTypes();
    org.joda.time.Partial var5 = var0.plus((org.joda.time.ReadablePeriod)var3);
    java.lang.String var6 = var5.toStringList();
    org.joda.time.format.DateTimeFormatter var7 = var5.getFormatter();
    java.lang.String var8 = var5.toStringList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test421"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.LocalDate var33 = var31.minusMonths(0);
    int[] var35 = var28.get((org.joda.time.ReadablePartial)var33, 100L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var40 = var39.hours();
    org.joda.time.LocalTime var41 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var39);
    org.joda.time.Period var42 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var43 = var39.millisOfSecond();
    org.joda.time.DateTimeField var44 = var39.secondOfDay();
    org.joda.time.field.SkipDateTimeField var46 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var28, var44, 100);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    org.joda.time.Chronology var49 = var47.getChronology();
    int var50 = var47.getYearOfCentury();
    int var51 = var46.getMaximumValue((org.joda.time.ReadablePartial)var47);
    boolean var53 = var46.isLeap(1L);
    org.joda.time.LocalDateTime var54 = org.joda.time.LocalDateTime.now();
    int var55 = var54.getDayOfYear();
    int var56 = var46.getMinimumValue((org.joda.time.ReadablePartial)var54);
    long var59 = var46.addWrapField(9L, 228);
    org.joda.time.LocalDateTime var60 = org.joda.time.LocalDateTime.now();
    int var61 = var60.getDayOfYear();
    org.joda.time.Chronology var62 = var60.getChronology();
    org.joda.time.YearMonthDay var63 = new org.joda.time.YearMonthDay(var62);
    org.joda.time.YearMonth var66 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var67 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var68 = var66.withChronologyRetainFields((org.joda.time.Chronology)var67);
    org.joda.time.Years var70 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var71 = var70.getPeriodType();
    org.joda.time.Years var73 = org.joda.time.Years.years((-1));
    int var74 = var70.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var73);
    int[] var77 = var67.get((org.joda.time.ReadablePeriod)var73, 0L, 0L);
    int[] var79 = var46.addWrapPartial((org.joda.time.ReadablePartial)var63, (-9), var77, 0);
    long var82 = var46.set(1377742981L, 759);
    var9.setRounding((org.joda.time.DateTimeField)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1296758981L);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test422"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.hours();
    org.joda.time.DateTimeField var2 = var0.minuteOfHour();
    long var6 = var0.add(1L, 1377746580759L, 2005);
    org.joda.time.DateTimeZone var7 = var0.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test423"); }


    org.joda.time.Duration var2 = new org.joda.time.Duration(99L, (-1L));
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    boolean var7 = var4.isShorterThan((org.joda.time.ReadableDuration)var6);
    org.joda.time.Duration var8 = var4.toDuration();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var40.toDuration();
    boolean var45 = var38.isShorterThan((org.joda.time.ReadableDuration)var44);
    long var46 = var44.getStandardDays();
    int var47 = var10.compareTo((org.joda.time.ReadableDuration)var44);
    java.lang.String var48 = var10.toString();
    org.joda.time.Duration var49 = var2.plus((org.joda.time.ReadableDuration)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "PT-3600S"+ "'", var48.equals("PT-3600S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test424"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    org.joda.time.LocalDateTime var7 = var0.plusMinutes(70541200);
    org.joda.time.chrono.ISOChronology var8 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var13 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var15 = var13.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var16 = var8.withZone((org.joda.time.DateTimeZone)var13);
    org.joda.time.LocalTime var17 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var13);
    org.joda.time.LocalDateTime var18 = var7.withFields((org.joda.time.ReadablePartial)var17);
    org.joda.time.LocalTime.Property var19 = var17.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test425"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Duration var13 = var1.plus(100L);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime.Property var34 = var19.dayOfWeek();
    var19.addMonths((-9));
    int var37 = var19.getCenturyOfEra();
    org.joda.time.Period var42 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var44 = var42.plusYears((-1));
    org.joda.time.Years var46 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var47 = var46.getPeriodType();
    org.joda.time.Period var48 = var42.normalizedStandard(var47);
    org.joda.time.PeriodType var49 = var47.withMillisRemoved();
    org.joda.time.PeriodType var50 = var47.withYearsRemoved();
    org.joda.time.MutablePeriod var51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var19, var47);
    var19.addWeekyears(57600100);
    org.joda.time.Chronology var54 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test426"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Minutes var68 = var24.toStandardMinutes();
    int var69 = var24.size();
    org.joda.time.Period var71 = var24.withHours(682);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test427"); }


    org.joda.time.Period var1 = org.joda.time.Period.months((-948));
    org.joda.time.Period var3 = var1.minusDays((-1));
    org.joda.time.Period var5 = var1.minusMillis(33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test428"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    org.joda.time.DateMidnight var24 = var8.withFieldAdded(var22, 1);
    org.joda.time.field.PreciseDurationField var26 = new org.joda.time.field.PreciseDurationField(var22, 1L);
    org.joda.time.DateMidnight var28 = var3.withFieldAdded(var22, 228);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var22, (-9L));
    long var33 = var30.add(1377742992740L, 12182);
    java.lang.String var34 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1377742883102L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "DurationField[days]"+ "'", var34.equals("DurationField[days]"));

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test429"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.LocalDateTime var44 = var26.withFieldAdded(var42, 100);
    org.joda.time.LocalDateTime var46 = var44.withCenturyOfEra(28);
    int var47 = var44.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 24414959);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test430"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.YearMonth var6 = new org.joda.time.YearMonth((org.joda.time.Chronology)var3);
    org.joda.time.DateTime var7 = org.joda.time.DateTime.now((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var8 = var3.clockhourOfHalfday();
    org.joda.time.field.DelegatedDateTimeField var9 = new org.joda.time.field.DelegatedDateTimeField(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test431"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime var29 = var27.withWeekyear(692);
    org.joda.time.LocalDateTime.Property var30 = var27.minuteOfHour();
    java.lang.String var32 = var27.toString("1969-12");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "1969-12"+ "'", var32.equals("1969-12"));

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test432"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeUtils.getZone(var1);
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now(var1);
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now(var1);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var17 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var16);
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var19 = var18.year();
    boolean var20 = var16.isBefore((org.joda.time.ReadableInstant)var18);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var31 = var22.plus((org.joda.time.ReadableDuration)var27);
    var18.add((org.joda.time.ReadableDuration)var27);
    org.joda.time.Seconds var33 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var18);
    var18.setWeekOfWeekyear(28);
    org.joda.time.DateTime var36 = org.joda.time.DateTime.now();
    long var37 = var36.getMillis();
    var18.setMillis((org.joda.time.ReadableInstant)var36);
    org.joda.time.DateTimeZone var39 = var18.getZone();
    long var41 = var6.getMillisKeepLocal(var39, 1377742981948L);
    long var43 = var1.getMillisKeepLocal(var6, 4593613400L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2755493214888L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1377742982607L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 4593613400L);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test433"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonthDay var46 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.DateTime var47 = var46.toDateTimeAtMidnight();
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    var50.setWeekOfWeekyear(1);
    int var53 = var50.getRoundingMode();
    var50.addMillis(100);
    var50.setSecondOfMinute(10);
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var59 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var50, var58);
    org.joda.time.PeriodType var60 = var58.withWeeksRemoved();
    org.joda.time.format.DateTimeFormatter var61 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var65 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var66 = var65.hours();
    org.joda.time.LocalTime var67 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var65);
    org.joda.time.Period var68 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var65);
    org.joda.time.DateTimeField var69 = var65.millisOfSecond();
    org.joda.time.chrono.LenientChronology var70 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var65);
    org.joda.time.format.DateTimeFormatter var71 = var61.withChronology((org.joda.time.Chronology)var70);
    org.joda.time.chrono.JulianChronology var72 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var73 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var72);
    org.joda.time.LocalDate var74 = var73.toLocalDate();
    org.joda.time.LocalDate var76 = var74.withMonthOfYear(1);
    org.joda.time.LocalDate var78 = var74.withWeekyear(1);
    org.joda.time.LocalDate var80 = var74.withDayOfYear(1);
    boolean var81 = var70.equals((java.lang.Object)var80);
    org.joda.time.LocalDate var82 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var70);
    org.joda.time.LocalDate var83 = new org.joda.time.LocalDate((org.joda.time.Chronology)var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var84 = new org.joda.time.Period((java.lang.Object)var46, var60, (org.joda.time.Chronology)var70);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test434"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.TimeOfDay var16 = new org.joda.time.TimeOfDay();
    int var17 = var16.size();
    org.joda.time.TimeOfDay var19 = var16.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var21 = var16.minusMinutes(1);
    org.joda.time.TimeOfDay var23 = var21.plusHours(2013);
    org.joda.time.Chronology var24 = var23.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Months var25 = org.joda.time.Months.monthsBetween((org.joda.time.ReadablePartial)var15, (org.joda.time.ReadablePartial)var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test435"); }


    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var4 = var2.withChronologyRetainFields((org.joda.time.Chronology)var3);
    org.joda.time.YearMonth var6 = var4.withMonthOfYear(10);
    org.joda.time.Interval var7 = var4.toInterval();
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now(var9);
    org.joda.time.Interval var11 = var4.toInterval(var9);
    org.joda.time.LocalDate var12 = new org.joda.time.LocalDate(9400L, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var14 = var12.withMonthOfYear(24414169);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test436"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.parseSeconds("PT8594S");
    org.joda.time.Weeks var2 = var1.toStandardWeeks();
    org.joda.time.MutablePeriod var3 = var1.toMutablePeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test437"); }


    int var2 = org.joda.time.field.FieldUtils.safeMultiply(12217692, 34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 415401528);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test438"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.minutes();
    org.joda.time.Period var3 = new org.joda.time.Period((-79L), 99L, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test439"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendHourOfHalfday(759);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendDayOfYear(12182);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendMillisOfDay(57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test440"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Minutes var68 = var24.toStandardMinutes();
    org.joda.time.Period var73 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var75 = var73.plusYears((-1));
    org.joda.time.Minutes var76 = var73.toStandardMinutes();
    org.joda.time.Minutes var78 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var79 = var76.minus(var78);
    org.joda.time.Minutes var80 = var68.minus(var79);
    org.joda.time.DurationFieldType var81 = var68.getFieldType();
    org.joda.time.Minutes var83 = org.joda.time.Minutes.minutes(86399);
    org.joda.time.Minutes var84 = var68.plus(var83);
    java.lang.String var85 = var84.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "PT86339M"+ "'", var85.equals("PT86339M"));

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test441"); }


    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(8, 80, 12200, 15795333, 1883, 12182, 69781948, 2024);
    int var9 = var8.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 15795333);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test442"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    int var26 = var18.getMaximumValue();
    java.lang.String var27 = var18.getName();
    long var29 = var18.roundHalfCeiling(1377742981323L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "secondOfDay"+ "'", var27.equals("secondOfDay"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377742980900L);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test443"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    int var11 = var8.getMonthOfYear();
    org.joda.time.Minutes var13 = org.joda.time.Minutes.minutes(100);
    org.joda.time.LocalDate var14 = var8.plus((org.joda.time.ReadablePeriod)var13);
    int var15 = var14.getCenturyOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 21);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test444"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    org.joda.time.LocalDateTime.Property var27 = var19.yearOfEra();
    org.joda.time.LocalTime var28 = var19.toLocalTime();
    org.joda.time.LocalDateTime var30 = var19.plusHours(55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test445"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusSeconds(100);
    org.joda.time.Period var17 = var13.minusMillis(10);
    boolean var18 = var8.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var19 = var8.dayOfYear();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    org.joda.time.DateTime var25 = var22.toDateTimeAtMidnight();
    org.joda.time.DateTime var27 = var25.withCenturyOfEra(4);
    org.joda.time.Days var28 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var27);
    org.joda.time.DateMidnight var30 = var8.plusMonths(10);
    org.joda.time.DateTimeZone var32 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var33 = org.joda.time.MutableDateTime.now(var32);
    org.joda.time.DateMidnight var34 = var8.withZoneRetainFields(var32);
    org.joda.time.DateTime var35 = var6.toDateTimeAtMidnight(var32);
    int var36 = var6.getWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2057);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test446"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.LocalDateTime var11 = var5.toLocalDateTime();
    org.joda.time.DateTime var13 = var5.minusSeconds(33);
    org.joda.time.Instant var14 = var5.toInstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test447"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var5.addMinutes(104);
    var5.setDayOfMonth(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test448"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime.Property var34 = var19.dayOfWeek();
    var11.setPeriod((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var19);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    boolean var48 = var44.isBefore((org.joda.time.ReadableInstant)var46);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var59 = var50.plus((org.joda.time.ReadableDuration)var55);
    var46.add((org.joda.time.ReadableDuration)var55);
    org.joda.time.Seconds var61 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var46);
    org.joda.time.Seconds var62 = var61.negated();
    var11.mergePeriod((org.joda.time.ReadablePeriod)var62);
    org.joda.time.chrono.JulianChronology var64 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var65 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var64);
    org.joda.time.LocalDate var66 = var65.toLocalDate();
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var68 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var67);
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.MutableDateTime var72 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var73 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var72);
    org.joda.time.MutableDateTime var74 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var75 = var74.year();
    boolean var76 = var72.isBefore((org.joda.time.ReadableInstant)var74);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var80 = org.joda.time.Duration.standardHours((-1L));
    boolean var81 = var78.isShorterThan((org.joda.time.ReadableDuration)var80);
    org.joda.time.Duration var83 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var85 = org.joda.time.Duration.standardHours((-1L));
    boolean var86 = var83.isShorterThan((org.joda.time.ReadableDuration)var85);
    org.joda.time.Duration var87 = var78.plus((org.joda.time.ReadableDuration)var83);
    var74.add((org.joda.time.ReadableDuration)var83);
    org.joda.time.Seconds var89 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var74);
    org.joda.time.Seconds var90 = var62.minus(var89);
    org.joda.time.Weeks var91 = var62.toStandardWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test449"); }


    long var2 = org.joda.time.field.FieldUtils.safeMultiply((-1100L), 1377742991418L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1515517290559800L));

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test450"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.DateMidnight.Property var5 = var1.dayOfYear();
    org.joda.time.DateMidnight.Property var6 = var1.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test451"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    int var14 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 402);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 4);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test452"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(var1);
    var2.addDays(1);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    boolean var9 = var6.isShorterThan((org.joda.time.ReadableDuration)var8);
    var2.add((org.joda.time.ReadableDuration)var8);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var11);
    var12.clear();
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var14);
    var15.addDays(1);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    var15.add((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadablePeriod)var15);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var34.plus((org.joda.time.ReadableDuration)var39);
    var30.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.Hours var45 = var39.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var15.setPeriod((org.joda.time.ReadableDuration)var39, (org.joda.time.Chronology)var46);
    var15.clear();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    org.joda.time.MutableDateTime.Property var51 = var49.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.Period var58 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var60 = var58.plusSeconds(100);
    org.joda.time.Period var62 = var58.minusMillis(10);
    boolean var63 = var53.equals((java.lang.Object)10);
    org.joda.time.Weeks var64 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var49, (org.joda.time.ReadableInstant)var53);
    org.joda.time.Duration var65 = var15.toDurationFrom((org.joda.time.ReadableInstant)var53);
    org.joda.time.chrono.JulianChronology var68 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var69 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var68);
    var15.add(1L, (org.joda.time.Chronology)var68);
    org.joda.time.DurationField var71 = var68.millis();
    org.joda.time.LocalTime var72 = new org.joda.time.LocalTime((-1L), (org.joda.time.Chronology)var68);
    org.joda.time.DateTimeField var73 = var68.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test453"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.DurationField var26 = var18.getDurationField();
    int var27 = var18.getMaximumValue();
    int var28 = var18.getMinimumValue();
    java.lang.String var29 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var29.equals("DateTimeField[secondOfDay]"));

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test454"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    int var11 = var8.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test455"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var8 = var6.getFieldType(24430687);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test456"); }


    org.joda.time.TimeOfDay var1 = org.joda.time.TimeOfDay.fromMillisOfDay(20792L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test457"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.LocalDate var34 = var32.minusMonths(0);
    int[] var36 = var29.get((org.joda.time.ReadablePartial)var34, 100L);
    org.joda.time.chrono.EthiopicChronology var40 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var41 = var40.hours();
    org.joda.time.LocalTime var42 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var40);
    org.joda.time.Period var43 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var40);
    org.joda.time.DateTimeField var44 = var40.millisOfSecond();
    org.joda.time.DateTimeField var45 = var40.secondOfDay();
    org.joda.time.field.SkipDateTimeField var47 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var29, var45, 100);
    org.joda.time.LocalDateTime var48 = org.joda.time.LocalDateTime.now();
    int var49 = var48.getDayOfYear();
    org.joda.time.Chronology var50 = var48.getChronology();
    int var51 = var48.getYearOfCentury();
    int var52 = var47.getMaximumValue((org.joda.time.ReadablePartial)var48);
    boolean var54 = var47.isLeap(1L);
    boolean var55 = var47.isSupported();
    long var58 = var47.getDifferenceAsLong(1377742981948L, 9L);
    boolean var60 = var47.isLeap(86400000L);
    long var62 = var47.roundFloor(1377742992740L);
    var7.setRounding((org.joda.time.DateTimeField)var47);
    long var65 = var47.roundHalfFloor(2755493229041L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 116);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1377742981L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1377742991900L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2755493228900L);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test458"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMillisRemoved();
    org.joda.time.PeriodType var12 = var9.withYearsRemoved();
    org.joda.time.PeriodType var13 = var12.withMinutesRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test459"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    boolean var22 = var18.isSupported();
    long var24 = var18.roundHalfFloor((-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-100L));

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test460"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.YearMonth var8 = var3.minusYears((-17));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var10 = var8.toLocalDate(659);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test461"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.Chronology var3 = var1.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test462"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var29.plus((org.joda.time.ReadableDuration)var34);
    var25.add((org.joda.time.ReadableDuration)var34);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Interval var48 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var45);
    org.joda.time.Interval var49 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var45);
    org.joda.time.MutableDateTime.Property var50 = var45.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test463"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.format.DateTimeFormatter var6 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.hours();
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var10);
    org.joda.time.Period var13 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var14 = var10.millisOfSecond();
    org.joda.time.chrono.LenientChronology var15 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var10);
    org.joda.time.format.DateTimeFormatter var16 = var6.withChronology((org.joda.time.Chronology)var15);
    org.joda.time.tz.FixedDateTimeZone var21 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var22 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(var22);
    var23.addDays(1);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    var23.add((org.joda.time.ReadableDuration)var29);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var32);
    var33.clear();
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var42 = var41.year();
    boolean var43 = var39.isBefore((org.joda.time.ReadableInstant)var41);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var54 = var45.plus((org.joda.time.ReadableDuration)var50);
    var41.add((org.joda.time.ReadableDuration)var50);
    org.joda.time.MutableDateTime.Property var56 = var41.dayOfWeek();
    var33.setPeriod((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var41);
    boolean var58 = var21.equals((java.lang.Object)var33);
    org.joda.time.Chronology var59 = var15.withZone((org.joda.time.DateTimeZone)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var60 = new org.joda.time.DateMidnight((java.lang.Object)var5, (org.joda.time.DateTimeZone)var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test464"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalDateTime var11 = var9.minusMinutes(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test465"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.LocalDateTime var4 = new org.joda.time.LocalDateTime(var2);
    org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(1377742981000L, var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var8 = org.joda.time.chrono.GJChronology.getInstance(var2, 1377768182807L, 38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test466"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.setSeconds(1);
    int var14 = var11.getSeconds();
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.DateTime var25 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var27 = var25.withMillis(0L);
    org.joda.time.MutablePeriod var28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var22, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var30 = var22.withMillis(1377742981948L);
    var11.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.months();
    java.lang.String var33 = var32.toString();
    org.joda.time.PeriodType var34 = var32.withMinutesRemoved();
    org.joda.time.MutablePeriod var35 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.MutablePeriod var36 = var35.copy();
    var11.mergePeriod((org.joda.time.ReadablePeriod)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PeriodType[Months]"+ "'", var33.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test467"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.secondOfMinute();
    org.joda.time.LocalTime var10 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test468"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(var1);
    int var3 = var2.getSeconds();
    int var4 = var2.getMonths();
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var8 = org.joda.time.chrono.ISOChronology.getInstance(var7);
    org.joda.time.DurationField var9 = var8.millis();
    var2.add((-7200000L), (org.joda.time.Chronology)var8);
    org.joda.time.YearMonth var11 = new org.joda.time.YearMonth((org.joda.time.Chronology)var8);
    org.joda.time.DateMidnight var12 = new org.joda.time.DateMidnight(893L, (org.joda.time.Chronology)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test469"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var2 = new org.joda.time.LocalTime(529, 12217692);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test470"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Minutes var7 = var6.toStandardMinutes();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    boolean var22 = var7.equals((java.lang.Object)var20);
    org.joda.time.Days var24 = var20.multipliedBy(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test471"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.withMonthOfYear(1);
    org.joda.time.LocalDate var17 = var13.withWeekyear(1);
    org.joda.time.LocalDate var19 = var13.withDayOfYear(1);
    boolean var20 = var9.equals((java.lang.Object)var19);
    org.joda.time.LocalDate var21 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var22 = new org.joda.time.LocalDate((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate.Property var23 = var22.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test472"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.wordBased();
    boolean var1 = var0.isPrinter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime((java.lang.Object)var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test473"); }


    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.hours();
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var10);
    org.joda.time.Period var13 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var14 = var10.millisOfSecond();
    org.joda.time.chrono.LenientChronology var15 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var16 = new org.joda.time.LocalDateTime(8, 15, 415401528, 842, 630, 948, 73381948, (org.joda.time.Chronology)var10);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test474"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateMidnight var5 = var4.toDateMidnight();
    boolean var6 = var5.isAfterNow();
    org.joda.time.LocalDateTime var7 = new org.joda.time.LocalDateTime((java.lang.Object)var5);
    org.joda.time.DateMidnight var9 = var5.plus(1377746598594L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test475"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate.Property var7 = var4.yearOfCentury();
    java.lang.String var8 = var4.toString();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.Seconds var34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var35 = var34.toStandardDuration();
    org.joda.time.LocalDate var37 = var4.withPeriodAdded((org.joda.time.ReadablePeriod)var34, (-1));
    org.joda.time.Seconds var39 = org.joda.time.Seconds.parseSeconds("PT8594S");
    org.joda.time.Weeks var40 = var39.toStandardWeeks();
    boolean var41 = var34.isLessThan(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "2057-01-13"+ "'", var8.equals("2057-01-13"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test476"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var1 = var0.getUpperLimit();
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var5 = var3.withChronologyRetainFields((org.joda.time.Chronology)var4);
    org.joda.time.YearMonth var7 = var5.withMonthOfYear(10);
    org.joda.time.Interval var8 = var5.toInterval();
    org.joda.time.DateTimeZone var10 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now(var10);
    org.joda.time.Interval var12 = var5.toInterval(var10);
    boolean var13 = var0.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test477"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.DateTime var87 = var7.minusDays(8400);
    org.joda.time.MutableDateTime var88 = var87.toMutableDateTime();
    org.joda.time.DateTime var90 = var87.withSecondOfMinute(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test478"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.format.DateTimeFormatter var11 = var10.withZoneUTC();
    org.joda.time.format.DateTimePrinter var12 = var10.getPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test479"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    var11.setPeriod(1377746681334L);
    org.joda.time.MutablePeriod var67 = var11.copy();
    int var68 = var11.getYears();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test480"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now(var8);
    org.joda.time.Interval var10 = var3.toInterval(var8);
    org.joda.time.chrono.BuddhistChronology var11 = org.joda.time.chrono.BuddhistChronology.getInstance(var8);
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test481"); }


    long var0 = org.joda.time.DateTimeUtils.currentTimeMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == 2755493215861L);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test482"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var1 = var0.getZone();
    org.joda.time.TimeOfDay var2 = new org.joda.time.TimeOfDay(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test483"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.millis((-7092000100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test484"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    java.lang.String var12 = var0.toString();
    org.joda.time.TimeOfDay.Property var13 = var0.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 970);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "T06:46:55.970"+ "'", var12.equals("T06:46:55.970"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test485"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Seconds var33 = var31.plus(2005);
    org.joda.time.Minutes var34 = var31.toStandardMinutes();
    org.joda.time.Minutes var36 = var34.dividedBy(100);
    org.joda.time.LocalTime var37 = var3.plus((org.joda.time.ReadablePeriod)var36);
    org.joda.time.LocalTime.Property var38 = var3.hourOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var40 = var3.withSecondOfMinute(197);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test486"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.YearMonth var6 = new org.joda.time.YearMonth((org.joda.time.Chronology)var3);
    org.joda.time.YearMonth var8 = var6.plusMonths(69781948);
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusYears((-1));
    org.joda.time.Minutes var16 = var13.toStandardMinutes();
    org.joda.time.Minutes var18 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var19 = var16.minus(var18);
    org.joda.time.PeriodType var20 = var16.getPeriodType();
    int var21 = var16.getMinutes();
    org.joda.time.YearMonth var23 = var8.withPeriodAdded((org.joda.time.ReadablePeriod)var16, 69781948);
    org.joda.time.YearMonth var25 = var8.plusMonths(13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test487"); }


    org.joda.time.DateTimeUtils.setCurrentMillisFixed(10L);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test488"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth(var2);
    org.joda.time.Chronology var4 = var0.withZone(var2);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Interval var33 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var30);
    var10.setDayOfYear(104);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.Period var42 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var44 = var42.plusSeconds(100);
    org.joda.time.Period var46 = var42.minusMillis(10);
    boolean var47 = var37.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var48 = var37.dayOfYear();
    int var49 = var37.getSecondOfDay();
    org.joda.time.DateMidnight var51 = var37.withWeekyear(240);
    var10.setDate((org.joda.time.ReadableInstant)var37);
    int var53 = var2.getOffset((org.joda.time.ReadableInstant)var37);
    org.joda.time.DateMidnight var55 = var37.plus(1377746597622L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test489"); }


    org.joda.time.LocalTime var1 = org.joda.time.LocalTime.fromMillisOfDay(10L);
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.indexOf(var16);
    boolean var18 = var1.isSupported(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test490"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusHours(69);
    org.joda.time.LocalDateTime var10 = var5.minusHours((-22));
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var11);
    var12.addDays(1);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    var12.add((org.joda.time.ReadableDuration)var18);
    org.joda.time.DateTime var21 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var23 = var21.withMillis(0L);
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var23);
    org.joda.time.LocalDateTime var25 = var10.minus((org.joda.time.ReadableDuration)var18);
    org.joda.time.LocalDate var26 = var10.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test491"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    org.joda.time.Chronology var4 = var0.withUTC();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var7);
    org.joda.time.LocalTime var9 = org.joda.time.LocalTime.fromMillisOfDay(1377768182707L, (org.joda.time.Chronology)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var10 = new org.joda.time.DateTime((java.lang.Object)var0, (org.joda.time.Chronology)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test492"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    var3.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var3.setChronology((org.joda.time.Chronology)var6);
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(0L, var2, (org.joda.time.Chronology)var6);
    org.joda.time.LocalTime var9 = new org.joda.time.LocalTime((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var6);
    int var11 = var10.getDayOfWeek();
    org.joda.time.DateTime var12 = var10.toDateTimeAtCurrentTime();
    org.joda.time.DateTime var14 = var12.withYearOfEra(69781948);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var15.setChronology((org.joda.time.Chronology)var18);
    org.joda.time.MonthDay var20 = new org.joda.time.MonthDay((java.lang.Object)var14, (org.joda.time.Chronology)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var21 = new org.joda.time.TimeOfDay((java.lang.Object)"2057-04-26T06:47:05.031+00:00:00.100/2057-04-26T06:47:05.031+00:00:00.100", (org.joda.time.Chronology)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test493"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusSeconds(100);
    org.joda.time.Period var11 = var7.minusMillis(10);
    org.joda.time.LocalDateTime var12 = var0.plus((org.joda.time.ReadablePeriod)var11);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.months();
    java.lang.String var14 = var13.toString();
    org.joda.time.PeriodType var15 = var13.withMonthsRemoved();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var16 = var11.withPeriodType(var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PeriodType[Months]"+ "'", var14.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test494"); }


    org.joda.time.Interval var2 = new org.joda.time.Interval(1377768182707L, 2731816014500L);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test495"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    boolean var61 = var57.isPrecise();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var64 = var57.add((-79L), 1377742991900L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test496"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    org.joda.time.TimeOfDay var15 = var13.minusMinutes(0);
    org.joda.time.TimeOfDay var17 = var15.plusSeconds(985);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test497"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    var0.setDurationBeforeEnd(1L);
    long var4 = var0.toDurationMillis();
    org.joda.time.ReadableInterval var5 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval)var0);
    var0.setEndMillis(1377754981948L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test498"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstance();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test499"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.ISOChronology var6 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var14 = var6.withZone((org.joda.time.DateTimeZone)var11);
    org.joda.time.LocalTime var15 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateTime var16 = var4.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var18 = var16.toString("2057-04-25T14:50:58.767");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test500"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    java.lang.Object var2 = var0.clone();
    org.joda.time.PeriodType var3 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod(var3);
    var4.addDays(1);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    var4.add((org.joda.time.ReadableDuration)var10);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var13);
    var14.clear();
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadablePeriod)var17);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var30);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var33 = var32.year();
    boolean var34 = var30.isBefore((org.joda.time.ReadableInstant)var32);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    boolean var44 = var41.isShorterThan((org.joda.time.ReadableDuration)var43);
    org.joda.time.Duration var45 = var36.plus((org.joda.time.ReadableDuration)var41);
    var32.add((org.joda.time.ReadableDuration)var41);
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = var48.toLocalDate();
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var51 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var50);
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var53 = var52.year();
    boolean var54 = var50.isBefore((org.joda.time.ReadableInstant)var52);
    org.joda.time.Interval var55 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var52);
    boolean var57 = var55.isAfter(10L);
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    var58.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var61 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var58.setChronology((org.joda.time.Chronology)var61);
    org.joda.time.Interval var63 = var55.withChronology((org.joda.time.Chronology)var61);
    var14.setPeriod((org.joda.time.ReadableInterval)var55);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    var67.setWeekOfWeekyear(1);
    int var70 = var67.getRoundingMode();
    var67.addMillis(100);
    var67.setSecondOfMinute(10);
    org.joda.time.PeriodType var75 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableDuration)var66, (org.joda.time.ReadableInstant)var67, var75);
    org.joda.time.Days var77 = var76.toStandardDays();
    org.joda.time.Hours var78 = var77.toStandardHours();
    org.joda.time.Interval var79 = var55.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var77);
    org.joda.time.Duration var80 = var79.toDuration();
    var0.setDurationAfterStart((org.joda.time.ReadableDuration)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

}
